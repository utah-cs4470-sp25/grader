
#include <math.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include "rt/runtime.h"

typedef struct { } void_t;

typedef struct {
  int64_t d0;
  int64_t *data;
} _a1_int64_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  _a1_int64_t *data;
} _a3__a1_int64_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  _a3__a1_int64_t *data;
} _a3__a3__a1_int64_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t *data;
} _a2_int64_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  _a1_int64_t *data;
} _a2__a1_int64_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  int64_t *data;
} _a3_int64_t;

typedef struct {
  int64_t d0;
  _a1_int64_t *data;
} _a1__a1_int64_t;

typedef struct {
  int64_t d0;
  bool *data;
} _a1_bool;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  bool *data;
} _a3_bool;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  double *data;
} _a3_double;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  rgba *data;
} _a3_rgba;

typedef struct {
  int64_t d0;
  _a3_int64_t *data;
} _a1__a3_int64_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  double *data;
} _a2_double;

typedef struct {
  int64_t d0;
  _a2_int64_t *data;
} _a1__a2_int64_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  _a3_bool *data;
} _a2__a3_bool;

typedef struct {
  int64_t d0;
  _a1_bool *data;
} _a1__a1_bool;

typedef struct {
  int64_t d0;
  double *data;
} _a1_double;

typedef struct {
    double a;
    void_t b;
} e;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  _a2_int64_t *data;
} _a3__a2_int64_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  bool *data;
} _a2_bool;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  _a2_bool *data;
} _a3__a2_bool;

typedef struct {
  int64_t d0;
  int64_t d1;
  _a3_int64_t *data;
} _a2__a3_int64_t;

typedef struct {
  int64_t d0;
  _a2_double *data;
} _a1__a2_double;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  _a2_rgba *data;
} _a3__a2_rgba;

typedef struct {
  int64_t d0;
  _a2_rgba *data;
} _a1__a2_rgba;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  _a3_double *data;
} _a3__a3_double;

typedef struct {
  int64_t d0;
  _a3__a3_double *data;
} _a1__a3__a3_double;

typedef struct {
  int64_t d0;
  int64_t d1;
  _a1__a2_int64_t *data;
} _a2__a1__a2_int64_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  e *data;
} _a3_e;

typedef struct {
  int64_t d0;
  _a1_double *data;
} _a1__a1_double;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  void_t *data;
} _a3_void_t;

typedef struct {
  int64_t d0;
  _a3__a2_int64_t *data;
} _a1__a3__a2_int64_t;

typedef struct {
  int64_t d0;
  _a1__a3__a2_int64_t *data;
} _a1__a1__a3__a2_int64_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  e *data;
} _a2_e;

double a(double b) {
    _a3__a3__a1_int64_t _0;
    // Computing bound for c
    bool _1 = true;
    bool _2 = !_1;
    int64_t _3;
    if (!_2)
    goto _jump1;
    int64_t _4 = 845;
    _3 = _4;
    goto _jump2;
    _jump1:;
    int64_t _5 = 508;
    _a1_int64_t _6;
    // Computing bound for c
    int64_t _7 = 577;
    _6.d0 = _7;
    if (_7 > 0) 
    goto _jump3;
    fail_assertion("non-positive loop bound");
    _jump3:;
    // Computing total size of heap memory to allocate
    int64_t _8 = 1;
    _8 *= _7;
    _8 *= sizeof(int64_t);
    _6.data = jpl_alloc(_8);
    int64_t _9 = 0; // c
    _jump4:; // Begin body of loop
    int64_t _10 = 0;
    _10 *= _6.d0;
    _10 += _9;
    _6.data[_10] = _9;
    _9++;
    if (_9 < _7)
    goto _jump4;
    // End body of loop
    int64_t _11 = 344;
    int64_t _12 = -_11;
    if (_12 >= 0)
    goto _jump5;
    fail_assertion("negative array index");
    _jump5:;
    if (_12 < _6.d0)
    goto _jump6;
    fail_assertion("index too large");
    _jump6:;
    int64_t _13 = 0;
    _13 *= _6.d0;
    _13 += _12;
    int64_t _14 = _6.data[_13];
    int64_t _15 = _5 / _14;
    _3 = _15;
    _jump2:;
    _0.d0 = _3;
    if (_3 > 0) 
    goto _jump7;
    fail_assertion("non-positive loop bound");
    _jump7:;
    // Computing bound for d
    int64_t _16;
    // Computing bound for c
    int64_t _17 = 273;
    int64_t _18 = -_17;
    if (_18 > 0) 
    goto _jump8;
    fail_assertion("non-positive loop bound");
    _jump8:;
    // Computing bound for d
    int64_t _19 = 64;
    int64_t _20 = 901;
    int64_t _21 = _19 * _20;
    int64_t _22 = 360;
    int64_t _23 = _21 % _22;
    if (_23 > 0) 
    goto _jump9;
    fail_assertion("non-positive loop bound");
    _jump9:;
    // Computing bound for e
    int64_t _24 = 190;
    int64_t _25 = -_24;
    int64_t _26 = 350;
    int64_t _27 = _25 * _26;
    if (_27 > 0) 
    goto _jump10;
    fail_assertion("non-positive loop bound");
    _jump10:;
    _16 = 0;
    int64_t _28 = 0; // e
    int64_t _29 = 0; // d
    int64_t _30 = 0; // c
    _jump11:; // Begin body of loop
    int64_t _31;
    // Computing bound for f
    int64_t _32;
    // Computing bound for f
    if (_29 > 0) 
    goto _jump12;
    fail_assertion("non-positive loop bound");
    _jump12:;
    _32 = 0;
    int64_t _33 = 0; // f
    _jump13:; // Begin body of loop
    _32 += _30;
    _33++;
    if (_33 < _29)
    goto _jump13;
    // End body of loop
    if (_32 > 0) 
    goto _jump14;
    fail_assertion("non-positive loop bound");
    _jump14:;
    // Computing bound for g
    if (_29 > 0) 
    goto _jump15;
    fail_assertion("non-positive loop bound");
    _jump15:;
    // Computing bound for h
    int64_t _34 = 544;
    if (_34 > 0) 
    goto _jump16;
    fail_assertion("non-positive loop bound");
    _jump16:;
    _31 = 0;
    int64_t _35 = 0; // h
    int64_t _36 = 0; // g
    int64_t _37 = 0; // f
    _jump17:; // Begin body of loop
    int64_t _38 = 38;
    int64_t _39 = _28 / _38;
    _31 += _39;
    _35++;
    if (_35 < _34)
    goto _jump17;
    _35 = 0;
    _36++;
    if (_36 < _29)
    goto _jump17;
    _36 = 0;
    _37++;
    if (_37 < _32)
    goto _jump17;
    // End body of loop
    _16 += _31;
    _28++;
    if (_28 < _27)
    goto _jump11;
    _28 = 0;
    _29++;
    if (_29 < _23)
    goto _jump11;
    _29 = 0;
    _30++;
    if (_30 < _18)
    goto _jump11;
    // End body of loop
    int64_t _40 = -_16;
    _0.d1 = _40;
    if (_40 > 0) 
    goto _jump18;
    fail_assertion("non-positive loop bound");
    _jump18:;
    // Computing bound for e
    int64_t _41;
    // Computing bound for c
    int64_t _42 = 463;
    int64_t _43 = 577;
    int64_t _44 = _42 - _43;
    int64_t _45;
    // Computing bound for c
    int64_t _46 = 320;
    if (_46 > 0) 
    goto _jump19;
    fail_assertion("non-positive loop bound");
    _jump19:;
    _45 = 0;
    int64_t _47 = 0; // c
    _jump20:; // Begin body of loop
    int64_t _48 = _47 - _47;
    _45 += _48;
    _47++;
    if (_47 < _46)
    goto _jump20;
    // End body of loop
    int64_t _49 = _44 / _45;
    if (_49 > 0) 
    goto _jump21;
    fail_assertion("non-positive loop bound");
    _jump21:;
    _41 = 0;
    int64_t _50 = 0; // c
    _jump22:; // Begin body of loop
    int64_t _51 = 144;
    int64_t _52 = -_51;
    int64_t _53 = -_52;
    _41 += _53;
    _50++;
    if (_50 < _49)
    goto _jump22;
    // End body of loop
    _0.d2 = _41;
    if (_41 > 0) 
    goto _jump23;
    fail_assertion("non-positive loop bound");
    _jump23:;
    // Computing total size of heap memory to allocate
    int64_t _54 = 1;
    _54 *= _3;
    _54 *= _40;
    _54 *= _41;
    _54 *= sizeof(_a3__a1_int64_t);
    _0.data = jpl_alloc(_54);
    int64_t _55 = 0; // e
    int64_t _56 = 0; // d
    int64_t _57 = 0; // c
    _jump24:; // Begin body of loop
    _a3__a1_int64_t _58;
    // Computing bound for f
    int64_t _59 = _56 % _55;
    _58.d0 = _59;
    if (_59 > 0) 
    goto _jump25;
    fail_assertion("non-positive loop bound");
    _jump25:;
    // Computing bound for g
    _a2_int64_t _60;
    // Computing bound for f
    int64_t _61 = 323;
    int64_t _62 = _56 % _61;
    _60.d0 = _62;
    if (_62 > 0) 
    goto _jump26;
    fail_assertion("non-positive loop bound");
    _jump26:;
    // Computing bound for g
    int64_t _63 = 378;
    _60.d1 = _63;
    if (_63 > 0) 
    goto _jump27;
    fail_assertion("non-positive loop bound");
    _jump27:;
    // Computing total size of heap memory to allocate
    int64_t _64 = 1;
    _64 *= _62;
    _64 *= _63;
    _64 *= sizeof(int64_t);
    _60.data = jpl_alloc(_64);
    int64_t _65 = 0; // g
    int64_t _66 = 0; // f
    _jump28:; // Begin body of loop
    int64_t _67 = 678;
    int64_t _68 = -_67;
    int64_t _69 = 0;
    _69 *= _60.d0;
    _69 += _66;
    _69 *= _60.d1;
    _69 += _65;
    _60.data[_69] = _68;
    _65++;
    if (_65 < _63)
    goto _jump28;
    _65 = 0;
    _66++;
    if (_66 < _62)
    goto _jump28;
    // End body of loop
    int64_t _70;
    // Computing bound for f
    int64_t _71 = 611;
    int64_t _72 = _71 - _57;
    if (_72 > 0) 
    goto _jump29;
    fail_assertion("non-positive loop bound");
    _jump29:;
    _70 = 0;
    int64_t _73 = 0; // f
    _jump30:; // Begin body of loop
    _70 += _55;
    _73++;
    if (_73 < _72)
    goto _jump30;
    // End body of loop
    if (_55 >= 0)
    goto _jump31;
    fail_assertion("negative array index");
    _jump31:;
    if (_55 < _60.d0)
    goto _jump32;
    fail_assertion("index too large");
    _jump32:;
    if (_70 >= 0)
    goto _jump33;
    fail_assertion("negative array index");
    _jump33:;
    if (_70 < _60.d1)
    goto _jump34;
    fail_assertion("index too large");
    _jump34:;
    int64_t _74 = 0;
    _74 *= _60.d0;
    _74 += _55;
    _74 *= _60.d1;
    _74 += _70;
    int64_t _75 = _60.data[_74];
    _58.d1 = _75;
    if (_75 > 0) 
    goto _jump35;
    fail_assertion("non-positive loop bound");
    _jump35:;
    // Computing bound for h
    _58.d2 = _56;
    if (_56 > 0) 
    goto _jump36;
    fail_assertion("non-positive loop bound");
    _jump36:;
    // Computing total size of heap memory to allocate
    int64_t _76 = 1;
    _76 *= _59;
    _76 *= _75;
    _76 *= _56;
    _76 *= sizeof(_a1_int64_t);
    _58.data = jpl_alloc(_76);
    int64_t _77 = 0; // h
    int64_t _78 = 0; // g
    int64_t _79 = 0; // f
    _jump37:; // Begin body of loop
    _a2__a1_int64_t _80;
    // Computing bound for i
    _80.d0 = _55;
    if (_55 > 0) 
    goto _jump38;
    fail_assertion("non-positive loop bound");
    _jump38:;
    // Computing bound for j
    _80.d1 = _78;
    if (_78 > 0) 
    goto _jump39;
    fail_assertion("non-positive loop bound");
    _jump39:;
    // Computing total size of heap memory to allocate
    int64_t _81 = 1;
    _81 *= _55;
    _81 *= _78;
    _81 *= sizeof(_a1_int64_t);
    _80.data = jpl_alloc(_81);
    int64_t _82 = 0; // j
    int64_t _83 = 0; // i
    _jump40:; // Begin body of loop
    _a1_int64_t _84;
    // Computing bound for k
    _84.d0 = _55;
    if (_55 > 0) 
    goto _jump41;
    fail_assertion("non-positive loop bound");
    _jump41:;
    // Computing total size of heap memory to allocate
    int64_t _85 = 1;
    _85 *= _55;
    _85 *= sizeof(int64_t);
    _84.data = jpl_alloc(_85);
    int64_t _86 = 0; // k
    _jump42:; // Begin body of loop
    int64_t _87 = 0;
    _87 *= _84.d0;
    _87 += _86;
    _84.data[_87] = _78;
    _86++;
    if (_86 < _55)
    goto _jump42;
    // End body of loop
    int64_t _88 = 0;
    _88 *= _80.d0;
    _88 += _83;
    _88 *= _80.d1;
    _88 += _82;
    _80.data[_88] = _84;
    _82++;
    if (_82 < _78)
    goto _jump40;
    _82 = 0;
    _83++;
    if (_83 < _55)
    goto _jump40;
    // End body of loop
    if (_79 >= 0)
    goto _jump43;
    fail_assertion("negative array index");
    _jump43:;
    if (_79 < _80.d0)
    goto _jump44;
    fail_assertion("index too large");
    _jump44:;
    if (_55 >= 0)
    goto _jump45;
    fail_assertion("negative array index");
    _jump45:;
    if (_55 < _80.d1)
    goto _jump46;
    fail_assertion("index too large");
    _jump46:;
    int64_t _89 = 0;
    _89 *= _80.d0;
    _89 += _79;
    _89 *= _80.d1;
    _89 += _55;
    _a1_int64_t _90 = _80.data[_89];
    int64_t _91 = 0;
    _91 *= _58.d0;
    _91 += _79;
    _91 *= _58.d1;
    _91 += _78;
    _91 *= _58.d2;
    _91 += _77;
    _58.data[_91] = _90;
    _77++;
    if (_77 < _56)
    goto _jump37;
    _77 = 0;
    _78++;
    if (_78 < _75)
    goto _jump37;
    _78 = 0;
    _79++;
    if (_79 < _59)
    goto _jump37;
    // End body of loop
    int64_t _92 = 0;
    _92 *= _0.d0;
    _92 += _57;
    _92 *= _0.d1;
    _92 += _56;
    _92 *= _0.d2;
    _92 += _55;
    _0.data[_92] = _58;
    _55++;
    if (_55 < _41)
    goto _jump24;
    _55 = 0;
    _56++;
    if (_56 < _40)
    goto _jump24;
    _56 = 0;
    _57++;
    if (_57 < _3)
    goto _jump24;
    // End body of loop
    _a3_int64_t _93;
    // Computing bound for c
    int64_t _94 = 839;
    int64_t _95 = -_94;
    int64_t _96 = -_95;
    int64_t _97 = 925;
    int64_t _98 = 179;
    int64_t _99 = _97 - _98;
    int64_t _100 = _96 % _99;
    _93.d0 = _100;
    if (_100 > 0) 
    goto _jump47;
    fail_assertion("non-positive loop bound");
    _jump47:;
    // Computing bound for d
    int64_t _101 = 956;
    _93.d1 = _101;
    if (_101 > 0) 
    goto _jump48;
    fail_assertion("non-positive loop bound");
    _jump48:;
    // Computing bound for e
    int64_t _102 = 948;
    int64_t _103 = 901;
    int64_t _104 = _102 + _103;
    int64_t _105 = 674;
    int64_t _106 = _104 * _105;
    _93.d2 = _106;
    if (_106 > 0) 
    goto _jump49;
    fail_assertion("non-positive loop bound");
    _jump49:;
    // Computing total size of heap memory to allocate
    int64_t _107 = 1;
    _107 *= _100;
    _107 *= _101;
    _107 *= _106;
    _107 *= sizeof(int64_t);
    _93.data = jpl_alloc(_107);
    int64_t _108 = 0; // e
    int64_t _109 = 0; // d
    int64_t _110 = 0; // c
    _jump50:; // Begin body of loop
    int64_t _111 = 0;
    _111 *= _93.d0;
    _111 += _110;
    _111 *= _93.d1;
    _111 += _109;
    _111 *= _93.d2;
    _111 += _108;
    _93.data[_111] = _110;
    _108++;
    if (_108 < _106)
    goto _jump50;
    _108 = 0;
    _109++;
    if (_109 < _101)
    goto _jump50;
    _109 = 0;
    _110++;
    if (_110 < _100)
    goto _jump50;
    // End body of loop
    int64_t _112 = 714;
    int64_t _113;
    // Computing bound for c
    int64_t _114 = 823;
    int64_t _115;
    // Computing bound for c
    int64_t _116 = 368;
    if (_116 > 0) 
    goto _jump51;
    fail_assertion("non-positive loop bound");
    _jump51:;
    _115 = 0;
    int64_t _117 = 0; // c
    _jump52:; // Begin body of loop
    int64_t _118 = 522;
    _115 += _118;
    _117++;
    if (_117 < _116)
    goto _jump52;
    // End body of loop
    int64_t _119 = _114 - _115;
    if (_119 > 0) 
    goto _jump53;
    fail_assertion("non-positive loop bound");
    _jump53:;
    // Computing bound for d
    int64_t _120 = 851;
    int64_t _121 = -_120;
    int64_t _122 = 274;
    int64_t _123 = _121 % _122;
    if (_123 > 0) 
    goto _jump54;
    fail_assertion("non-positive loop bound");
    _jump54:;
    // Computing bound for e
    int64_t _124 = 449;
    int64_t _125 = -_124;
    if (_125 > 0) 
    goto _jump55;
    fail_assertion("non-positive loop bound");
    _jump55:;
    _113 = 0;
    int64_t _126 = 0; // e
    int64_t _127 = 0; // d
    int64_t _128 = 0; // c
    _jump56:; // Begin body of loop
    bool _129 = false;
    int64_t _130;
    if (!_129)
    goto _jump57;
    int64_t _131 = -_126;
    _130 = _131;
    goto _jump58;
    _jump57:;
    _130 = _126;
    _jump58:;
    _113 += _130;
    _126++;
    if (_126 < _125)
    goto _jump56;
    _126 = 0;
    _127++;
    if (_127 < _123)
    goto _jump56;
    _127 = 0;
    _128++;
    if (_128 < _119)
    goto _jump56;
    // End body of loop
    int64_t _132 = -_113;
    bool _135 = true;
    bool _134 = _135;
    if (0 == _135)
    goto _jump59;
    bool _136 = true;
    _134 = _136;
    _jump59:;
    bool _133 = _134;
    if (0 != _134)
    goto _jump60;
    bool _137 = true;
    bool _138 = false;
    bool _139 = _137 != _138;
    _133 = _139;
    _jump60:;
    int64_t _140;
    if (!_133)
    goto _jump61;
    int64_t _141 = 714;
    int64_t _142 = 444;
    int64_t _143 = -_142;
    int64_t _144 = _141 - _143;
    _140 = _144;
    goto _jump62;
    _jump61:;
    int64_t _145 = 959;
    int64_t _146 = 914;
    bool _147 = _145 != _146;
    int64_t _148;
    if (!_147)
    goto _jump63;
    int64_t _149 = 223;
    _148 = _149;
    goto _jump64;
    _jump63:;
    int64_t _150 = 639;
    int64_t _151 = 461;
    int64_t _152 = _150 * _151;
    _148 = _152;
    _jump64:;
    _140 = _148;
    _jump62:;
    int64_t _153 = -_140;
    if (_112 >= 0)
    goto _jump65;
    fail_assertion("negative array index");
    _jump65:;
    if (_112 < _93.d0)
    goto _jump66;
    fail_assertion("index too large");
    _jump66:;
    if (_132 >= 0)
    goto _jump67;
    fail_assertion("negative array index");
    _jump67:;
    if (_132 < _93.d1)
    goto _jump68;
    fail_assertion("index too large");
    _jump68:;
    if (_153 >= 0)
    goto _jump69;
    fail_assertion("negative array index");
    _jump69:;
    if (_153 < _93.d2)
    goto _jump70;
    fail_assertion("index too large");
    _jump70:;
    int64_t _154 = 0;
    _154 *= _93.d0;
    _154 += _112;
    _154 *= _93.d1;
    _154 += _132;
    _154 *= _93.d2;
    _154 += _153;
    int64_t _155 = _93.data[_154];
    int64_t _156 = 247;
    int64_t _157 = -_156;
    int64_t _158 = 964;
    int64_t _159;
    // Computing bound for c
    int64_t _160 = 657;
    if (_160 > 0) 
    goto _jump71;
    fail_assertion("non-positive loop bound");
    _jump71:;
    _159 = 0;
    int64_t _161 = 0; // c
    _jump72:; // Begin body of loop
    int64_t _162 = 135;
    _159 += _162;
    _161++;
    if (_161 < _160)
    goto _jump72;
    // End body of loop
    int64_t _163 = _158 / _159;
    int64_t _165 = 266;
    int64_t _166 = 491;
    bool _167 = _165 != _166;
    bool _164 = _167;
    if (0 != _167)
    goto _jump73;
    bool _168 = false;
    _164 = _168;
    _jump73:;
    int64_t _169;
    if (!_164)
    goto _jump74;
    int64_t _170 = 276;
    int64_t _171 = -_170;
    _169 = _171;
    goto _jump75;
    _jump74:;
    int64_t _172;
    // Computing bound for c
    int64_t _173 = 473;
    if (_173 > 0) 
    goto _jump76;
    fail_assertion("non-positive loop bound");
    _jump76:;
    _172 = 0;
    int64_t _174 = 0; // c
    _jump77:; // Begin body of loop
    _172 += _174;
    _174++;
    if (_174 < _173)
    goto _jump77;
    // End body of loop
    int64_t _175 = -_172;
    _169 = _175;
    _jump75:;
    int64_t _176 = _163 % _169;
    int64_t _177 = _157 * _176;
    int64_t _178;
    // Computing bound for c
    int64_t _179 = 130;
    if (_179 > 0) 
    goto _jump78;
    fail_assertion("non-positive loop bound");
    _jump78:;
    _178 = 0;
    int64_t _180 = 0; // c
    _jump79:; // Begin body of loop
    int64_t _181 = 316;
    int64_t _182 = -_181;
    _178 += _182;
    _180++;
    if (_180 < _179)
    goto _jump79;
    // End body of loop
    int64_t _183 = 115;
    bool _184 = _178 >= _183;
    int64_t _185;
    if (!_184)
    goto _jump80;
    int64_t _186 = 856;
    _185 = _186;
    goto _jump81;
    _jump80:;
    int64_t _187;
    // Computing bound for c
    int64_t _188 = 52;
    int64_t _189 = -_188;
    int64_t _190 = 499;
    int64_t _191 = _189 % _190;
    int64_t _192 = 49;
    int64_t _193 = -_192;
    int64_t _194 = -_193;
    int64_t _195 = _191 / _194;
    if (_195 > 0) 
    goto _jump82;
    fail_assertion("non-positive loop bound");
    _jump82:;
    _187 = 0;
    int64_t _196 = 0; // c
    _jump83:; // Begin body of loop
    int64_t _197 = -_196;
    int64_t _198;
    // Computing bound for d
    int64_t _199 = 149;
    if (_199 > 0) 
    goto _jump84;
    fail_assertion("non-positive loop bound");
    _jump84:;
    // Computing bound for e
    int64_t _200 = 34;
    if (_200 > 0) 
    goto _jump85;
    fail_assertion("non-positive loop bound");
    _jump85:;
    // Computing bound for f
    int64_t _201 = 850;
    if (_201 > 0) 
    goto _jump86;
    fail_assertion("non-positive loop bound");
    _jump86:;
    _198 = 0;
    int64_t _202 = 0; // f
    int64_t _203 = 0; // e
    int64_t _204 = 0; // d
    _jump87:; // Begin body of loop
    _198 += _204;
    _202++;
    if (_202 < _201)
    goto _jump87;
    _202 = 0;
    _203++;
    if (_203 < _200)
    goto _jump87;
    _203 = 0;
    _204++;
    if (_204 < _199)
    goto _jump87;
    // End body of loop
    int64_t _205 = _197 * _198;
    _187 += _205;
    _196++;
    if (_196 < _195)
    goto _jump83;
    // End body of loop
    _185 = _187;
    _jump81:;
    if (_155 >= 0)
    goto _jump88;
    fail_assertion("negative array index");
    _jump88:;
    if (_155 < _0.d0)
    goto _jump89;
    fail_assertion("index too large");
    _jump89:;
    if (_177 >= 0)
    goto _jump90;
    fail_assertion("negative array index");
    _jump90:;
    if (_177 < _0.d1)
    goto _jump91;
    fail_assertion("index too large");
    _jump91:;
    if (_185 >= 0)
    goto _jump92;
    fail_assertion("negative array index");
    _jump92:;
    if (_185 < _0.d2)
    goto _jump93;
    fail_assertion("index too large");
    _jump93:;
    int64_t _206 = 0;
    _206 *= _0.d0;
    _206 += _155;
    _206 *= _0.d1;
    _206 += _177;
    _206 *= _0.d2;
    _206 += _185;
    _a3__a1_int64_t _207 = _0.data[_206];
    _a1_int64_t _208;
    // Computing bound for c
    bool _209 = true;
    int64_t _210;
    if (!_209)
    goto _jump94;
    int64_t _211;
    // Computing bound for c
    int64_t _212 = 277;
    int64_t _213 = -_212;
    if (_213 > 0) 
    goto _jump95;
    fail_assertion("non-positive loop bound");
    _jump95:;
    // Computing bound for d
    int64_t _214 = 126;
    int64_t _215 = -_214;
    int64_t _216 = 928;
    int64_t _217 = _215 + _216;
    if (_217 > 0) 
    goto _jump96;
    fail_assertion("non-positive loop bound");
    _jump96:;
    _211 = 0;
    int64_t _218 = 0; // d
    int64_t _219 = 0; // c
    _jump97:; // Begin body of loop
    _211 += _219;
    _218++;
    if (_218 < _217)
    goto _jump97;
    _218 = 0;
    _219++;
    if (_219 < _213)
    goto _jump97;
    // End body of loop
    _210 = _211;
    goto _jump98;
    _jump94:;
    int64_t _220 = 862;
    _210 = _220;
    _jump98:;
    _208.d0 = _210;
    if (_210 > 0) 
    goto _jump99;
    fail_assertion("non-positive loop bound");
    _jump99:;
    // Computing total size of heap memory to allocate
    int64_t _221 = 1;
    _221 *= _210;
    _221 *= sizeof(int64_t);
    _208.data = jpl_alloc(_221);
    int64_t _222 = 0; // c
    _jump100:; // Begin body of loop
    int64_t _223 = 0;
    _223 *= _208.d0;
    _223 += _222;
    _208.data[_223] = _222;
    _222++;
    if (_222 < _210)
    goto _jump100;
    // End body of loop
    _a1_int64_t _224;
    // Computing bound for c
    int64_t _225;
    // Computing bound for c
    int64_t _226 = 527;
    int64_t _227 = 554;
    int64_t _228 = _226 % _227;
    if (_228 > 0) 
    goto _jump101;
    fail_assertion("non-positive loop bound");
    _jump101:;
    // Computing bound for d
    int64_t _229;
    // Computing bound for c
    int64_t _230 = 576;
    int64_t _231 = -_230;
    if (_231 > 0) 
    goto _jump102;
    fail_assertion("non-positive loop bound");
    _jump102:;
    // Computing bound for d
    int64_t _232 = 361;
    int64_t _233 = -_232;
    if (_233 > 0) 
    goto _jump103;
    fail_assertion("non-positive loop bound");
    _jump103:;
    _229 = 0;
    int64_t _234 = 0; // d
    int64_t _235 = 0; // c
    _jump104:; // Begin body of loop
    int64_t _236 = 126;
    int64_t _237 = -_236;
    _229 += _237;
    _234++;
    if (_234 < _233)
    goto _jump104;
    _234 = 0;
    _235++;
    if (_235 < _231)
    goto _jump104;
    // End body of loop
    if (_229 > 0) 
    goto _jump105;
    fail_assertion("non-positive loop bound");
    _jump105:;
    // Computing bound for e
    bool _238 = false;
    bool _239 = !_238;
    int64_t _240;
    if (!_239)
    goto _jump106;
    int64_t _241 = 288;
    _240 = _241;
    goto _jump107;
    _jump106:;
    int64_t _242 = 383;
    _240 = _242;
    _jump107:;
    if (_240 > 0) 
    goto _jump108;
    fail_assertion("non-positive loop bound");
    _jump108:;
    _225 = 0;
    int64_t _243 = 0; // e
    int64_t _244 = 0; // d
    int64_t _245 = 0; // c
    _jump109:; // Begin body of loop
    int64_t _246 = 952;
    int64_t _247 = -_246;
    int64_t _248 = _245 * _245;
    int64_t _249 = _247 / _248;
    _225 += _249;
    _243++;
    if (_243 < _240)
    goto _jump109;
    _243 = 0;
    _244++;
    if (_244 < _229)
    goto _jump109;
    _244 = 0;
    _245++;
    if (_245 < _228)
    goto _jump109;
    // End body of loop
    _224.d0 = _225;
    if (_225 > 0) 
    goto _jump110;
    fail_assertion("non-positive loop bound");
    _jump110:;
    // Computing total size of heap memory to allocate
    int64_t _250 = 1;
    _250 *= _225;
    _250 *= sizeof(int64_t);
    _224.data = jpl_alloc(_250);
    int64_t _251 = 0; // c
    _jump111:; // Begin body of loop
    int64_t _252 = 108;
    bool _253 = true;
    int64_t _254;
    if (!_253)
    goto _jump112;
    int64_t _255 = 8;
    _254 = _255;
    goto _jump113;
    _jump112:;
    int64_t _256 = 710;
    _254 = _256;
    _jump113:;
    int64_t _257 = _252 * _254;
    int64_t _258 = 0;
    _258 *= _224.d0;
    _258 += _251;
    _224.data[_258] = _257;
    _251++;
    if (_251 < _225)
    goto _jump111;
    // End body of loop
    int64_t _259 = 422;
    int64_t _260 = 842;
    int64_t _261 = _259 * _260;
    int64_t _262 = -_261;
    if (_262 >= 0)
    goto _jump114;
    fail_assertion("negative array index");
    _jump114:;
    if (_262 < _224.d0)
    goto _jump115;
    fail_assertion("index too large");
    _jump115:;
    int64_t _263 = 0;
    _263 *= _224.d0;
    _263 += _262;
    int64_t _264 = _224.data[_263];
    if (_264 >= 0)
    goto _jump116;
    fail_assertion("negative array index");
    _jump116:;
    if (_264 < _208.d0)
    goto _jump117;
    fail_assertion("index too large");
    _jump117:;
    int64_t _265 = 0;
    _265 *= _208.d0;
    _265 += _264;
    int64_t _266 = _208.data[_265];
    int64_t _267;
    // Computing bound for c
    int64_t _268 = 352;
    if (_268 > 0) 
    goto _jump118;
    fail_assertion("non-positive loop bound");
    _jump118:;
    // Computing bound for d
    _a2_int64_t _269;
    // Computing bound for c
    int64_t _270 = 880;
    _269.d0 = _270;
    if (_270 > 0) 
    goto _jump119;
    fail_assertion("non-positive loop bound");
    _jump119:;
    // Computing bound for d
    _a2_int64_t _271;
    // Computing bound for c
    int64_t _272 = 951;
    _271.d0 = _272;
    if (_272 > 0) 
    goto _jump120;
    fail_assertion("non-positive loop bound");
    _jump120:;
    // Computing bound for d
    int64_t _273 = 92;
    _271.d1 = _273;
    if (_273 > 0) 
    goto _jump121;
    fail_assertion("non-positive loop bound");
    _jump121:;
    // Computing total size of heap memory to allocate
    int64_t _274 = 1;
    _274 *= _272;
    _274 *= _273;
    _274 *= sizeof(int64_t);
    _271.data = jpl_alloc(_274);
    int64_t _275 = 0; // d
    int64_t _276 = 0; // c
    _jump122:; // Begin body of loop
    int64_t _277 = 0;
    _277 *= _271.d0;
    _277 += _276;
    _277 *= _271.d1;
    _277 += _275;
    _271.data[_277] = _276;
    _275++;
    if (_275 < _273)
    goto _jump122;
    _275 = 0;
    _276++;
    if (_276 < _272)
    goto _jump122;
    // End body of loop
    int64_t _278 = 238;
    int64_t _279 = -_278;
    int64_t _280 = 551;
    if (_279 >= 0)
    goto _jump123;
    fail_assertion("negative array index");
    _jump123:;
    if (_279 < _271.d0)
    goto _jump124;
    fail_assertion("index too large");
    _jump124:;
    if (_280 >= 0)
    goto _jump125;
    fail_assertion("negative array index");
    _jump125:;
    if (_280 < _271.d1)
    goto _jump126;
    fail_assertion("index too large");
    _jump126:;
    int64_t _281 = 0;
    _281 *= _271.d0;
    _281 += _279;
    _281 *= _271.d1;
    _281 += _280;
    int64_t _282 = _271.data[_281];
    _269.d1 = _282;
    if (_282 > 0) 
    goto _jump127;
    fail_assertion("non-positive loop bound");
    _jump127:;
    // Computing total size of heap memory to allocate
    int64_t _283 = 1;
    _283 *= _270;
    _283 *= _282;
    _283 *= sizeof(int64_t);
    _269.data = jpl_alloc(_283);
    int64_t _284 = 0; // d
    int64_t _285 = 0; // c
    _jump128:; // Begin body of loop
    int64_t _286;
    // Computing bound for e
    if (_285 > 0) 
    goto _jump129;
    fail_assertion("non-positive loop bound");
    _jump129:;
    // Computing bound for f
    int64_t _287 = -_285;
    if (_287 > 0) 
    goto _jump130;
    fail_assertion("non-positive loop bound");
    _jump130:;
    _286 = 0;
    int64_t _288 = 0; // f
    int64_t _289 = 0; // e
    _jump131:; // Begin body of loop
    _286 += _289;
    _288++;
    if (_288 < _287)
    goto _jump131;
    _288 = 0;
    _289++;
    if (_289 < _285)
    goto _jump131;
    // End body of loop
    int64_t _290 = 0;
    _290 *= _269.d0;
    _290 += _285;
    _290 *= _269.d1;
    _290 += _284;
    _269.data[_290] = _286;
    _284++;
    if (_284 < _282)
    goto _jump128;
    _284 = 0;
    _285++;
    if (_285 < _270)
    goto _jump128;
    // End body of loop
    int64_t _291;
    // Computing bound for c
    bool _292 = false;
    int64_t _293;
    if (!_292)
    goto _jump132;
    int64_t _294 = 347;
    _293 = _294;
    goto _jump133;
    _jump132:;
    int64_t _295 = 330;
    _293 = _295;
    _jump133:;
    if (_293 > 0) 
    goto _jump134;
    fail_assertion("non-positive loop bound");
    _jump134:;
    _291 = 0;
    int64_t _296 = 0; // c
    _jump135:; // Begin body of loop
    int64_t _297;
    // Computing bound for d
    if (_296 > 0) 
    goto _jump136;
    fail_assertion("non-positive loop bound");
    _jump136:;
    _297 = 0;
    int64_t _298 = 0; // d
    _jump137:; // Begin body of loop
    _297 += _296;
    _298++;
    if (_298 < _296)
    goto _jump137;
    // End body of loop
    _291 += _297;
    _296++;
    if (_296 < _293)
    goto _jump135;
    // End body of loop
    int64_t _299 = 724;
    if (_291 >= 0)
    goto _jump138;
    fail_assertion("negative array index");
    _jump138:;
    if (_291 < _269.d0)
    goto _jump139;
    fail_assertion("index too large");
    _jump139:;
    if (_299 >= 0)
    goto _jump140;
    fail_assertion("negative array index");
    _jump140:;
    if (_299 < _269.d1)
    goto _jump141;
    fail_assertion("index too large");
    _jump141:;
    int64_t _300 = 0;
    _300 *= _269.d0;
    _300 += _291;
    _300 *= _269.d1;
    _300 += _299;
    int64_t _301 = _269.data[_300];
    if (_301 > 0) 
    goto _jump142;
    fail_assertion("non-positive loop bound");
    _jump142:;
    // Computing bound for e
    bool _302 = false;
    int64_t _303;
    if (!_302)
    goto _jump143;
    int64_t _304 = 858;
    _303 = _304;
    goto _jump144;
    _jump143:;
    double _305 = 90.0;
    bool _306 = _305 > b;
    int64_t _307;
    if (!_306)
    goto _jump145;
    int64_t _308 = 738;
    _307 = _308;
    goto _jump146;
    _jump145:;
    int64_t _309 = 83;
    _307 = _309;
    _jump146:;
    _303 = _307;
    _jump144:;
    bool _310 = false;
    bool _311 = !_310;
    _a1_int64_t _312;
    if (!_311)
    goto _jump147;
    _a1_int64_t _313;
    // Computing bound for c
    int64_t _314 = 740;
    _313.d0 = _314;
    if (_314 > 0) 
    goto _jump148;
    fail_assertion("non-positive loop bound");
    _jump148:;
    // Computing total size of heap memory to allocate
    int64_t _315 = 1;
    _315 *= _314;
    _315 *= sizeof(int64_t);
    _313.data = jpl_alloc(_315);
    int64_t _316 = 0; // c
    _jump149:; // Begin body of loop
    int64_t _317 = 774;
    int64_t _318 = 0;
    _318 *= _313.d0;
    _318 += _316;
    _313.data[_318] = _317;
    _316++;
    if (_316 < _314)
    goto _jump149;
    // End body of loop
    _312 = _313;
    goto _jump150;
    _jump147:;
    int64_t _319 = 542;
    _a1_int64_t _320;
    _320.d0 = 1;
    _320.data = jpl_alloc(sizeof(int64_t) * 1);
    _320.data[0] = _319;
    _312 = _320;
    _jump150:;
    int64_t _321 = 399;
    int64_t _322 = 919;
    int64_t _323 = _321 * _322;
    int64_t _324 = 909;
    int64_t _325 = -_324;
    int64_t _326 = _323 / _325;
    if (_326 >= 0)
    goto _jump151;
    fail_assertion("negative array index");
    _jump151:;
    if (_326 < _312.d0)
    goto _jump152;
    fail_assertion("index too large");
    _jump152:;
    int64_t _327 = 0;
    _327 *= _312.d0;
    _327 += _326;
    int64_t _328 = _312.data[_327];
    int64_t _329 = _303 - _328;
    if (_329 > 0) 
    goto _jump153;
    fail_assertion("non-positive loop bound");
    _jump153:;
    _267 = 0;
    int64_t _330 = 0; // e
    int64_t _331 = 0; // d
    int64_t _332 = 0; // c
    _jump154:; // Begin body of loop
    bool _333 = true;
    bool _334 = true;
    bool _335 = _333 == _334;
    _a3_int64_t _336;
    if (!_335)
    goto _jump155;
    bool _337 = _331 != _331;
    _a3_int64_t _338;
    if (!_337)
    goto _jump156;
    _a3_int64_t _339;
    // Computing bound for f
    int64_t _340 = 324;
    _339.d0 = _340;
    if (_340 > 0) 
    goto _jump157;
    fail_assertion("non-positive loop bound");
    _jump157:;
    // Computing bound for g
    int64_t _341 = 985;
    _339.d1 = _341;
    if (_341 > 0) 
    goto _jump158;
    fail_assertion("non-positive loop bound");
    _jump158:;
    // Computing bound for h
    _339.d2 = _331;
    if (_331 > 0) 
    goto _jump159;
    fail_assertion("non-positive loop bound");
    _jump159:;
    // Computing total size of heap memory to allocate
    int64_t _342 = 1;
    _342 *= _340;
    _342 *= _341;
    _342 *= _331;
    _342 *= sizeof(int64_t);
    _339.data = jpl_alloc(_342);
    int64_t _343 = 0; // h
    int64_t _344 = 0; // g
    int64_t _345 = 0; // f
    _jump160:; // Begin body of loop
    int64_t _346 = 0;
    _346 *= _339.d0;
    _346 += _345;
    _346 *= _339.d1;
    _346 += _344;
    _346 *= _339.d2;
    _346 += _343;
    _339.data[_346] = _330;
    _343++;
    if (_343 < _331)
    goto _jump160;
    _343 = 0;
    _344++;
    if (_344 < _341)
    goto _jump160;
    _344 = 0;
    _345++;
    if (_345 < _340)
    goto _jump160;
    // End body of loop
    _338 = _339;
    goto _jump161;
    _jump156:;
    _a3_int64_t _347;
    // Computing bound for f
    _347.d0 = _330;
    if (_330 > 0) 
    goto _jump162;
    fail_assertion("non-positive loop bound");
    _jump162:;
    // Computing bound for g
    _347.d1 = _332;
    if (_332 > 0) 
    goto _jump163;
    fail_assertion("non-positive loop bound");
    _jump163:;
    // Computing bound for h
    _347.d2 = _331;
    if (_331 > 0) 
    goto _jump164;
    fail_assertion("non-positive loop bound");
    _jump164:;
    // Computing total size of heap memory to allocate
    int64_t _348 = 1;
    _348 *= _330;
    _348 *= _332;
    _348 *= _331;
    _348 *= sizeof(int64_t);
    _347.data = jpl_alloc(_348);
    int64_t _349 = 0; // h
    int64_t _350 = 0; // g
    int64_t _351 = 0; // f
    _jump165:; // Begin body of loop
    int64_t _352 = 0;
    _352 *= _347.d0;
    _352 += _351;
    _352 *= _347.d1;
    _352 += _350;
    _352 *= _347.d2;
    _352 += _349;
    _347.data[_352] = _332;
    _349++;
    if (_349 < _331)
    goto _jump165;
    _349 = 0;
    _350++;
    if (_350 < _332)
    goto _jump165;
    _350 = 0;
    _351++;
    if (_351 < _330)
    goto _jump165;
    // End body of loop
    _338 = _347;
    _jump161:;
    _336 = _338;
    goto _jump166;
    _jump155:;
    _a3_int64_t _353;
    // Computing bound for f
    int64_t _354 = 945;
    _353.d0 = _354;
    if (_354 > 0) 
    goto _jump167;
    fail_assertion("non-positive loop bound");
    _jump167:;
    // Computing bound for g
    int64_t _355 = _330 * _332;
    _353.d1 = _355;
    if (_355 > 0) 
    goto _jump168;
    fail_assertion("non-positive loop bound");
    _jump168:;
    // Computing bound for h
    _353.d2 = _330;
    if (_330 > 0) 
    goto _jump169;
    fail_assertion("non-positive loop bound");
    _jump169:;
    // Computing total size of heap memory to allocate
    int64_t _356 = 1;
    _356 *= _354;
    _356 *= _355;
    _356 *= _330;
    _356 *= sizeof(int64_t);
    _353.data = jpl_alloc(_356);
    int64_t _357 = 0; // h
    int64_t _358 = 0; // g
    int64_t _359 = 0; // f
    _jump170:; // Begin body of loop
    int64_t _360 = 0;
    _360 *= _353.d0;
    _360 += _359;
    _360 *= _353.d1;
    _360 += _358;
    _360 *= _353.d2;
    _360 += _357;
    _353.data[_360] = _330;
    _357++;
    if (_357 < _330)
    goto _jump170;
    _357 = 0;
    _358++;
    if (_358 < _355)
    goto _jump170;
    _358 = 0;
    _359++;
    if (_359 < _354)
    goto _jump170;
    // End body of loop
    _336 = _353;
    _jump166:;
    int64_t _361;
    // Computing bound for f
    if (_331 > 0) 
    goto _jump171;
    fail_assertion("non-positive loop bound");
    _jump171:;
    // Computing bound for g
    int64_t _362;
    // Computing bound for f
    if (_330 > 0) 
    goto _jump172;
    fail_assertion("non-positive loop bound");
    _jump172:;
    // Computing bound for g
    if (_330 > 0) 
    goto _jump173;
    fail_assertion("non-positive loop bound");
    _jump173:;
    // Computing bound for h
    int64_t _363 = 516;
    if (_363 > 0) 
    goto _jump174;
    fail_assertion("non-positive loop bound");
    _jump174:;
    _362 = 0;
    int64_t _364 = 0; // h
    int64_t _365 = 0; // g
    int64_t _366 = 0; // f
    _jump175:; // Begin body of loop
    _362 += _331;
    _364++;
    if (_364 < _363)
    goto _jump175;
    _364 = 0;
    _365++;
    if (_365 < _330)
    goto _jump175;
    _365 = 0;
    _366++;
    if (_366 < _330)
    goto _jump175;
    // End body of loop
    if (_362 > 0) 
    goto _jump176;
    fail_assertion("non-positive loop bound");
    _jump176:;
    _361 = 0;
    int64_t _367 = 0; // g
    int64_t _368 = 0; // f
    _jump177:; // Begin body of loop
    _361 += _332;
    _367++;
    if (_367 < _362)
    goto _jump177;
    _367 = 0;
    _368++;
    if (_368 < _331)
    goto _jump177;
    // End body of loop
    if (_330 >= 0)
    goto _jump178;
    fail_assertion("negative array index");
    _jump178:;
    if (_330 < _336.d0)
    goto _jump179;
    fail_assertion("index too large");
    _jump179:;
    if (_331 >= 0)
    goto _jump180;
    fail_assertion("negative array index");
    _jump180:;
    if (_331 < _336.d1)
    goto _jump181;
    fail_assertion("index too large");
    _jump181:;
    if (_361 >= 0)
    goto _jump182;
    fail_assertion("negative array index");
    _jump182:;
    if (_361 < _336.d2)
    goto _jump183;
    fail_assertion("index too large");
    _jump183:;
    int64_t _369 = 0;
    _369 *= _336.d0;
    _369 += _330;
    _369 *= _336.d1;
    _369 += _331;
    _369 *= _336.d2;
    _369 += _361;
    int64_t _370 = _336.data[_369];
    _267 += _370;
    _330++;
    if (_330 < _329)
    goto _jump154;
    _330 = 0;
    _331++;
    if (_331 < _301)
    goto _jump154;
    _331 = 0;
    _332++;
    if (_332 < _268)
    goto _jump154;
    // End body of loop
    _a2_int64_t _371;
    // Computing bound for c
    int64_t _372 = 903;
    int64_t _373 = -_372;
    _371.d0 = _373;
    if (_373 > 0) 
    goto _jump184;
    fail_assertion("non-positive loop bound");
    _jump184:;
    // Computing bound for d
    bool _374 = false;
    bool _375 = !_374;
    int64_t _376;
    if (!_375)
    goto _jump185;
    int64_t _377 = 130;
    int64_t _378 = -_377;
    _376 = _378;
    goto _jump186;
    _jump185:;
    int64_t _379 = 185;
    _376 = _379;
    _jump186:;
    _371.d1 = _376;
    if (_376 > 0) 
    goto _jump187;
    fail_assertion("non-positive loop bound");
    _jump187:;
    // Computing total size of heap memory to allocate
    int64_t _380 = 1;
    _380 *= _373;
    _380 *= _376;
    _380 *= sizeof(int64_t);
    _371.data = jpl_alloc(_380);
    int64_t _381 = 0; // d
    int64_t _382 = 0; // c
    _jump188:; // Begin body of loop
    int64_t _383;
    // Computing bound for e
    int64_t _384 = 28;
    if (_384 > 0) 
    goto _jump189;
    fail_assertion("non-positive loop bound");
    _jump189:;
    _383 = 0;
    int64_t _385 = 0; // e
    _jump190:; // Begin body of loop
    int64_t _386 = -_385;
    _383 += _386;
    _385++;
    if (_385 < _384)
    goto _jump190;
    // End body of loop
    int64_t _387 = 0;
    _387 *= _371.d0;
    _387 += _382;
    _387 *= _371.d1;
    _387 += _381;
    _371.data[_387] = _383;
    _381++;
    if (_381 < _376)
    goto _jump188;
    _381 = 0;
    _382++;
    if (_382 < _373)
    goto _jump188;
    // End body of loop
    int64_t _388 = 342;
    int64_t _389 = -_388;
    double _390 = 72.0;
    bool _391 = _390 == b;
    int64_t _392;
    if (!_391)
    goto _jump191;
    bool _394 = true;
    bool _393 = _394;
    if (0 != _394)
    goto _jump192;
    bool _395 = true;
    _393 = _395;
    _jump192:;
    int64_t _396;
    if (!_393)
    goto _jump193;
    int64_t _397 = 436;
    _396 = _397;
    goto _jump194;
    _jump193:;
    int64_t _398;
    // Computing bound for c
    int64_t _399 = 40;
    if (_399 > 0) 
    goto _jump195;
    fail_assertion("non-positive loop bound");
    _jump195:;
    _398 = 0;
    int64_t _400 = 0; // c
    _jump196:; // Begin body of loop
    int64_t _401 = 461;
    _398 += _401;
    _400++;
    if (_400 < _399)
    goto _jump196;
    // End body of loop
    _396 = _398;
    _jump194:;
    _392 = _396;
    goto _jump197;
    _jump191:;
    int64_t _402 = 144;
    int64_t _403 = -_402;
    _392 = _403;
    _jump197:;
    if (_389 >= 0)
    goto _jump198;
    fail_assertion("negative array index");
    _jump198:;
    if (_389 < _371.d0)
    goto _jump199;
    fail_assertion("index too large");
    _jump199:;
    if (_392 >= 0)
    goto _jump200;
    fail_assertion("negative array index");
    _jump200:;
    if (_392 < _371.d1)
    goto _jump201;
    fail_assertion("index too large");
    _jump201:;
    int64_t _404 = 0;
    _404 *= _371.d0;
    _404 += _389;
    _404 *= _371.d1;
    _404 += _392;
    int64_t _405 = _371.data[_404];
    int64_t _406 = -_405;
    int64_t _407 = _267 / _406;
    int64_t _408;
    // Computing bound for c
    int64_t _409;
    // Computing bound for c
    double _410 = fmod(b, b);
    double _411 = fmod(_410, b);
    double _412 = 35.0;
    bool _413 = _411 != _412;
    int64_t _414;
    if (!_413)
    goto _jump202;
    _a2_int64_t _415;
    // Computing bound for c
    int64_t _416 = 982;
    _415.d0 = _416;
    if (_416 > 0) 
    goto _jump203;
    fail_assertion("non-positive loop bound");
    _jump203:;
    // Computing bound for d
    int64_t _417;
    // Computing bound for c
    int64_t _418 = 972;
    if (_418 > 0) 
    goto _jump204;
    fail_assertion("non-positive loop bound");
    _jump204:;
    // Computing bound for d
    int64_t _419 = 918;
    if (_419 > 0) 
    goto _jump205;
    fail_assertion("non-positive loop bound");
    _jump205:;
    _417 = 0;
    int64_t _420 = 0; // d
    int64_t _421 = 0; // c
    _jump206:; // Begin body of loop
    int64_t _422 = 195;
    _417 += _422;
    _420++;
    if (_420 < _419)
    goto _jump206;
    _420 = 0;
    _421++;
    if (_421 < _418)
    goto _jump206;
    // End body of loop
    _415.d1 = _417;
    if (_417 > 0) 
    goto _jump207;
    fail_assertion("non-positive loop bound");
    _jump207:;
    // Computing total size of heap memory to allocate
    int64_t _423 = 1;
    _423 *= _416;
    _423 *= _417;
    _423 *= sizeof(int64_t);
    _415.data = jpl_alloc(_423);
    int64_t _424 = 0; // d
    int64_t _425 = 0; // c
    _jump208:; // Begin body of loop
    int64_t _426 = 251;
    int64_t _427 = 0;
    _427 *= _415.d0;
    _427 += _425;
    _427 *= _415.d1;
    _427 += _424;
    _415.data[_427] = _426;
    _424++;
    if (_424 < _417)
    goto _jump208;
    _424 = 0;
    _425++;
    if (_425 < _416)
    goto _jump208;
    // End body of loop
    bool _428 = false;
    bool _429 = !_428;
    int64_t _430;
    if (!_429)
    goto _jump209;
    int64_t _431 = 633;
    _430 = _431;
    goto _jump210;
    _jump209:;
    int64_t _432 = 281;
    _430 = _432;
    _jump210:;
    int64_t _433;
    // Computing bound for c
    int64_t _434 = 522;
    if (_434 > 0) 
    goto _jump211;
    fail_assertion("non-positive loop bound");
    _jump211:;
    _433 = 0;
    int64_t _435 = 0; // c
    _jump212:; // Begin body of loop
    _433 += _435;
    _435++;
    if (_435 < _434)
    goto _jump212;
    // End body of loop
    int64_t _436 = -_433;
    if (_430 >= 0)
    goto _jump213;
    fail_assertion("negative array index");
    _jump213:;
    if (_430 < _415.d0)
    goto _jump214;
    fail_assertion("index too large");
    _jump214:;
    if (_436 >= 0)
    goto _jump215;
    fail_assertion("negative array index");
    _jump215:;
    if (_436 < _415.d1)
    goto _jump216;
    fail_assertion("index too large");
    _jump216:;
    int64_t _437 = 0;
    _437 *= _415.d0;
    _437 += _430;
    _437 *= _415.d1;
    _437 += _436;
    int64_t _438 = _415.data[_437];
    _414 = _438;
    goto _jump217;
    _jump202:;
    int64_t _439 = 125;
    _414 = _439;
    _jump217:;
    if (_414 > 0) 
    goto _jump218;
    fail_assertion("non-positive loop bound");
    _jump218:;
    _409 = 0;
    int64_t _440 = 0; // c
    _jump219:; // Begin body of loop
    int64_t _441 = 71;
    int64_t _442 = 464;
    int64_t _443 = -_442;
    _a1_int64_t _444;
    _444.d0 = 2;
    _444.data = jpl_alloc(sizeof(int64_t) * 2);
    _444.data[0] = _441;
    _444.data[1] = _443;
    int64_t _445 = _440 / _440;
    if (_445 >= 0)
    goto _jump220;
    fail_assertion("negative array index");
    _jump220:;
    if (_445 < _444.d0)
    goto _jump221;
    fail_assertion("index too large");
    _jump221:;
    int64_t _446 = 0;
    _446 *= _444.d0;
    _446 += _445;
    int64_t _447 = _444.data[_446];
    int64_t _448 = -_447;
    _409 += _448;
    _440++;
    if (_440 < _414)
    goto _jump219;
    // End body of loop
    if (_409 > 0) 
    goto _jump222;
    fail_assertion("non-positive loop bound");
    _jump222:;
    _408 = 0;
    int64_t _449 = 0; // c
    _jump223:; // Begin body of loop
    int64_t _450 = -_449;
    int64_t _451 = 939;
    int64_t _452 = _450 - _451;
    int64_t _453 = -_449;
    int64_t _454 = 758;
    int64_t _455 = _453 * _454;
    int64_t _456 = _452 % _455;
    int64_t _457 = 292;
    bool _458 = _449 != _457;
    bool _459;
    if (!_458)
    goto _jump224;
    int64_t _460 = 582;
    bool _461 = _460 <= _449;
    _459 = _461;
    goto _jump225;
    _jump224:;
    bool _463 = false;
    bool _462 = _463;
    if (0 == _463)
    goto _jump226;
    bool _464 = false;
    _462 = _464;
    _jump226:;
    _459 = _462;
    _jump225:;
    int64_t _465;
    if (!_459)
    goto _jump227;
    int64_t _466 = 194;
    _a1_int64_t _467;
    _467.d0 = 1;
    _467.data = jpl_alloc(sizeof(int64_t) * 1);
    _467.data[0] = _466;
    if (_449 >= 0)
    goto _jump228;
    fail_assertion("negative array index");
    _jump228:;
    if (_449 < _467.d0)
    goto _jump229;
    fail_assertion("index too large");
    _jump229:;
    int64_t _468 = 0;
    _468 *= _467.d0;
    _468 += _449;
    int64_t _469 = _467.data[_468];
    _465 = _469;
    goto _jump230;
    _jump227:;
    int64_t _470 = -_449;
    _465 = _470;
    _jump230:;
    int64_t _471 = _456 + _465;
    int64_t _472 = 395;
    int64_t _473 = _471 * _472;
    _408 += _473;
    _449++;
    if (_449 < _409)
    goto _jump223;
    // End body of loop
    if (_266 >= 0)
    goto _jump231;
    fail_assertion("negative array index");
    _jump231:;
    if (_266 < _207.d0)
    goto _jump232;
    fail_assertion("index too large");
    _jump232:;
    if (_407 >= 0)
    goto _jump233;
    fail_assertion("negative array index");
    _jump233:;
    if (_407 < _207.d1)
    goto _jump234;
    fail_assertion("index too large");
    _jump234:;
    if (_408 >= 0)
    goto _jump235;
    fail_assertion("negative array index");
    _jump235:;
    if (_408 < _207.d2)
    goto _jump236;
    fail_assertion("index too large");
    _jump236:;
    int64_t _474 = 0;
    _474 *= _207.d0;
    _474 += _266;
    _474 *= _207.d1;
    _474 += _407;
    _474 *= _207.d2;
    _474 += _408;
    _a1_int64_t _475 = _207.data[_474];
    bool _476 = true;
    _a1__a1_int64_t _477;
    if (!_476)
    goto _jump237;
    _a1__a1_int64_t _478;
    // Computing bound for e
    _478.d0 = _475.d0;
    if (_475.d0 > 0) 
    goto _jump238;
    fail_assertion("non-positive loop bound");
    _jump238:;
    // Computing total size of heap memory to allocate
    int64_t _479 = 1;
    _479 *= _475.d0;
    _479 *= sizeof(_a1_int64_t);
    _478.data = jpl_alloc(_479);
    int64_t _480 = 0; // e
    _jump239:; // Begin body of loop
    bool _481 = true;
    bool _482;
    if (!_481)
    goto _jump240;
    bool _483 = true;
    _482 = _483;
    goto _jump241;
    _jump240:;
    _a1_bool _484;
    // Computing bound for f
    _484.d0 = _475.d0;
    if (_475.d0 > 0) 
    goto _jump242;
    fail_assertion("non-positive loop bound");
    _jump242:;
    // Computing total size of heap memory to allocate
    int64_t _485 = 1;
    _485 *= _475.d0;
    _485 *= sizeof(bool);
    _484.data = jpl_alloc(_485);
    int64_t _486 = 0; // f
    _jump243:; // Begin body of loop
    bool _487 = true;
    int64_t _488 = 0;
    _488 *= _484.d0;
    _488 += _486;
    _484.data[_488] = _487;
    _486++;
    if (_486 < _475.d0)
    goto _jump243;
    // End body of loop
    if (_480 >= 0)
    goto _jump244;
    fail_assertion("negative array index");
    _jump244:;
    if (_480 < _484.d0)
    goto _jump245;
    fail_assertion("index too large");
    _jump245:;
    int64_t _489 = 0;
    _489 *= _484.d0;
    _489 += _480;
    bool _490 = _484.data[_489];
    _482 = _490;
    _jump241:;
    _a1_int64_t _491;
    if (!_482)
    goto _jump246;
    bool _492 = b <= b;
    bool _493;
    if (!_492)
    goto _jump247;
    bool _494 = true;
    _493 = _494;
    goto _jump248;
    _jump247:;
    int64_t _495 = 513;
    bool _496 = _495 <= _475.d0;
    _493 = _496;
    _jump248:;
    _a1_int64_t _497;
    if (!_493)
    goto _jump249;
    int64_t _498;
    // Computing bound for f
    if (_480 > 0) 
    goto _jump250;
    fail_assertion("non-positive loop bound");
    _jump250:;
    // Computing bound for g
    if (_480 > 0) 
    goto _jump251;
    fail_assertion("non-positive loop bound");
    _jump251:;
    // Computing bound for h
    if (_475.d0 > 0) 
    goto _jump252;
    fail_assertion("non-positive loop bound");
    _jump252:;
    _498 = 0;
    int64_t _499 = 0; // h
    int64_t _500 = 0; // g
    int64_t _501 = 0; // f
    _jump253:; // Begin body of loop
    _498 += _475.d0;
    _499++;
    if (_499 < _475.d0)
    goto _jump253;
    _499 = 0;
    _500++;
    if (_500 < _480)
    goto _jump253;
    _500 = 0;
    _501++;
    if (_501 < _480)
    goto _jump253;
    // End body of loop
    _a1_int64_t _502;
    _502.d0 = 1;
    _502.data = jpl_alloc(sizeof(int64_t) * 1);
    _502.data[0] = _498;
    _497 = _502;
    goto _jump254;
    _jump249:;
    _a1_int64_t _503;
    // Computing bound for f
    int64_t _504 = 871;
    int64_t _505 = -_504;
    _503.d0 = _505;
    if (_505 > 0) 
    goto _jump255;
    fail_assertion("non-positive loop bound");
    _jump255:;
    // Computing total size of heap memory to allocate
    int64_t _506 = 1;
    _506 *= _505;
    _506 *= sizeof(int64_t);
    _503.data = jpl_alloc(_506);
    int64_t _507 = 0; // f
    _jump256:; // Begin body of loop
    int64_t _508 = 0;
    _508 *= _503.d0;
    _508 += _507;
    _503.data[_508] = _507;
    _507++;
    if (_507 < _505)
    goto _jump256;
    // End body of loop
    _497 = _503;
    _jump254:;
    _491 = _497;
    goto _jump257;
    _jump246:;
    _a1_int64_t _509;
    // Computing bound for f
    int64_t _510 = 236;
    _509.d0 = _510;
    if (_510 > 0) 
    goto _jump258;
    fail_assertion("non-positive loop bound");
    _jump258:;
    // Computing total size of heap memory to allocate
    int64_t _511 = 1;
    _511 *= _510;
    _511 *= sizeof(int64_t);
    _509.data = jpl_alloc(_511);
    int64_t _512 = 0; // f
    _jump259:; // Begin body of loop
    int64_t _513 = 435;
    int64_t _514 = 0;
    _514 *= _509.d0;
    _514 += _512;
    _509.data[_514] = _513;
    _512++;
    if (_512 < _510)
    goto _jump259;
    // End body of loop
    _491 = _509;
    _jump257:;
    int64_t _515 = 0;
    _515 *= _478.d0;
    _515 += _480;
    _478.data[_515] = _491;
    _480++;
    if (_480 < _475.d0)
    goto _jump239;
    // End body of loop
    _477 = _478;
    goto _jump260;
    _jump237:;
    _a1__a1_int64_t _516;
    // Computing bound for e
    bool _517 = true;
    bool _518 = !_517;
    _a1_int64_t _519;
    if (!_518)
    goto _jump261;
    int64_t _520 = 559;
    _a1_int64_t _521;
    _521.d0 = 1;
    _521.data = jpl_alloc(sizeof(int64_t) * 1);
    _521.data[0] = _520;
    _519 = _521;
    goto _jump262;
    _jump261:;
    int64_t _522 = -_475.d0;
    _a1_int64_t _523;
    _523.d0 = 1;
    _523.data = jpl_alloc(sizeof(int64_t) * 1);
    _523.data[0] = _522;
    _519 = _523;
    _jump262:;
    if (_475.d0 >= 0)
    goto _jump263;
    fail_assertion("negative array index");
    _jump263:;
    if (_475.d0 < _519.d0)
    goto _jump264;
    fail_assertion("index too large");
    _jump264:;
    int64_t _524 = 0;
    _524 *= _519.d0;
    _524 += _475.d0;
    int64_t _525 = _519.data[_524];
    _516.d0 = _525;
    if (_525 > 0) 
    goto _jump265;
    fail_assertion("non-positive loop bound");
    _jump265:;
    // Computing total size of heap memory to allocate
    int64_t _526 = 1;
    _526 *= _525;
    _526 *= sizeof(_a1_int64_t);
    _516.data = jpl_alloc(_526);
    int64_t _527 = 0; // e
    _jump266:; // Begin body of loop
    _a3__a3__a1_int64_t _528;
    // Computing bound for f
    _528.d0 = _527;
    if (_527 > 0) 
    goto _jump267;
    fail_assertion("non-positive loop bound");
    _jump267:;
    // Computing bound for g
    _528.d1 = _527;
    if (_527 > 0) 
    goto _jump268;
    fail_assertion("non-positive loop bound");
    _jump268:;
    // Computing bound for h
    _528.d2 = _527;
    if (_527 > 0) 
    goto _jump269;
    fail_assertion("non-positive loop bound");
    _jump269:;
    // Computing total size of heap memory to allocate
    int64_t _529 = 1;
    _529 *= _527;
    _529 *= _527;
    _529 *= _527;
    _529 *= sizeof(_a3__a1_int64_t);
    _528.data = jpl_alloc(_529);
    int64_t _530 = 0; // h
    int64_t _531 = 0; // g
    int64_t _532 = 0; // f
    _jump270:; // Begin body of loop
    _a3__a1_int64_t _533;
    // Computing bound for i
    _533.d0 = _532;
    if (_532 > 0) 
    goto _jump271;
    fail_assertion("non-positive loop bound");
    _jump271:;
    // Computing bound for j
    _533.d1 = _527;
    if (_527 > 0) 
    goto _jump272;
    fail_assertion("non-positive loop bound");
    _jump272:;
    // Computing bound for k
    _533.d2 = _530;
    if (_530 > 0) 
    goto _jump273;
    fail_assertion("non-positive loop bound");
    _jump273:;
    // Computing total size of heap memory to allocate
    int64_t _534 = 1;
    _534 *= _532;
    _534 *= _527;
    _534 *= _530;
    _534 *= sizeof(_a1_int64_t);
    _533.data = jpl_alloc(_534);
    int64_t _535 = 0; // k
    int64_t _536 = 0; // j
    int64_t _537 = 0; // i
    _jump274:; // Begin body of loop
    int64_t _538 = 0;
    _538 *= _533.d0;
    _538 += _537;
    _538 *= _533.d1;
    _538 += _536;
    _538 *= _533.d2;
    _538 += _535;
    _533.data[_538] = _475;
    _535++;
    if (_535 < _530)
    goto _jump274;
    _535 = 0;
    _536++;
    if (_536 < _527)
    goto _jump274;
    _536 = 0;
    _537++;
    if (_537 < _532)
    goto _jump274;
    // End body of loop
    int64_t _539 = 0;
    _539 *= _528.d0;
    _539 += _532;
    _539 *= _528.d1;
    _539 += _531;
    _539 *= _528.d2;
    _539 += _530;
    _528.data[_539] = _533;
    _530++;
    if (_530 < _527)
    goto _jump270;
    _530 = 0;
    _531++;
    if (_531 < _527)
    goto _jump270;
    _531 = 0;
    _532++;
    if (_532 < _527)
    goto _jump270;
    // End body of loop
    int64_t _540 = 59;
    int64_t _541;
    // Computing bound for f
    int64_t _542 = 876;
    int64_t _543 = -_542;
    if (_543 > 0) 
    goto _jump275;
    fail_assertion("non-positive loop bound");
    _jump275:;
    // Computing bound for g
    int64_t _544;
    // Computing bound for f
    int64_t _545 = 518;
    if (_545 > 0) 
    goto _jump276;
    fail_assertion("non-positive loop bound");
    _jump276:;
    // Computing bound for g
    int64_t _546 = 379;
    if (_546 > 0) 
    goto _jump277;
    fail_assertion("non-positive loop bound");
    _jump277:;
    // Computing bound for h
    int64_t _547 = 668;
    if (_547 > 0) 
    goto _jump278;
    fail_assertion("non-positive loop bound");
    _jump278:;
    _544 = 0;
    int64_t _548 = 0; // h
    int64_t _549 = 0; // g
    int64_t _550 = 0; // f
    _jump279:; // Begin body of loop
    _544 += _549;
    _548++;
    if (_548 < _547)
    goto _jump279;
    _548 = 0;
    _549++;
    if (_549 < _546)
    goto _jump279;
    _549 = 0;
    _550++;
    if (_550 < _545)
    goto _jump279;
    // End body of loop
    if (_544 > 0) 
    goto _jump280;
    fail_assertion("non-positive loop bound");
    _jump280:;
    // Computing bound for h
    if (_527 > 0) 
    goto _jump281;
    fail_assertion("non-positive loop bound");
    _jump281:;
    _541 = 0;
    int64_t _551 = 0; // h
    int64_t _552 = 0; // g
    int64_t _553 = 0; // f
    _jump282:; // Begin body of loop
    _541 += _551;
    _551++;
    if (_551 < _527)
    goto _jump282;
    _551 = 0;
    _552++;
    if (_552 < _544)
    goto _jump282;
    _552 = 0;
    _553++;
    if (_553 < _543)
    goto _jump282;
    // End body of loop
    int64_t _554 = 910;
    if (_540 >= 0)
    goto _jump283;
    fail_assertion("negative array index");
    _jump283:;
    if (_540 < _528.d0)
    goto _jump284;
    fail_assertion("index too large");
    _jump284:;
    if (_541 >= 0)
    goto _jump285;
    fail_assertion("negative array index");
    _jump285:;
    if (_541 < _528.d1)
    goto _jump286;
    fail_assertion("index too large");
    _jump286:;
    if (_554 >= 0)
    goto _jump287;
    fail_assertion("negative array index");
    _jump287:;
    if (_554 < _528.d2)
    goto _jump288;
    fail_assertion("index too large");
    _jump288:;
    int64_t _555 = 0;
    _555 *= _528.d0;
    _555 += _540;
    _555 *= _528.d1;
    _555 += _541;
    _555 *= _528.d2;
    _555 += _554;
    _a3__a1_int64_t _556 = _528.data[_555];
    bool _557 = false;
    int64_t _558;
    if (!_557)
    goto _jump289;
    int64_t _559 = -_527;
    int64_t _560 = 682;
    if (_560 >= 0)
    goto _jump290;
    fail_assertion("negative array index");
    _jump290:;
    if (_560 < _475.d0)
    goto _jump291;
    fail_assertion("index too large");
    _jump291:;
    int64_t _561 = 0;
    _561 *= _475.d0;
    _561 += _560;
    int64_t _562 = _475.data[_561];
    int64_t _563 = _559 + _562;
    _558 = _563;
    goto _jump292;
    _jump289:;
    _a2_int64_t _564;
    // Computing bound for f
    int64_t _565 = 195;
    _564.d0 = _565;
    if (_565 > 0) 
    goto _jump293;
    fail_assertion("non-positive loop bound");
    _jump293:;
    // Computing bound for g
    _564.d1 = _475.d0;
    if (_475.d0 > 0) 
    goto _jump294;
    fail_assertion("non-positive loop bound");
    _jump294:;
    // Computing total size of heap memory to allocate
    int64_t _566 = 1;
    _566 *= _565;
    _566 *= _475.d0;
    _566 *= sizeof(int64_t);
    _564.data = jpl_alloc(_566);
    int64_t _567 = 0; // g
    int64_t _568 = 0; // f
    _jump295:; // Begin body of loop
    int64_t _569 = 795;
    int64_t _570 = 0;
    _570 *= _564.d0;
    _570 += _568;
    _570 *= _564.d1;
    _570 += _567;
    _564.data[_570] = _569;
    _567++;
    if (_567 < _475.d0)
    goto _jump295;
    _567 = 0;
    _568++;
    if (_568 < _565)
    goto _jump295;
    // End body of loop
    int64_t _571 = 319;
    if (_571 >= 0)
    goto _jump296;
    fail_assertion("negative array index");
    _jump296:;
    if (_571 < _564.d0)
    goto _jump297;
    fail_assertion("index too large");
    _jump297:;
    if (_475.d0 >= 0)
    goto _jump298;
    fail_assertion("negative array index");
    _jump298:;
    if (_475.d0 < _564.d1)
    goto _jump299;
    fail_assertion("index too large");
    _jump299:;
    int64_t _572 = 0;
    _572 *= _564.d0;
    _572 += _571;
    _572 *= _564.d1;
    _572 += _475.d0;
    int64_t _573 = _564.data[_572];
    _558 = _573;
    _jump292:;
    if (_558 >= 0)
    goto _jump300;
    fail_assertion("negative array index");
    _jump300:;
    if (_558 < _556.d0)
    goto _jump301;
    fail_assertion("index too large");
    _jump301:;
    if (_527 >= 0)
    goto _jump302;
    fail_assertion("negative array index");
    _jump302:;
    if (_527 < _556.d1)
    goto _jump303;
    fail_assertion("index too large");
    _jump303:;
    if (_475.d0 >= 0)
    goto _jump304;
    fail_assertion("negative array index");
    _jump304:;
    if (_475.d0 < _556.d2)
    goto _jump305;
    fail_assertion("index too large");
    _jump305:;
    int64_t _574 = 0;
    _574 *= _556.d0;
    _574 += _558;
    _574 *= _556.d1;
    _574 += _527;
    _574 *= _556.d2;
    _574 += _475.d0;
    _a1_int64_t _575 = _556.data[_574];
    int64_t _576 = 0;
    _576 *= _516.d0;
    _576 += _527;
    _516.data[_576] = _575;
    _527++;
    if (_527 < _525)
    goto _jump266;
    // End body of loop
    _477 = _516;
    _jump260:;
    if (_475.d0 >= 0)
    goto _jump306;
    fail_assertion("negative array index");
    _jump306:;
    if (_475.d0 < _477.d0)
    goto _jump307;
    fail_assertion("index too large");
    _jump307:;
    int64_t _577 = 0;
    _577 *= _477.d0;
    _577 += _475.d0;
    _a1_int64_t _578 = _477.data[_577];
    int64_t _580;
    // Computing bound for g
    if (_475.d0 > 0) 
    goto _jump308;
    fail_assertion("non-positive loop bound");
    _jump308:;
    // Computing bound for h
    double _581 = 52.0;
    bool _582 = b == _581;
    int64_t _583;
    if (!_582)
    goto _jump309;
    int64_t _584 = -_578.d0;
    int64_t _585 = _584 - _578.d0;
    _583 = _585;
    goto _jump310;
    _jump309:;
    _583 = _578.d0;
    _jump310:;
    if (_583 > 0) 
    goto _jump311;
    fail_assertion("non-positive loop bound");
    _jump311:;
    _580 = 0;
    int64_t _586 = 0; // h
    int64_t _587 = 0; // g
    _jump312:; // Begin body of loop
    bool _588 = false;
    int64_t _589;
    if (!_588)
    goto _jump313;
    int64_t _590 = 64;
    int64_t _591 = _586 + _590;
    _589 = _591;
    goto _jump314;
    _jump313:;
    _589 = _578.d0;
    _jump314:;
    int64_t _592 = _587 - _589;
    _580 += _592;
    _586++;
    if (_586 < _583)
    goto _jump312;
    _586 = 0;
    _587++;
    if (_587 < _475.d0)
    goto _jump312;
    // End body of loop
    bool _593 = _475.d0 < _580;
    bool _579 = _593;
    if (0 != _593)
    goto _jump315;
    bool _594 = false;
    bool _595 = !_594;
    bool _596;
    if (!_595)
    goto _jump316;
    int64_t _597;
    // Computing bound for g
    if (_475.d0 > 0) 
    goto _jump317;
    fail_assertion("non-positive loop bound");
    _jump317:;
    // Computing bound for h
    if (_475.d0 > 0) 
    goto _jump318;
    fail_assertion("non-positive loop bound");
    _jump318:;
    // Computing bound for i
    int64_t _598 = 852;
    if (_598 > 0) 
    goto _jump319;
    fail_assertion("non-positive loop bound");
    _jump319:;
    _597 = 0;
    int64_t _599 = 0; // i
    int64_t _600 = 0; // h
    int64_t _601 = 0; // g
    _jump320:; // Begin body of loop
    _597 += _599;
    _599++;
    if (_599 < _598)
    goto _jump320;
    _599 = 0;
    _600++;
    if (_600 < _475.d0)
    goto _jump320;
    _600 = 0;
    _601++;
    if (_601 < _475.d0)
    goto _jump320;
    // End body of loop
    bool _602 = _578.d0 < _597;
    _596 = _602;
    goto _jump321;
    _jump316:;
    bool _604 = _475.d0 != _578.d0;
    bool _603 = _604;
    if (0 == _604)
    goto _jump322;
    bool _605 = true;
    _603 = _605;
    _jump322:;
    _596 = _603;
    _jump321:;
    _a3_bool _606;
    if (!_596)
    goto _jump323;
    _a3_bool _607;
    // Computing bound for g
    double _608 = 40.0;
    bool _609 = b == _608;
    int64_t _610;
    if (!_609)
    goto _jump324;
    int64_t _611;
    // Computing bound for g
    int64_t _612 = 336;
    if (_612 > 0) 
    goto _jump325;
    fail_assertion("non-positive loop bound");
    _jump325:;
    // Computing bound for h
    if (_578.d0 > 0) 
    goto _jump326;
    fail_assertion("non-positive loop bound");
    _jump326:;
    // Computing bound for i
    if (_578.d0 > 0) 
    goto _jump327;
    fail_assertion("non-positive loop bound");
    _jump327:;
    _611 = 0;
    int64_t _613 = 0; // i
    int64_t _614 = 0; // h
    int64_t _615 = 0; // g
    _jump328:; // Begin body of loop
    _611 += _475.d0;
    _613++;
    if (_613 < _578.d0)
    goto _jump328;
    _613 = 0;
    _614++;
    if (_614 < _578.d0)
    goto _jump328;
    _614 = 0;
    _615++;
    if (_615 < _612)
    goto _jump328;
    // End body of loop
    _610 = _611;
    goto _jump329;
    _jump324:;
    _610 = _475.d0;
    _jump329:;
    _607.d0 = _610;
    if (_610 > 0) 
    goto _jump330;
    fail_assertion("non-positive loop bound");
    _jump330:;
    // Computing bound for h
    _607.d1 = _475.d0;
    if (_475.d0 > 0) 
    goto _jump331;
    fail_assertion("non-positive loop bound");
    _jump331:;
    // Computing bound for i
    int64_t _616;
    // Computing bound for g
    int64_t _617 = 705;
    if (_617 > 0) 
    goto _jump332;
    fail_assertion("non-positive loop bound");
    _jump332:;
    // Computing bound for h
    if (_475.d0 > 0) 
    goto _jump333;
    fail_assertion("non-positive loop bound");
    _jump333:;
    _616 = 0;
    int64_t _618 = 0; // h
    int64_t _619 = 0; // g
    _jump334:; // Begin body of loop
    _616 += _618;
    _618++;
    if (_618 < _475.d0)
    goto _jump334;
    _618 = 0;
    _619++;
    if (_619 < _617)
    goto _jump334;
    // End body of loop
    _607.d2 = _616;
    if (_616 > 0) 
    goto _jump335;
    fail_assertion("non-positive loop bound");
    _jump335:;
    // Computing total size of heap memory to allocate
    int64_t _620 = 1;
    _620 *= _610;
    _620 *= _475.d0;
    _620 *= _616;
    _620 *= sizeof(bool);
    _607.data = jpl_alloc(_620);
    int64_t _621 = 0; // i
    int64_t _622 = 0; // h
    int64_t _623 = 0; // g
    _jump336:; // Begin body of loop
    bool _624 = true;
    bool _625;
    if (!_624)
    goto _jump337;
    double _626 = 44.0;
    double _627 = 21.0;
    bool _628 = _626 == _627;
    _625 = _628;
    goto _jump338;
    _jump337:;
    bool _629 = false;
    _625 = _629;
    _jump338:;
    int64_t _630 = 0;
    _630 *= _607.d0;
    _630 += _623;
    _630 *= _607.d1;
    _630 += _622;
    _630 *= _607.d2;
    _630 += _621;
    _607.data[_630] = _625;
    _621++;
    if (_621 < _616)
    goto _jump336;
    _621 = 0;
    _622++;
    if (_622 < _475.d0)
    goto _jump336;
    _622 = 0;
    _623++;
    if (_623 < _610)
    goto _jump336;
    // End body of loop
    _606 = _607;
    goto _jump339;
    _jump323:;
    _a3_bool _631;
    // Computing bound for g
    int64_t _632 = 916;
    _631.d0 = _632;
    if (_632 > 0) 
    goto _jump340;
    fail_assertion("non-positive loop bound");
    _jump340:;
    // Computing bound for h
    _631.d1 = _475.d0;
    if (_475.d0 > 0) 
    goto _jump341;
    fail_assertion("non-positive loop bound");
    _jump341:;
    // Computing bound for i
    _631.d2 = _475.d0;
    if (_475.d0 > 0) 
    goto _jump342;
    fail_assertion("non-positive loop bound");
    _jump342:;
    // Computing total size of heap memory to allocate
    int64_t _633 = 1;
    _633 *= _632;
    _633 *= _475.d0;
    _633 *= _475.d0;
    _633 *= sizeof(bool);
    _631.data = jpl_alloc(_633);
    int64_t _634 = 0; // i
    int64_t _635 = 0; // h
    int64_t _636 = 0; // g
    _jump343:; // Begin body of loop
    bool _637 = false;
    bool _638 = !_637;
    int64_t _639 = 0;
    _639 *= _631.d0;
    _639 += _636;
    _639 *= _631.d1;
    _639 += _635;
    _639 *= _631.d2;
    _639 += _634;
    _631.data[_639] = _638;
    _634++;
    if (_634 < _475.d0)
    goto _jump343;
    _634 = 0;
    _635++;
    if (_635 < _475.d0)
    goto _jump343;
    _635 = 0;
    _636++;
    if (_636 < _632)
    goto _jump343;
    // End body of loop
    _606 = _631;
    _jump339:;
    int64_t _640;
    // Computing bound for g
    if (_578.d0 > 0) 
    goto _jump344;
    fail_assertion("non-positive loop bound");
    _jump344:;
    // Computing bound for h
    if (_475.d0 > 0) 
    goto _jump345;
    fail_assertion("non-positive loop bound");
    _jump345:;
    // Computing bound for i
    if (_578.d0 >= 0)
    goto _jump346;
    fail_assertion("negative array index");
    _jump346:;
    if (_578.d0 < _475.d0)
    goto _jump347;
    fail_assertion("index too large");
    _jump347:;
    int64_t _641 = 0;
    _641 *= _475.d0;
    _641 += _578.d0;
    int64_t _642 = _475.data[_641];
    if (_642 > 0) 
    goto _jump348;
    fail_assertion("non-positive loop bound");
    _jump348:;
    _640 = 0;
    int64_t _643 = 0; // i
    int64_t _644 = 0; // h
    int64_t _645 = 0; // g
    _jump349:; // Begin body of loop
    if (_644 >= 0)
    goto _jump350;
    fail_assertion("negative array index");
    _jump350:;
    if (_644 < _578.d0)
    goto _jump351;
    fail_assertion("index too large");
    _jump351:;
    int64_t _646 = 0;
    _646 *= _578.d0;
    _646 += _644;
    int64_t _647 = _578.data[_646];
    _640 += _647;
    _643++;
    if (_643 < _642)
    goto _jump349;
    _643 = 0;
    _644++;
    if (_644 < _475.d0)
    goto _jump349;
    _644 = 0;
    _645++;
    if (_645 < _578.d0)
    goto _jump349;
    // End body of loop
    int64_t _648;
    // Computing bound for g
    if (_578.d0 > 0) 
    goto _jump352;
    fail_assertion("non-positive loop bound");
    _jump352:;
    // Computing bound for h
    int64_t _649;
    // Computing bound for g
    if (_475.d0 > 0) 
    goto _jump353;
    fail_assertion("non-positive loop bound");
    _jump353:;
    _649 = 0;
    int64_t _650 = 0; // g
    _jump354:; // Begin body of loop
    _649 += _650;
    _650++;
    if (_650 < _475.d0)
    goto _jump354;
    // End body of loop
    if (_649 > 0) 
    goto _jump355;
    fail_assertion("non-positive loop bound");
    _jump355:;
    // Computing bound for i
    int64_t _651 = 5;
    if (_651 > 0) 
    goto _jump356;
    fail_assertion("non-positive loop bound");
    _jump356:;
    _648 = 0;
    int64_t _652 = 0; // i
    int64_t _653 = 0; // h
    int64_t _654 = 0; // g
    _jump357:; // Begin body of loop
    _648 += _654;
    _652++;
    if (_652 < _651)
    goto _jump357;
    _652 = 0;
    _653++;
    if (_653 < _649)
    goto _jump357;
    _653 = 0;
    _654++;
    if (_654 < _578.d0)
    goto _jump357;
    // End body of loop
    int64_t _655 = _640 / _648;
    int64_t _656 = -_655;
    int64_t _657 = 13;
    if (_656 >= 0)
    goto _jump358;
    fail_assertion("negative array index");
    _jump358:;
    if (_656 < _606.d0)
    goto _jump359;
    fail_assertion("index too large");
    _jump359:;
    if (_657 >= 0)
    goto _jump360;
    fail_assertion("negative array index");
    _jump360:;
    if (_657 < _606.d1)
    goto _jump361;
    fail_assertion("index too large");
    _jump361:;
    if (_475.d0 >= 0)
    goto _jump362;
    fail_assertion("negative array index");
    _jump362:;
    if (_475.d0 < _606.d2)
    goto _jump363;
    fail_assertion("index too large");
    _jump363:;
    int64_t _658 = 0;
    _658 *= _606.d0;
    _658 += _656;
    _658 *= _606.d1;
    _658 += _657;
    _658 *= _606.d2;
    _658 += _475.d0;
    bool _659 = _606.data[_658];
    _579 = _659;
    _jump315:;
    _a3_double _660;
    if (!_579)
    goto _jump364;
    _a3_double _661;
    // Computing bound for g
    bool _662 = false;
    int64_t _663;
    if (!_662)
    goto _jump365;
    if (_475.d0 >= 0)
    goto _jump366;
    fail_assertion("negative array index");
    _jump366:;
    if (_475.d0 < _475.d0)
    goto _jump367;
    fail_assertion("index too large");
    _jump367:;
    int64_t _664 = 0;
    _664 *= _475.d0;
    _664 += _475.d0;
    int64_t _665 = _475.data[_664];
    int64_t _666 = -_665;
    int64_t _667 = -_666;
    _663 = _667;
    goto _jump368;
    _jump365:;
    _663 = _475.d0;
    _jump368:;
    _661.d0 = _663;
    if (_663 > 0) 
    goto _jump369;
    fail_assertion("non-positive loop bound");
    _jump369:;
    // Computing bound for h
    _661.d1 = _475.d0;
    if (_475.d0 > 0) 
    goto _jump370;
    fail_assertion("non-positive loop bound");
    _jump370:;
    // Computing bound for i
    _661.d2 = _475.d0;
    if (_475.d0 > 0) 
    goto _jump371;
    fail_assertion("non-positive loop bound");
    _jump371:;
    // Computing total size of heap memory to allocate
    int64_t _668 = 1;
    _668 *= _663;
    _668 *= _475.d0;
    _668 *= _475.d0;
    _668 *= sizeof(double);
    _661.data = jpl_alloc(_668);
    int64_t _669 = 0; // i
    int64_t _670 = 0; // h
    int64_t _671 = 0; // g
    _jump372:; // Begin body of loop
    int64_t _672 = 489;
    bool _673 = _475.d0 >= _672;
    bool _674;
    if (!_673)
    goto _jump373;
    bool _675 = _475.d0 != _669;
    _674 = _675;
    goto _jump374;
    _jump373:;
    bool _676 = false;
    bool _677 = false;
    bool _678 = _676 == _677;
    _674 = _678;
    _jump374:;
    bool _679;
    if (!_674)
    goto _jump375;
    bool _680 = true;
    bool _681 = !_680;
    bool _682;
    if (!_681)
    goto _jump376;
    bool _683 = true;
    _682 = _683;
    goto _jump377;
    _jump376:;
    bool _684 = _670 != _669;
    _682 = _684;
    _jump377:;
    _679 = _682;
    goto _jump378;
    _jump375:;
    bool _685 = false;
    _679 = _685;
    _jump378:;
    rgba _686;
    if (!_679)
    goto _jump379;
    _a3_rgba _687;
    // Computing bound for j
    _687.d0 = _475.d0;
    if (_475.d0 > 0) 
    goto _jump380;
    fail_assertion("non-positive loop bound");
    _jump380:;
    // Computing bound for k
    _687.d1 = _669;
    if (_669 > 0) 
    goto _jump381;
    fail_assertion("non-positive loop bound");
    _jump381:;
    // Computing bound for l
    int64_t _688 = 718;
    _687.d2 = _688;
    if (_688 > 0) 
    goto _jump382;
    fail_assertion("non-positive loop bound");
    _jump382:;
    // Computing total size of heap memory to allocate
    int64_t _689 = 1;
    _689 *= _475.d0;
    _689 *= _669;
    _689 *= _688;
    _689 *= sizeof(rgba);
    _687.data = jpl_alloc(_689);
    int64_t _690 = 0; // l
    int64_t _691 = 0; // k
    int64_t _692 = 0; // j
    _jump383:; // Begin body of loop
    double _693 = 54.0;
    rgba _694 = { _693, b, b, b };
    int64_t _695 = 0;
    _695 *= _687.d0;
    _695 += _692;
    _695 *= _687.d1;
    _695 += _691;
    _695 *= _687.d2;
    _695 += _690;
    _687.data[_695] = _694;
    _690++;
    if (_690 < _688)
    goto _jump383;
    _690 = 0;
    _691++;
    if (_691 < _669)
    goto _jump383;
    _691 = 0;
    _692++;
    if (_692 < _475.d0)
    goto _jump383;
    // End body of loop
    int64_t _696;
    // Computing bound for j
    int64_t _697 = 27;
    int64_t _698 = _671 - _697;
    if (_698 > 0) 
    goto _jump384;
    fail_assertion("non-positive loop bound");
    _jump384:;
    // Computing bound for k
    int64_t _699 = 122;
    if (_699 > 0) 
    goto _jump385;
    fail_assertion("non-positive loop bound");
    _jump385:;
    _696 = 0;
    int64_t _700 = 0; // k
    int64_t _701 = 0; // j
    _jump386:; // Begin body of loop
    int64_t _702 = 222;
    _696 += _702;
    _700++;
    if (_700 < _699)
    goto _jump386;
    _700 = 0;
    _701++;
    if (_701 < _698)
    goto _jump386;
    // End body of loop
    int64_t _703;
    // Computing bound for j
    if (_475.d0 > 0) 
    goto _jump387;
    fail_assertion("non-positive loop bound");
    _jump387:;
    // Computing bound for k
    if (_671 > 0) 
    goto _jump388;
    fail_assertion("non-positive loop bound");
    _jump388:;
    // Computing bound for l
    if (_475.d0 > 0) 
    goto _jump389;
    fail_assertion("non-positive loop bound");
    _jump389:;
    _703 = 0;
    int64_t _704 = 0; // l
    int64_t _705 = 0; // k
    int64_t _706 = 0; // j
    _jump390:; // Begin body of loop
    _703 += _671;
    _704++;
    if (_704 < _475.d0)
    goto _jump390;
    _704 = 0;
    _705++;
    if (_705 < _671)
    goto _jump390;
    _705 = 0;
    _706++;
    if (_706 < _475.d0)
    goto _jump390;
    // End body of loop
    int64_t _707 = _703 + _475.d0;
    int64_t _708;
    // Computing bound for j
    if (_670 > 0) 
    goto _jump391;
    fail_assertion("non-positive loop bound");
    _jump391:;
    // Computing bound for k
    if (_669 > 0) 
    goto _jump392;
    fail_assertion("non-positive loop bound");
    _jump392:;
    _708 = 0;
    int64_t _709 = 0; // k
    int64_t _710 = 0; // j
    _jump393:; // Begin body of loop
    _708 += _670;
    _709++;
    if (_709 < _669)
    goto _jump393;
    _709 = 0;
    _710++;
    if (_710 < _670)
    goto _jump393;
    // End body of loop
    int64_t _711 = -_708;
    if (_696 >= 0)
    goto _jump394;
    fail_assertion("negative array index");
    _jump394:;
    if (_696 < _687.d0)
    goto _jump395;
    fail_assertion("index too large");
    _jump395:;
    if (_707 >= 0)
    goto _jump396;
    fail_assertion("negative array index");
    _jump396:;
    if (_707 < _687.d1)
    goto _jump397;
    fail_assertion("index too large");
    _jump397:;
    if (_711 >= 0)
    goto _jump398;
    fail_assertion("negative array index");
    _jump398:;
    if (_711 < _687.d2)
    goto _jump399;
    fail_assertion("index too large");
    _jump399:;
    int64_t _712 = 0;
    _712 *= _687.d0;
    _712 += _696;
    _712 *= _687.d1;
    _712 += _707;
    _712 *= _687.d2;
    _712 += _711;
    rgba _713 = _687.data[_712];
    _686 = _713;
    goto _jump400;
    _jump379:;
    double _714;
    // Computing bound for j
    if (_475.d0 >= 0)
    goto _jump401;
    fail_assertion("negative array index");
    _jump401:;
    if (_475.d0 < _475.d0)
    goto _jump402;
    fail_assertion("index too large");
    _jump402:;
    int64_t _715 = 0;
    _715 *= _475.d0;
    _715 += _475.d0;
    int64_t _716 = _475.data[_715];
    if (_716 > 0) 
    goto _jump403;
    fail_assertion("non-positive loop bound");
    _jump403:;
    // Computing bound for k
    int64_t _717;
    // Computing bound for j
    if (_671 > 0) 
    goto _jump404;
    fail_assertion("non-positive loop bound");
    _jump404:;
    // Computing bound for k
    if (_671 > 0) 
    goto _jump405;
    fail_assertion("non-positive loop bound");
    _jump405:;
    _717 = 0;
    int64_t _718 = 0; // k
    int64_t _719 = 0; // j
    _jump406:; // Begin body of loop
    _717 += _669;
    _718++;
    if (_718 < _671)
    goto _jump406;
    _718 = 0;
    _719++;
    if (_719 < _671)
    goto _jump406;
    // End body of loop
    if (_717 > 0) 
    goto _jump407;
    fail_assertion("non-positive loop bound");
    _jump407:;
    // Computing bound for l
    if (_669 > 0) 
    goto _jump408;
    fail_assertion("non-positive loop bound");
    _jump408:;
    _714 = 0;
    int64_t _720 = 0; // l
    int64_t _721 = 0; // k
    int64_t _722 = 0; // j
    _jump409:; // Begin body of loop
    double _723 = a(b);
    _714 += _723;
    _720++;
    if (_720 < _669)
    goto _jump409;
    _720 = 0;
    _721++;
    if (_721 < _717)
    goto _jump409;
    _721 = 0;
    _722++;
    if (_722 < _716)
    goto _jump409;
    // End body of loop
    double _724 = 19.0;
    double _725 = 82.0;
    double _726 = a(_725);
    double _727 = a(_726);
    rgba _728 = { b, _714, _724, _727 };
    _686 = _728;
    _jump400:;
    double _729 = _686.r;
    int64_t _730 = 0;
    _730 *= _661.d0;
    _730 += _671;
    _730 *= _661.d1;
    _730 += _670;
    _730 *= _661.d2;
    _730 += _669;
    _661.data[_730] = _729;
    _669++;
    if (_669 < _475.d0)
    goto _jump372;
    _669 = 0;
    _670++;
    if (_670 < _475.d0)
    goto _jump372;
    _670 = 0;
    _671++;
    if (_671 < _663)
    goto _jump372;
    // End body of loop
    _660 = _661;
    goto _jump410;
    _jump364:;
    _a3_double _731;
    // Computing bound for g
    int64_t _732 = 442;
    _731.d0 = _732;
    if (_732 > 0) 
    goto _jump411;
    fail_assertion("non-positive loop bound");
    _jump411:;
    // Computing bound for h
    int64_t _733;
    // Computing bound for g
    _a1_bool _734;
    // Computing bound for g
    _734.d0 = _475.d0;
    if (_475.d0 > 0) 
    goto _jump412;
    fail_assertion("non-positive loop bound");
    _jump412:;
    // Computing total size of heap memory to allocate
    int64_t _735 = 1;
    _735 *= _475.d0;
    _735 *= sizeof(bool);
    _734.data = jpl_alloc(_735);
    int64_t _736 = 0; // g
    _jump413:; // Begin body of loop
    bool _737 = false;
    int64_t _738 = 0;
    _738 *= _734.d0;
    _738 += _736;
    _734.data[_738] = _737;
    _736++;
    if (_736 < _475.d0)
    goto _jump413;
    // End body of loop
    int64_t _739 = 563;
    if (_739 >= 0)
    goto _jump414;
    fail_assertion("negative array index");
    _jump414:;
    if (_739 < _734.d0)
    goto _jump415;
    fail_assertion("index too large");
    _jump415:;
    int64_t _740 = 0;
    _740 *= _734.d0;
    _740 += _739;
    bool _741 = _734.data[_740];
    int64_t _742;
    if (!_741)
    goto _jump416;
    int64_t _743 = 447;
    int64_t _744 = -_743;
    int64_t _745 = -_744;
    _742 = _745;
    goto _jump417;
    _jump416:;
    int64_t _746 = -_578.d0;
    int64_t _747 = -_475.d0;
    int64_t _748 = _746 % _747;
    _742 = _748;
    _jump417:;
    if (_742 > 0) 
    goto _jump418;
    fail_assertion("non-positive loop bound");
    _jump418:;
    _733 = 0;
    int64_t _749 = 0; // g
    _jump419:; // Begin body of loop
    _733 += _578.d0;
    _749++;
    if (_749 < _742)
    goto _jump419;
    // End body of loop
    if (_733 >= 0)
    goto _jump420;
    fail_assertion("negative array index");
    _jump420:;
    if (_733 < _578.d0)
    goto _jump421;
    fail_assertion("index too large");
    _jump421:;
    int64_t _750 = 0;
    _750 *= _578.d0;
    _750 += _733;
    int64_t _751 = _578.data[_750];
    _731.d1 = _751;
    if (_751 > 0) 
    goto _jump422;
    fail_assertion("non-positive loop bound");
    _jump422:;
    // Computing bound for i
    _731.d2 = _475.d0;
    if (_475.d0 > 0) 
    goto _jump423;
    fail_assertion("non-positive loop bound");
    _jump423:;
    // Computing total size of heap memory to allocate
    int64_t _752 = 1;
    _752 *= _732;
    _752 *= _751;
    _752 *= _475.d0;
    _752 *= sizeof(double);
    _731.data = jpl_alloc(_752);
    int64_t _753 = 0; // i
    int64_t _754 = 0; // h
    int64_t _755 = 0; // g
    _jump424:; // Begin body of loop
    double _756;
    // Computing bound for j
    int64_t _757;
    // Computing bound for j
    int64_t _758 = -_578.d0;
    if (_758 > 0) 
    goto _jump425;
    fail_assertion("non-positive loop bound");
    _jump425:;
    _757 = 0;
    int64_t _759 = 0; // j
    _jump426:; // Begin body of loop
    _757 += _753;
    _759++;
    if (_759 < _758)
    goto _jump426;
    // End body of loop
    if (_757 > 0) 
    goto _jump427;
    fail_assertion("non-positive loop bound");
    _jump427:;
    // Computing bound for k
    int64_t _760;
    // Computing bound for j
    if (_753 > 0) 
    goto _jump428;
    fail_assertion("non-positive loop bound");
    _jump428:;
    // Computing bound for k
    int64_t _761 = _753 * _754;
    if (_761 > 0) 
    goto _jump429;
    fail_assertion("non-positive loop bound");
    _jump429:;
    // Computing bound for l
    if (_753 > 0) 
    goto _jump430;
    fail_assertion("non-positive loop bound");
    _jump430:;
    _760 = 0;
    int64_t _762 = 0; // l
    int64_t _763 = 0; // k
    int64_t _764 = 0; // j
    _jump431:; // Begin body of loop
    int64_t _765 = 664;
    _760 += _765;
    _762++;
    if (_762 < _753)
    goto _jump431;
    _762 = 0;
    _763++;
    if (_763 < _761)
    goto _jump431;
    _763 = 0;
    _764++;
    if (_764 < _753)
    goto _jump431;
    // End body of loop
    if (_760 > 0) 
    goto _jump432;
    fail_assertion("non-positive loop bound");
    _jump432:;
    // Computing bound for l
    int64_t _766;
    // Computing bound for j
    int64_t _767 = 781;
    if (_767 > 0) 
    goto _jump433;
    fail_assertion("non-positive loop bound");
    _jump433:;
    // Computing bound for k
    int64_t _768;
    // Computing bound for j
    if (_754 > 0) 
    goto _jump434;
    fail_assertion("non-positive loop bound");
    _jump434:;
    _768 = 0;
    int64_t _769 = 0; // j
    _jump435:; // Begin body of loop
    _768 += _769;
    _769++;
    if (_769 < _754)
    goto _jump435;
    // End body of loop
    if (_768 > 0) 
    goto _jump436;
    fail_assertion("non-positive loop bound");
    _jump436:;
    // Computing bound for l
    bool _770 = true;
    int64_t _771;
    if (!_770)
    goto _jump437;
    _771 = _475.d0;
    goto _jump438;
    _jump437:;
    _771 = _754;
    _jump438:;
    if (_771 > 0) 
    goto _jump439;
    fail_assertion("non-positive loop bound");
    _jump439:;
    _766 = 0;
    int64_t _772 = 0; // l
    int64_t _773 = 0; // k
    int64_t _774 = 0; // j
    _jump440:; // Begin body of loop
    _766 += _753;
    _772++;
    if (_772 < _771)
    goto _jump440;
    _772 = 0;
    _773++;
    if (_773 < _768)
    goto _jump440;
    _773 = 0;
    _774++;
    if (_774 < _767)
    goto _jump440;
    // End body of loop
    if (_766 > 0) 
    goto _jump441;
    fail_assertion("non-positive loop bound");
    _jump441:;
    _756 = 0;
    int64_t _775 = 0; // l
    int64_t _776 = 0; // k
    int64_t _777 = 0; // j
    _jump442:; // Begin body of loop
    double _778 = -b;
    _756 += _778;
    _775++;
    if (_775 < _766)
    goto _jump442;
    _775 = 0;
    _776++;
    if (_776 < _760)
    goto _jump442;
    _776 = 0;
    _777++;
    if (_777 < _757)
    goto _jump442;
    // End body of loop
    double _779;
    // Computing bound for j
    if (_578.d0 > 0) 
    goto _jump443;
    fail_assertion("non-positive loop bound");
    _jump443:;
    // Computing bound for k
    if (_753 > 0) 
    goto _jump444;
    fail_assertion("non-positive loop bound");
    _jump444:;
    // Computing bound for l
    if (_578.d0 > 0) 
    goto _jump445;
    fail_assertion("non-positive loop bound");
    _jump445:;
    _779 = 0;
    int64_t _780 = 0; // l
    int64_t _781 = 0; // k
    int64_t _782 = 0; // j
    _jump446:; // Begin body of loop
    _779 += b;
    _780++;
    if (_780 < _578.d0)
    goto _jump446;
    _780 = 0;
    _781++;
    if (_781 < _753)
    goto _jump446;
    _781 = 0;
    _782++;
    if (_782 < _578.d0)
    goto _jump446;
    // End body of loop
    bool _783 = _754 == _755;
    double _784;
    if (!_783)
    goto _jump447;
    double _785 = a(b);
    _784 = _785;
    goto _jump448;
    _jump447:;
    double _786 = 42.0;
    _784 = _786;
    _jump448:;
    double _787 = _779 / _784;
    double _788 = _756 / _787;
    double _789 = a(_788);
    int64_t _790 = 0;
    _790 *= _731.d0;
    _790 += _755;
    _790 *= _731.d1;
    _790 += _754;
    _790 *= _731.d2;
    _790 += _753;
    _731.data[_790] = _789;
    _753++;
    if (_753 < _475.d0)
    goto _jump424;
    _753 = 0;
    _754++;
    if (_754 < _751)
    goto _jump424;
    _754 = 0;
    _755++;
    if (_755 < _732)
    goto _jump424;
    // End body of loop
    _660 = _731;
    _jump410:;
    bool _793 = true;
    bool _792 = _793;
    if (0 != _793)
    goto _jump449;
    bool _794 = false;
    _792 = _794;
    _jump449:;
    bool _791 = _792;
    if (0 != _792)
    goto _jump450;
    _a3_bool _795;
    // Computing bound for k
    _795.d0 = _660.d0;
    if (_660.d0 > 0) 
    goto _jump451;
    fail_assertion("non-positive loop bound");
    _jump451:;
    // Computing bound for l
    int64_t _796 = 182;
    int64_t _797 = _796 - _660.d0;
    int64_t _798 = 1;
    int64_t _799 = _797 % _798;
    int64_t _800;
    // Computing bound for k
    if (_578.d0 > 0) 
    goto _jump452;
    fail_assertion("non-positive loop bound");
    _jump452:;
    // Computing bound for l
    int64_t _801 = 138;
    if (_801 > 0) 
    goto _jump453;
    fail_assertion("non-positive loop bound");
    _jump453:;
    _800 = 0;
    int64_t _802 = 0; // l
    int64_t _803 = 0; // k
    _jump454:; // Begin body of loop
    int64_t _804 = 402;
    _800 += _804;
    _802++;
    if (_802 < _801)
    goto _jump454;
    _802 = 0;
    _803++;
    if (_803 < _578.d0)
    goto _jump454;
    // End body of loop
    int64_t _805 = _800 - _660.d0;
    int64_t _806 = -_805;
    int64_t _807 = _799 / _806;
    _795.d1 = _807;
    if (_807 > 0) 
    goto _jump455;
    fail_assertion("non-positive loop bound");
    _jump455:;
    // Computing bound for m
    _a2_int64_t _808;
    // Computing bound for k
    _808.d0 = _578.d0;
    if (_578.d0 > 0) 
    goto _jump456;
    fail_assertion("non-positive loop bound");
    _jump456:;
    // Computing bound for l
    _808.d1 = _660.d2;
    if (_660.d2 > 0) 
    goto _jump457;
    fail_assertion("non-positive loop bound");
    _jump457:;
    // Computing total size of heap memory to allocate
    int64_t _809 = 1;
    _809 *= _578.d0;
    _809 *= _660.d2;
    _809 *= sizeof(int64_t);
    _808.data = jpl_alloc(_809);
    int64_t _810 = 0; // l
    int64_t _811 = 0; // k
    _jump458:; // Begin body of loop
    int64_t _812 = 0;
    _812 *= _808.d0;
    _812 += _811;
    _812 *= _808.d1;
    _812 += _810;
    _808.data[_812] = _660.d0;
    _810++;
    if (_810 < _660.d2)
    goto _jump458;
    _810 = 0;
    _811++;
    if (_811 < _578.d0)
    goto _jump458;
    // End body of loop
    int64_t _813 = _660.d0 + _660.d1;
    if (_813 >= 0)
    goto _jump459;
    fail_assertion("negative array index");
    _jump459:;
    if (_813 < _808.d0)
    goto _jump460;
    fail_assertion("index too large");
    _jump460:;
    if (_660.d1 >= 0)
    goto _jump461;
    fail_assertion("negative array index");
    _jump461:;
    if (_660.d1 < _808.d1)
    goto _jump462;
    fail_assertion("index too large");
    _jump462:;
    int64_t _814 = 0;
    _814 *= _808.d0;
    _814 += _813;
    _814 *= _808.d1;
    _814 += _660.d1;
    int64_t _815 = _808.data[_814];
    _795.d2 = _815;
    if (_815 > 0) 
    goto _jump463;
    fail_assertion("non-positive loop bound");
    _jump463:;
    // Computing total size of heap memory to allocate
    int64_t _816 = 1;
    _816 *= _660.d0;
    _816 *= _807;
    _816 *= _815;
    _816 *= sizeof(bool);
    _795.data = jpl_alloc(_816);
    int64_t _817 = 0; // m
    int64_t _818 = 0; // l
    int64_t _819 = 0; // k
    _jump464:; // Begin body of loop
    bool _820 = _660.d1 == _660.d2;
    bool _821 = !_820;
    bool _822;
    if (!_821)
    goto _jump465;
    if (_578.d0 >= 0)
    goto _jump466;
    fail_assertion("negative array index");
    _jump466:;
    if (_578.d0 < _660.d0)
    goto _jump467;
    fail_assertion("index too large");
    _jump467:;
    if (_660.d2 >= 0)
    goto _jump468;
    fail_assertion("negative array index");
    _jump468:;
    if (_660.d2 < _660.d1)
    goto _jump469;
    fail_assertion("index too large");
    _jump469:;
    if (_660.d1 >= 0)
    goto _jump470;
    fail_assertion("negative array index");
    _jump470:;
    if (_660.d1 < _660.d2)
    goto _jump471;
    fail_assertion("index too large");
    _jump471:;
    int64_t _823 = 0;
    _823 *= _660.d0;
    _823 += _578.d0;
    _823 *= _660.d1;
    _823 += _660.d2;
    _823 *= _660.d2;
    _823 += _660.d1;
    double _824 = _660.data[_823];
    double _825 = -b;
    bool _826 = _824 < _825;
    _822 = _826;
    goto _jump472;
    _jump465:;
    bool _827 = true;
    _822 = _827;
    _jump472:;
    bool _828 = _818 != _660.d0;
    bool _829 = _822 != _828;
    int64_t _830 = 0;
    _830 *= _795.d0;
    _830 += _819;
    _830 *= _795.d1;
    _830 += _818;
    _830 *= _795.d2;
    _830 += _817;
    _795.data[_830] = _829;
    _817++;
    if (_817 < _815)
    goto _jump464;
    _817 = 0;
    _818++;
    if (_818 < _807)
    goto _jump464;
    _818 = 0;
    _819++;
    if (_819 < _660.d0)
    goto _jump464;
    // End body of loop
    if (_660.d2 >= 0)
    goto _jump473;
    fail_assertion("negative array index");
    _jump473:;
    if (_660.d2 < _795.d0)
    goto _jump474;
    fail_assertion("index too large");
    _jump474:;
    if (_475.d0 >= 0)
    goto _jump475;
    fail_assertion("negative array index");
    _jump475:;
    if (_475.d0 < _795.d1)
    goto _jump476;
    fail_assertion("index too large");
    _jump476:;
    if (_578.d0 >= 0)
    goto _jump477;
    fail_assertion("negative array index");
    _jump477:;
    if (_578.d0 < _795.d2)
    goto _jump478;
    fail_assertion("index too large");
    _jump478:;
    int64_t _831 = 0;
    _831 *= _795.d0;
    _831 += _660.d2;
    _831 *= _795.d1;
    _831 += _475.d0;
    _831 *= _795.d2;
    _831 += _578.d0;
    bool _832 = _795.data[_831];
    _791 = _832;
    _jump450:;
    if (0 != _791)
    goto _jump479;
    fail_assertion("k");
    _jump479:;
    bool _833 = false;
    _a3_rgba _834;
    if (!_833)
    goto _jump480;
    _a3_rgba _835;
    // Computing bound for k
    _835.d0 = _578.d0;
    if (_578.d0 > 0) 
    goto _jump481;
    fail_assertion("non-positive loop bound");
    _jump481:;
    // Computing bound for l
    bool _836 = true;
    bool _837 = true;
    bool _838 = _836 != _837;
    bool _840 = false;
    bool _839 = _840;
    if (0 == _840)
    goto _jump482;
    bool _841 = false;
    _839 = _841;
    _jump482:;
    bool _842 = _838 != _839;
    int64_t _843;
    if (!_842)
    goto _jump483;
    int64_t _844;
    // Computing bound for k
    if (_660.d2 > 0) 
    goto _jump484;
    fail_assertion("non-positive loop bound");
    _jump484:;
    _844 = 0;
    int64_t _845 = 0; // k
    _jump485:; // Begin body of loop
    int64_t _846 = _475.d0 + _475.d0;
    _844 += _846;
    _845++;
    if (_845 < _660.d2)
    goto _jump485;
    // End body of loop
    _843 = _844;
    goto _jump486;
    _jump483:;
    _a2_int64_t _847;
    // Computing bound for k
    _847.d0 = _660.d2;
    if (_660.d2 > 0) 
    goto _jump487;
    fail_assertion("non-positive loop bound");
    _jump487:;
    // Computing bound for l
    _847.d1 = _660.d2;
    if (_660.d2 > 0) 
    goto _jump488;
    fail_assertion("non-positive loop bound");
    _jump488:;
    // Computing total size of heap memory to allocate
    int64_t _848 = 1;
    _848 *= _660.d2;
    _848 *= _660.d2;
    _848 *= sizeof(int64_t);
    _847.data = jpl_alloc(_848);
    int64_t _849 = 0; // l
    int64_t _850 = 0; // k
    _jump489:; // Begin body of loop
    int64_t _851 = 0;
    _851 *= _847.d0;
    _851 += _850;
    _851 *= _847.d1;
    _851 += _849;
    _847.data[_851] = _475.d0;
    _849++;
    if (_849 < _660.d2)
    goto _jump489;
    _849 = 0;
    _850++;
    if (_850 < _660.d2)
    goto _jump489;
    // End body of loop
    int64_t _852 = 794;
    if (_852 >= 0)
    goto _jump490;
    fail_assertion("negative array index");
    _jump490:;
    if (_852 < _847.d0)
    goto _jump491;
    fail_assertion("index too large");
    _jump491:;
    if (_578.d0 >= 0)
    goto _jump492;
    fail_assertion("negative array index");
    _jump492:;
    if (_578.d0 < _847.d1)
    goto _jump493;
    fail_assertion("index too large");
    _jump493:;
    int64_t _853 = 0;
    _853 *= _847.d0;
    _853 += _852;
    _853 *= _847.d1;
    _853 += _578.d0;
    int64_t _854 = _847.data[_853];
    _843 = _854;
    _jump486:;
    _835.d1 = _843;
    if (_843 > 0) 
    goto _jump494;
    fail_assertion("non-positive loop bound");
    _jump494:;
    // Computing bound for m
    bool _855 = true;
    int64_t _856;
    if (!_855)
    goto _jump495;
    int64_t _857 = -_660.d1;
    _856 = _857;
    goto _jump496;
    _jump495:;
    _856 = _578.d0;
    _jump496:;
    int64_t _858 = -_856;
    _835.d2 = _858;
    if (_858 > 0) 
    goto _jump497;
    fail_assertion("non-positive loop bound");
    _jump497:;
    // Computing total size of heap memory to allocate
    int64_t _859 = 1;
    _859 *= _578.d0;
    _859 *= _843;
    _859 *= _858;
    _859 *= sizeof(rgba);
    _835.data = jpl_alloc(_859);
    int64_t _860 = 0; // m
    int64_t _861 = 0; // l
    int64_t _862 = 0; // k
    _jump498:; // Begin body of loop
    double _863 = 50.0;
    bool _864 = _863 > b;
    double _865;
    if (!_864)
    goto _jump499;
    _865 = b;
    goto _jump500;
    _jump499:;
    double _866 = 94.0;
    double _867 = a(_866);
    _865 = _867;
    _jump500:;
    double _868 = 25.0;
    double _869 = -_868;
    double _870 = a(b);
    double _871 = _869 / _870;
    double _872 = 22.0;
    double _873 = a(b);
    rgba _874 = { _865, _871, _872, _873 };
    int64_t _875 = 0;
    _875 *= _835.d0;
    _875 += _862;
    _875 *= _835.d1;
    _875 += _861;
    _875 *= _835.d2;
    _875 += _860;
    _835.data[_875] = _874;
    _860++;
    if (_860 < _858)
    goto _jump498;
    _860 = 0;
    _861++;
    if (_861 < _843)
    goto _jump498;
    _861 = 0;
    _862++;
    if (_862 < _578.d0)
    goto _jump498;
    // End body of loop
    _834 = _835;
    goto _jump501;
    _jump480:;
    _a3_rgba _876;
    // Computing bound for k
    _876.d0 = _660.d0;
    if (_660.d0 > 0) 
    goto _jump502;
    fail_assertion("non-positive loop bound");
    _jump502:;
    // Computing bound for l
    _876.d1 = _660.d1;
    if (_660.d1 > 0) 
    goto _jump503;
    fail_assertion("non-positive loop bound");
    _jump503:;
    // Computing bound for m
    _876.d2 = _475.d0;
    if (_475.d0 > 0) 
    goto _jump504;
    fail_assertion("non-positive loop bound");
    _jump504:;
    // Computing total size of heap memory to allocate
    int64_t _877 = 1;
    _877 *= _660.d0;
    _877 *= _660.d1;
    _877 *= _475.d0;
    _877 *= sizeof(rgba);
    _876.data = jpl_alloc(_877);
    int64_t _878 = 0; // m
    int64_t _879 = 0; // l
    int64_t _880 = 0; // k
    _jump505:; // Begin body of loop
    double _881 = 0.0;
    double _882 = _881 + b;
    double _883 = b / _882;
    double _884 = 69.0;
    double _885;
    // Computing bound for n
    if (_880 > 0) 
    goto _jump506;
    fail_assertion("non-positive loop bound");
    _jump506:;
    _885 = 0;
    int64_t _886 = 0; // n
    _jump507:; // Begin body of loop
    _885 += b;
    _886++;
    if (_886 < _880)
    goto _jump507;
    // End body of loop
    double _887 = a(_885);
    rgba _888 = { _883, _884, b, _887 };
    int64_t _889 = 0;
    _889 *= _876.d0;
    _889 += _880;
    _889 *= _876.d1;
    _889 += _879;
    _889 *= _876.d2;
    _889 += _878;
    _876.data[_889] = _888;
    _878++;
    if (_878 < _475.d0)
    goto _jump505;
    _878 = 0;
    _879++;
    if (_879 < _660.d1)
    goto _jump505;
    _879 = 0;
    _880++;
    if (_880 < _660.d0)
    goto _jump505;
    // End body of loop
    _834 = _876;
    _jump501:;
    int64_t _890 = 719;
    if (_660.d2 >= 0)
    goto _jump508;
    fail_assertion("negative array index");
    _jump508:;
    if (_660.d2 < _834.d0)
    goto _jump509;
    fail_assertion("index too large");
    _jump509:;
    if (_660.d1 >= 0)
    goto _jump510;
    fail_assertion("negative array index");
    _jump510:;
    if (_660.d1 < _834.d1)
    goto _jump511;
    fail_assertion("index too large");
    _jump511:;
    if (_890 >= 0)
    goto _jump512;
    fail_assertion("negative array index");
    _jump512:;
    if (_890 < _834.d2)
    goto _jump513;
    fail_assertion("index too large");
    _jump513:;
    int64_t _891 = 0;
    _891 *= _834.d0;
    _891 += _660.d2;
    _891 *= _834.d1;
    _891 += _660.d1;
    _891 *= _834.d2;
    _891 += _890;
    rgba _892 = _834.data[_891];
    double _893 = _892.b;
    return _893;
    double _894;
    // Computing bound for l
    if (_475.d0 > 0) 
    goto _jump514;
    fail_assertion("non-positive loop bound");
    _jump514:;
    _894 = 0;
    int64_t _895 = 0; // l
    _jump515:; // Begin body of loop
    _894 += b;
    _895++;
    if (_895 < _475.d0)
    goto _jump515;
    // End body of loop
    return _894;
}

bool c(_a1__a2_int64_t d) {
    bool _0 = false;
    return _0;
    _a1__a2_int64_t _1;
    // Computing bound for f
    int64_t _2 = 972;
    _1.d0 = _2;
    if (_2 > 0) 
    goto _jump604;
    fail_assertion("non-positive loop bound");
    _jump604:;
    // Computing total size of heap memory to allocate
    int64_t _3 = 1;
    _3 *= _2;
    _3 *= sizeof(_a2_int64_t);
    _1.data = jpl_alloc(_3);
    int64_t _4 = 0; // f
    _jump605:; // Begin body of loop
    int64_t _5 = -_4;
    if (_5 >= 0)
    goto _jump606;
    fail_assertion("negative array index");
    _jump606:;
    if (_5 < d.d0)
    goto _jump607;
    fail_assertion("index too large");
    _jump607:;
    int64_t _6 = 0;
    _6 *= d.d0;
    _6 += _5;
    _a2_int64_t _7 = d.data[_6];
    int64_t _8 = 0;
    _8 *= _1.d0;
    _8 += _4;
    _1.data[_8] = _7;
    _4++;
    if (_4 < _2)
    goto _jump605;
    // End body of loop
    bool _9 = c(_1);
    _a1_bool _10;
    _10.d0 = 1;
    _10.data = jpl_alloc(sizeof(bool) * 1);
    _10.data[0] = _9;
    double _11;
    // Computing bound for j
    int64_t _12 = 259;
    if (_12 > 0) 
    goto _jump608;
    fail_assertion("non-positive loop bound");
    _jump608:;
    // Computing bound for k
    int64_t _13;
    // Computing bound for j
    int64_t _14 = 351;
    if (_14 > 0) 
    goto _jump609;
    fail_assertion("non-positive loop bound");
    _jump609:;
    // Computing bound for k
    int64_t _15 = 659;
    if (_15 > 0) 
    goto _jump610;
    fail_assertion("non-positive loop bound");
    _jump610:;
    _13 = 0;
    int64_t _16 = 0; // k
    int64_t _17 = 0; // j
    _jump611:; // Begin body of loop
    int64_t _18;
    // Computing bound for l
    bool _20 = false;
    bool _19 = _20;
    if (0 != _20)
    goto _jump612;
    bool _21 = true;
    _19 = _21;
    _jump612:;
    _a2_int64_t _22;
    if (!_19)
    goto _jump613;
    if (_17 >= 0)
    goto _jump614;
    fail_assertion("negative array index");
    _jump614:;
    if (_17 < d.d0)
    goto _jump615;
    fail_assertion("index too large");
    _jump615:;
    int64_t _23 = 0;
    _23 *= d.d0;
    _23 += _17;
    _a2_int64_t _24 = d.data[_23];
    _22 = _24;
    goto _jump616;
    _jump613:;
    _a2_int64_t _25;
    // Computing bound for l
    _25.d0 = _10.d0;
    if (_10.d0 > 0) 
    goto _jump617;
    fail_assertion("non-positive loop bound");
    _jump617:;
    // Computing bound for m
    _25.d1 = _10.d0;
    if (_10.d0 > 0) 
    goto _jump618;
    fail_assertion("non-positive loop bound");
    _jump618:;
    // Computing total size of heap memory to allocate
    int64_t _26 = 1;
    _26 *= _10.d0;
    _26 *= _10.d0;
    _26 *= sizeof(int64_t);
    _25.data = jpl_alloc(_26);
    int64_t _27 = 0; // m
    int64_t _28 = 0; // l
    _jump619:; // Begin body of loop
    int64_t _29 = 0;
    _29 *= _25.d0;
    _29 += _28;
    _29 *= _25.d1;
    _29 += _27;
    _25.data[_29] = _10.d0;
    _27++;
    if (_27 < _10.d0)
    goto _jump619;
    _27 = 0;
    _28++;
    if (_28 < _10.d0)
    goto _jump619;
    // End body of loop
    _22 = _25;
    _jump616:;
    if (_16 >= 0)
    goto _jump620;
    fail_assertion("negative array index");
    _jump620:;
    if (_16 < _22.d0)
    goto _jump621;
    fail_assertion("index too large");
    _jump621:;
    if (_10.d0 >= 0)
    goto _jump622;
    fail_assertion("negative array index");
    _jump622:;
    if (_10.d0 < _22.d1)
    goto _jump623;
    fail_assertion("index too large");
    _jump623:;
    int64_t _30 = 0;
    _30 *= _22.d0;
    _30 += _16;
    _30 *= _22.d1;
    _30 += _10.d0;
    int64_t _31 = _22.data[_30];
    if (_31 > 0) 
    goto _jump624;
    fail_assertion("non-positive loop bound");
    _jump624:;
    // Computing bound for m
    if (_17 > 0) 
    goto _jump625;
    fail_assertion("non-positive loop bound");
    _jump625:;
    _18 = 0;
    int64_t _32 = 0; // m
    int64_t _33 = 0; // l
    _jump626:; // Begin body of loop
    int64_t _34;
    // Computing bound for n
    if (_33 > 0) 
    goto _jump627;
    fail_assertion("non-positive loop bound");
    _jump627:;
    _34 = 0;
    int64_t _35 = 0; // n
    _jump628:; // Begin body of loop
    int64_t _36 = -_16;
    int64_t _37 = d.d0 + _36;
    _34 += _37;
    _35++;
    if (_35 < _33)
    goto _jump628;
    // End body of loop
    _18 += _34;
    _32++;
    if (_32 < _17)
    goto _jump626;
    _32 = 0;
    _33++;
    if (_33 < _31)
    goto _jump626;
    // End body of loop
    _13 += _18;
    _16++;
    if (_16 < _15)
    goto _jump611;
    _16 = 0;
    _17++;
    if (_17 < _14)
    goto _jump611;
    // End body of loop
    if (_13 > 0) 
    goto _jump629;
    fail_assertion("non-positive loop bound");
    _jump629:;
    // Computing bound for l
    if (d.d0 > 0) 
    goto _jump630;
    fail_assertion("non-positive loop bound");
    _jump630:;
    _11 = 0;
    int64_t _38 = 0; // l
    int64_t _39 = 0; // k
    int64_t _40 = 0; // j
    _jump631:; // Begin body of loop
    double _41 = fmod(b, b);
    double _42 = 42.0;
    double _43;
    // Computing bound for m
    if (_38 > 0) 
    goto _jump632;
    fail_assertion("non-positive loop bound");
    _jump632:;
    // Computing bound for n
    if (d.d0 > 0) 
    goto _jump633;
    fail_assertion("non-positive loop bound");
    _jump633:;
    // Computing bound for o
    if (d.d0 > 0) 
    goto _jump634;
    fail_assertion("non-positive loop bound");
    _jump634:;
    _43 = 0;
    int64_t _44 = 0; // o
    int64_t _45 = 0; // n
    int64_t _46 = 0; // m
    _jump635:; // Begin body of loop
    double _47 = 45.0;
    _43 += _47;
    _44++;
    if (_44 < d.d0)
    goto _jump635;
    _44 = 0;
    _45++;
    if (_45 < d.d0)
    goto _jump635;
    _45 = 0;
    _46++;
    if (_46 < _38)
    goto _jump635;
    // End body of loop
    rgba _48 = { _41, _42, b, _43 };
    double _49 = _48.a;
    double _50 = 85.0;
    double _51 = -_50;
    double _52 = fmod(b, _51);
    double _53 = 4.0;
    double _54 = a(_53);
    double _55 = -_54;
    double _56 = -_55;
    rgba _57 = { _49, b, _52, _56 };
    double _58 = _57.r;
    _11 += _58;
    _38++;
    if (_38 < d.d0)
    goto _jump631;
    _38 = 0;
    _39++;
    if (_39 < _13)
    goto _jump631;
    _39 = 0;
    _40++;
    if (_40 < _12)
    goto _jump631;
    // End body of loop
    bool _59 = _11 != b;
    if (0 != _59)
    goto _jump636;
    fail_assertion("j");
    _jump636:;
    bool _60 = true;
    return _60;
    bool _62 = false;
    bool _61 = _62;
    if (0 != _62)
    goto _jump637;
    bool _64 = true;
    bool _63 = _64;
    if (0 != _64)
    goto _jump638;
    bool _65 = false;
    _63 = _65;
    _jump638:;
    _61 = _63;
    _jump637:;
    _a3_bool _66;
    if (!_61)
    goto _jump639;
    _a3_bool _67;
    // Computing bound for j
    _67.d0 = _10.d0;
    if (_10.d0 > 0) 
    goto _jump640;
    fail_assertion("non-positive loop bound");
    _jump640:;
    // Computing bound for k
    bool _68 = true;
    int64_t _69;
    if (!_68)
    goto _jump641;
    _69 = d.d0;
    goto _jump642;
    _jump641:;
    int64_t _70 = 323;
    _69 = _70;
    _jump642:;
    _67.d1 = _69;
    if (_69 > 0) 
    goto _jump643;
    fail_assertion("non-positive loop bound");
    _jump643:;
    // Computing bound for l
    _67.d2 = _10.d0;
    if (_10.d0 > 0) 
    goto _jump644;
    fail_assertion("non-positive loop bound");
    _jump644:;
    // Computing total size of heap memory to allocate
    int64_t _71 = 1;
    _71 *= _10.d0;
    _71 *= _69;
    _71 *= _10.d0;
    _71 *= sizeof(bool);
    _67.data = jpl_alloc(_71);
    int64_t _72 = 0; // l
    int64_t _73 = 0; // k
    int64_t _74 = 0; // j
    _jump645:; // Begin body of loop
    bool _75 = c(d);
    int64_t _76 = 0;
    _76 *= _67.d0;
    _76 += _74;
    _76 *= _67.d1;
    _76 += _73;
    _76 *= _67.d2;
    _76 += _72;
    _67.data[_76] = _75;
    _72++;
    if (_72 < _10.d0)
    goto _jump645;
    _72 = 0;
    _73++;
    if (_73 < _69)
    goto _jump645;
    _73 = 0;
    _74++;
    if (_74 < _10.d0)
    goto _jump645;
    // End body of loop
    _66 = _67;
    goto _jump646;
    _jump639:;
    _a3_bool _77;
    // Computing bound for j
    int64_t _78;
    // Computing bound for j
    if (d.d0 > 0) 
    goto _jump647;
    fail_assertion("non-positive loop bound");
    _jump647:;
    _78 = 0;
    int64_t _79 = 0; // j
    _jump648:; // Begin body of loop
    _78 += _79;
    _79++;
    if (_79 < d.d0)
    goto _jump648;
    // End body of loop
    _77.d0 = _78;
    if (_78 > 0) 
    goto _jump649;
    fail_assertion("non-positive loop bound");
    _jump649:;
    // Computing bound for k
    _77.d1 = d.d0;
    if (d.d0 > 0) 
    goto _jump650;
    fail_assertion("non-positive loop bound");
    _jump650:;
    // Computing bound for l
    _77.d2 = _10.d0;
    if (_10.d0 > 0) 
    goto _jump651;
    fail_assertion("non-positive loop bound");
    _jump651:;
    // Computing total size of heap memory to allocate
    int64_t _80 = 1;
    _80 *= _78;
    _80 *= d.d0;
    _80 *= _10.d0;
    _80 *= sizeof(bool);
    _77.data = jpl_alloc(_80);
    int64_t _81 = 0; // l
    int64_t _82 = 0; // k
    int64_t _83 = 0; // j
    _jump652:; // Begin body of loop
    bool _84 = c(d);
    int64_t _85 = 0;
    _85 *= _77.d0;
    _85 += _83;
    _85 *= _77.d1;
    _85 += _82;
    _85 *= _77.d2;
    _85 += _81;
    _77.data[_85] = _84;
    _81++;
    if (_81 < _10.d0)
    goto _jump652;
    _81 = 0;
    _82++;
    if (_82 < d.d0)
    goto _jump652;
    _82 = 0;
    _83++;
    if (_83 < _78)
    goto _jump652;
    // End body of loop
    _66 = _77;
    _jump646:;
    int64_t _86 = -_10.d0;
    int64_t _87 = -_10.d0;
    int64_t _88 = _86 / _87;
    int64_t _89;
    // Computing bound for j
    int64_t _90 = 46;
    if (_90 > 0) 
    goto _jump653;
    fail_assertion("non-positive loop bound");
    _jump653:;
    _89 = 0;
    int64_t _91 = 0; // j
    _jump654:; // Begin body of loop
    int64_t _92 = 621;
    _89 += _92;
    _91++;
    if (_91 < _90)
    goto _jump654;
    // End body of loop
    if (_10.d0 >= 0)
    goto _jump655;
    fail_assertion("negative array index");
    _jump655:;
    if (_10.d0 < _66.d0)
    goto _jump656;
    fail_assertion("index too large");
    _jump656:;
    if (_88 >= 0)
    goto _jump657;
    fail_assertion("negative array index");
    _jump657:;
    if (_88 < _66.d1)
    goto _jump658;
    fail_assertion("index too large");
    _jump658:;
    if (_89 >= 0)
    goto _jump659;
    fail_assertion("negative array index");
    _jump659:;
    if (_89 < _66.d2)
    goto _jump660;
    fail_assertion("index too large");
    _jump660:;
    int64_t _93 = 0;
    _93 *= _66.d0;
    _93 += _10.d0;
    _93 *= _66.d1;
    _93 += _88;
    _93 *= _66.d2;
    _93 += _89;
    bool _94 = _66.data[_93];
    bool _95 = !_94;
    _a3_bool _96;
    if (!_95)
    goto _jump661;
    if (_10.d0 >= 0)
    goto _jump662;
    fail_assertion("negative array index");
    _jump662:;
    if (_10.d0 < _10.d0)
    goto _jump663;
    fail_assertion("index too large");
    _jump663:;
    int64_t _97 = 0;
    _97 *= _10.d0;
    _97 += _10.d0;
    bool _98 = _10.data[_97];
    _a3_bool _99;
    if (!_98)
    goto _jump664;
    _a3_bool _100;
    // Computing bound for j
    int64_t _101 = 530;
    _100.d0 = _101;
    if (_101 > 0) 
    goto _jump665;
    fail_assertion("non-positive loop bound");
    _jump665:;
    // Computing bound for k
    bool _102 = false;
    int64_t _103;
    if (!_102)
    goto _jump666;
    _103 = _10.d0;
    goto _jump667;
    _jump666:;
    _103 = _10.d0;
    _jump667:;
    _100.d1 = _103;
    if (_103 > 0) 
    goto _jump668;
    fail_assertion("non-positive loop bound");
    _jump668:;
    // Computing bound for l
    int64_t _104;
    // Computing bound for j
    if (_10.d0 > 0) 
    goto _jump669;
    fail_assertion("non-positive loop bound");
    _jump669:;
    // Computing bound for k
    if (_10.d0 > 0) 
    goto _jump670;
    fail_assertion("non-positive loop bound");
    _jump670:;
    _104 = 0;
    int64_t _105 = 0; // k
    int64_t _106 = 0; // j
    _jump671:; // Begin body of loop
    int64_t _107 = 545;
    _104 += _107;
    _105++;
    if (_105 < _10.d0)
    goto _jump671;
    _105 = 0;
    _106++;
    if (_106 < _10.d0)
    goto _jump671;
    // End body of loop
    _100.d2 = _104;
    if (_104 > 0) 
    goto _jump672;
    fail_assertion("non-positive loop bound");
    _jump672:;
    // Computing total size of heap memory to allocate
    int64_t _108 = 1;
    _108 *= _101;
    _108 *= _103;
    _108 *= _104;
    _108 *= sizeof(bool);
    _100.data = jpl_alloc(_108);
    int64_t _109 = 0; // l
    int64_t _110 = 0; // k
    int64_t _111 = 0; // j
    _jump673:; // Begin body of loop
    bool _112 = c(d);
    int64_t _113 = 0;
    _113 *= _100.d0;
    _113 += _111;
    _113 *= _100.d1;
    _113 += _110;
    _113 *= _100.d2;
    _113 += _109;
    _100.data[_113] = _112;
    _109++;
    if (_109 < _104)
    goto _jump673;
    _109 = 0;
    _110++;
    if (_110 < _103)
    goto _jump673;
    _110 = 0;
    _111++;
    if (_111 < _101)
    goto _jump673;
    // End body of loop
    _a1_int64_t _114;
    _114.d0 = 1;
    _114.data = jpl_alloc(sizeof(int64_t) * 1);
    _114.data[0] = _10.d0;
    int64_t _115;
    // Computing bound for j
    if (d.d0 > 0) 
    goto _jump674;
    fail_assertion("non-positive loop bound");
    _jump674:;
    // Computing bound for k
    if (_10.d0 > 0) 
    goto _jump675;
    fail_assertion("non-positive loop bound");
    _jump675:;
    _115 = 0;
    int64_t _116 = 0; // k
    int64_t _117 = 0; // j
    _jump676:; // Begin body of loop
    _115 += _117;
    _116++;
    if (_116 < _10.d0)
    goto _jump676;
    _116 = 0;
    _117++;
    if (_117 < d.d0)
    goto _jump676;
    // End body of loop
    if (_115 >= 0)
    goto _jump677;
    fail_assertion("negative array index");
    _jump677:;
    if (_115 < _114.d0)
    goto _jump678;
    fail_assertion("index too large");
    _jump678:;
    int64_t _118 = 0;
    _118 *= _114.d0;
    _118 += _115;
    int64_t _119 = _114.data[_118];
    int64_t _120 = 704;
    int64_t _121 = d.d0 + _120;
    int64_t _122;
    // Computing bound for j
    int64_t _123 = -d.d0;
    if (_123 > 0) 
    goto _jump679;
    fail_assertion("non-positive loop bound");
    _jump679:;
    // Computing bound for k
    if (_10.d0 > 0) 
    goto _jump680;
    fail_assertion("non-positive loop bound");
    _jump680:;
    // Computing bound for l
    int64_t _124 = 260;
    int64_t _125 = d.d0 * _124;
    if (_125 > 0) 
    goto _jump681;
    fail_assertion("non-positive loop bound");
    _jump681:;
    _122 = 0;
    int64_t _126 = 0; // l
    int64_t _127 = 0; // k
    int64_t _128 = 0; // j
    _jump682:; // Begin body of loop
    int64_t _129 = _126 + _126;
    _122 += _129;
    _126++;
    if (_126 < _125)
    goto _jump682;
    _126 = 0;
    _127++;
    if (_127 < _10.d0)
    goto _jump682;
    _127 = 0;
    _128++;
    if (_128 < _123)
    goto _jump682;
    // End body of loop
    if (_119 >= 0)
    goto _jump683;
    fail_assertion("negative array index");
    _jump683:;
    if (_119 < _100.d0)
    goto _jump684;
    fail_assertion("index too large");
    _jump684:;
    if (_121 >= 0)
    goto _jump685;
    fail_assertion("negative array index");
    _jump685:;
    if (_121 < _100.d1)
    goto _jump686;
    fail_assertion("index too large");
    _jump686:;
    if (_122 >= 0)
    goto _jump687;
    fail_assertion("negative array index");
    _jump687:;
    if (_122 < _100.d2)
    goto _jump688;
    fail_assertion("index too large");
    _jump688:;
    int64_t _130 = 0;
    _130 *= _100.d0;
    _130 += _119;
    _130 *= _100.d1;
    _130 += _121;
    _130 *= _100.d2;
    _130 += _122;
    bool _131 = _100.data[_130];
    _a3_bool _132;
    if (!_131)
    goto _jump689;
    double _133 = -b;
    double _134;
    // Computing bound for j
    int64_t _135 = 963;
    if (_135 > 0) 
    goto _jump690;
    fail_assertion("non-positive loop bound");
    _jump690:;
    // Computing bound for k
    if (d.d0 > 0) 
    goto _jump691;
    fail_assertion("non-positive loop bound");
    _jump691:;
    // Computing bound for l
    if (_10.d0 > 0) 
    goto _jump692;
    fail_assertion("non-positive loop bound");
    _jump692:;
    _134 = 0;
    int64_t _136 = 0; // l
    int64_t _137 = 0; // k
    int64_t _138 = 0; // j
    _jump693:; // Begin body of loop
    _134 += b;
    _136++;
    if (_136 < _10.d0)
    goto _jump693;
    _136 = 0;
    _137++;
    if (_137 < d.d0)
    goto _jump693;
    _137 = 0;
    _138++;
    if (_138 < _135)
    goto _jump693;
    // End body of loop
    bool _139 = _133 > _134;
    _a3_bool _140;
    if (!_139)
    goto _jump694;
    _a3_bool _141;
    // Computing bound for j
    _141.d0 = _10.d0;
    if (_10.d0 > 0) 
    goto _jump695;
    fail_assertion("non-positive loop bound");
    _jump695:;
    // Computing bound for k
    int64_t _142;
    // Computing bound for j
    if (_10.d0 > 0) 
    goto _jump696;
    fail_assertion("non-positive loop bound");
    _jump696:;
    _142 = 0;
    int64_t _143 = 0; // j
    _jump697:; // Begin body of loop
    _142 += _10.d0;
    _143++;
    if (_143 < _10.d0)
    goto _jump697;
    // End body of loop
    _141.d1 = _142;
    if (_142 > 0) 
    goto _jump698;
    fail_assertion("non-positive loop bound");
    _jump698:;
    // Computing bound for l
    int64_t _144 = -d.d0;
    _141.d2 = _144;
    if (_144 > 0) 
    goto _jump699;
    fail_assertion("non-positive loop bound");
    _jump699:;
    // Computing total size of heap memory to allocate
    int64_t _145 = 1;
    _145 *= _10.d0;
    _145 *= _142;
    _145 *= _144;
    _145 *= sizeof(bool);
    _141.data = jpl_alloc(_145);
    int64_t _146 = 0; // l
    int64_t _147 = 0; // k
    int64_t _148 = 0; // j
    _jump700:; // Begin body of loop
    if (_10.d0 >= 0)
    goto _jump701;
    fail_assertion("negative array index");
    _jump701:;
    if (_10.d0 < _10.d0)
    goto _jump702;
    fail_assertion("index too large");
    _jump702:;
    int64_t _149 = 0;
    _149 *= _10.d0;
    _149 += _10.d0;
    bool _150 = _10.data[_149];
    int64_t _151 = 0;
    _151 *= _141.d0;
    _151 += _148;
    _151 *= _141.d1;
    _151 += _147;
    _151 *= _141.d2;
    _151 += _146;
    _141.data[_151] = _150;
    _146++;
    if (_146 < _144)
    goto _jump700;
    _146 = 0;
    _147++;
    if (_147 < _142)
    goto _jump700;
    _147 = 0;
    _148++;
    if (_148 < _10.d0)
    goto _jump700;
    // End body of loop
    _140 = _141;
    goto _jump703;
    _jump694:;
    _a3_bool _152;
    // Computing bound for j
    _152.d0 = _10.d0;
    if (_10.d0 > 0) 
    goto _jump704;
    fail_assertion("non-positive loop bound");
    _jump704:;
    // Computing bound for k
    _152.d1 = _10.d0;
    if (_10.d0 > 0) 
    goto _jump705;
    fail_assertion("non-positive loop bound");
    _jump705:;
    // Computing bound for l
    _152.d2 = _10.d0;
    if (_10.d0 > 0) 
    goto _jump706;
    fail_assertion("non-positive loop bound");
    _jump706:;
    // Computing total size of heap memory to allocate
    int64_t _153 = 1;
    _153 *= _10.d0;
    _153 *= _10.d0;
    _153 *= _10.d0;
    _153 *= sizeof(bool);
    _152.data = jpl_alloc(_153);
    int64_t _154 = 0; // l
    int64_t _155 = 0; // k
    int64_t _156 = 0; // j
    _jump707:; // Begin body of loop
    bool _157 = true;
    int64_t _158 = 0;
    _158 *= _152.d0;
    _158 += _156;
    _158 *= _152.d1;
    _158 += _155;
    _158 *= _152.d2;
    _158 += _154;
    _152.data[_158] = _157;
    _154++;
    if (_154 < _10.d0)
    goto _jump707;
    _154 = 0;
    _155++;
    if (_155 < _10.d0)
    goto _jump707;
    _155 = 0;
    _156++;
    if (_156 < _10.d0)
    goto _jump707;
    // End body of loop
    _140 = _152;
    _jump703:;
    _132 = _140;
    goto _jump708;
    _jump689:;
    _a3_bool _159;
    // Computing bound for j
    int64_t _160 = 231;
    int64_t _161 = _160 / d.d0;
    int64_t _162 = _10.d0 * _161;
    _159.d0 = _162;
    if (_162 > 0) 
    goto _jump709;
    fail_assertion("non-positive loop bound");
    _jump709:;
    // Computing bound for k
    int64_t _163;
    // Computing bound for j
    int64_t _164 = 739;
    if (_164 > 0) 
    goto _jump710;
    fail_assertion("non-positive loop bound");
    _jump710:;
    // Computing bound for k
    int64_t _165 = 67;
    int64_t _166 = _165 / _10.d0;
    if (_166 > 0) 
    goto _jump711;
    fail_assertion("non-positive loop bound");
    _jump711:;
    // Computing bound for l
    bool _167 = true;
    int64_t _168;
    if (!_167)
    goto _jump712;
    _168 = _10.d0;
    goto _jump713;
    _jump712:;
    _168 = _10.d0;
    _jump713:;
    if (_168 > 0) 
    goto _jump714;
    fail_assertion("non-positive loop bound");
    _jump714:;
    _163 = 0;
    int64_t _169 = 0; // l
    int64_t _170 = 0; // k
    int64_t _171 = 0; // j
    _jump715:; // Begin body of loop
    int64_t _172 = 623;
    _163 += _172;
    _169++;
    if (_169 < _168)
    goto _jump715;
    _169 = 0;
    _170++;
    if (_170 < _166)
    goto _jump715;
    _170 = 0;
    _171++;
    if (_171 < _164)
    goto _jump715;
    // End body of loop
    _159.d1 = _163;
    if (_163 > 0) 
    goto _jump716;
    fail_assertion("non-positive loop bound");
    _jump716:;
    // Computing bound for l
    _159.d2 = _10.d0;
    if (_10.d0 > 0) 
    goto _jump717;
    fail_assertion("non-positive loop bound");
    _jump717:;
    // Computing total size of heap memory to allocate
    int64_t _173 = 1;
    _173 *= _162;
    _173 *= _163;
    _173 *= _10.d0;
    _173 *= sizeof(bool);
    _159.data = jpl_alloc(_173);
    int64_t _174 = 0; // l
    int64_t _175 = 0; // k
    int64_t _176 = 0; // j
    _jump718:; // Begin body of loop
    int64_t _177 = -_10.d0;
    bool _178 = _174 != _177;
    int64_t _179 = 0;
    _179 *= _159.d0;
    _179 += _176;
    _179 *= _159.d1;
    _179 += _175;
    _179 *= _159.d2;
    _179 += _174;
    _159.data[_179] = _178;
    _174++;
    if (_174 < _10.d0)
    goto _jump718;
    _174 = 0;
    _175++;
    if (_175 < _163)
    goto _jump718;
    _175 = 0;
    _176++;
    if (_176 < _162)
    goto _jump718;
    // End body of loop
    _132 = _159;
    _jump708:;
    _99 = _132;
    goto _jump719;
    _jump664:;
    _a3_bool _180;
    // Computing bound for j
    int64_t _181 = d.d0 + _10.d0;
    _a1_int64_t _182;
    _182.d0 = 1;
    _182.data = jpl_alloc(sizeof(int64_t) * 1);
    _182.data[0] = _181;
    if (d.d0 >= 0)
    goto _jump720;
    fail_assertion("negative array index");
    _jump720:;
    if (d.d0 < _182.d0)
    goto _jump721;
    fail_assertion("index too large");
    _jump721:;
    int64_t _183 = 0;
    _183 *= _182.d0;
    _183 += d.d0;
    int64_t _184 = _182.data[_183];
    _180.d0 = _184;
    if (_184 > 0) 
    goto _jump722;
    fail_assertion("non-positive loop bound");
    _jump722:;
    // Computing bound for k
    int64_t _185 = -_10.d0;
    int64_t _186 = -_185;
    _180.d1 = _186;
    if (_186 > 0) 
    goto _jump723;
    fail_assertion("non-positive loop bound");
    _jump723:;
    // Computing bound for l
    _180.d2 = _10.d0;
    if (_10.d0 > 0) 
    goto _jump724;
    fail_assertion("non-positive loop bound");
    _jump724:;
    // Computing total size of heap memory to allocate
    int64_t _187 = 1;
    _187 *= _184;
    _187 *= _186;
    _187 *= _10.d0;
    _187 *= sizeof(bool);
    _180.data = jpl_alloc(_187);
    int64_t _188 = 0; // l
    int64_t _189 = 0; // k
    int64_t _190 = 0; // j
    _jump725:; // Begin body of loop
    _a3_double _191;
    // Computing bound for m
    _191.d0 = d.d0;
    if (d.d0 > 0) 
    goto _jump726;
    fail_assertion("non-positive loop bound");
    _jump726:;
    // Computing bound for n
    _191.d1 = _189;
    if (_189 > 0) 
    goto _jump727;
    fail_assertion("non-positive loop bound");
    _jump727:;
    // Computing bound for o
    _191.d2 = _189;
    if (_189 > 0) 
    goto _jump728;
    fail_assertion("non-positive loop bound");
    _jump728:;
    // Computing total size of heap memory to allocate
    int64_t _192 = 1;
    _192 *= d.d0;
    _192 *= _189;
    _192 *= _189;
    _192 *= sizeof(double);
    _191.data = jpl_alloc(_192);
    int64_t _193 = 0; // o
    int64_t _194 = 0; // n
    int64_t _195 = 0; // m
    _jump729:; // Begin body of loop
    double _196 = 38.0;
    int64_t _197 = 0;
    _197 *= _191.d0;
    _197 += _195;
    _197 *= _191.d1;
    _197 += _194;
    _197 *= _191.d2;
    _197 += _193;
    _191.data[_197] = _196;
    _193++;
    if (_193 < _189)
    goto _jump729;
    _193 = 0;
    _194++;
    if (_194 < _189)
    goto _jump729;
    _194 = 0;
    _195++;
    if (_195 < d.d0)
    goto _jump729;
    // End body of loop
    int64_t _198 = -_188;
    if (_198 >= 0)
    goto _jump730;
    fail_assertion("negative array index");
    _jump730:;
    if (_198 < _191.d0)
    goto _jump731;
    fail_assertion("index too large");
    _jump731:;
    if (d.d0 >= 0)
    goto _jump732;
    fail_assertion("negative array index");
    _jump732:;
    if (d.d0 < _191.d1)
    goto _jump733;
    fail_assertion("index too large");
    _jump733:;
    if (d.d0 >= 0)
    goto _jump734;
    fail_assertion("negative array index");
    _jump734:;
    if (d.d0 < _191.d2)
    goto _jump735;
    fail_assertion("index too large");
    _jump735:;
    int64_t _199 = 0;
    _199 *= _191.d0;
    _199 += _198;
    _199 *= _191.d1;
    _199 += d.d0;
    _199 *= _191.d2;
    _199 += d.d0;
    double _200 = _191.data[_199];
    double _201;
    // Computing bound for m
    int64_t _202;
    // Computing bound for m
    if (_10.d0 > 0) 
    goto _jump736;
    fail_assertion("non-positive loop bound");
    _jump736:;
    // Computing bound for n
    if (_189 > 0) 
    goto _jump737;
    fail_assertion("non-positive loop bound");
    _jump737:;
    _202 = 0;
    int64_t _203 = 0; // n
    int64_t _204 = 0; // m
    _jump738:; // Begin body of loop
    _202 += _10.d0;
    _203++;
    if (_203 < _189)
    goto _jump738;
    _203 = 0;
    _204++;
    if (_204 < _10.d0)
    goto _jump738;
    // End body of loop
    if (_202 > 0) 
    goto _jump739;
    fail_assertion("non-positive loop bound");
    _jump739:;
    _201 = 0;
    int64_t _205 = 0; // m
    _jump740:; // Begin body of loop
    double _206 = 73.0;
    _201 += _206;
    _205++;
    if (_205 < _202)
    goto _jump740;
    // End body of loop
    bool _207 = _200 == _201;
    int64_t _208 = 0;
    _208 *= _180.d0;
    _208 += _190;
    _208 *= _180.d1;
    _208 += _189;
    _208 *= _180.d2;
    _208 += _188;
    _180.data[_208] = _207;
    _188++;
    if (_188 < _10.d0)
    goto _jump725;
    _188 = 0;
    _189++;
    if (_189 < _186)
    goto _jump725;
    _189 = 0;
    _190++;
    if (_190 < _184)
    goto _jump725;
    // End body of loop
    _99 = _180;
    _jump719:;
    _96 = _99;
    goto _jump741;
    _jump661:;
    _a2__a3_bool _209;
    // Computing bound for j
    int64_t _210 = 30;
    int64_t _211 = 785;
    bool _212 = _210 == _211;
    _a2_int64_t _213;
    if (!_212)
    goto _jump742;
    if (_10.d0 >= 0)
    goto _jump743;
    fail_assertion("negative array index");
    _jump743:;
    if (_10.d0 < d.d0)
    goto _jump744;
    fail_assertion("index too large");
    _jump744:;
    int64_t _214 = 0;
    _214 *= d.d0;
    _214 += _10.d0;
    _a2_int64_t _215 = d.data[_214];
    _213 = _215;
    goto _jump745;
    _jump742:;
    _a2_int64_t _216;
    // Computing bound for j
    int64_t _217 = 89;
    _216.d0 = _217;
    if (_217 > 0) 
    goto _jump746;
    fail_assertion("non-positive loop bound");
    _jump746:;
    // Computing bound for k
    _216.d1 = _10.d0;
    if (_10.d0 > 0) 
    goto _jump747;
    fail_assertion("non-positive loop bound");
    _jump747:;
    // Computing total size of heap memory to allocate
    int64_t _218 = 1;
    _218 *= _217;
    _218 *= _10.d0;
    _218 *= sizeof(int64_t);
    _216.data = jpl_alloc(_218);
    int64_t _219 = 0; // k
    int64_t _220 = 0; // j
    _jump748:; // Begin body of loop
    int64_t _221 = 0;
    _221 *= _216.d0;
    _221 += _220;
    _221 *= _216.d1;
    _221 += _219;
    _216.data[_221] = _10.d0;
    _219++;
    if (_219 < _10.d0)
    goto _jump748;
    _219 = 0;
    _220++;
    if (_220 < _217)
    goto _jump748;
    // End body of loop
    _213 = _216;
    _jump745:;
    int64_t _222 = 428;
    if (_222 >= 0)
    goto _jump749;
    fail_assertion("negative array index");
    _jump749:;
    if (_222 < _213.d0)
    goto _jump750;
    fail_assertion("index too large");
    _jump750:;
    if (d.d0 >= 0)
    goto _jump751;
    fail_assertion("negative array index");
    _jump751:;
    if (d.d0 < _213.d1)
    goto _jump752;
    fail_assertion("index too large");
    _jump752:;
    int64_t _223 = 0;
    _223 *= _213.d0;
    _223 += _222;
    _223 *= _213.d1;
    _223 += d.d0;
    int64_t _224 = _213.data[_223];
    _209.d0 = _224;
    if (_224 > 0) 
    goto _jump753;
    fail_assertion("non-positive loop bound");
    _jump753:;
    // Computing bound for k
    _209.d1 = _10.d0;
    if (_10.d0 > 0) 
    goto _jump754;
    fail_assertion("non-positive loop bound");
    _jump754:;
    // Computing total size of heap memory to allocate
    int64_t _225 = 1;
    _225 *= _224;
    _225 *= _10.d0;
    _225 *= sizeof(_a3_bool);
    _209.data = jpl_alloc(_225);
    int64_t _226 = 0; // k
    int64_t _227 = 0; // j
    _jump755:; // Begin body of loop
    _a2__a3_bool _228;
    // Computing bound for l
    _228.d0 = _10.d0;
    if (_10.d0 > 0) 
    goto _jump756;
    fail_assertion("non-positive loop bound");
    _jump756:;
    // Computing bound for m
    _228.d1 = _10.d0;
    if (_10.d0 > 0) 
    goto _jump757;
    fail_assertion("non-positive loop bound");
    _jump757:;
    // Computing total size of heap memory to allocate
    int64_t _229 = 1;
    _229 *= _10.d0;
    _229 *= _10.d0;
    _229 *= sizeof(_a3_bool);
    _228.data = jpl_alloc(_229);
    int64_t _230 = 0; // m
    int64_t _231 = 0; // l
    _jump758:; // Begin body of loop
    _a3_bool _232;
    // Computing bound for n
    _232.d0 = _230;
    if (_230 > 0) 
    goto _jump759;
    fail_assertion("non-positive loop bound");
    _jump759:;
    // Computing bound for o
    _232.d1 = _10.d0;
    if (_10.d0 > 0) 
    goto _jump760;
    fail_assertion("non-positive loop bound");
    _jump760:;
    // Computing bound for p
    _232.d2 = _10.d0;
    if (_10.d0 > 0) 
    goto _jump761;
    fail_assertion("non-positive loop bound");
    _jump761:;
    // Computing total size of heap memory to allocate
    int64_t _233 = 1;
    _233 *= _230;
    _233 *= _10.d0;
    _233 *= _10.d0;
    _233 *= sizeof(bool);
    _232.data = jpl_alloc(_233);
    int64_t _234 = 0; // p
    int64_t _235 = 0; // o
    int64_t _236 = 0; // n
    _jump762:; // Begin body of loop
    bool _237 = true;
    int64_t _238 = 0;
    _238 *= _232.d0;
    _238 += _236;
    _238 *= _232.d1;
    _238 += _235;
    _238 *= _232.d2;
    _238 += _234;
    _232.data[_238] = _237;
    _234++;
    if (_234 < _10.d0)
    goto _jump762;
    _234 = 0;
    _235++;
    if (_235 < _10.d0)
    goto _jump762;
    _235 = 0;
    _236++;
    if (_236 < _230)
    goto _jump762;
    // End body of loop
    int64_t _239 = 0;
    _239 *= _228.d0;
    _239 += _231;
    _239 *= _228.d1;
    _239 += _230;
    _228.data[_239] = _232;
    _230++;
    if (_230 < _10.d0)
    goto _jump758;
    _230 = 0;
    _231++;
    if (_231 < _10.d0)
    goto _jump758;
    // End body of loop
    int64_t _240;
    // Computing bound for l
    if (_10.d0 > 0) 
    goto _jump763;
    fail_assertion("non-positive loop bound");
    _jump763:;
    // Computing bound for m
    if (_227 > 0) 
    goto _jump764;
    fail_assertion("non-positive loop bound");
    _jump764:;
    // Computing bound for n
    bool _241 = true;
    int64_t _242;
    if (!_241)
    goto _jump765;
    _242 = _10.d0;
    goto _jump766;
    _jump765:;
    int64_t _243 = 435;
    _242 = _243;
    _jump766:;
    if (_242 > 0) 
    goto _jump767;
    fail_assertion("non-positive loop bound");
    _jump767:;
    _240 = 0;
    int64_t _244 = 0; // n
    int64_t _245 = 0; // m
    int64_t _246 = 0; // l
    _jump768:; // Begin body of loop
    int64_t _247 = 900;
    int64_t _248 = _247 * _245;
    _240 += _248;
    _244++;
    if (_244 < _242)
    goto _jump768;
    _244 = 0;
    _245++;
    if (_245 < _227)
    goto _jump768;
    _245 = 0;
    _246++;
    if (_246 < _10.d0)
    goto _jump768;
    // End body of loop
    if (_240 >= 0)
    goto _jump769;
    fail_assertion("negative array index");
    _jump769:;
    if (_240 < _228.d0)
    goto _jump770;
    fail_assertion("index too large");
    _jump770:;
    if (_10.d0 >= 0)
    goto _jump771;
    fail_assertion("negative array index");
    _jump771:;
    if (_10.d0 < _228.d1)
    goto _jump772;
    fail_assertion("index too large");
    _jump772:;
    int64_t _249 = 0;
    _249 *= _228.d0;
    _249 += _240;
    _249 *= _228.d1;
    _249 += _10.d0;
    _a3_bool _250 = _228.data[_249];
    int64_t _251 = 0;
    _251 *= _209.d0;
    _251 += _227;
    _251 *= _209.d1;
    _251 += _226;
    _209.data[_251] = _250;
    _226++;
    if (_226 < _10.d0)
    goto _jump755;
    _226 = 0;
    _227++;
    if (_227 < _224)
    goto _jump755;
    // End body of loop
    int64_t _252 = 702;
    if (_252 >= 0)
    goto _jump773;
    fail_assertion("negative array index");
    _jump773:;
    if (_252 < _209.d0)
    goto _jump774;
    fail_assertion("index too large");
    _jump774:;
    if (_10.d0 >= 0)
    goto _jump775;
    fail_assertion("negative array index");
    _jump775:;
    if (_10.d0 < _209.d1)
    goto _jump776;
    fail_assertion("index too large");
    _jump776:;
    int64_t _253 = 0;
    _253 *= _209.d0;
    _253 += _252;
    _253 *= _209.d1;
    _253 += _10.d0;
    _a3_bool _254 = _209.data[_253];
    _96 = _254;
    _jump741:;
    int64_t _255 = 325;
    int64_t _256 = 723;
    bool _257 = _255 >= _256;
    _a1__a1_bool _258;
    if (!_257)
    goto _jump777;
    _a1__a1_bool _259;
    // Computing bound for j
    int64_t _260 = 631;
    _259.d0 = _260;
    if (_260 > 0) 
    goto _jump778;
    fail_assertion("non-positive loop bound");
    _jump778:;
    // Computing total size of heap memory to allocate
    int64_t _261 = 1;
    _261 *= _260;
    _261 *= sizeof(_a1_bool);
    _259.data = jpl_alloc(_261);
    int64_t _262 = 0; // j
    _jump779:; // Begin body of loop
    int64_t _263 = 0;
    _263 *= _259.d0;
    _263 += _262;
    _259.data[_263] = _10;
    _262++;
    if (_262 < _260)
    goto _jump779;
    // End body of loop
    _258 = _259;
    goto _jump780;
    _jump777:;
    _a1__a1_bool _264;
    _264.d0 = 2;
    _264.data = jpl_alloc(sizeof(_a1_bool) * 2);
    _264.data[0] = _10;
    _264.data[1] = _10;
    _258 = _264;
    _jump780:;
    _a1_int64_t _265;
    // Computing bound for j
    _265.d0 = _10.d0;
    if (_10.d0 > 0) 
    goto _jump781;
    fail_assertion("non-positive loop bound");
    _jump781:;
    // Computing total size of heap memory to allocate
    int64_t _266 = 1;
    _266 *= _10.d0;
    _266 *= sizeof(int64_t);
    _265.data = jpl_alloc(_266);
    int64_t _267 = 0; // j
    _jump782:; // Begin body of loop
    int64_t _268 = 0;
    _268 *= _265.d0;
    _268 += _267;
    _265.data[_268] = _10.d0;
    _267++;
    if (_267 < _10.d0)
    goto _jump782;
    // End body of loop
    if (_10.d0 >= 0)
    goto _jump783;
    fail_assertion("negative array index");
    _jump783:;
    if (_10.d0 < _265.d0)
    goto _jump784;
    fail_assertion("index too large");
    _jump784:;
    int64_t _269 = 0;
    _269 *= _265.d0;
    _269 += _10.d0;
    int64_t _270 = _265.data[_269];
    if (_270 >= 0)
    goto _jump785;
    fail_assertion("negative array index");
    _jump785:;
    if (_270 < _258.d0)
    goto _jump786;
    fail_assertion("index too large");
    _jump786:;
    int64_t _271 = 0;
    _271 *= _258.d0;
    _271 += _270;
    _a1_bool _272 = _258.data[_271];
    if (d.d0 >= 0)
    goto _jump787;
    fail_assertion("negative array index");
    _jump787:;
    if (d.d0 < _272.d0)
    goto _jump788;
    fail_assertion("index too large");
    _jump788:;
    int64_t _273 = 0;
    _273 *= _272.d0;
    _273 += d.d0;
    bool _274 = _272.data[_273];
    int64_t _275;
    if (!_274)
    goto _jump789;
    bool _276 = _10.d0 == d.d0;
    bool _277;
    if (!_276)
    goto _jump790;
    bool _278 = c(d);
    _277 = _278;
    goto _jump791;
    _jump790:;
    bool _279 = false;
    _277 = _279;
    _jump791:;
    bool _281 = _10.d0 == d.d0;
    bool _280 = _281;
    if (0 == _281)
    goto _jump792;
    bool _282 = true;
    bool _283 = !_282;
    _280 = _283;
    _jump792:;
    bool _284 = _277 != _280;
    int64_t _285;
    if (!_284)
    goto _jump793;
    _a3_int64_t _286;
    // Computing bound for j
    int64_t _287 = 54;
    _286.d0 = _287;
    if (_287 > 0) 
    goto _jump794;
    fail_assertion("non-positive loop bound");
    _jump794:;
    // Computing bound for k
    _286.d1 = _10.d0;
    if (_10.d0 > 0) 
    goto _jump795;
    fail_assertion("non-positive loop bound");
    _jump795:;
    // Computing bound for l
    int64_t _288 = 181;
    _286.d2 = _288;
    if (_288 > 0) 
    goto _jump796;
    fail_assertion("non-positive loop bound");
    _jump796:;
    // Computing total size of heap memory to allocate
    int64_t _289 = 1;
    _289 *= _287;
    _289 *= _10.d0;
    _289 *= _288;
    _289 *= sizeof(int64_t);
    _286.data = jpl_alloc(_289);
    int64_t _290 = 0; // l
    int64_t _291 = 0; // k
    int64_t _292 = 0; // j
    _jump797:; // Begin body of loop
    int64_t _293 = 361;
    int64_t _294 = 0;
    _294 *= _286.d0;
    _294 += _292;
    _294 *= _286.d1;
    _294 += _291;
    _294 *= _286.d2;
    _294 += _290;
    _286.data[_294] = _293;
    _290++;
    if (_290 < _288)
    goto _jump797;
    _290 = 0;
    _291++;
    if (_291 < _10.d0)
    goto _jump797;
    _291 = 0;
    _292++;
    if (_292 < _287)
    goto _jump797;
    // End body of loop
    int64_t _295 = 453;
    int64_t _296 = 539;
    if (_295 >= 0)
    goto _jump798;
    fail_assertion("negative array index");
    _jump798:;
    if (_295 < _286.d0)
    goto _jump799;
    fail_assertion("index too large");
    _jump799:;
    if (_10.d0 >= 0)
    goto _jump800;
    fail_assertion("negative array index");
    _jump800:;
    if (_10.d0 < _286.d1)
    goto _jump801;
    fail_assertion("index too large");
    _jump801:;
    if (_296 >= 0)
    goto _jump802;
    fail_assertion("negative array index");
    _jump802:;
    if (_296 < _286.d2)
    goto _jump803;
    fail_assertion("index too large");
    _jump803:;
    int64_t _297 = 0;
    _297 *= _286.d0;
    _297 += _295;
    _297 *= _286.d1;
    _297 += _10.d0;
    _297 *= _286.d2;
    _297 += _296;
    int64_t _298 = _286.data[_297];
    _285 = _298;
    goto _jump804;
    _jump793:;
    int64_t _299 = 990;
    int64_t _300;
    // Computing bound for j
    if (d.d0 > 0) 
    goto _jump805;
    fail_assertion("non-positive loop bound");
    _jump805:;
    // Computing bound for k
    if (_10.d0 > 0) 
    goto _jump806;
    fail_assertion("non-positive loop bound");
    _jump806:;
    // Computing bound for l
    if (_10.d0 > 0) 
    goto _jump807;
    fail_assertion("non-positive loop bound");
    _jump807:;
    _300 = 0;
    int64_t _301 = 0; // l
    int64_t _302 = 0; // k
    int64_t _303 = 0; // j
    _jump808:; // Begin body of loop
    _300 += _10.d0;
    _301++;
    if (_301 < _10.d0)
    goto _jump808;
    _301 = 0;
    _302++;
    if (_302 < _10.d0)
    goto _jump808;
    _302 = 0;
    _303++;
    if (_303 < d.d0)
    goto _jump808;
    // End body of loop
    int64_t _304 = _10.d0 * _300;
    int64_t _305 = _299 * _304;
    _285 = _305;
    _jump804:;
    _275 = _285;
    goto _jump809;
    _jump789:;
    int64_t _306 = d.d0 - d.d0;
    int64_t _307 = -_306;
    int64_t _308 = -_307;
    _275 = _308;
    _jump809:;
    int64_t _309 = _275 - _10.d0;
    int64_t _310 = -_10.d0;
    int64_t _311 = -_10.d0;
    int64_t _312 = _310 - _311;
    if (_309 >= 0)
    goto _jump810;
    fail_assertion("negative array index");
    _jump810:;
    if (_309 < _96.d0)
    goto _jump811;
    fail_assertion("index too large");
    _jump811:;
    if (_312 >= 0)
    goto _jump812;
    fail_assertion("negative array index");
    _jump812:;
    if (_312 < _96.d1)
    goto _jump813;
    fail_assertion("index too large");
    _jump813:;
    if (d.d0 >= 0)
    goto _jump814;
    fail_assertion("negative array index");
    _jump814:;
    if (d.d0 < _96.d2)
    goto _jump815;
    fail_assertion("index too large");
    _jump815:;
    int64_t _313 = 0;
    _313 *= _96.d0;
    _313 += _309;
    _313 *= _96.d1;
    _313 += _312;
    _313 *= _96.d2;
    _313 += d.d0;
    bool _314 = _96.data[_313];
    return _314;
}

bool f() {
    _a2_int64_t _0;
    // Computing bound for g
    int64_t _1;
    // Computing bound for g
    int64_t _2 = 408;
    if (_2 > 0) 
    goto _jump879;
    fail_assertion("non-positive loop bound");
    _jump879:;
    _1 = 0;
    int64_t _3 = 0; // g
    _jump880:; // Begin body of loop
    int64_t _4 = 820;
    _1 += _4;
    _3++;
    if (_3 < _2)
    goto _jump880;
    // End body of loop
    int64_t _5 = -_1;
    _0.d0 = _5;
    if (_5 > 0) 
    goto _jump881;
    fail_assertion("non-positive loop bound");
    _jump881:;
    // Computing bound for h
    int64_t _6 = 359;
    int64_t _7 = -_6;
    int64_t _8 = -_7;
    _0.d1 = _8;
    if (_8 > 0) 
    goto _jump882;
    fail_assertion("non-positive loop bound");
    _jump882:;
    // Computing total size of heap memory to allocate
    int64_t _9 = 1;
    _9 *= _5;
    _9 *= _8;
    _9 *= sizeof(int64_t);
    _0.data = jpl_alloc(_9);
    int64_t _10 = 0; // h
    int64_t _11 = 0; // g
    _jump883:; // Begin body of loop
    bool _12 = f();
    int64_t _13;
    if (!_12)
    goto _jump884;
    int64_t _14;
    // Computing bound for i
    if (_10 > 0) 
    goto _jump885;
    fail_assertion("non-positive loop bound");
    _jump885:;
    // Computing bound for j
    if (_11 > 0) 
    goto _jump886;
    fail_assertion("non-positive loop bound");
    _jump886:;
    _14 = 0;
    int64_t _15 = 0; // j
    int64_t _16 = 0; // i
    _jump887:; // Begin body of loop
    _14 += _15;
    _15++;
    if (_15 < _11)
    goto _jump887;
    _15 = 0;
    _16++;
    if (_16 < _10)
    goto _jump887;
    // End body of loop
    _13 = _14;
    goto _jump888;
    _jump884:;
    int64_t _17 = -_11;
    _13 = _17;
    _jump888:;
    int64_t _18 = 0;
    _18 *= _0.d0;
    _18 += _11;
    _18 *= _0.d1;
    _18 += _10;
    _0.data[_18] = _13;
    _10++;
    if (_10 < _8)
    goto _jump883;
    _10 = 0;
    _11++;
    if (_11 < _5)
    goto _jump883;
    // End body of loop
    _a2_int64_t _19;
    // Computing bound for g
    int64_t _20 = 705;
    int64_t _21 = 930;
    int64_t _22 = _20 - _21;
    _19.d0 = _22;
    if (_22 > 0) 
    goto _jump889;
    fail_assertion("non-positive loop bound");
    _jump889:;
    // Computing bound for h
    int64_t _23 = 837;
    _19.d1 = _23;
    if (_23 > 0) 
    goto _jump890;
    fail_assertion("non-positive loop bound");
    _jump890:;
    // Computing total size of heap memory to allocate
    int64_t _24 = 1;
    _24 *= _22;
    _24 *= _23;
    _24 *= sizeof(int64_t);
    _19.data = jpl_alloc(_24);
    int64_t _25 = 0; // h
    int64_t _26 = 0; // g
    _jump891:; // Begin body of loop
    int64_t _27 = 0;
    _27 *= _19.d0;
    _27 += _26;
    _27 *= _19.d1;
    _27 += _25;
    _19.data[_27] = _26;
    _25++;
    if (_25 < _23)
    goto _jump891;
    _25 = 0;
    _26++;
    if (_26 < _22)
    goto _jump891;
    // End body of loop
    bool _29 = f();
    bool _28 = _29;
    if (0 == _29)
    goto _jump892;
    bool _30 = f();
    _28 = _30;
    _jump892:;
    _a2_int64_t _31;
    if (!_28)
    goto _jump893;
    _a2_int64_t _32;
    // Computing bound for g
    int64_t _33;
    // Computing bound for g
    int64_t _34 = 32;
    if (_34 > 0) 
    goto _jump894;
    fail_assertion("non-positive loop bound");
    _jump894:;
    // Computing bound for h
    int64_t _35 = 24;
    if (_35 > 0) 
    goto _jump895;
    fail_assertion("non-positive loop bound");
    _jump895:;
    // Computing bound for i
    int64_t _36 = 987;
    if (_36 > 0) 
    goto _jump896;
    fail_assertion("non-positive loop bound");
    _jump896:;
    _33 = 0;
    int64_t _37 = 0; // i
    int64_t _38 = 0; // h
    int64_t _39 = 0; // g
    _jump897:; // Begin body of loop
    int64_t _40 = 307;
    _33 += _40;
    _37++;
    if (_37 < _36)
    goto _jump897;
    _37 = 0;
    _38++;
    if (_38 < _35)
    goto _jump897;
    _38 = 0;
    _39++;
    if (_39 < _34)
    goto _jump897;
    // End body of loop
    _32.d0 = _33;
    if (_33 > 0) 
    goto _jump898;
    fail_assertion("non-positive loop bound");
    _jump898:;
    // Computing bound for h
    int64_t _41 = 91;
    _32.d1 = _41;
    if (_41 > 0) 
    goto _jump899;
    fail_assertion("non-positive loop bound");
    _jump899:;
    // Computing total size of heap memory to allocate
    int64_t _42 = 1;
    _42 *= _33;
    _42 *= _41;
    _42 *= sizeof(int64_t);
    _32.data = jpl_alloc(_42);
    int64_t _43 = 0; // h
    int64_t _44 = 0; // g
    _jump900:; // Begin body of loop
    int64_t _45 = -_44;
    int64_t _46 = 0;
    _46 *= _32.d0;
    _46 += _44;
    _46 *= _32.d1;
    _46 += _43;
    _32.data[_46] = _45;
    _43++;
    if (_43 < _41)
    goto _jump900;
    _43 = 0;
    _44++;
    if (_44 < _33)
    goto _jump900;
    // End body of loop
    _31 = _32;
    goto _jump901;
    _jump893:;
    _a2_int64_t _47;
    // Computing bound for g
    int64_t _48 = 942;
    _47.d0 = _48;
    if (_48 > 0) 
    goto _jump902;
    fail_assertion("non-positive loop bound");
    _jump902:;
    // Computing bound for h
    int64_t _49 = 904;
    _47.d1 = _49;
    if (_49 > 0) 
    goto _jump903;
    fail_assertion("non-positive loop bound");
    _jump903:;
    // Computing total size of heap memory to allocate
    int64_t _50 = 1;
    _50 *= _48;
    _50 *= _49;
    _50 *= sizeof(int64_t);
    _47.data = jpl_alloc(_50);
    int64_t _51 = 0; // h
    int64_t _52 = 0; // g
    _jump904:; // Begin body of loop
    int64_t _53 = 0;
    _53 *= _47.d0;
    _53 += _52;
    _53 *= _47.d1;
    _53 += _51;
    _47.data[_53] = _52;
    _51++;
    if (_51 < _49)
    goto _jump904;
    _51 = 0;
    _52++;
    if (_52 < _48)
    goto _jump904;
    // End body of loop
    _31 = _47;
    _jump901:;
    _a1__a2_int64_t _54;
    _54.d0 = 3;
    _54.data = jpl_alloc(sizeof(_a2_int64_t) * 3);
    _54.data[0] = _0;
    _54.data[1] = _19;
    _54.data[2] = _31;
    bool _55 = c(_54);
    _a1__a2_int64_t _56;
    if (!_55)
    goto _jump905;
    _a2_int64_t _57;
    // Computing bound for g
    int64_t _58 = 801;
    _57.d0 = _58;
    if (_58 > 0) 
    goto _jump906;
    fail_assertion("non-positive loop bound");
    _jump906:;
    // Computing bound for h
    _a3_int64_t _59;
    // Computing bound for g
    int64_t _60 = 11;
    _59.d0 = _60;
    if (_60 > 0) 
    goto _jump907;
    fail_assertion("non-positive loop bound");
    _jump907:;
    // Computing bound for h
    int64_t _61 = 872;
    _59.d1 = _61;
    if (_61 > 0) 
    goto _jump908;
    fail_assertion("non-positive loop bound");
    _jump908:;
    // Computing bound for i
    int64_t _62 = 62;
    int64_t _63 = -_62;
    _59.d2 = _63;
    if (_63 > 0) 
    goto _jump909;
    fail_assertion("non-positive loop bound");
    _jump909:;
    // Computing total size of heap memory to allocate
    int64_t _64 = 1;
    _64 *= _60;
    _64 *= _61;
    _64 *= _63;
    _64 *= sizeof(int64_t);
    _59.data = jpl_alloc(_64);
    int64_t _65 = 0; // i
    int64_t _66 = 0; // h
    int64_t _67 = 0; // g
    _jump910:; // Begin body of loop
    int64_t _68 = 0;
    _68 *= _59.d0;
    _68 += _67;
    _68 *= _59.d1;
    _68 += _66;
    _68 *= _59.d2;
    _68 += _65;
    _59.data[_68] = _66;
    _65++;
    if (_65 < _63)
    goto _jump910;
    _65 = 0;
    _66++;
    if (_66 < _61)
    goto _jump910;
    _66 = 0;
    _67++;
    if (_67 < _60)
    goto _jump910;
    // End body of loop
    int64_t _69 = 354;
    int64_t _70 = 25;
    bool _71 = f();
    int64_t _72;
    if (!_71)
    goto _jump911;
    int64_t _73 = 689;
    int64_t _74 = -_73;
    _72 = _74;
    goto _jump912;
    _jump911:;
    int64_t _75 = 300;
    _72 = _75;
    _jump912:;
    if (_69 >= 0)
    goto _jump913;
    fail_assertion("negative array index");
    _jump913:;
    if (_69 < _59.d0)
    goto _jump914;
    fail_assertion("index too large");
    _jump914:;
    if (_70 >= 0)
    goto _jump915;
    fail_assertion("negative array index");
    _jump915:;
    if (_70 < _59.d1)
    goto _jump916;
    fail_assertion("index too large");
    _jump916:;
    if (_72 >= 0)
    goto _jump917;
    fail_assertion("negative array index");
    _jump917:;
    if (_72 < _59.d2)
    goto _jump918;
    fail_assertion("index too large");
    _jump918:;
    int64_t _76 = 0;
    _76 *= _59.d0;
    _76 += _69;
    _76 *= _59.d1;
    _76 += _70;
    _76 *= _59.d2;
    _76 += _72;
    int64_t _77 = _59.data[_76];
    _57.d1 = _77;
    if (_77 > 0) 
    goto _jump919;
    fail_assertion("non-positive loop bound");
    _jump919:;
    // Computing total size of heap memory to allocate
    int64_t _78 = 1;
    _78 *= _58;
    _78 *= _77;
    _78 *= sizeof(int64_t);
    _57.data = jpl_alloc(_78);
    int64_t _79 = 0; // h
    int64_t _80 = 0; // g
    _jump920:; // Begin body of loop
    int64_t _81 = _79 - _79;
    int64_t _82 = -_81;
    bool _83 = f();
    int64_t _84;
    if (!_83)
    goto _jump921;
    _84 = _79;
    goto _jump922;
    _jump921:;
    int64_t _85 = -_79;
    _84 = _85;
    _jump922:;
    int64_t _86 = _82 + _84;
    int64_t _87 = 0;
    _87 *= _57.d0;
    _87 += _80;
    _87 *= _57.d1;
    _87 += _79;
    _57.data[_87] = _86;
    _79++;
    if (_79 < _77)
    goto _jump920;
    _79 = 0;
    _80++;
    if (_80 < _58)
    goto _jump920;
    // End body of loop
    _a2_int64_t _88;
    // Computing bound for g
    int64_t _89 = 194;
    _a2_int64_t _90;
    // Computing bound for g
    int64_t _91 = 623;
    _90.d0 = _91;
    if (_91 > 0) 
    goto _jump923;
    fail_assertion("non-positive loop bound");
    _jump923:;
    // Computing bound for h
    int64_t _92 = 616;
    _90.d1 = _92;
    if (_92 > 0) 
    goto _jump924;
    fail_assertion("non-positive loop bound");
    _jump924:;
    // Computing total size of heap memory to allocate
    int64_t _93 = 1;
    _93 *= _91;
    _93 *= _92;
    _93 *= sizeof(int64_t);
    _90.data = jpl_alloc(_93);
    int64_t _94 = 0; // h
    int64_t _95 = 0; // g
    _jump925:; // Begin body of loop
    int64_t _96 = 0;
    _96 *= _90.d0;
    _96 += _95;
    _96 *= _90.d1;
    _96 += _94;
    _90.data[_96] = _94;
    _94++;
    if (_94 < _92)
    goto _jump925;
    _94 = 0;
    _95++;
    if (_95 < _91)
    goto _jump925;
    // End body of loop
    int64_t _97;
    // Computing bound for g
    int64_t _98 = 877;
    if (_98 > 0) 
    goto _jump926;
    fail_assertion("non-positive loop bound");
    _jump926:;
    _97 = 0;
    int64_t _99 = 0; // g
    _jump927:; // Begin body of loop
    _97 += _99;
    _99++;
    if (_99 < _98)
    goto _jump927;
    // End body of loop
    int64_t _100;
    // Computing bound for g
    int64_t _101 = 918;
    if (_101 > 0) 
    goto _jump928;
    fail_assertion("non-positive loop bound");
    _jump928:;
    // Computing bound for h
    int64_t _102 = 743;
    if (_102 > 0) 
    goto _jump929;
    fail_assertion("non-positive loop bound");
    _jump929:;
    _100 = 0;
    int64_t _103 = 0; // h
    int64_t _104 = 0; // g
    _jump930:; // Begin body of loop
    int64_t _105 = 363;
    _100 += _105;
    _103++;
    if (_103 < _102)
    goto _jump930;
    _103 = 0;
    _104++;
    if (_104 < _101)
    goto _jump930;
    // End body of loop
    if (_97 >= 0)
    goto _jump931;
    fail_assertion("negative array index");
    _jump931:;
    if (_97 < _90.d0)
    goto _jump932;
    fail_assertion("index too large");
    _jump932:;
    if (_100 >= 0)
    goto _jump933;
    fail_assertion("negative array index");
    _jump933:;
    if (_100 < _90.d1)
    goto _jump934;
    fail_assertion("index too large");
    _jump934:;
    int64_t _106 = 0;
    _106 *= _90.d0;
    _106 += _97;
    _106 *= _90.d1;
    _106 += _100;
    int64_t _107 = _90.data[_106];
    int64_t _108 = _89 * _107;
    _88.d0 = _108;
    if (_108 > 0) 
    goto _jump935;
    fail_assertion("non-positive loop bound");
    _jump935:;
    // Computing bound for h
    int64_t _109 = 936;
    int64_t _110 = 671;
    int64_t _111 = _109 - _110;
    _88.d1 = _111;
    if (_111 > 0) 
    goto _jump936;
    fail_assertion("non-positive loop bound");
    _jump936:;
    // Computing total size of heap memory to allocate
    int64_t _112 = 1;
    _112 *= _108;
    _112 *= _111;
    _112 *= sizeof(int64_t);
    _88.data = jpl_alloc(_112);
    int64_t _113 = 0; // h
    int64_t _114 = 0; // g
    _jump937:; // Begin body of loop
    int64_t _115 = 0;
    _115 *= _88.d0;
    _115 += _114;
    _115 *= _88.d1;
    _115 += _113;
    _88.data[_115] = _114;
    _113++;
    if (_113 < _111)
    goto _jump937;
    _113 = 0;
    _114++;
    if (_114 < _108)
    goto _jump937;
    // End body of loop
    bool _116 = f();
    _a2_int64_t _117;
    if (!_116)
    goto _jump938;
    _a2_int64_t _118;
    // Computing bound for g
    int64_t _119 = 746;
    _118.d0 = _119;
    if (_119 > 0) 
    goto _jump939;
    fail_assertion("non-positive loop bound");
    _jump939:;
    // Computing bound for h
    int64_t _120 = 593;
    int64_t _121 = 776;
    int64_t _122 = -_121;
    int64_t _123 = _120 % _122;
    _118.d1 = _123;
    if (_123 > 0) 
    goto _jump940;
    fail_assertion("non-positive loop bound");
    _jump940:;
    // Computing total size of heap memory to allocate
    int64_t _124 = 1;
    _124 *= _119;
    _124 *= _123;
    _124 *= sizeof(int64_t);
    _118.data = jpl_alloc(_124);
    int64_t _125 = 0; // h
    int64_t _126 = 0; // g
    _jump941:; // Begin body of loop
    bool _127 = _126 != _125;
    int64_t _128;
    if (!_127)
    goto _jump942;
    int64_t _129 = 575;
    _128 = _129;
    goto _jump943;
    _jump942:;
    _128 = _125;
    _jump943:;
    int64_t _130 = 0;
    _130 *= _118.d0;
    _130 += _126;
    _130 *= _118.d1;
    _130 += _125;
    _118.data[_130] = _128;
    _125++;
    if (_125 < _123)
    goto _jump941;
    _125 = 0;
    _126++;
    if (_126 < _119)
    goto _jump941;
    // End body of loop
    _117 = _118;
    goto _jump944;
    _jump938:;
    bool _131 = f();
    _a2_int64_t _132;
    if (!_131)
    goto _jump945;
    _a2_int64_t _133;
    // Computing bound for g
    int64_t _134;
    // Computing bound for g
    int64_t _135 = 245;
    if (_135 > 0) 
    goto _jump946;
    fail_assertion("non-positive loop bound");
    _jump946:;
    _134 = 0;
    int64_t _136 = 0; // g
    _jump947:; // Begin body of loop
    _134 += _136;
    _136++;
    if (_136 < _135)
    goto _jump947;
    // End body of loop
    _133.d0 = _134;
    if (_134 > 0) 
    goto _jump948;
    fail_assertion("non-positive loop bound");
    _jump948:;
    // Computing bound for h
    int64_t _137 = 635;
    _133.d1 = _137;
    if (_137 > 0) 
    goto _jump949;
    fail_assertion("non-positive loop bound");
    _jump949:;
    // Computing total size of heap memory to allocate
    int64_t _138 = 1;
    _138 *= _134;
    _138 *= _137;
    _138 *= sizeof(int64_t);
    _133.data = jpl_alloc(_138);
    int64_t _139 = 0; // h
    int64_t _140 = 0; // g
    _jump950:; // Begin body of loop
    int64_t _141 = _140 * _139;
    int64_t _142 = 0;
    _142 *= _133.d0;
    _142 += _140;
    _142 *= _133.d1;
    _142 += _139;
    _133.data[_142] = _141;
    _139++;
    if (_139 < _137)
    goto _jump950;
    _139 = 0;
    _140++;
    if (_140 < _134)
    goto _jump950;
    // End body of loop
    _132 = _133;
    goto _jump951;
    _jump945:;
    _a2_int64_t _143;
    // Computing bound for g
    int64_t _144 = 675;
    int64_t _145 = -_144;
    _143.d0 = _145;
    if (_145 > 0) 
    goto _jump952;
    fail_assertion("non-positive loop bound");
    _jump952:;
    // Computing bound for h
    int64_t _146 = 257;
    _143.d1 = _146;
    if (_146 > 0) 
    goto _jump953;
    fail_assertion("non-positive loop bound");
    _jump953:;
    // Computing total size of heap memory to allocate
    int64_t _147 = 1;
    _147 *= _145;
    _147 *= _146;
    _147 *= sizeof(int64_t);
    _143.data = jpl_alloc(_147);
    int64_t _148 = 0; // h
    int64_t _149 = 0; // g
    _jump954:; // Begin body of loop
    bool _150 = f();
    int64_t _151;
    if (!_150)
    goto _jump955;
    _151 = _149;
    goto _jump956;
    _jump955:;
    int64_t _152 = 528;
    _151 = _152;
    _jump956:;
    int64_t _153 = 0;
    _153 *= _143.d0;
    _153 += _149;
    _153 *= _143.d1;
    _153 += _148;
    _143.data[_153] = _151;
    _148++;
    if (_148 < _146)
    goto _jump954;
    _148 = 0;
    _149++;
    if (_149 < _145)
    goto _jump954;
    // End body of loop
    _132 = _143;
    _jump951:;
    _117 = _132;
    _jump944:;
    _a1__a2_int64_t _154;
    _154.d0 = 3;
    _154.data = jpl_alloc(sizeof(_a2_int64_t) * 3);
    _154.data[0] = _57;
    _154.data[1] = _88;
    _154.data[2] = _117;
    _56 = _154;
    goto _jump957;
    _jump905:;
    _a3__a2_int64_t _155;
    // Computing bound for g
    int64_t _156 = 994;
    int64_t _157 = 469;
    int64_t _158 = -_157;
    int64_t _159 = _156 * _158;
    _155.d0 = _159;
    if (_159 > 0) 
    goto _jump958;
    fail_assertion("non-positive loop bound");
    _jump958:;
    // Computing bound for h
    int64_t _160 = 800;
    _155.d1 = _160;
    if (_160 > 0) 
    goto _jump959;
    fail_assertion("non-positive loop bound");
    _jump959:;
    // Computing bound for i
    int64_t _161 = 50;
    int64_t _162 = -_161;
    bool _163 = true;
    int64_t _164;
    if (!_163)
    goto _jump960;
    int64_t _165 = 324;
    _164 = _165;
    goto _jump961;
    _jump960:;
    int64_t _166 = 702;
    _164 = _166;
    _jump961:;
    int64_t _167 = _162 % _164;
    _155.d2 = _167;
    if (_167 > 0) 
    goto _jump962;
    fail_assertion("non-positive loop bound");
    _jump962:;
    // Computing total size of heap memory to allocate
    int64_t _168 = 1;
    _168 *= _159;
    _168 *= _160;
    _168 *= _167;
    _168 *= sizeof(_a2_int64_t);
    _155.data = jpl_alloc(_168);
    int64_t _169 = 0; // i
    int64_t _170 = 0; // h
    int64_t _171 = 0; // g
    _jump963:; // Begin body of loop
    _a2_int64_t _172;
    // Computing bound for j
    _172.d0 = _170;
    if (_170 > 0) 
    goto _jump964;
    fail_assertion("non-positive loop bound");
    _jump964:;
    // Computing bound for k
    int64_t _173 = 485;
    int64_t _174 = _171 + _173;
    _172.d1 = _174;
    if (_174 > 0) 
    goto _jump965;
    fail_assertion("non-positive loop bound");
    _jump965:;
    // Computing total size of heap memory to allocate
    int64_t _175 = 1;
    _175 *= _170;
    _175 *= _174;
    _175 *= sizeof(int64_t);
    _172.data = jpl_alloc(_175);
    int64_t _176 = 0; // k
    int64_t _177 = 0; // j
    _jump966:; // Begin body of loop
    int64_t _178 = 0;
    _178 *= _172.d0;
    _178 += _177;
    _178 *= _172.d1;
    _178 += _176;
    _172.data[_178] = _177;
    _176++;
    if (_176 < _174)
    goto _jump966;
    _176 = 0;
    _177++;
    if (_177 < _170)
    goto _jump966;
    // End body of loop
    int64_t _179 = 0;
    _179 *= _155.d0;
    _179 += _171;
    _179 *= _155.d1;
    _179 += _170;
    _179 *= _155.d2;
    _179 += _169;
    _155.data[_179] = _172;
    _169++;
    if (_169 < _167)
    goto _jump963;
    _169 = 0;
    _170++;
    if (_170 < _160)
    goto _jump963;
    _170 = 0;
    _171++;
    if (_171 < _159)
    goto _jump963;
    // End body of loop
    int64_t _180 = 258;
    int64_t _181 = -_180;
    int64_t _182 = 213;
    int64_t _183 = _181 * _182;
    int64_t _184;
    // Computing bound for g
    int64_t _185 = 459;
    if (_185 > 0) 
    goto _jump967;
    fail_assertion("non-positive loop bound");
    _jump967:;
    // Computing bound for h
    int64_t _186 = 600;
    if (_186 > 0) 
    goto _jump968;
    fail_assertion("non-positive loop bound");
    _jump968:;
    // Computing bound for i
    int64_t _187 = 41;
    if (_187 > 0) 
    goto _jump969;
    fail_assertion("non-positive loop bound");
    _jump969:;
    _184 = 0;
    int64_t _188 = 0; // i
    int64_t _189 = 0; // h
    int64_t _190 = 0; // g
    _jump970:; // Begin body of loop
    _184 += _190;
    _188++;
    if (_188 < _187)
    goto _jump970;
    _188 = 0;
    _189++;
    if (_189 < _186)
    goto _jump970;
    _189 = 0;
    _190++;
    if (_190 < _185)
    goto _jump970;
    // End body of loop
    int64_t _191 = -_184;
    int64_t _192 = _183 + _191;
    bool _193 = b != b;
    bool _194 = !_193;
    int64_t _195;
    if (!_194)
    goto _jump971;
    int64_t _196 = 196;
    _195 = _196;
    goto _jump972;
    _jump971:;
    int64_t _197 = 545;
    bool _198 = f();
    int64_t _199;
    if (!_198)
    goto _jump973;
    int64_t _200 = 955;
    _199 = _200;
    goto _jump974;
    _jump973:;
    int64_t _201 = 273;
    _199 = _201;
    _jump974:;
    int64_t _202 = _197 / _199;
    _195 = _202;
    _jump972:;
    int64_t _203 = 339;
    int64_t _204;
    // Computing bound for g
    int64_t _205 = 991;
    int64_t _206 = 109;
    int64_t _207 = _205 - _206;
    if (_207 > 0) 
    goto _jump975;
    fail_assertion("non-positive loop bound");
    _jump975:;
    _204 = 0;
    int64_t _208 = 0; // g
    _jump976:; // Begin body of loop
    _204 += _208;
    _208++;
    if (_208 < _207)
    goto _jump976;
    // End body of loop
    int64_t _209 = _203 * _204;
    if (_192 >= 0)
    goto _jump977;
    fail_assertion("negative array index");
    _jump977:;
    if (_192 < _155.d0)
    goto _jump978;
    fail_assertion("index too large");
    _jump978:;
    if (_195 >= 0)
    goto _jump979;
    fail_assertion("negative array index");
    _jump979:;
    if (_195 < _155.d1)
    goto _jump980;
    fail_assertion("index too large");
    _jump980:;
    if (_209 >= 0)
    goto _jump981;
    fail_assertion("negative array index");
    _jump981:;
    if (_209 < _155.d2)
    goto _jump982;
    fail_assertion("index too large");
    _jump982:;
    int64_t _210 = 0;
    _210 *= _155.d0;
    _210 += _192;
    _210 *= _155.d1;
    _210 += _195;
    _210 *= _155.d2;
    _210 += _209;
    _a2_int64_t _211 = _155.data[_210];
    _a1__a2_int64_t _212;
    _212.d0 = 1;
    _212.data = jpl_alloc(sizeof(_a2_int64_t) * 1);
    _212.data[0] = _211;
    _56 = _212;
    _jump957:;
    bool _213 = c(_56);
    return _213;
    double _214;
    // Computing bound for g
    int64_t _215 = 984;
    if (_215 > 0) 
    goto _jump983;
    fail_assertion("non-positive loop bound");
    _jump983:;
    // Computing bound for h
    int64_t _216 = 226;
    int64_t _217;
    // Computing bound for g
    bool _218 = f();
    int64_t _219;
    if (!_218)
    goto _jump984;
    int64_t _220 = 652;
    _219 = _220;
    goto _jump985;
    _jump984:;
    int64_t _221 = 897;
    _219 = _221;
    _jump985:;
    if (_219 > 0) 
    goto _jump986;
    fail_assertion("non-positive loop bound");
    _jump986:;
    // Computing bound for h
    int64_t _222 = 545;
    if (_222 > 0) 
    goto _jump987;
    fail_assertion("non-positive loop bound");
    _jump987:;
    // Computing bound for i
    int64_t _223 = 4;
    if (_223 > 0) 
    goto _jump988;
    fail_assertion("non-positive loop bound");
    _jump988:;
    _217 = 0;
    int64_t _224 = 0; // i
    int64_t _225 = 0; // h
    int64_t _226 = 0; // g
    _jump989:; // Begin body of loop
    int64_t _227 = 201;
    int64_t _228 = -_227;
    _217 += _228;
    _224++;
    if (_224 < _223)
    goto _jump989;
    _224 = 0;
    _225++;
    if (_225 < _222)
    goto _jump989;
    _225 = 0;
    _226++;
    if (_226 < _219)
    goto _jump989;
    // End body of loop
    int64_t _229 = _216 / _217;
    if (_229 > 0) 
    goto _jump990;
    fail_assertion("non-positive loop bound");
    _jump990:;
    _214 = 0;
    int64_t _230 = 0; // h
    int64_t _231 = 0; // g
    _jump991:; // Begin body of loop
    double _232 = -b;
    double _233 = 93.0;
    double _234 = fmod(_232, _233);
    _214 += _234;
    _230++;
    if (_230 < _229)
    goto _jump991;
    _230 = 0;
    _231++;
    if (_231 < _215)
    goto _jump991;
    // End body of loop
    double _235 = -_214;
    _a3_bool _236;
    // Computing bound for g
    int64_t _237 = 150;
    int64_t _238 = -_237;
    _236.d0 = _238;
    if (_238 > 0) 
    goto _jump992;
    fail_assertion("non-positive loop bound");
    _jump992:;
    // Computing bound for h
    int64_t _239;
    // Computing bound for g
    int64_t _240 = 321;
    if (_240 > 0) 
    goto _jump993;
    fail_assertion("non-positive loop bound");
    _jump993:;
    _239 = 0;
    int64_t _241 = 0; // g
    _jump994:; // Begin body of loop
    int64_t _242;
    // Computing bound for h
    int64_t _243 = 384;
    if (_243 > 0) 
    goto _jump995;
    fail_assertion("non-positive loop bound");
    _jump995:;
    // Computing bound for i
    int64_t _244 = 940;
    if (_244 > 0) 
    goto _jump996;
    fail_assertion("non-positive loop bound");
    _jump996:;
    _242 = 0;
    int64_t _245 = 0; // i
    int64_t _246 = 0; // h
    _jump997:; // Begin body of loop
    int64_t _247 = 101;
    _242 += _247;
    _245++;
    if (_245 < _244)
    goto _jump997;
    _245 = 0;
    _246++;
    if (_246 < _243)
    goto _jump997;
    // End body of loop
    _239 += _242;
    _241++;
    if (_241 < _240)
    goto _jump994;
    // End body of loop
    _236.d1 = _239;
    if (_239 > 0) 
    goto _jump998;
    fail_assertion("non-positive loop bound");
    _jump998:;
    // Computing bound for i
    int64_t _248 = 585;
    _236.d2 = _248;
    if (_248 > 0) 
    goto _jump999;
    fail_assertion("non-positive loop bound");
    _jump999:;
    // Computing total size of heap memory to allocate
    int64_t _249 = 1;
    _249 *= _238;
    _249 *= _239;
    _249 *= _248;
    _249 *= sizeof(bool);
    _236.data = jpl_alloc(_249);
    int64_t _250 = 0; // i
    int64_t _251 = 0; // h
    int64_t _252 = 0; // g
    _jump1000:; // Begin body of loop
    bool _253 = f();
    int64_t _254 = 0;
    _254 *= _236.d0;
    _254 += _252;
    _254 *= _236.d1;
    _254 += _251;
    _254 *= _236.d2;
    _254 += _250;
    _236.data[_254] = _253;
    _250++;
    if (_250 < _248)
    goto _jump1000;
    _250 = 0;
    _251++;
    if (_251 < _239)
    goto _jump1000;
    _251 = 0;
    _252++;
    if (_252 < _238)
    goto _jump1000;
    // End body of loop
    int64_t _255 = 778;
    int64_t _256 = 63;
    int64_t _257 = 101;
    int64_t _258 = 785;
    int64_t _259;
    // Computing bound for g
    int64_t _260 = 206;
    if (_260 > 0) 
    goto _jump1001;
    fail_assertion("non-positive loop bound");
    _jump1001:;
    // Computing bound for h
    int64_t _261 = 135;
    if (_261 > 0) 
    goto _jump1002;
    fail_assertion("non-positive loop bound");
    _jump1002:;
    _259 = 0;
    int64_t _262 = 0; // h
    int64_t _263 = 0; // g
    _jump1003:; // Begin body of loop
    _259 += _263;
    _262++;
    if (_262 < _261)
    goto _jump1003;
    _262 = 0;
    _263++;
    if (_263 < _260)
    goto _jump1003;
    // End body of loop
    int64_t _264 = _258 / _259;
    int64_t _265 = _257 + _264;
    if (_255 >= 0)
    goto _jump1004;
    fail_assertion("negative array index");
    _jump1004:;
    if (_255 < _236.d0)
    goto _jump1005;
    fail_assertion("index too large");
    _jump1005:;
    if (_256 >= 0)
    goto _jump1006;
    fail_assertion("negative array index");
    _jump1006:;
    if (_256 < _236.d1)
    goto _jump1007;
    fail_assertion("index too large");
    _jump1007:;
    if (_265 >= 0)
    goto _jump1008;
    fail_assertion("negative array index");
    _jump1008:;
    if (_265 < _236.d2)
    goto _jump1009;
    fail_assertion("index too large");
    _jump1009:;
    int64_t _266 = 0;
    _266 *= _236.d0;
    _266 += _255;
    _266 *= _236.d1;
    _266 += _256;
    _266 *= _236.d2;
    _266 += _265;
    bool _267 = _236.data[_266];
    double _268;
    if (!_267)
    goto _jump1010;
    int64_t _269 = 263;
    int64_t _270 = 802;
    bool _271 = _269 >= _270;
    bool _272 = !_271;
    bool _273 = !_272;
    double _274;
    if (!_273)
    goto _jump1011;
    double _275 = 6.0;
    double _276 = -_275;
    _274 = _276;
    goto _jump1012;
    _jump1011:;
    double _277 = 7.0;
    double _278 = a(_277);
    double _279 = a(_278);
    _274 = _279;
    _jump1012:;
    _268 = _274;
    goto _jump1013;
    _jump1010:;
    _268 = b;
    _jump1013:;
    bool _280 = _235 != _268;
    bool _281;
    if (!_280)
    goto _jump1014;
    bool _284 = f();
    bool _283 = _284;
    if (0 != _284)
    goto _jump1015;
    bool _285 = true;
    _283 = _285;
    _jump1015:;
    bool _282 = _283;
    if (0 != _283)
    goto _jump1016;
    bool _288 = f();
    bool _287 = _288;
    if (0 != _288)
    goto _jump1017;
    bool _289 = true;
    _287 = _289;
    _jump1017:;
    bool _286 = _287;
    if (0 != _287)
    goto _jump1018;
    bool _290 = f();
    _286 = _290;
    _jump1018:;
    _282 = _286;
    _jump1016:;
    _a1_bool _291;
    if (!_282)
    goto _jump1019;
    bool _292 = f();
    bool _293 = f();
    _a1_bool _294;
    _294.d0 = 2;
    _294.data = jpl_alloc(sizeof(bool) * 2);
    _294.data[0] = _292;
    _294.data[1] = _293;
    _a1__a1_bool _295;
    _295.d0 = 1;
    _295.data = jpl_alloc(sizeof(_a1_bool) * 1);
    _295.data[0] = _294;
    int64_t _296 = 544;
    int64_t _297 = -_296;
    if (_297 >= 0)
    goto _jump1020;
    fail_assertion("negative array index");
    _jump1020:;
    if (_297 < _295.d0)
    goto _jump1021;
    fail_assertion("index too large");
    _jump1021:;
    int64_t _298 = 0;
    _298 *= _295.d0;
    _298 += _297;
    _a1_bool _299 = _295.data[_298];
    _291 = _299;
    goto _jump1022;
    _jump1019:;
    bool _302 = f();
    bool _301 = _302;
    if (0 == _302)
    goto _jump1023;
    bool _303 = false;
    _301 = _303;
    _jump1023:;
    bool _300 = _301;
    if (0 != _301)
    goto _jump1024;
    bool _304 = f();
    _300 = _304;
    _jump1024:;
    _a1_bool _305;
    _305.d0 = 1;
    _305.data = jpl_alloc(sizeof(bool) * 1);
    _305.data[0] = _300;
    _291 = _305;
    _jump1022:;
    bool _306 = f();
    int64_t _307;
    if (!_306)
    goto _jump1025;
    int64_t _308 = 471;
    int64_t _309 = -_308;
    _307 = _309;
    goto _jump1026;
    _jump1025:;
    int64_t _310 = 710;
    _307 = _310;
    _jump1026:;
    int64_t _311 = 778;
    int64_t _312 = -_311;
    int64_t _313;
    // Computing bound for g
    int64_t _314 = 896;
    if (_314 > 0) 
    goto _jump1027;
    fail_assertion("non-positive loop bound");
    _jump1027:;
    _313 = 0;
    int64_t _315 = 0; // g
    _jump1028:; // Begin body of loop
    _313 += _315;
    _315++;
    if (_315 < _314)
    goto _jump1028;
    // End body of loop
    int64_t _316 = _312 * _313;
    int64_t _317 = _307 / _316;
    int64_t _318 = -_317;
    if (_318 >= 0)
    goto _jump1029;
    fail_assertion("negative array index");
    _jump1029:;
    if (_318 < _291.d0)
    goto _jump1030;
    fail_assertion("index too large");
    _jump1030:;
    int64_t _319 = 0;
    _319 *= _291.d0;
    _319 += _318;
    bool _320 = _291.data[_319];
    double _321 = 92.0;
    double _322 = b - _321;
    bool _323 = f();
    bool _324;
    if (!_323)
    goto _jump1031;
    bool _325 = f();
    _324 = _325;
    goto _jump1032;
    _jump1031:;
    bool _326 = f();
    _324 = _326;
    _jump1032:;
    double _327;
    if (!_324)
    goto _jump1033;
    _327 = b;
    goto _jump1034;
    _jump1033:;
    double _328 = 73.0;
    double _329 = -_328;
    _327 = _329;
    _jump1034:;
    double _330 = 84.0;
    double _331 = _327 - _330;
    bool _332 = _322 > _331;
    bool _333 = _320 != _332;
    _281 = _333;
    goto _jump1035;
    _jump1014:;
    _a2_bool _334;
    // Computing bound for g
    bool _335 = true;
    int64_t _336;
    if (!_335)
    goto _jump1036;
    int64_t _337 = 562;
    _336 = _337;
    goto _jump1037;
    _jump1036:;
    int64_t _338 = 434;
    int64_t _339 = 522;
    int64_t _340 = _338 - _339;
    int64_t _341 = -_340;
    int64_t _342 = 89;
    int64_t _343 = -_342;
    int64_t _344 = _341 / _343;
    _336 = _344;
    _jump1037:;
    _334.d0 = _336;
    if (_336 > 0) 
    goto _jump1038;
    fail_assertion("non-positive loop bound");
    _jump1038:;
    // Computing bound for h
    int64_t _345 = 543;
    _334.d1 = _345;
    if (_345 > 0) 
    goto _jump1039;
    fail_assertion("non-positive loop bound");
    _jump1039:;
    // Computing total size of heap memory to allocate
    int64_t _346 = 1;
    _346 *= _336;
    _346 *= _345;
    _346 *= sizeof(bool);
    _334.data = jpl_alloc(_346);
    int64_t _347 = 0; // h
    int64_t _348 = 0; // g
    _jump1040:; // Begin body of loop
    bool _349 = false;
    int64_t _350 = 0;
    _350 *= _334.d0;
    _350 += _348;
    _350 *= _334.d1;
    _350 += _347;
    _334.data[_350] = _349;
    _347++;
    if (_347 < _345)
    goto _jump1040;
    _347 = 0;
    _348++;
    if (_348 < _336)
    goto _jump1040;
    // End body of loop
    bool _351 = true;
    bool _352 = !_351;
    bool _353 = false;
    bool _354 = _352 == _353;
    bool _355 = !_354;
    _a1_int64_t _356;
    if (!_355)
    goto _jump1041;
    bool _357 = false;
    _a1_int64_t _358;
    if (!_357)
    goto _jump1042;
    _a1_int64_t _359;
    // Computing bound for g
    int64_t _360 = 983;
    _359.d0 = _360;
    if (_360 > 0) 
    goto _jump1043;
    fail_assertion("non-positive loop bound");
    _jump1043:;
    // Computing total size of heap memory to allocate
    int64_t _361 = 1;
    _361 *= _360;
    _361 *= sizeof(int64_t);
    _359.data = jpl_alloc(_361);
    int64_t _362 = 0; // g
    _jump1044:; // Begin body of loop
    int64_t _363 = -_362;
    int64_t _364 = 0;
    _364 *= _359.d0;
    _364 += _362;
    _359.data[_364] = _363;
    _362++;
    if (_362 < _360)
    goto _jump1044;
    // End body of loop
    _358 = _359;
    goto _jump1045;
    _jump1042:;
    _a1_int64_t _365;
    // Computing bound for g
    int64_t _366 = 328;
    _365.d0 = _366;
    if (_366 > 0) 
    goto _jump1046;
    fail_assertion("non-positive loop bound");
    _jump1046:;
    // Computing total size of heap memory to allocate
    int64_t _367 = 1;
    _367 *= _366;
    _367 *= sizeof(int64_t);
    _365.data = jpl_alloc(_367);
    int64_t _368 = 0; // g
    _jump1047:; // Begin body of loop
    int64_t _369 = 962;
    int64_t _370 = -_369;
    int64_t _371 = 0;
    _371 *= _365.d0;
    _371 += _368;
    _365.data[_371] = _370;
    _368++;
    if (_368 < _366)
    goto _jump1047;
    // End body of loop
    _358 = _365;
    _jump1045:;
    _356 = _358;
    goto _jump1048;
    _jump1041:;
    int64_t _372 = 597;
    _a1_int64_t _373;
    _373.d0 = 1;
    _373.data = jpl_alloc(sizeof(int64_t) * 1);
    _373.data[0] = _372;
    _356 = _373;
    _jump1048:;
    int64_t _374;
    // Computing bound for g
    int64_t _375;
    // Computing bound for g
    int64_t _376 = 274;
    int64_t _377 = -_376;
    if (_377 > 0) 
    goto _jump1049;
    fail_assertion("non-positive loop bound");
    _jump1049:;
    _375 = 0;
    int64_t _378 = 0; // g
    _jump1050:; // Begin body of loop
    int64_t _379 = 528;
    _375 += _379;
    _378++;
    if (_378 < _377)
    goto _jump1050;
    // End body of loop
    if (_375 > 0) 
    goto _jump1051;
    fail_assertion("non-positive loop bound");
    _jump1051:;
    // Computing bound for h
    int64_t _380 = 17;
    int64_t _381 = -_380;
    int64_t _382 = 41;
    int64_t _383 = 298;
    int64_t _384 = _382 * _383;
    int64_t _385 = _381 - _384;
    if (_385 > 0) 
    goto _jump1052;
    fail_assertion("non-positive loop bound");
    _jump1052:;
    // Computing bound for i
    int64_t _386 = 646;
    int64_t _387 = -_386;
    int64_t _388 = 360;
    int64_t _389 = _387 / _388;
    if (_389 > 0) 
    goto _jump1053;
    fail_assertion("non-positive loop bound");
    _jump1053:;
    _374 = 0;
    int64_t _390 = 0; // i
    int64_t _391 = 0; // h
    int64_t _392 = 0; // g
    _jump1054:; // Begin body of loop
    _374 += _392;
    _390++;
    if (_390 < _389)
    goto _jump1054;
    _390 = 0;
    _391++;
    if (_391 < _385)
    goto _jump1054;
    _391 = 0;
    _392++;
    if (_392 < _375)
    goto _jump1054;
    // End body of loop
    int64_t _393;
    // Computing bound for g
    int64_t _394 = 666;
    int64_t _395 = -_394;
    if (_395 > 0) 
    goto _jump1055;
    fail_assertion("non-positive loop bound");
    _jump1055:;
    // Computing bound for h
    int64_t _396 = 995;
    if (_396 > 0) 
    goto _jump1056;
    fail_assertion("non-positive loop bound");
    _jump1056:;
    _393 = 0;
    int64_t _397 = 0; // h
    int64_t _398 = 0; // g
    _jump1057:; // Begin body of loop
    _393 += _397;
    _397++;
    if (_397 < _396)
    goto _jump1057;
    _397 = 0;
    _398++;
    if (_398 < _395)
    goto _jump1057;
    // End body of loop
    int64_t _399 = _374 % _393;
    if (_399 >= 0)
    goto _jump1058;
    fail_assertion("negative array index");
    _jump1058:;
    if (_399 < _356.d0)
    goto _jump1059;
    fail_assertion("index too large");
    _jump1059:;
    int64_t _400 = 0;
    _400 *= _356.d0;
    _400 += _399;
    int64_t _401 = _356.data[_400];
    int64_t _402;
    // Computing bound for g
    int64_t _403 = 96;
    int64_t _404 = 46;
    int64_t _405 = _403 - _404;
    int64_t _406 = -_405;
    int64_t _407 = -_406;
    if (_407 > 0) 
    goto _jump1060;
    fail_assertion("non-positive loop bound");
    _jump1060:;
    // Computing bound for h
    int64_t _408 = 367;
    if (_408 > 0) 
    goto _jump1061;
    fail_assertion("non-positive loop bound");
    _jump1061:;
    _402 = 0;
    int64_t _409 = 0; // h
    int64_t _410 = 0; // g
    _jump1062:; // Begin body of loop
    int64_t _411 = -_409;
    int64_t _412 = -_411;
    int64_t _413 = -_412;
    _402 += _413;
    _409++;
    if (_409 < _408)
    goto _jump1062;
    _409 = 0;
    _410++;
    if (_410 < _407)
    goto _jump1062;
    // End body of loop
    bool _414 = true;
    bool _415 = !_414;
    bool _416 = !_415;
    bool _417 = !_416;
    int64_t _418;
    if (!_417)
    goto _jump1063;
    int64_t _419 = 611;
    _418 = _419;
    goto _jump1064;
    _jump1063:;
    int64_t _420 = 286;
    _418 = _420;
    _jump1064:;
    int64_t _421 = _402 * _418;
    if (_401 >= 0)
    goto _jump1065;
    fail_assertion("negative array index");
    _jump1065:;
    if (_401 < _334.d0)
    goto _jump1066;
    fail_assertion("index too large");
    _jump1066:;
    if (_421 >= 0)
    goto _jump1067;
    fail_assertion("negative array index");
    _jump1067:;
    if (_421 < _334.d1)
    goto _jump1068;
    fail_assertion("index too large");
    _jump1068:;
    int64_t _422 = 0;
    _422 *= _334.d0;
    _422 += _401;
    _422 *= _334.d1;
    _422 += _421;
    bool _423 = _334.data[_422];
    _281 = _423;
    _jump1035:;
    return _281;
    bool _424 = f();
    if (0 != _424)
    goto _jump1069;
    fail_assertion("g");
    _jump1069:;
    bool _425 = f();
    bool _426;
    if (!_425)
    goto _jump1070;
    _a1__a2_int64_t _427;
    // Computing bound for g
    int64_t _428;
    // Computing bound for g
    int64_t _429 = 823;
    if (_429 > 0) 
    goto _jump1071;
    fail_assertion("non-positive loop bound");
    _jump1071:;
    // Computing bound for h
    int64_t _430 = 305;
    int64_t _431 = 708;
    int64_t _432 = _430 + _431;
    if (_432 > 0) 
    goto _jump1072;
    fail_assertion("non-positive loop bound");
    _jump1072:;
    // Computing bound for i
    int64_t _433 = 324;
    if (_433 > 0) 
    goto _jump1073;
    fail_assertion("non-positive loop bound");
    _jump1073:;
    _428 = 0;
    int64_t _434 = 0; // i
    int64_t _435 = 0; // h
    int64_t _436 = 0; // g
    _jump1074:; // Begin body of loop
    _428 += _436;
    _434++;
    if (_434 < _433)
    goto _jump1074;
    _434 = 0;
    _435++;
    if (_435 < _432)
    goto _jump1074;
    _435 = 0;
    _436++;
    if (_436 < _429)
    goto _jump1074;
    // End body of loop
    _427.d0 = _428;
    if (_428 > 0) 
    goto _jump1075;
    fail_assertion("non-positive loop bound");
    _jump1075:;
    // Computing total size of heap memory to allocate
    int64_t _437 = 1;
    _437 *= _428;
    _437 *= sizeof(_a2_int64_t);
    _427.data = jpl_alloc(_437);
    int64_t _438 = 0; // g
    _jump1076:; // Begin body of loop
    _a2_int64_t _439;
    // Computing bound for h
    int64_t _440;
    // Computing bound for h
    int64_t _441 = 23;
    if (_441 > 0) 
    goto _jump1077;
    fail_assertion("non-positive loop bound");
    _jump1077:;
    _440 = 0;
    int64_t _442 = 0; // h
    _jump1078:; // Begin body of loop
    _440 += _438;
    _442++;
    if (_442 < _441)
    goto _jump1078;
    // End body of loop
    int64_t _443 = -_440;
    _439.d0 = _443;
    if (_443 > 0) 
    goto _jump1079;
    fail_assertion("non-positive loop bound");
    _jump1079:;
    // Computing bound for i
    int64_t _444 = -_438;
    int64_t _445 = 873;
    int64_t _446 = _444 * _445;
    _439.d1 = _446;
    if (_446 > 0) 
    goto _jump1080;
    fail_assertion("non-positive loop bound");
    _jump1080:;
    // Computing total size of heap memory to allocate
    int64_t _447 = 1;
    _447 *= _443;
    _447 *= _446;
    _447 *= sizeof(int64_t);
    _439.data = jpl_alloc(_447);
    int64_t _448 = 0; // i
    int64_t _449 = 0; // h
    _jump1081:; // Begin body of loop
    bool _450 = true;
    int64_t _451;
    if (!_450)
    goto _jump1082;
    int64_t _452 = _438 % _448;
    _451 = _452;
    goto _jump1083;
    _jump1082:;
    _451 = _448;
    _jump1083:;
    int64_t _453 = 0;
    _453 *= _439.d0;
    _453 += _449;
    _453 *= _439.d1;
    _453 += _448;
    _439.data[_453] = _451;
    _448++;
    if (_448 < _446)
    goto _jump1081;
    _448 = 0;
    _449++;
    if (_449 < _443)
    goto _jump1081;
    // End body of loop
    int64_t _454 = 0;
    _454 *= _427.d0;
    _454 += _438;
    _427.data[_454] = _439;
    _438++;
    if (_438 < _428)
    goto _jump1076;
    // End body of loop
    bool _455 = c(_427);
    _426 = _455;
    goto _jump1084;
    _jump1070:;
    double _456 = 65.0;
    bool _457 = _456 == b;
    _426 = _457;
    _jump1084:;
    bool _458;
    if (!_426)
    goto _jump1085;
    bool _459 = f();
    int64_t _460;
    if (!_459)
    goto _jump1086;
    int64_t _461 = 749;
    int64_t _462 = 106;
    int64_t _463 = -_462;
    int64_t _464 = _461 + _463;
    int64_t _465 = 857;
    int64_t _466 = 96;
    int64_t _467 = _465 - _466;
    int64_t _468 = 923;
    int64_t _469 = _467 * _468;
    int64_t _470 = _464 % _469;
    _460 = _470;
    goto _jump1087;
    _jump1086:;
    int64_t _471 = 227;
    _460 = _471;
    _jump1087:;
    if (_460 >= 0)
    goto _jump1088;
    fail_assertion("negative array index");
    _jump1088:;
    if (_460 < d.d0)
    goto _jump1089;
    fail_assertion("index too large");
    _jump1089:;
    int64_t _472 = 0;
    _472 *= d.d0;
    _472 += _460;
    double _473 = d.data[_472];
    bool _474 = _473 == b;
    _458 = _474;
    goto _jump1090;
    _jump1085:;
    int64_t _475 = 799;
    int64_t _476;
    // Computing bound for g
    int64_t _477 = 859;
    if (_477 > 0) 
    goto _jump1091;
    fail_assertion("non-positive loop bound");
    _jump1091:;
    // Computing bound for h
    int64_t _478 = 615;
    int64_t _479 = -_478;
    if (_479 > 0) 
    goto _jump1092;
    fail_assertion("non-positive loop bound");
    _jump1092:;
    _476 = 0;
    int64_t _480 = 0; // h
    int64_t _481 = 0; // g
    _jump1093:; // Begin body of loop
    int64_t _482 = 921;
    int64_t _483 = _482 * _480;
    _476 += _483;
    _480++;
    if (_480 < _479)
    goto _jump1093;
    _480 = 0;
    _481++;
    if (_481 < _477)
    goto _jump1093;
    // End body of loop
    int64_t _484 = 596;
    int64_t _485 = _476 + _484;
    int64_t _486 = _475 - _485;
    int64_t _487 = -_486;
    bool _488 = true;
    int64_t _489;
    if (!_488)
    goto _jump1094;
    int64_t _490 = 457;
    _489 = _490;
    goto _jump1095;
    _jump1094:;
    int64_t _491 = 754;
    _489 = _491;
    _jump1095:;
    int64_t _492 = 902;
    int64_t _493 = _489 % _492;
    int64_t _494 = 232;
    int64_t _495 = -_494;
    bool _496 = _493 == _495;
    int64_t _497;
    if (!_496)
    goto _jump1096;
    int64_t _498 = 781;
    int64_t _499 = -_498;
    _497 = _499;
    goto _jump1097;
    _jump1096:;
    double _500 = 43.0;
    bool _501 = f();
    double _502;
    if (!_501)
    goto _jump1098;
    double _503 = 7.0;
    _502 = _503;
    goto _jump1099;
    _jump1098:;
    double _504 = 5.0;
    _502 = _504;
    _jump1099:;
    bool _505 = _500 == _502;
    int64_t _506;
    if (!_505)
    goto _jump1100;
    int64_t _507 = 884;
    _506 = _507;
    goto _jump1101;
    _jump1100:;
    _a1_int64_t _508;
    // Computing bound for g
    int64_t _509 = 289;
    _508.d0 = _509;
    if (_509 > 0) 
    goto _jump1102;
    fail_assertion("non-positive loop bound");
    _jump1102:;
    // Computing total size of heap memory to allocate
    int64_t _510 = 1;
    _510 *= _509;
    _510 *= sizeof(int64_t);
    _508.data = jpl_alloc(_510);
    int64_t _511 = 0; // g
    _jump1103:; // Begin body of loop
    int64_t _512 = 0;
    _512 *= _508.d0;
    _512 += _511;
    _508.data[_512] = _511;
    _511++;
    if (_511 < _509)
    goto _jump1103;
    // End body of loop
    int64_t _513 = 27;
    int64_t _514 = 151;
    int64_t _515 = _513 + _514;
    if (_515 >= 0)
    goto _jump1104;
    fail_assertion("negative array index");
    _jump1104:;
    if (_515 < _508.d0)
    goto _jump1105;
    fail_assertion("index too large");
    _jump1105:;
    int64_t _516 = 0;
    _516 *= _508.d0;
    _516 += _515;
    int64_t _517 = _508.data[_516];
    _506 = _517;
    _jump1101:;
    _497 = _506;
    _jump1097:;
    int64_t _518 = -_497;
    bool _519 = _487 == _518;
    _458 = _519;
    _jump1090:;
    int64_t _520;
    // Computing bound for h
    bool _521 = _458;
    if (0 != _458)
    goto _jump1106;
    bool _522 = f();
    _521 = _522;
    _jump1106:;
    bool _523 = !_521;
    int64_t _524;
    if (!_523)
    goto _jump1107;
    int64_t _525;
    // Computing bound for h
    int64_t _526 = 104;
    if (_526 > 0) 
    goto _jump1108;
    fail_assertion("non-positive loop bound");
    _jump1108:;
    _525 = 0;
    int64_t _527 = 0; // h
    _jump1109:; // Begin body of loop
    int64_t _528 = 616;
    _525 += _528;
    _527++;
    if (_527 < _526)
    goto _jump1109;
    // End body of loop
    _524 = _525;
    goto _jump1110;
    _jump1107:;
    int64_t _529;
    // Computing bound for h
    int64_t _530 = 134;
    if (_530 > 0) 
    goto _jump1111;
    fail_assertion("non-positive loop bound");
    _jump1111:;
    // Computing bound for i
    int64_t _531 = 585;
    int64_t _532 = -_531;
    if (_532 > 0) 
    goto _jump1112;
    fail_assertion("non-positive loop bound");
    _jump1112:;
    _529 = 0;
    int64_t _533 = 0; // i
    int64_t _534 = 0; // h
    _jump1113:; // Begin body of loop
    _529 += _534;
    _533++;
    if (_533 < _532)
    goto _jump1113;
    _533 = 0;
    _534++;
    if (_534 < _530)
    goto _jump1113;
    // End body of loop
    _524 = _529;
    _jump1110:;
    _a1_int64_t _535;
    // Computing bound for h
    int64_t _536 = 81;
    int64_t _537 = 948;
    int64_t _538 = _536 * _537;
    _535.d0 = _538;
    if (_538 > 0) 
    goto _jump1114;
    fail_assertion("non-positive loop bound");
    _jump1114:;
    // Computing total size of heap memory to allocate
    int64_t _539 = 1;
    _539 *= _538;
    _539 *= sizeof(int64_t);
    _535.data = jpl_alloc(_539);
    int64_t _540 = 0; // h
    _jump1115:; // Begin body of loop
    int64_t _541 = 0;
    _541 *= _535.d0;
    _541 += _540;
    _535.data[_541] = _540;
    _540++;
    if (_540 < _538)
    goto _jump1115;
    // End body of loop
    int64_t _542 = 963;
    if (_542 >= 0)
    goto _jump1116;
    fail_assertion("negative array index");
    _jump1116:;
    if (_542 < _535.d0)
    goto _jump1117;
    fail_assertion("index too large");
    _jump1117:;
    int64_t _543 = 0;
    _543 *= _535.d0;
    _543 += _542;
    int64_t _544 = _535.data[_543];
    int64_t _545 = _524 * _544;
    if (_545 > 0) 
    goto _jump1118;
    fail_assertion("non-positive loop bound");
    _jump1118:;
    // Computing bound for i
    int64_t _546;
    // Computing bound for h
    int64_t _547;
    // Computing bound for h
    int64_t _548 = 332;
    int64_t _549 = -_548;
    if (_549 > 0) 
    goto _jump1119;
    fail_assertion("non-positive loop bound");
    _jump1119:;
    // Computing bound for i
    int64_t _550 = 554;
    if (_550 > 0) 
    goto _jump1120;
    fail_assertion("non-positive loop bound");
    _jump1120:;
    // Computing bound for j
    int64_t _551 = 501;
    int64_t _552 = -_551;
    if (_552 > 0) 
    goto _jump1121;
    fail_assertion("non-positive loop bound");
    _jump1121:;
    _547 = 0;
    int64_t _553 = 0; // j
    int64_t _554 = 0; // i
    int64_t _555 = 0; // h
    _jump1122:; // Begin body of loop
    int64_t _556 = -_555;
    _547 += _556;
    _553++;
    if (_553 < _552)
    goto _jump1122;
    _553 = 0;
    _554++;
    if (_554 < _550)
    goto _jump1122;
    _554 = 0;
    _555++;
    if (_555 < _549)
    goto _jump1122;
    // End body of loop
    if (_547 > 0) 
    goto _jump1123;
    fail_assertion("non-positive loop bound");
    _jump1123:;
    // Computing bound for i
    int64_t _557 = 834;
    if (_557 > 0) 
    goto _jump1124;
    fail_assertion("non-positive loop bound");
    _jump1124:;
    _546 = 0;
    int64_t _558 = 0; // i
    int64_t _559 = 0; // h
    _jump1125:; // Begin body of loop
    _a3_int64_t _560;
    // Computing bound for j
    _560.d0 = _559;
    if (_559 > 0) 
    goto _jump1126;
    fail_assertion("non-positive loop bound");
    _jump1126:;
    // Computing bound for k
    _560.d1 = _559;
    if (_559 > 0) 
    goto _jump1127;
    fail_assertion("non-positive loop bound");
    _jump1127:;
    // Computing bound for l
    _560.d2 = _558;
    if (_558 > 0) 
    goto _jump1128;
    fail_assertion("non-positive loop bound");
    _jump1128:;
    // Computing total size of heap memory to allocate
    int64_t _561 = 1;
    _561 *= _559;
    _561 *= _559;
    _561 *= _558;
    _561 *= sizeof(int64_t);
    _560.data = jpl_alloc(_561);
    int64_t _562 = 0; // l
    int64_t _563 = 0; // k
    int64_t _564 = 0; // j
    _jump1129:; // Begin body of loop
    int64_t _565 = 691;
    int64_t _566 = 0;
    _566 *= _560.d0;
    _566 += _564;
    _566 *= _560.d1;
    _566 += _563;
    _566 *= _560.d2;
    _566 += _562;
    _560.data[_566] = _565;
    _562++;
    if (_562 < _558)
    goto _jump1129;
    _562 = 0;
    _563++;
    if (_563 < _559)
    goto _jump1129;
    _563 = 0;
    _564++;
    if (_564 < _559)
    goto _jump1129;
    // End body of loop
    int64_t _567 = 947;
    if (_559 >= 0)
    goto _jump1130;
    fail_assertion("negative array index");
    _jump1130:;
    if (_559 < _560.d0)
    goto _jump1131;
    fail_assertion("index too large");
    _jump1131:;
    if (_558 >= 0)
    goto _jump1132;
    fail_assertion("negative array index");
    _jump1132:;
    if (_558 < _560.d1)
    goto _jump1133;
    fail_assertion("index too large");
    _jump1133:;
    if (_567 >= 0)
    goto _jump1134;
    fail_assertion("negative array index");
    _jump1134:;
    if (_567 < _560.d2)
    goto _jump1135;
    fail_assertion("index too large");
    _jump1135:;
    int64_t _568 = 0;
    _568 *= _560.d0;
    _568 += _559;
    _568 *= _560.d1;
    _568 += _558;
    _568 *= _560.d2;
    _568 += _567;
    int64_t _569 = _560.data[_568];
    _546 += _569;
    _558++;
    if (_558 < _557)
    goto _jump1125;
    _558 = 0;
    _559++;
    if (_559 < _547)
    goto _jump1125;
    // End body of loop
    int64_t _570 = 845;
    int64_t _571 = _546 / _570;
    if (_571 > 0) 
    goto _jump1136;
    fail_assertion("non-positive loop bound");
    _jump1136:;
    _520 = 0;
    int64_t _572 = 0; // i
    int64_t _573 = 0; // h
    _jump1137:; // Begin body of loop
    int64_t _574;
    // Computing bound for j
    bool _575 = false;
    bool _576 = !_575;
    int64_t _577;
    if (!_576)
    goto _jump1138;
    int64_t _578 = -_572;
    _577 = _578;
    goto _jump1139;
    _jump1138:;
    _577 = _572;
    _jump1139:;
    if (_577 > 0) 
    goto _jump1140;
    fail_assertion("non-positive loop bound");
    _jump1140:;
    // Computing bound for k
    if (_572 > 0) 
    goto _jump1141;
    fail_assertion("non-positive loop bound");
    _jump1141:;
    _574 = 0;
    int64_t _579 = 0; // k
    int64_t _580 = 0; // j
    _jump1142:; // Begin body of loop
    int64_t _581 = 341;
    _574 += _581;
    _579++;
    if (_579 < _572)
    goto _jump1142;
    _579 = 0;
    _580++;
    if (_580 < _577)
    goto _jump1142;
    // End body of loop
    int64_t _582 = -_574;
    _520 += _582;
    _572++;
    if (_572 < _571)
    goto _jump1137;
    _572 = 0;
    _573++;
    if (_573 < _545)
    goto _jump1137;
    // End body of loop
    bool _583 = true;
    bool _584 = !_583;
    int64_t _585;
    if (!_584)
    goto _jump1143;
    int64_t _586;
    // Computing bound for h
    int64_t _587 = 756;
    int64_t _588 = 305;
    int64_t _589 = _587 - _588;
    int64_t _590 = -_589;
    if (_590 > 0) 
    goto _jump1144;
    fail_assertion("non-positive loop bound");
    _jump1144:;
    // Computing bound for i
    int64_t _591 = 652;
    if (_591 > 0) 
    goto _jump1145;
    fail_assertion("non-positive loop bound");
    _jump1145:;
    // Computing bound for j
    int64_t _592 = 109;
    int64_t _593 = -_592;
    int64_t _594 = -_593;
    if (_594 > 0) 
    goto _jump1146;
    fail_assertion("non-positive loop bound");
    _jump1146:;
    _586 = 0;
    int64_t _595 = 0; // j
    int64_t _596 = 0; // i
    int64_t _597 = 0; // h
    _jump1147:; // Begin body of loop
    _586 += _597;
    _595++;
    if (_595 < _594)
    goto _jump1147;
    _595 = 0;
    _596++;
    if (_596 < _591)
    goto _jump1147;
    _596 = 0;
    _597++;
    if (_597 < _590)
    goto _jump1147;
    // End body of loop
    _585 = _586;
    goto _jump1148;
    _jump1143:;
    int64_t _598;
    // Computing bound for h
    int64_t _599 = 399;
    int64_t _600 = -_599;
    if (_600 > 0) 
    goto _jump1149;
    fail_assertion("non-positive loop bound");
    _jump1149:;
    // Computing bound for i
    int64_t _601 = 865;
    if (_601 > 0) 
    goto _jump1150;
    fail_assertion("non-positive loop bound");
    _jump1150:;
    _598 = 0;
    int64_t _602 = 0; // i
    int64_t _603 = 0; // h
    _jump1151:; // Begin body of loop
    _598 += _602;
    _602++;
    if (_602 < _601)
    goto _jump1151;
    _602 = 0;
    _603++;
    if (_603 < _600)
    goto _jump1151;
    // End body of loop
    int64_t _604 = -_598;
    _585 = _604;
    _jump1148:;
    _a2_int64_t _605;
    // Computing bound for h
    int64_t _606 = 973;
    _605.d0 = _606;
    if (_606 > 0) 
    goto _jump1152;
    fail_assertion("non-positive loop bound");
    _jump1152:;
    // Computing bound for i
    int64_t _607 = 409;
    _605.d1 = _607;
    if (_607 > 0) 
    goto _jump1153;
    fail_assertion("non-positive loop bound");
    _jump1153:;
    // Computing total size of heap memory to allocate
    int64_t _608 = 1;
    _608 *= _606;
    _608 *= _607;
    _608 *= sizeof(int64_t);
    _605.data = jpl_alloc(_608);
    int64_t _609 = 0; // i
    int64_t _610 = 0; // h
    _jump1154:; // Begin body of loop
    int64_t _611 = 0;
    _611 *= _605.d0;
    _611 += _610;
    _611 *= _605.d1;
    _611 += _609;
    _605.data[_611] = _609;
    _609++;
    if (_609 < _607)
    goto _jump1154;
    _609 = 0;
    _610++;
    if (_610 < _606)
    goto _jump1154;
    // End body of loop
    bool _613 = true;
    bool _612 = _613;
    if (0 != _613)
    goto _jump1155;
    bool _614 = true;
    _612 = _614;
    _jump1155:;
    int64_t _615;
    if (!_612)
    goto _jump1156;
    int64_t _616 = 472;
    int64_t _617 = 106;
    int64_t _618 = _616 % _617;
    int64_t _619 = -_618;
    _615 = _619;
    goto _jump1157;
    _jump1156:;
    int64_t _620 = 257;
    _615 = _620;
    _jump1157:;
    int64_t _621;
    // Computing bound for h
    int64_t _622 = 988;
    int64_t _623 = 61;
    _a1_int64_t _624;
    _624.d0 = 2;
    _624.data = jpl_alloc(sizeof(int64_t) * 2);
    _624.data[0] = _622;
    _624.data[1] = _623;
    int64_t _625 = 996;
    int64_t _626 = -_625;
    if (_626 >= 0)
    goto _jump1158;
    fail_assertion("negative array index");
    _jump1158:;
    if (_626 < _624.d0)
    goto _jump1159;
    fail_assertion("index too large");
    _jump1159:;
    int64_t _627 = 0;
    _627 *= _624.d0;
    _627 += _626;
    int64_t _628 = _624.data[_627];
    if (_628 > 0) 
    goto _jump1160;
    fail_assertion("non-positive loop bound");
    _jump1160:;
    // Computing bound for i
    int64_t _629 = 839;
    if (_629 > 0) 
    goto _jump1161;
    fail_assertion("non-positive loop bound");
    _jump1161:;
    // Computing bound for j
    int64_t _630 = 927;
    if (_630 > 0) 
    goto _jump1162;
    fail_assertion("non-positive loop bound");
    _jump1162:;
    _621 = 0;
    int64_t _631 = 0; // j
    int64_t _632 = 0; // i
    int64_t _633 = 0; // h
    _jump1163:; // Begin body of loop
    _621 += _631;
    _631++;
    if (_631 < _630)
    goto _jump1163;
    _631 = 0;
    _632++;
    if (_632 < _629)
    goto _jump1163;
    _632 = 0;
    _633++;
    if (_633 < _628)
    goto _jump1163;
    // End body of loop
    if (_615 >= 0)
    goto _jump1164;
    fail_assertion("negative array index");
    _jump1164:;
    if (_615 < _605.d0)
    goto _jump1165;
    fail_assertion("index too large");
    _jump1165:;
    if (_621 >= 0)
    goto _jump1166;
    fail_assertion("negative array index");
    _jump1166:;
    if (_621 < _605.d1)
    goto _jump1167;
    fail_assertion("index too large");
    _jump1167:;
    int64_t _634 = 0;
    _634 *= _605.d0;
    _634 += _615;
    _634 *= _605.d1;
    _634 += _621;
    int64_t _635 = _605.data[_634];
    int64_t _636 = _585 / _635;
    int64_t _637 = 633;
    int64_t _638 = -_637;
    int64_t _639 = 460;
    int64_t _640 = _638 % _639;
    int64_t _641 = -_640;
    int64_t _642 = -_641;
    _a1_int64_t _643;
    _643.d0 = 3;
    _643.data = jpl_alloc(sizeof(int64_t) * 3);
    _643.data[0] = _520;
    _643.data[1] = _636;
    _643.data[2] = _642;
    _a3__a1_int64_t _644;
    // Computing bound for h
    int64_t _645;
    // Computing bound for h
    bool _646 = true;
    int64_t _647;
    if (!_646)
    goto _jump1168;
    int64_t _648;
    // Computing bound for h
    int64_t _649 = 766;
    if (_649 > 0) 
    goto _jump1169;
    fail_assertion("non-positive loop bound");
    _jump1169:;
    _648 = 0;
    int64_t _650 = 0; // h
    _jump1170:; // Begin body of loop
    int64_t _651 = 439;
    int64_t _652 = _650 - _651;
    _648 += _652;
    _650++;
    if (_650 < _649)
    goto _jump1170;
    // End body of loop
    _647 = _648;
    goto _jump1171;
    _jump1168:;
    int64_t _653 = 650;
    int64_t _654 = 199;
    int64_t _655 = _653 / _654;
    _647 = _655;
    _jump1171:;
    if (_647 > 0) 
    goto _jump1172;
    fail_assertion("non-positive loop bound");
    _jump1172:;
    // Computing bound for i
    bool _656 = f();
    int64_t _657;
    if (!_656)
    goto _jump1173;
    int64_t _658;
    // Computing bound for h
    int64_t _659 = 474;
    if (_659 > 0) 
    goto _jump1174;
    fail_assertion("non-positive loop bound");
    _jump1174:;
    // Computing bound for i
    int64_t _660 = 707;
    if (_660 > 0) 
    goto _jump1175;
    fail_assertion("non-positive loop bound");
    _jump1175:;
    _658 = 0;
    int64_t _661 = 0; // i
    int64_t _662 = 0; // h
    _jump1176:; // Begin body of loop
    _658 += _661;
    _661++;
    if (_661 < _660)
    goto _jump1176;
    _661 = 0;
    _662++;
    if (_662 < _659)
    goto _jump1176;
    // End body of loop
    int64_t _663 = 61;
    int64_t _664 = 77;
    int64_t _665 = _663 - _664;
    int64_t _666 = _658 + _665;
    _657 = _666;
    goto _jump1177;
    _jump1173:;
    int64_t _667 = 205;
    int64_t _668 = 431;
    int64_t _669 = _667 + _668;
    int64_t _670 = 352;
    int64_t _671 = _669 / _670;
    _657 = _671;
    _jump1177:;
    if (_657 > 0) 
    goto _jump1178;
    fail_assertion("non-positive loop bound");
    _jump1178:;
    // Computing bound for j
    int64_t _672;
    // Computing bound for h
    int64_t _673 = 938;
    if (_673 > 0) 
    goto _jump1179;
    fail_assertion("non-positive loop bound");
    _jump1179:;
    _672 = 0;
    int64_t _674 = 0; // h
    _jump1180:; // Begin body of loop
    int64_t _675 = 773;
    _672 += _675;
    _674++;
    if (_674 < _673)
    goto _jump1180;
    // End body of loop
    int64_t _676 = 482;
    int64_t _677 = _672 - _676;
    if (_677 > 0) 
    goto _jump1181;
    fail_assertion("non-positive loop bound");
    _jump1181:;
    _645 = 0;
    int64_t _678 = 0; // j
    int64_t _679 = 0; // i
    int64_t _680 = 0; // h
    _jump1182:; // Begin body of loop
    _645 += _680;
    _678++;
    if (_678 < _677)
    goto _jump1182;
    _678 = 0;
    _679++;
    if (_679 < _657)
    goto _jump1182;
    _679 = 0;
    _680++;
    if (_680 < _647)
    goto _jump1182;
    // End body of loop
    _644.d0 = _645;
    if (_645 > 0) 
    goto _jump1183;
    fail_assertion("non-positive loop bound");
    _jump1183:;
    // Computing bound for i
    bool _681 = _458 != _458;
    bool _682 = f();
    bool _683 = !_682;
    bool _684 = _681 != _683;
    int64_t _685;
    if (!_684)
    goto _jump1184;
    int64_t _686 = 510;
    int64_t _687 = -_686;
    _685 = _687;
    goto _jump1185;
    _jump1184:;
    int64_t _688 = 801;
    _685 = _688;
    _jump1185:;
    int64_t _689;
    // Computing bound for h
    int64_t _690;
    if (!_458)
    goto _jump1186;
    int64_t _691 = 461;
    int64_t _692 = 451;
    int64_t _693 = _691 % _692;
    _690 = _693;
    goto _jump1187;
    _jump1186:;
    int64_t _694;
    // Computing bound for h
    int64_t _695 = 845;
    if (_695 > 0) 
    goto _jump1188;
    fail_assertion("non-positive loop bound");
    _jump1188:;
    // Computing bound for i
    int64_t _696 = 794;
    if (_696 > 0) 
    goto _jump1189;
    fail_assertion("non-positive loop bound");
    _jump1189:;
    // Computing bound for j
    int64_t _697 = 592;
    if (_697 > 0) 
    goto _jump1190;
    fail_assertion("non-positive loop bound");
    _jump1190:;
    _694 = 0;
    int64_t _698 = 0; // j
    int64_t _699 = 0; // i
    int64_t _700 = 0; // h
    _jump1191:; // Begin body of loop
    _694 += _700;
    _698++;
    if (_698 < _697)
    goto _jump1191;
    _698 = 0;
    _699++;
    if (_699 < _696)
    goto _jump1191;
    _699 = 0;
    _700++;
    if (_700 < _695)
    goto _jump1191;
    // End body of loop
    _690 = _694;
    _jump1187:;
    if (_690 > 0) 
    goto _jump1192;
    fail_assertion("non-positive loop bound");
    _jump1192:;
    // Computing bound for i
    int64_t _701;
    // Computing bound for h
    int64_t _702 = 52;
    if (_702 > 0) 
    goto _jump1193;
    fail_assertion("non-positive loop bound");
    _jump1193:;
    // Computing bound for i
    int64_t _703 = 480;
    if (_703 > 0) 
    goto _jump1194;
    fail_assertion("non-positive loop bound");
    _jump1194:;
    // Computing bound for j
    int64_t _704 = 945;
    if (_704 > 0) 
    goto _jump1195;
    fail_assertion("non-positive loop bound");
    _jump1195:;
    _701 = 0;
    int64_t _705 = 0; // j
    int64_t _706 = 0; // i
    int64_t _707 = 0; // h
    _jump1196:; // Begin body of loop
    int64_t _708 = 740;
    _701 += _708;
    _705++;
    if (_705 < _704)
    goto _jump1196;
    _705 = 0;
    _706++;
    if (_706 < _703)
    goto _jump1196;
    _706 = 0;
    _707++;
    if (_707 < _702)
    goto _jump1196;
    // End body of loop
    if (_701 > 0) 
    goto _jump1197;
    fail_assertion("non-positive loop bound");
    _jump1197:;
    _689 = 0;
    int64_t _709 = 0; // i
    int64_t _710 = 0; // h
    _jump1198:; // Begin body of loop
    int64_t _711 = -_710;
    _689 += _711;
    _709++;
    if (_709 < _701)
    goto _jump1198;
    _709 = 0;
    _710++;
    if (_710 < _690)
    goto _jump1198;
    // End body of loop
    int64_t _712 = _685 + _689;
    _644.d1 = _712;
    if (_712 > 0) 
    goto _jump1199;
    fail_assertion("non-positive loop bound");
    _jump1199:;
    // Computing bound for j
    bool _713 = f();
    int64_t _714;
    if (!_713)
    goto _jump1200;
    int64_t _715 = 437;
    _714 = _715;
    goto _jump1201;
    _jump1200:;
    int64_t _716 = 502;
    _714 = _716;
    _jump1201:;
    int64_t _717 = -_714;
    int64_t _718 = -_717;
    int64_t _719 = -_718;
    _644.d2 = _719;
    if (_719 > 0) 
    goto _jump1202;
    fail_assertion("non-positive loop bound");
    _jump1202:;
    // Computing total size of heap memory to allocate
    int64_t _720 = 1;
    _720 *= _645;
    _720 *= _712;
    _720 *= _719;
    _720 *= sizeof(_a1_int64_t);
    _644.data = jpl_alloc(_720);
    int64_t _721 = 0; // j
    int64_t _722 = 0; // i
    int64_t _723 = 0; // h
    _jump1203:; // Begin body of loop
    _a1_int64_t _724;
    _724.d0 = 2;
    _724.data = jpl_alloc(sizeof(int64_t) * 2);
    _724.data[0] = _723;
    _724.data[1] = _721;
    int64_t _725 = 0;
    _725 *= _644.d0;
    _725 += _723;
    _725 *= _644.d1;
    _725 += _722;
    _725 *= _644.d2;
    _725 += _721;
    _644.data[_725] = _724;
    _721++;
    if (_721 < _719)
    goto _jump1203;
    _721 = 0;
    _722++;
    if (_722 < _712)
    goto _jump1203;
    _722 = 0;
    _723++;
    if (_723 < _645)
    goto _jump1203;
    // End body of loop
    int64_t _726 = 792;
    bool _727 = f();
    double _728;
    if (!_727)
    goto _jump1204;
    double _729 = 48.0;
    _728 = _729;
    goto _jump1205;
    _jump1204:;
    _728 = b;
    _jump1205:;
    double _730 = -_728;
    double _731 = 51.0;
    double _732 = -_731;
    bool _733 = _730 != _732;
    int64_t _734;
    if (!_733)
    goto _jump1206;
    bool _735;
    if (!_458)
    goto _jump1207;
    _735 = _458;
    goto _jump1208;
    _jump1207:;
    bool _736 = f();
    _735 = _736;
    _jump1208:;
    int64_t _737;
    if (!_735)
    goto _jump1209;
    int64_t _738 = 885;
    int64_t _739 = -_738;
    int64_t _740 = 83;
    int64_t _741 = -_740;
    int64_t _742 = _739 - _741;
    _737 = _742;
    goto _jump1210;
    _jump1209:;
    int64_t _743 = 706;
    _737 = _743;
    _jump1210:;
    _734 = _737;
    goto _jump1211;
    _jump1206:;
    int64_t _744 = 126;
    int64_t _745 = 121;
    int64_t _746 = -_745;
    int64_t _747 = _744 + _746;
    int64_t _748 = -_747;
    _734 = _748;
    _jump1211:;
    int64_t _749 = -_734;
    int64_t _750;
    // Computing bound for h
    int64_t _751 = 357;
    int64_t _752 = -_751;
    int64_t _753 = -_752;
    int64_t _754 = -_753;
    if (_754 > 0) 
    goto _jump1212;
    fail_assertion("non-positive loop bound");
    _jump1212:;
    // Computing bound for i
    int64_t _755 = 228;
    if (_755 > 0) 
    goto _jump1213;
    fail_assertion("non-positive loop bound");
    _jump1213:;
    _750 = 0;
    int64_t _756 = 0; // i
    int64_t _757 = 0; // h
    _jump1214:; // Begin body of loop
    int64_t _758 = 781;
    _750 += _758;
    _756++;
    if (_756 < _755)
    goto _jump1214;
    _756 = 0;
    _757++;
    if (_757 < _754)
    goto _jump1214;
    // End body of loop
    if (_726 >= 0)
    goto _jump1215;
    fail_assertion("negative array index");
    _jump1215:;
    if (_726 < _644.d0)
    goto _jump1216;
    fail_assertion("index too large");
    _jump1216:;
    if (_749 >= 0)
    goto _jump1217;
    fail_assertion("negative array index");
    _jump1217:;
    if (_749 < _644.d1)
    goto _jump1218;
    fail_assertion("index too large");
    _jump1218:;
    if (_750 >= 0)
    goto _jump1219;
    fail_assertion("negative array index");
    _jump1219:;
    if (_750 < _644.d2)
    goto _jump1220;
    fail_assertion("index too large");
    _jump1220:;
    int64_t _759 = 0;
    _759 *= _644.d0;
    _759 += _726;
    _759 *= _644.d1;
    _759 += _749;
    _759 *= _644.d2;
    _759 += _750;
    _a1_int64_t _760 = _644.data[_759];
    _a1__a1_int64_t _761;
    _761.d0 = 2;
    _761.data = jpl_alloc(sizeof(_a1_int64_t) * 2);
    _761.data[0] = _643;
    _761.data[1] = _760;
    _a3_double _762;
    // Computing bound for i
    _a1_int64_t _763;
    // Computing bound for i
    int64_t _764 = 744;
    _763.d0 = _764;
    if (_764 > 0) 
    goto _jump1221;
    fail_assertion("non-positive loop bound");
    _jump1221:;
    // Computing total size of heap memory to allocate
    int64_t _765 = 1;
    _765 *= _764;
    _765 *= sizeof(int64_t);
    _763.data = jpl_alloc(_765);
    int64_t _766 = 0; // i
    _jump1222:; // Begin body of loop
    int64_t _767;
    // Computing bound for j
    int64_t _768 = 35;
    if (_768 > 0) 
    goto _jump1223;
    fail_assertion("non-positive loop bound");
    _jump1223:;
    // Computing bound for k
    int64_t _769 = 914;
    if (_769 > 0) 
    goto _jump1224;
    fail_assertion("non-positive loop bound");
    _jump1224:;
    // Computing bound for l
    int64_t _770 = 108;
    int64_t _771 = -_770;
    if (_771 > 0) 
    goto _jump1225;
    fail_assertion("non-positive loop bound");
    _jump1225:;
    _767 = 0;
    int64_t _772 = 0; // l
    int64_t _773 = 0; // k
    int64_t _774 = 0; // j
    _jump1226:; // Begin body of loop
    int64_t _775;
    // Computing bound for m
    if (_766 > 0) 
    goto _jump1227;
    fail_assertion("non-positive loop bound");
    _jump1227:;
    // Computing bound for n
    if (_766 > 0) 
    goto _jump1228;
    fail_assertion("non-positive loop bound");
    _jump1228:;
    _775 = 0;
    int64_t _776 = 0; // n
    int64_t _777 = 0; // m
    _jump1229:; // Begin body of loop
    _775 += _773;
    _776++;
    if (_776 < _766)
    goto _jump1229;
    _776 = 0;
    _777++;
    if (_777 < _766)
    goto _jump1229;
    // End body of loop
    _767 += _775;
    _772++;
    if (_772 < _771)
    goto _jump1226;
    _772 = 0;
    _773++;
    if (_773 < _769)
    goto _jump1226;
    _773 = 0;
    _774++;
    if (_774 < _768)
    goto _jump1226;
    // End body of loop
    int64_t _778 = 0;
    _778 *= _763.d0;
    _778 += _766;
    _763.data[_778] = _767;
    _766++;
    if (_766 < _764)
    goto _jump1222;
    // End body of loop
    int64_t _779 = 329;
    _a1_int64_t _780;
    _780.d0 = 1;
    _780.data = jpl_alloc(sizeof(int64_t) * 1);
    _780.data[0] = _779;
    int64_t _781;
    if (!_458)
    goto _jump1230;
    bool _782 = false;
    int64_t _783;
    if (!_782)
    goto _jump1231;
    int64_t _784 = 151;
    _783 = _784;
    goto _jump1232;
    _jump1231:;
    int64_t _785 = 608;
    _783 = _785;
    _jump1232:;
    _781 = _783;
    goto _jump1233;
    _jump1230:;
    int64_t _786 = 188;
    int64_t _787 = 468;
    int64_t _788 = _786 * _787;
    _781 = _788;
    _jump1233:;
    if (_781 >= 0)
    goto _jump1234;
    fail_assertion("negative array index");
    _jump1234:;
    if (_781 < _780.d0)
    goto _jump1235;
    fail_assertion("index too large");
    _jump1235:;
    int64_t _789 = 0;
    _789 *= _780.d0;
    _789 += _781;
    int64_t _790 = _780.data[_789];
    if (_790 >= 0)
    goto _jump1236;
    fail_assertion("negative array index");
    _jump1236:;
    if (_790 < _763.d0)
    goto _jump1237;
    fail_assertion("index too large");
    _jump1237:;
    int64_t _791 = 0;
    _791 *= _763.d0;
    _791 += _790;
    int64_t _792 = _763.data[_791];
    _a1_int64_t _793;
    _793.d0 = 1;
    _793.data = jpl_alloc(sizeof(int64_t) * 1);
    _793.data[0] = _792;
    _a1__a2_int64_t _794;
    // Computing bound for i
    int64_t _795 = 751;
    _794.d0 = _795;
    if (_795 > 0) 
    goto _jump1238;
    fail_assertion("non-positive loop bound");
    _jump1238:;
    // Computing total size of heap memory to allocate
    int64_t _796 = 1;
    _796 *= _795;
    _796 *= sizeof(_a2_int64_t);
    _794.data = jpl_alloc(_796);
    int64_t _797 = 0; // i
    _jump1239:; // Begin body of loop
    _a2_int64_t _798;
    // Computing bound for j
    int64_t _799 = 428;
    _798.d0 = _799;
    if (_799 > 0) 
    goto _jump1240;
    fail_assertion("non-positive loop bound");
    _jump1240:;
    // Computing bound for k
    int64_t _800 = -_797;
    _798.d1 = _800;
    if (_800 > 0) 
    goto _jump1241;
    fail_assertion("non-positive loop bound");
    _jump1241:;
    // Computing total size of heap memory to allocate
    int64_t _801 = 1;
    _801 *= _799;
    _801 *= _800;
    _801 *= sizeof(int64_t);
    _798.data = jpl_alloc(_801);
    int64_t _802 = 0; // k
    int64_t _803 = 0; // j
    _jump1242:; // Begin body of loop
    int64_t _804 = 787;
    int64_t _805 = 0;
    _805 *= _798.d0;
    _805 += _803;
    _805 *= _798.d1;
    _805 += _802;
    _798.data[_805] = _804;
    _802++;
    if (_802 < _800)
    goto _jump1242;
    _802 = 0;
    _803++;
    if (_803 < _799)
    goto _jump1242;
    // End body of loop
    int64_t _806 = 0;
    _806 *= _794.d0;
    _806 += _797;
    _794.data[_806] = _798;
    _797++;
    if (_797 < _795)
    goto _jump1239;
    // End body of loop
    int64_t _807;
    // Computing bound for i
    int64_t _808 = 443;
    int64_t _809 = -_808;
    int64_t _810 = -_809;
    if (_810 > 0) 
    goto _jump1243;
    fail_assertion("non-positive loop bound");
    _jump1243:;
    // Computing bound for j
    int64_t _811;
    // Computing bound for i
    int64_t _812 = 63;
    if (_812 > 0) 
    goto _jump1244;
    fail_assertion("non-positive loop bound");
    _jump1244:;
    // Computing bound for j
    int64_t _813 = 169;
    if (_813 > 0) 
    goto _jump1245;
    fail_assertion("non-positive loop bound");
    _jump1245:;
    _811 = 0;
    int64_t _814 = 0; // j
    int64_t _815 = 0; // i
    _jump1246:; // Begin body of loop
    _811 += _814;
    _814++;
    if (_814 < _813)
    goto _jump1246;
    _814 = 0;
    _815++;
    if (_815 < _812)
    goto _jump1246;
    // End body of loop
    int64_t _816 = 343;
    int64_t _817 = _811 / _816;
    if (_817 > 0) 
    goto _jump1247;
    fail_assertion("non-positive loop bound");
    _jump1247:;
    // Computing bound for k
    int64_t _818 = 338;
    if (_818 > 0) 
    goto _jump1248;
    fail_assertion("non-positive loop bound");
    _jump1248:;
    _807 = 0;
    int64_t _819 = 0; // k
    int64_t _820 = 0; // j
    int64_t _821 = 0; // i
    _jump1249:; // Begin body of loop
    int64_t _822;
    // Computing bound for l
    bool _823 = f();
    int64_t _824;
    if (!_823)
    goto _jump1250;
    _824 = _819;
    goto _jump1251;
    _jump1250:;
    _824 = _819;
    _jump1251:;
    if (_824 > 0) 
    goto _jump1252;
    fail_assertion("non-positive loop bound");
    _jump1252:;
    // Computing bound for m
    if (_821 > 0) 
    goto _jump1253;
    fail_assertion("non-positive loop bound");
    _jump1253:;
    _822 = 0;
    int64_t _825 = 0; // m
    int64_t _826 = 0; // l
    _jump1254:; // Begin body of loop
    bool _827 = true;
    int64_t _828;
    if (!_827)
    goto _jump1255;
    int64_t _829 = 229;
    _828 = _829;
    goto _jump1256;
    _jump1255:;
    _828 = _820;
    _jump1256:;
    _822 += _828;
    _825++;
    if (_825 < _821)
    goto _jump1254;
    _825 = 0;
    _826++;
    if (_826 < _824)
    goto _jump1254;
    // End body of loop
    _807 += _822;
    _819++;
    if (_819 < _818)
    goto _jump1249;
    _819 = 0;
    _820++;
    if (_820 < _817)
    goto _jump1249;
    _820 = 0;
    _821++;
    if (_821 < _810)
    goto _jump1249;
    // End body of loop
    if (_807 >= 0)
    goto _jump1257;
    fail_assertion("negative array index");
    _jump1257:;
    if (_807 < _794.d0)
    goto _jump1258;
    fail_assertion("index too large");
    _jump1258:;
    int64_t _830 = 0;
    _830 *= _794.d0;
    _830 += _807;
    _a2_int64_t _831 = _794.data[_830];
    int64_t _832 = 290;
    int64_t _833 = -_832;
    int64_t _834 = -_833;
    int64_t _835 = 690;
    int64_t _836 = _834 % _835;
    int64_t _837 = -_836;
    int64_t _838 = 336;
    if (_837 >= 0)
    goto _jump1259;
    fail_assertion("negative array index");
    _jump1259:;
    if (_837 < _831.d0)
    goto _jump1260;
    fail_assertion("index too large");
    _jump1260:;
    if (_838 >= 0)
    goto _jump1261;
    fail_assertion("negative array index");
    _jump1261:;
    if (_838 < _831.d1)
    goto _jump1262;
    fail_assertion("index too large");
    _jump1262:;
    int64_t _839 = 0;
    _839 *= _831.d0;
    _839 += _837;
    _839 *= _831.d1;
    _839 += _838;
    int64_t _840 = _831.data[_839];
    if (_840 >= 0)
    goto _jump1263;
    fail_assertion("negative array index");
    _jump1263:;
    if (_840 < _793.d0)
    goto _jump1264;
    fail_assertion("index too large");
    _jump1264:;
    int64_t _841 = 0;
    _841 *= _793.d0;
    _841 += _840;
    int64_t _842 = _793.data[_841];
    _762.d0 = _842;
    if (_842 > 0) 
    goto _jump1265;
    fail_assertion("non-positive loop bound");
    _jump1265:;
    // Computing bound for j
    int64_t _843 = 401;
    _762.d1 = _843;
    if (_843 > 0) 
    goto _jump1266;
    fail_assertion("non-positive loop bound");
    _jump1266:;
    // Computing bound for k
    int64_t _844;
    // Computing bound for i
    int64_t _845 = 809;
    int64_t _846 = 814;
    int64_t _847 = 513;
    int64_t _848 = -_847;
    int64_t _849 = _846 % _848;
    int64_t _850 = _845 + _849;
    if (_850 > 0) 
    goto _jump1267;
    fail_assertion("non-positive loop bound");
    _jump1267:;
    // Computing bound for j
    int64_t _851 = 598;
    int64_t _852 = 354;
    int64_t _853 = _851 + _852;
    if (_853 > 0) 
    goto _jump1268;
    fail_assertion("non-positive loop bound");
    _jump1268:;
    // Computing bound for k
    int64_t _854 = 584;
    if (_854 > 0) 
    goto _jump1269;
    fail_assertion("non-positive loop bound");
    _jump1269:;
    _844 = 0;
    int64_t _855 = 0; // k
    int64_t _856 = 0; // j
    int64_t _857 = 0; // i
    _jump1270:; // Begin body of loop
    _844 += _857;
    _855++;
    if (_855 < _854)
    goto _jump1270;
    _855 = 0;
    _856++;
    if (_856 < _853)
    goto _jump1270;
    _856 = 0;
    _857++;
    if (_857 < _850)
    goto _jump1270;
    // End body of loop
    int64_t _858 = -_844;
    int64_t _859 = -_858;
    _762.d2 = _859;
    if (_859 > 0) 
    goto _jump1271;
    fail_assertion("non-positive loop bound");
    _jump1271:;
    // Computing total size of heap memory to allocate
    int64_t _860 = 1;
    _860 *= _842;
    _860 *= _843;
    _860 *= _859;
    _860 *= sizeof(double);
    _762.data = jpl_alloc(_860);
    int64_t _861 = 0; // k
    int64_t _862 = 0; // j
    int64_t _863 = 0; // i
    _jump1272:; // Begin body of loop
    double _864 = 77.0;
    double _865 = -_864;
    int64_t _866 = 0;
    _866 *= _762.d0;
    _866 += _863;
    _866 *= _762.d1;
    _866 += _862;
    _866 *= _762.d2;
    _866 += _861;
    _762.data[_866] = _865;
    _861++;
    if (_861 < _859)
    goto _jump1272;
    _861 = 0;
    _862++;
    if (_862 < _843)
    goto _jump1272;
    _862 = 0;
    _863++;
    if (_863 < _842)
    goto _jump1272;
    // End body of loop
    _a3__a2_bool _867;
    // Computing bound for m
    int64_t _868 = -_762.d2;
    _867.d0 = _868;
    if (_868 > 0) 
    goto _jump1273;
    fail_assertion("non-positive loop bound");
    _jump1273:;
    // Computing bound for n
    _867.d1 = _762.d2;
    if (_762.d2 > 0) 
    goto _jump1274;
    fail_assertion("non-positive loop bound");
    _jump1274:;
    // Computing bound for o
    _867.d2 = _762.d2;
    if (_762.d2 > 0) 
    goto _jump1275;
    fail_assertion("non-positive loop bound");
    _jump1275:;
    // Computing total size of heap memory to allocate
    int64_t _869 = 1;
    _869 *= _868;
    _869 *= _762.d2;
    _869 *= _762.d2;
    _869 *= sizeof(_a2_bool);
    _867.data = jpl_alloc(_869);
    int64_t _870 = 0; // o
    int64_t _871 = 0; // n
    int64_t _872 = 0; // m
    _jump1276:; // Begin body of loop
    _a2_bool _873;
    // Computing bound for p
    _873.d0 = _762.d0;
    if (_762.d0 > 0) 
    goto _jump1277;
    fail_assertion("non-positive loop bound");
    _jump1277:;
    // Computing bound for q
    _873.d1 = _872;
    if (_872 > 0) 
    goto _jump1278;
    fail_assertion("non-positive loop bound");
    _jump1278:;
    // Computing total size of heap memory to allocate
    int64_t _874 = 1;
    _874 *= _762.d0;
    _874 *= _872;
    _874 *= sizeof(bool);
    _873.data = jpl_alloc(_874);
    int64_t _875 = 0; // q
    int64_t _876 = 0; // p
    _jump1279:; // Begin body of loop
    bool _877 = true;
    int64_t _878 = 0;
    _878 *= _873.d0;
    _878 += _876;
    _878 *= _873.d1;
    _878 += _875;
    _873.data[_878] = _877;
    _875++;
    if (_875 < _872)
    goto _jump1279;
    _875 = 0;
    _876++;
    if (_876 < _762.d0)
    goto _jump1279;
    // End body of loop
    int64_t _879 = 0;
    _879 *= _867.d0;
    _879 += _872;
    _879 *= _867.d1;
    _879 += _871;
    _879 *= _867.d2;
    _879 += _870;
    _867.data[_879] = _873;
    _870++;
    if (_870 < _762.d2)
    goto _jump1276;
    _870 = 0;
    _871++;
    if (_871 < _762.d2)
    goto _jump1276;
    _871 = 0;
    _872++;
    if (_872 < _868)
    goto _jump1276;
    // End body of loop
    int64_t _880 = 447;
    int64_t _881 = 404;
    if (_762.d0 >= 0)
    goto _jump1280;
    fail_assertion("negative array index");
    _jump1280:;
    if (_762.d0 < _867.d0)
    goto _jump1281;
    fail_assertion("index too large");
    _jump1281:;
    if (_880 >= 0)
    goto _jump1282;
    fail_assertion("negative array index");
    _jump1282:;
    if (_880 < _867.d1)
    goto _jump1283;
    fail_assertion("index too large");
    _jump1283:;
    if (_881 >= 0)
    goto _jump1284;
    fail_assertion("negative array index");
    _jump1284:;
    if (_881 < _867.d2)
    goto _jump1285;
    fail_assertion("index too large");
    _jump1285:;
    int64_t _882 = 0;
    _882 *= _867.d0;
    _882 += _762.d0;
    _882 *= _867.d1;
    _882 += _880;
    _882 *= _867.d2;
    _882 += _881;
    _a2_bool _883 = _867.data[_882];
    if (_762.d0 >= 0)
    goto _jump1286;
    fail_assertion("negative array index");
    _jump1286:;
    if (_762.d0 < _883.d0)
    goto _jump1287;
    fail_assertion("index too large");
    _jump1287:;
    if (_762.d1 >= 0)
    goto _jump1288;
    fail_assertion("negative array index");
    _jump1288:;
    if (_762.d1 < _883.d1)
    goto _jump1289;
    fail_assertion("index too large");
    _jump1289:;
    int64_t _884 = 0;
    _884 *= _883.d0;
    _884 += _762.d0;
    _884 *= _883.d1;
    _884 += _762.d1;
    bool _885 = _883.data[_884];
    return _885;
}

double p(_a1__a2_double q, double r) {
    int64_t _0;
    // Computing bound for t
    int64_t _1 = -h;
    if (_1 > 0) 
    goto _jump1459;
    fail_assertion("non-positive loop bound");
    _jump1459:;
    // Computing bound for u
    int64_t _2;
    // Computing bound for t
    _a2_int64_t _3;
    // Computing bound for t
    _3.d0 = o;
    if (o > 0) 
    goto _jump1460;
    fail_assertion("non-positive loop bound");
    _jump1460:;
    // Computing bound for u
    int64_t _4 = -m;
    _3.d1 = _4;
    if (_4 > 0) 
    goto _jump1461;
    fail_assertion("non-positive loop bound");
    _jump1461:;
    // Computing total size of heap memory to allocate
    int64_t _5 = 1;
    _5 *= o;
    _5 *= _4;
    _5 *= sizeof(int64_t);
    _3.data = jpl_alloc(_5);
    int64_t _6 = 0; // u
    int64_t _7 = 0; // t
    _jump1462:; // Begin body of loop
    int64_t _8 = -j;
    int64_t _9 = 0;
    _9 *= _3.d0;
    _9 += _7;
    _9 *= _3.d1;
    _9 += _6;
    _3.data[_9] = _8;
    _6++;
    if (_6 < _4)
    goto _jump1462;
    _6 = 0;
    _7++;
    if (_7 < o)
    goto _jump1462;
    // End body of loop
    int64_t _10 = 119;
    int64_t _11 = -_10;
    if (_11 >= 0)
    goto _jump1463;
    fail_assertion("negative array index");
    _jump1463:;
    if (_11 < _3.d0)
    goto _jump1464;
    fail_assertion("index too large");
    _jump1464:;
    if (o >= 0)
    goto _jump1465;
    fail_assertion("negative array index");
    _jump1465:;
    if (o < _3.d1)
    goto _jump1466;
    fail_assertion("index too large");
    _jump1466:;
    int64_t _12 = 0;
    _12 *= _3.d0;
    _12 += _11;
    _12 *= _3.d1;
    _12 += o;
    int64_t _13 = _3.data[_12];
    if (_13 > 0) 
    goto _jump1467;
    fail_assertion("non-positive loop bound");
    _jump1467:;
    // Computing bound for u
    if (j > 0) 
    goto _jump1468;
    fail_assertion("non-positive loop bound");
    _jump1468:;
    _2 = 0;
    int64_t _14 = 0; // u
    int64_t _15 = 0; // t
    _jump1469:; // Begin body of loop
    _2 += h;
    _14++;
    if (_14 < j)
    goto _jump1469;
    _14 = 0;
    _15++;
    if (_15 < _13)
    goto _jump1469;
    // End body of loop
    if (_2 > 0) 
    goto _jump1470;
    fail_assertion("non-positive loop bound");
    _jump1470:;
    // Computing bound for v
    int64_t _16;
    // Computing bound for t
    if (o > 0) 
    goto _jump1471;
    fail_assertion("non-positive loop bound");
    _jump1471:;
    _16 = 0;
    int64_t _17 = 0; // t
    _jump1472:; // Begin body of loop
    _16 += _17;
    _17++;
    if (_17 < o)
    goto _jump1472;
    // End body of loop
    if (_16 > 0) 
    goto _jump1473;
    fail_assertion("non-positive loop bound");
    _jump1473:;
    _0 = 0;
    int64_t _18 = 0; // v
    int64_t _19 = 0; // u
    int64_t _20 = 0; // t
    _jump1474:; // Begin body of loop
    _0 += o;
    _18++;
    if (_18 < _16)
    goto _jump1474;
    _18 = 0;
    _19++;
    if (_19 < _2)
    goto _jump1474;
    _19 = 0;
    _20++;
    if (_20 < _1)
    goto _jump1474;
    // End body of loop
    bool _21 = n < _0;
    _a2_int64_t _22;
    if (!_21)
    goto _jump1475;
    bool _26 = b < r;
    bool _25 = _26;
    if (0 != _26)
    goto _jump1476;
    bool _28 = true;
    bool _27 = _28;
    if (0 == _28)
    goto _jump1477;
    bool _29 = true;
    _27 = _29;
    _jump1477:;
    _25 = _27;
    _jump1476:;
    bool _24 = _25;
    if (0 == _25)
    goto _jump1478;
    bool _30 = f();
    bool _31 = !_30;
    _24 = _31;
    _jump1478:;
    bool _23 = _24;
    if (0 == _24)
    goto _jump1479;
    bool _32 = true;
    _23 = _32;
    _jump1479:;
    bool _33;
    if (!_23)
    goto _jump1480;
    bool _35 = r >= k;
    bool _36 = !_35;
    bool _34 = _36;
    if (0 != _36)
    goto _jump1481;
    int64_t _37 = 137;
    bool _38 = _37 != i;
    _34 = _38;
    _jump1481:;
    bool _39 = !_34;
    _33 = _39;
    goto _jump1482;
    _jump1480:;
    double _40 = 54.0;
    double _41;
    // Computing bound for t
    if (o > 0) 
    goto _jump1483;
    fail_assertion("non-positive loop bound");
    _jump1483:;
    _41 = 0;
    int64_t _42 = 0; // t
    _jump1484:; // Begin body of loop
    _41 += b;
    _42++;
    if (_42 < o)
    goto _jump1484;
    // End body of loop
    double _43 = r / _41;
    double _44 = _43 - k;
    bool _45 = _40 >= _44;
    _33 = _45;
    _jump1482:;
    _a2_int64_t _46;
    if (!_33)
    goto _jump1485;
    _a3__a2_int64_t _47;
    // Computing bound for t
    _47.d0 = m;
    if (m > 0) 
    goto _jump1486;
    fail_assertion("non-positive loop bound");
    _jump1486:;
    // Computing bound for u
    int64_t _48 = 438;
    int64_t _49 = -o;
    int64_t _50 = _48 % _49;
    _47.d1 = _50;
    if (_50 > 0) 
    goto _jump1487;
    fail_assertion("non-positive loop bound");
    _jump1487:;
    // Computing bound for v
    int64_t _51 = j + o;
    _47.d2 = _51;
    if (_51 > 0) 
    goto _jump1488;
    fail_assertion("non-positive loop bound");
    _jump1488:;
    // Computing total size of heap memory to allocate
    int64_t _52 = 1;
    _52 *= m;
    _52 *= _50;
    _52 *= _51;
    _52 *= sizeof(_a2_int64_t);
    _47.data = jpl_alloc(_52);
    int64_t _53 = 0; // v
    int64_t _54 = 0; // u
    int64_t _55 = 0; // t
    _jump1489:; // Begin body of loop
    bool _56 = j < _55;
    _a2_int64_t _57;
    if (!_56)
    goto _jump1490;
    _a2_int64_t _58;
    // Computing bound for w
    _58.d0 = o;
    if (o > 0) 
    goto _jump1491;
    fail_assertion("non-positive loop bound");
    _jump1491:;
    // Computing bound for x
    int64_t _59;
    // Computing bound for w
    if (n > 0) 
    goto _jump1492;
    fail_assertion("non-positive loop bound");
    _jump1492:;
    // Computing bound for x
    if (j > 0) 
    goto _jump1493;
    fail_assertion("non-positive loop bound");
    _jump1493:;
    // Computing bound for y
    if (i > 0) 
    goto _jump1494;
    fail_assertion("non-positive loop bound");
    _jump1494:;
    _59 = 0;
    int64_t _60 = 0; // y
    int64_t _61 = 0; // x
    int64_t _62 = 0; // w
    _jump1495:; // Begin body of loop
    _59 += _62;
    _60++;
    if (_60 < i)
    goto _jump1495;
    _60 = 0;
    _61++;
    if (_61 < j)
    goto _jump1495;
    _61 = 0;
    _62++;
    if (_62 < n)
    goto _jump1495;
    // End body of loop
    _58.d1 = _59;
    if (_59 > 0) 
    goto _jump1496;
    fail_assertion("non-positive loop bound");
    _jump1496:;
    // Computing total size of heap memory to allocate
    int64_t _63 = 1;
    _63 *= o;
    _63 *= _59;
    _63 *= sizeof(int64_t);
    _58.data = jpl_alloc(_63);
    int64_t _64 = 0; // x
    int64_t _65 = 0; // w
    _jump1497:; // Begin body of loop
    int64_t _66 = 0;
    _66 *= _58.d0;
    _66 += _65;
    _66 *= _58.d1;
    _66 += _64;
    _58.data[_66] = o;
    _64++;
    if (_64 < _59)
    goto _jump1497;
    _64 = 0;
    _65++;
    if (_65 < o)
    goto _jump1497;
    // End body of loop
    _57 = _58;
    goto _jump1498;
    _jump1490:;
    _a2_int64_t _67;
    // Computing bound for w
    _67.d0 = o;
    if (o > 0) 
    goto _jump1499;
    fail_assertion("non-positive loop bound");
    _jump1499:;
    // Computing bound for x
    _67.d1 = n;
    if (n > 0) 
    goto _jump1500;
    fail_assertion("non-positive loop bound");
    _jump1500:;
    // Computing total size of heap memory to allocate
    int64_t _68 = 1;
    _68 *= o;
    _68 *= n;
    _68 *= sizeof(int64_t);
    _67.data = jpl_alloc(_68);
    int64_t _69 = 0; // x
    int64_t _70 = 0; // w
    _jump1501:; // Begin body of loop
    int64_t _71 = 0;
    _71 *= _67.d0;
    _71 += _70;
    _71 *= _67.d1;
    _71 += _69;
    _67.data[_71] = _55;
    _69++;
    if (_69 < n)
    goto _jump1501;
    _69 = 0;
    _70++;
    if (_70 < o)
    goto _jump1501;
    // End body of loop
    _57 = _67;
    _jump1498:;
    int64_t _72 = 0;
    _72 *= _47.d0;
    _72 += _55;
    _72 *= _47.d1;
    _72 += _54;
    _72 *= _47.d2;
    _72 += _53;
    _47.data[_72] = _57;
    _53++;
    if (_53 < _51)
    goto _jump1489;
    _53 = 0;
    _54++;
    if (_54 < _50)
    goto _jump1489;
    _54 = 0;
    _55++;
    if (_55 < m)
    goto _jump1489;
    // End body of loop
    int64_t _73 = -i;
    bool _74 = o <= _73;
    int64_t _75;
    if (!_74)
    goto _jump1502;
    _a1_int64_t _76;
    // Computing bound for t
    _76.d0 = o;
    if (o > 0) 
    goto _jump1503;
    fail_assertion("non-positive loop bound");
    _jump1503:;
    // Computing total size of heap memory to allocate
    int64_t _77 = 1;
    _77 *= o;
    _77 *= sizeof(int64_t);
    _76.data = jpl_alloc(_77);
    int64_t _78 = 0; // t
    _jump1504:; // Begin body of loop
    int64_t _79 = 0;
    _79 *= _76.d0;
    _79 += _78;
    _76.data[_79] = o;
    _78++;
    if (_78 < o)
    goto _jump1504;
    // End body of loop
    if (i >= 0)
    goto _jump1505;
    fail_assertion("negative array index");
    _jump1505:;
    if (i < _76.d0)
    goto _jump1506;
    fail_assertion("index too large");
    _jump1506:;
    int64_t _80 = 0;
    _80 *= _76.d0;
    _80 += i;
    int64_t _81 = _76.data[_80];
    _75 = _81;
    goto _jump1507;
    _jump1502:;
    _75 = m;
    _jump1507:;
    int64_t _82 = 781;
    bool _83 = true;
    int64_t _84;
    if (!_83)
    goto _jump1508;
    int64_t _85 = 590;
    _84 = _85;
    goto _jump1509;
    _jump1508:;
    int64_t _86;
    // Computing bound for t
    _a1_int64_t _87;
    // Computing bound for t
    _87.d0 = n;
    if (n > 0) 
    goto _jump1510;
    fail_assertion("non-positive loop bound");
    _jump1510:;
    // Computing total size of heap memory to allocate
    int64_t _88 = 1;
    _88 *= n;
    _88 *= sizeof(int64_t);
    _87.data = jpl_alloc(_88);
    int64_t _89 = 0; // t
    _jump1511:; // Begin body of loop
    int64_t _90 = 0;
    _90 *= _87.d0;
    _90 += _89;
    _87.data[_90] = n;
    _89++;
    if (_89 < n)
    goto _jump1511;
    // End body of loop
    int64_t _91 = 929;
    if (o >= 0)
    goto _jump1512;
    fail_assertion("negative array index");
    _jump1512:;
    if (o < g.d0)
    goto _jump1513;
    fail_assertion("index too large");
    _jump1513:;
    if (_91 >= 0)
    goto _jump1514;
    fail_assertion("negative array index");
    _jump1514:;
    if (_91 < g.d1)
    goto _jump1515;
    fail_assertion("index too large");
    _jump1515:;
    if (n >= 0)
    goto _jump1516;
    fail_assertion("negative array index");
    _jump1516:;
    if (n < g.d2)
    goto _jump1517;
    fail_assertion("index too large");
    _jump1517:;
    int64_t _92 = 0;
    _92 *= g.d0;
    _92 += o;
    _92 *= g.d1;
    _92 += _91;
    _92 *= g.d2;
    _92 += n;
    int64_t _93 = g.data[_92];
    if (_93 >= 0)
    goto _jump1518;
    fail_assertion("negative array index");
    _jump1518:;
    if (_93 < _87.d0)
    goto _jump1519;
    fail_assertion("index too large");
    _jump1519:;
    int64_t _94 = 0;
    _94 *= _87.d0;
    _94 += _93;
    int64_t _95 = _87.data[_94];
    if (_95 > 0) 
    goto _jump1520;
    fail_assertion("non-positive loop bound");
    _jump1520:;
    // Computing bound for u
    if (i > 0) 
    goto _jump1521;
    fail_assertion("non-positive loop bound");
    _jump1521:;
    _86 = 0;
    int64_t _96 = 0; // u
    int64_t _97 = 0; // t
    _jump1522:; // Begin body of loop
    _86 += _96;
    _96++;
    if (_96 < i)
    goto _jump1522;
    _96 = 0;
    _97++;
    if (_97 < _95)
    goto _jump1522;
    // End body of loop
    _84 = _86;
    _jump1509:;
    if (_75 >= 0)
    goto _jump1523;
    fail_assertion("negative array index");
    _jump1523:;
    if (_75 < _47.d0)
    goto _jump1524;
    fail_assertion("index too large");
    _jump1524:;
    if (_82 >= 0)
    goto _jump1525;
    fail_assertion("negative array index");
    _jump1525:;
    if (_82 < _47.d1)
    goto _jump1526;
    fail_assertion("index too large");
    _jump1526:;
    if (_84 >= 0)
    goto _jump1527;
    fail_assertion("negative array index");
    _jump1527:;
    if (_84 < _47.d2)
    goto _jump1528;
    fail_assertion("index too large");
    _jump1528:;
    int64_t _98 = 0;
    _98 *= _47.d0;
    _98 += _75;
    _98 *= _47.d1;
    _98 += _82;
    _98 *= _47.d2;
    _98 += _84;
    _a2_int64_t _99 = _47.data[_98];
    _46 = _99;
    goto _jump1529;
    _jump1485:;
    _a2_int64_t _100;
    // Computing bound for t
    _100.d0 = j;
    if (j > 0) 
    goto _jump1530;
    fail_assertion("non-positive loop bound");
    _jump1530:;
    // Computing bound for u
    _100.d1 = h;
    if (h > 0) 
    goto _jump1531;
    fail_assertion("non-positive loop bound");
    _jump1531:;
    // Computing total size of heap memory to allocate
    int64_t _101 = 1;
    _101 *= j;
    _101 *= h;
    _101 *= sizeof(int64_t);
    _100.data = jpl_alloc(_101);
    int64_t _102 = 0; // u
    int64_t _103 = 0; // t
    _jump1532:; // Begin body of loop
    _a2_int64_t _104;
    // Computing bound for v
    if (o >= 0)
    goto _jump1533;
    fail_assertion("negative array index");
    _jump1533:;
    if (o < g.d0)
    goto _jump1534;
    fail_assertion("index too large");
    _jump1534:;
    if (i >= 0)
    goto _jump1535;
    fail_assertion("negative array index");
    _jump1535:;
    if (i < g.d1)
    goto _jump1536;
    fail_assertion("index too large");
    _jump1536:;
    if (h >= 0)
    goto _jump1537;
    fail_assertion("negative array index");
    _jump1537:;
    if (h < g.d2)
    goto _jump1538;
    fail_assertion("index too large");
    _jump1538:;
    int64_t _105 = 0;
    _105 *= g.d0;
    _105 += o;
    _105 *= g.d1;
    _105 += i;
    _105 *= g.d2;
    _105 += h;
    int64_t _106 = g.data[_105];
    _104.d0 = _106;
    if (_106 > 0) 
    goto _jump1539;
    fail_assertion("non-positive loop bound");
    _jump1539:;
    // Computing bound for w
    _104.d1 = j;
    if (j > 0) 
    goto _jump1540;
    fail_assertion("non-positive loop bound");
    _jump1540:;
    // Computing total size of heap memory to allocate
    int64_t _107 = 1;
    _107 *= _106;
    _107 *= j;
    _107 *= sizeof(int64_t);
    _104.data = jpl_alloc(_107);
    int64_t _108 = 0; // w
    int64_t _109 = 0; // v
    _jump1541:; // Begin body of loop
    int64_t _110 = 0;
    _110 *= _104.d0;
    _110 += _109;
    _110 *= _104.d1;
    _110 += _108;
    _104.data[_110] = o;
    _108++;
    if (_108 < j)
    goto _jump1541;
    _108 = 0;
    _109++;
    if (_109 < _106)
    goto _jump1541;
    // End body of loop
    int64_t _111 = -_102;
    if (j >= 0)
    goto _jump1542;
    fail_assertion("negative array index");
    _jump1542:;
    if (j < _104.d0)
    goto _jump1543;
    fail_assertion("index too large");
    _jump1543:;
    if (_111 >= 0)
    goto _jump1544;
    fail_assertion("negative array index");
    _jump1544:;
    if (_111 < _104.d1)
    goto _jump1545;
    fail_assertion("index too large");
    _jump1545:;
    int64_t _112 = 0;
    _112 *= _104.d0;
    _112 += j;
    _112 *= _104.d1;
    _112 += _111;
    int64_t _113 = _104.data[_112];
    int64_t _114 = j % _113;
    int64_t _115 = 0;
    _115 *= _100.d0;
    _115 += _103;
    _115 *= _100.d1;
    _115 += _102;
    _100.data[_115] = _114;
    _102++;
    if (_102 < h)
    goto _jump1532;
    _102 = 0;
    _103++;
    if (_103 < j)
    goto _jump1532;
    // End body of loop
    _46 = _100;
    _jump1529:;
    _22 = _46;
    goto _jump1546;
    _jump1475:;
    bool _116 = f();
    _a2_int64_t _117;
    if (!_116)
    goto _jump1547;
    _a3__a2_int64_t _118;
    // Computing bound for t
    _118.d0 = m;
    if (m > 0) 
    goto _jump1548;
    fail_assertion("non-positive loop bound");
    _jump1548:;
    // Computing bound for u
    _118.d1 = h;
    if (h > 0) 
    goto _jump1549;
    fail_assertion("non-positive loop bound");
    _jump1549:;
    // Computing bound for v
    _118.d2 = j;
    if (j > 0) 
    goto _jump1550;
    fail_assertion("non-positive loop bound");
    _jump1550:;
    // Computing total size of heap memory to allocate
    int64_t _119 = 1;
    _119 *= m;
    _119 *= h;
    _119 *= j;
    _119 *= sizeof(_a2_int64_t);
    _118.data = jpl_alloc(_119);
    int64_t _120 = 0; // v
    int64_t _121 = 0; // u
    int64_t _122 = 0; // t
    _jump1551:; // Begin body of loop
    _a2_int64_t _123;
    // Computing bound for w
    bool _124 = true;
    int64_t _125;
    if (!_124)
    goto _jump1552;
    _125 = _120;
    goto _jump1553;
    _jump1552:;
    _125 = j;
    _jump1553:;
    _123.d0 = _125;
    if (_125 > 0) 
    goto _jump1554;
    fail_assertion("non-positive loop bound");
    _jump1554:;
    // Computing bound for x
    if (h >= 0)
    goto _jump1555;
    fail_assertion("negative array index");
    _jump1555:;
    if (h < l.d0)
    goto _jump1556;
    fail_assertion("index too large");
    _jump1556:;
    if (m >= 0)
    goto _jump1557;
    fail_assertion("negative array index");
    _jump1557:;
    if (m < l.d1)
    goto _jump1558;
    fail_assertion("index too large");
    _jump1558:;
    if (_121 >= 0)
    goto _jump1559;
    fail_assertion("negative array index");
    _jump1559:;
    if (_121 < l.d2)
    goto _jump1560;
    fail_assertion("index too large");
    _jump1560:;
    int64_t _126 = 0;
    _126 *= l.d0;
    _126 += h;
    _126 *= l.d1;
    _126 += m;
    _126 *= l.d2;
    _126 += _121;
    int64_t _127 = l.data[_126];
    _123.d1 = _127;
    if (_127 > 0) 
    goto _jump1561;
    fail_assertion("non-positive loop bound");
    _jump1561:;
    // Computing total size of heap memory to allocate
    int64_t _128 = 1;
    _128 *= _125;
    _128 *= _127;
    _128 *= sizeof(int64_t);
    _123.data = jpl_alloc(_128);
    int64_t _129 = 0; // x
    int64_t _130 = 0; // w
    _jump1562:; // Begin body of loop
    int64_t _131 = 0;
    _131 *= _123.d0;
    _131 += _130;
    _131 *= _123.d1;
    _131 += _129;
    _123.data[_131] = _120;
    _129++;
    if (_129 < _127)
    goto _jump1562;
    _129 = 0;
    _130++;
    if (_130 < _125)
    goto _jump1562;
    // End body of loop
    int64_t _132 = 0;
    _132 *= _118.d0;
    _132 += _122;
    _132 *= _118.d1;
    _132 += _121;
    _132 *= _118.d2;
    _132 += _120;
    _118.data[_132] = _123;
    _120++;
    if (_120 < j)
    goto _jump1551;
    _120 = 0;
    _121++;
    if (_121 < h)
    goto _jump1551;
    _121 = 0;
    _122++;
    if (_122 < m)
    goto _jump1551;
    // End body of loop
    int64_t _133 = -i;
    bool _134 = f();
    int64_t _135;
    if (!_134)
    goto _jump1563;
    _135 = j;
    goto _jump1564;
    _jump1563:;
    int64_t _136 = o / m;
    if (o >= 0)
    goto _jump1565;
    fail_assertion("negative array index");
    _jump1565:;
    if (o < g.d0)
    goto _jump1566;
    fail_assertion("index too large");
    _jump1566:;
    if (_136 >= 0)
    goto _jump1567;
    fail_assertion("negative array index");
    _jump1567:;
    if (_136 < g.d1)
    goto _jump1568;
    fail_assertion("index too large");
    _jump1568:;
    if (m >= 0)
    goto _jump1569;
    fail_assertion("negative array index");
    _jump1569:;
    if (m < g.d2)
    goto _jump1570;
    fail_assertion("index too large");
    _jump1570:;
    int64_t _137 = 0;
    _137 *= g.d0;
    _137 += o;
    _137 *= g.d1;
    _137 += _136;
    _137 *= g.d2;
    _137 += m;
    int64_t _138 = g.data[_137];
    _135 = _138;
    _jump1564:;
    _a1_int64_t _139;
    _139.d0 = 3;
    _139.data = jpl_alloc(sizeof(int64_t) * 3);
    _139.data[0] = m;
    _139.data[1] = n;
    _139.data[2] = h;
    _a1__a1_int64_t _140;
    _140.d0 = 1;
    _140.data = jpl_alloc(sizeof(_a1_int64_t) * 1);
    _140.data[0] = _139;
    int64_t _141;
    // Computing bound for t
    bool _142 = f();
    int64_t _143;
    if (!_142)
    goto _jump1571;
    _143 = o;
    goto _jump1572;
    _jump1571:;
    _143 = j;
    _jump1572:;
    if (_143 > 0) 
    goto _jump1573;
    fail_assertion("non-positive loop bound");
    _jump1573:;
    // Computing bound for u
    if (o > 0) 
    goto _jump1574;
    fail_assertion("non-positive loop bound");
    _jump1574:;
    // Computing bound for v
    if (n > 0) 
    goto _jump1575;
    fail_assertion("non-positive loop bound");
    _jump1575:;
    _141 = 0;
    int64_t _144 = 0; // v
    int64_t _145 = 0; // u
    int64_t _146 = 0; // t
    _jump1576:; // Begin body of loop
    _141 += n;
    _144++;
    if (_144 < n)
    goto _jump1576;
    _144 = 0;
    _145++;
    if (_145 < o)
    goto _jump1576;
    _145 = 0;
    _146++;
    if (_146 < _143)
    goto _jump1576;
    // End body of loop
    if (_141 >= 0)
    goto _jump1577;
    fail_assertion("negative array index");
    _jump1577:;
    if (_141 < _140.d0)
    goto _jump1578;
    fail_assertion("index too large");
    _jump1578:;
    int64_t _147 = 0;
    _147 *= _140.d0;
    _147 += _141;
    _a1_int64_t _148 = _140.data[_147];
    int64_t _149 = h + o;
    if (_149 >= 0)
    goto _jump1579;
    fail_assertion("negative array index");
    _jump1579:;
    if (_149 < _148.d0)
    goto _jump1580;
    fail_assertion("index too large");
    _jump1580:;
    int64_t _150 = 0;
    _150 *= _148.d0;
    _150 += _149;
    int64_t _151 = _148.data[_150];
    if (_133 >= 0)
    goto _jump1581;
    fail_assertion("negative array index");
    _jump1581:;
    if (_133 < _118.d0)
    goto _jump1582;
    fail_assertion("index too large");
    _jump1582:;
    if (_135 >= 0)
    goto _jump1583;
    fail_assertion("negative array index");
    _jump1583:;
    if (_135 < _118.d1)
    goto _jump1584;
    fail_assertion("index too large");
    _jump1584:;
    if (_151 >= 0)
    goto _jump1585;
    fail_assertion("negative array index");
    _jump1585:;
    if (_151 < _118.d2)
    goto _jump1586;
    fail_assertion("index too large");
    _jump1586:;
    int64_t _152 = 0;
    _152 *= _118.d0;
    _152 += _133;
    _152 *= _118.d1;
    _152 += _135;
    _152 *= _118.d2;
    _152 += _151;
    _a2_int64_t _153 = _118.data[_152];
    _117 = _153;
    goto _jump1587;
    _jump1547:;
    double _154 = -k;
    double _155 = a(b);
    double _156 = _154 / _155;
    bool _157 = k == _156;
    double _158 = a(k);
    bool _159 = _158 < b;
    bool _160 = !_159;
    bool _161 = _157 != _160;
    _a2_int64_t _162;
    if (!_161)
    goto _jump1588;
    _a2_int64_t _163;
    // Computing bound for t
    _163.d0 = i;
    if (i > 0) 
    goto _jump1589;
    fail_assertion("non-positive loop bound");
    _jump1589:;
    // Computing bound for u
    _a3_bool _164;
    // Computing bound for t
    _164.d0 = o;
    if (o > 0) 
    goto _jump1590;
    fail_assertion("non-positive loop bound");
    _jump1590:;
    // Computing bound for u
    _164.d1 = o;
    if (o > 0) 
    goto _jump1591;
    fail_assertion("non-positive loop bound");
    _jump1591:;
    // Computing bound for v
    _164.d2 = j;
    if (j > 0) 
    goto _jump1592;
    fail_assertion("non-positive loop bound");
    _jump1592:;
    // Computing total size of heap memory to allocate
    int64_t _165 = 1;
    _165 *= o;
    _165 *= o;
    _165 *= j;
    _165 *= sizeof(bool);
    _164.data = jpl_alloc(_165);
    int64_t _166 = 0; // v
    int64_t _167 = 0; // u
    int64_t _168 = 0; // t
    _jump1593:; // Begin body of loop
    bool _169 = f();
    int64_t _170 = 0;
    _170 *= _164.d0;
    _170 += _168;
    _170 *= _164.d1;
    _170 += _167;
    _170 *= _164.d2;
    _170 += _166;
    _164.data[_170] = _169;
    _166++;
    if (_166 < j)
    goto _jump1593;
    _166 = 0;
    _167++;
    if (_167 < o)
    goto _jump1593;
    _167 = 0;
    _168++;
    if (_168 < o)
    goto _jump1593;
    // End body of loop
    int64_t _171 = 951;
    int64_t _172 = -j;
    if (_171 >= 0)
    goto _jump1594;
    fail_assertion("negative array index");
    _jump1594:;
    if (_171 < _164.d0)
    goto _jump1595;
    fail_assertion("index too large");
    _jump1595:;
    if (_172 >= 0)
    goto _jump1596;
    fail_assertion("negative array index");
    _jump1596:;
    if (_172 < _164.d1)
    goto _jump1597;
    fail_assertion("index too large");
    _jump1597:;
    if (j >= 0)
    goto _jump1598;
    fail_assertion("negative array index");
    _jump1598:;
    if (j < _164.d2)
    goto _jump1599;
    fail_assertion("index too large");
    _jump1599:;
    int64_t _173 = 0;
    _173 *= _164.d0;
    _173 += _171;
    _173 *= _164.d1;
    _173 += _172;
    _173 *= _164.d2;
    _173 += j;
    bool _174 = _164.data[_173];
    int64_t _175;
    if (!_174)
    goto _jump1600;
    _175 = j;
    goto _jump1601;
    _jump1600:;
    _175 = j;
    _jump1601:;
    _163.d1 = _175;
    if (_175 > 0) 
    goto _jump1602;
    fail_assertion("non-positive loop bound");
    _jump1602:;
    // Computing total size of heap memory to allocate
    int64_t _176 = 1;
    _176 *= i;
    _176 *= _175;
    _176 *= sizeof(int64_t);
    _163.data = jpl_alloc(_176);
    int64_t _177 = 0; // u
    int64_t _178 = 0; // t
    _jump1603:; // Begin body of loop
    int64_t _179 = 0;
    _179 *= _163.d0;
    _179 += _178;
    _179 *= _163.d1;
    _179 += _177;
    _163.data[_179] = h;
    _177++;
    if (_177 < _175)
    goto _jump1603;
    _177 = 0;
    _178++;
    if (_178 < i)
    goto _jump1603;
    // End body of loop
    _162 = _163;
    goto _jump1604;
    _jump1588:;
    _a2_int64_t _180;
    // Computing bound for t
    int64_t _181 = 290;
    _180.d0 = _181;
    if (_181 > 0) 
    goto _jump1605;
    fail_assertion("non-positive loop bound");
    _jump1605:;
    // Computing bound for u
    bool _182 = f();
    _a3_int64_t _183;
    if (!_182)
    goto _jump1606;
    _a3_int64_t _184;
    // Computing bound for t
    _184.d0 = n;
    if (n > 0) 
    goto _jump1607;
    fail_assertion("non-positive loop bound");
    _jump1607:;
    // Computing bound for u
    int64_t _185 = 930;
    _184.d1 = _185;
    if (_185 > 0) 
    goto _jump1608;
    fail_assertion("non-positive loop bound");
    _jump1608:;
    // Computing bound for v
    _184.d2 = n;
    if (n > 0) 
    goto _jump1609;
    fail_assertion("non-positive loop bound");
    _jump1609:;
    // Computing total size of heap memory to allocate
    int64_t _186 = 1;
    _186 *= n;
    _186 *= _185;
    _186 *= n;
    _186 *= sizeof(int64_t);
    _184.data = jpl_alloc(_186);
    int64_t _187 = 0; // v
    int64_t _188 = 0; // u
    int64_t _189 = 0; // t
    _jump1610:; // Begin body of loop
    int64_t _190 = 822;
    int64_t _191 = 0;
    _191 *= _184.d0;
    _191 += _189;
    _191 *= _184.d1;
    _191 += _188;
    _191 *= _184.d2;
    _191 += _187;
    _184.data[_191] = _190;
    _187++;
    if (_187 < n)
    goto _jump1610;
    _187 = 0;
    _188++;
    if (_188 < _185)
    goto _jump1610;
    _188 = 0;
    _189++;
    if (_189 < n)
    goto _jump1610;
    // End body of loop
    _183 = _184;
    goto _jump1611;
    _jump1606:;
    _183 = g;
    _jump1611:;
    if (m >= 0)
    goto _jump1612;
    fail_assertion("negative array index");
    _jump1612:;
    if (m < _183.d0)
    goto _jump1613;
    fail_assertion("index too large");
    _jump1613:;
    if (m >= 0)
    goto _jump1614;
    fail_assertion("negative array index");
    _jump1614:;
    if (m < _183.d1)
    goto _jump1615;
    fail_assertion("index too large");
    _jump1615:;
    if (m >= 0)
    goto _jump1616;
    fail_assertion("negative array index");
    _jump1616:;
    if (m < _183.d2)
    goto _jump1617;
    fail_assertion("index too large");
    _jump1617:;
    int64_t _192 = 0;
    _192 *= _183.d0;
    _192 += m;
    _192 *= _183.d1;
    _192 += m;
    _192 *= _183.d2;
    _192 += m;
    int64_t _193 = _183.data[_192];
    _180.d1 = _193;
    if (_193 > 0) 
    goto _jump1618;
    fail_assertion("non-positive loop bound");
    _jump1618:;
    // Computing total size of heap memory to allocate
    int64_t _194 = 1;
    _194 *= _181;
    _194 *= _193;
    _194 *= sizeof(int64_t);
    _180.data = jpl_alloc(_194);
    int64_t _195 = 0; // u
    int64_t _196 = 0; // t
    _jump1619:; // Begin body of loop
    int64_t _197;
    // Computing bound for v
    if (_196 > 0) 
    goto _jump1620;
    fail_assertion("non-positive loop bound");
    _jump1620:;
    _197 = 0;
    int64_t _198 = 0; // v
    _jump1621:; // Begin body of loop
    _197 += _198;
    _198++;
    if (_198 < _196)
    goto _jump1621;
    // End body of loop
    int64_t _199 = 0;
    _199 *= _180.d0;
    _199 += _196;
    _199 *= _180.d1;
    _199 += _195;
    _180.data[_199] = _197;
    _195++;
    if (_195 < _193)
    goto _jump1619;
    _195 = 0;
    _196++;
    if (_196 < _181)
    goto _jump1619;
    // End body of loop
    _162 = _180;
    _jump1604:;
    _117 = _162;
    _jump1587:;
    _22 = _117;
    _jump1546:;
    _a2_double _200;
    // Computing bound for y
    int64_t _201 = n % i;
    _200.d0 = _201;
    if (_201 > 0) 
    goto _jump1622;
    fail_assertion("non-positive loop bound");
    _jump1622:;
    // Computing bound for z
    bool _203 = f();
    bool _202 = _203;
    if (0 != _203)
    goto _jump1623;
    bool _204 = f();
    _202 = _204;
    _jump1623:;
    bool _205;
    if (!_202)
    goto _jump1624;
    bool _206 = r < k;
    _205 = _206;
    goto _jump1625;
    _jump1624:;
    bool _207 = f();
    _205 = _207;
    _jump1625:;
    _a1__a2_int64_t _208;
    // Computing bound for y
    _208.d0 = _22.d0;
    if (_22.d0 > 0) 
    goto _jump1626;
    fail_assertion("non-positive loop bound");
    _jump1626:;
    // Computing total size of heap memory to allocate
    int64_t _209 = 1;
    _209 *= _22.d0;
    _209 *= sizeof(_a2_int64_t);
    _208.data = jpl_alloc(_209);
    int64_t _210 = 0; // y
    _jump1627:; // Begin body of loop
    int64_t _211 = 0;
    _211 *= _208.d0;
    _211 += _210;
    _208.data[_211] = _22;
    _210++;
    if (_210 < _22.d0)
    goto _jump1627;
    // End body of loop
    bool _212 = c(_208);
    bool _213 = _205 == _212;
    int64_t _214;
    if (!_213)
    goto _jump1628;
    int64_t _215 = 140;
    _214 = _215;
    goto _jump1629;
    _jump1628:;
    _a3_int64_t _216;
    // Computing bound for y
    int64_t _217 = 985;
    _216.d0 = _217;
    if (_217 > 0) 
    goto _jump1630;
    fail_assertion("non-positive loop bound");
    _jump1630:;
    // Computing bound for z
    _216.d1 = n;
    if (n > 0) 
    goto _jump1631;
    fail_assertion("non-positive loop bound");
    _jump1631:;
    // Computing bound for A
    _216.d2 = m;
    if (m > 0) 
    goto _jump1632;
    fail_assertion("non-positive loop bound");
    _jump1632:;
    // Computing total size of heap memory to allocate
    int64_t _218 = 1;
    _218 *= _217;
    _218 *= n;
    _218 *= m;
    _218 *= sizeof(int64_t);
    _216.data = jpl_alloc(_218);
    int64_t _219 = 0; // A
    int64_t _220 = 0; // z
    int64_t _221 = 0; // y
    _jump1633:; // Begin body of loop
    int64_t _222 = 0;
    _222 *= _216.d0;
    _222 += _221;
    _222 *= _216.d1;
    _222 += _220;
    _222 *= _216.d2;
    _222 += _219;
    _216.data[_222] = _221;
    _219++;
    if (_219 < m)
    goto _jump1633;
    _219 = 0;
    _220++;
    if (_220 < n)
    goto _jump1633;
    _220 = 0;
    _221++;
    if (_221 < _217)
    goto _jump1633;
    // End body of loop
    if (m >= 0)
    goto _jump1634;
    fail_assertion("negative array index");
    _jump1634:;
    if (m < l.d0)
    goto _jump1635;
    fail_assertion("index too large");
    _jump1635:;
    if (i >= 0)
    goto _jump1636;
    fail_assertion("negative array index");
    _jump1636:;
    if (i < l.d1)
    goto _jump1637;
    fail_assertion("index too large");
    _jump1637:;
    if (_22.d1 >= 0)
    goto _jump1638;
    fail_assertion("negative array index");
    _jump1638:;
    if (_22.d1 < l.d2)
    goto _jump1639;
    fail_assertion("index too large");
    _jump1639:;
    int64_t _223 = 0;
    _223 *= l.d0;
    _223 += m;
    _223 *= l.d1;
    _223 += i;
    _223 *= l.d2;
    _223 += _22.d1;
    int64_t _224 = l.data[_223];
    if (_22.d0 >= 0)
    goto _jump1640;
    fail_assertion("negative array index");
    _jump1640:;
    if (_22.d0 < _22.d0)
    goto _jump1641;
    fail_assertion("index too large");
    _jump1641:;
    if (_224 >= 0)
    goto _jump1642;
    fail_assertion("negative array index");
    _jump1642:;
    if (_224 < _22.d1)
    goto _jump1643;
    fail_assertion("index too large");
    _jump1643:;
    int64_t _225 = 0;
    _225 *= _22.d0;
    _225 += _22.d0;
    _225 *= _22.d1;
    _225 += _224;
    int64_t _226 = _22.data[_225];
    if (h >= 0)
    goto _jump1644;
    fail_assertion("negative array index");
    _jump1644:;
    if (h < _216.d0)
    goto _jump1645;
    fail_assertion("index too large");
    _jump1645:;
    if (_226 >= 0)
    goto _jump1646;
    fail_assertion("negative array index");
    _jump1646:;
    if (_226 < _216.d1)
    goto _jump1647;
    fail_assertion("index too large");
    _jump1647:;
    if (h >= 0)
    goto _jump1648;
    fail_assertion("negative array index");
    _jump1648:;
    if (h < _216.d2)
    goto _jump1649;
    fail_assertion("index too large");
    _jump1649:;
    int64_t _227 = 0;
    _227 *= _216.d0;
    _227 += h;
    _227 *= _216.d1;
    _227 += _226;
    _227 *= _216.d2;
    _227 += h;
    int64_t _228 = _216.data[_227];
    _214 = _228;
    _jump1629:;
    _200.d1 = _214;
    if (_214 > 0) 
    goto _jump1650;
    fail_assertion("non-positive loop bound");
    _jump1650:;
    // Computing total size of heap memory to allocate
    int64_t _229 = 1;
    _229 *= _201;
    _229 *= _214;
    _229 *= sizeof(double);
    _200.data = jpl_alloc(_229);
    int64_t _230 = 0; // z
    int64_t _231 = 0; // y
    _jump1651:; // Begin body of loop
    double _232;
    // Computing bound for A
    int64_t _233;
    // Computing bound for A
    if (n > 0) 
    goto _jump1652;
    fail_assertion("non-positive loop bound");
    _jump1652:;
    // Computing bound for B
    if (j > 0) 
    goto _jump1653;
    fail_assertion("non-positive loop bound");
    _jump1653:;
    _233 = 0;
    int64_t _234 = 0; // B
    int64_t _235 = 0; // A
    _jump1654:; // Begin body of loop
    _233 += _235;
    _234++;
    if (_234 < j)
    goto _jump1654;
    _234 = 0;
    _235++;
    if (_235 < n)
    goto _jump1654;
    // End body of loop
    if (_233 > 0) 
    goto _jump1655;
    fail_assertion("non-positive loop bound");
    _jump1655:;
    // Computing bound for B
    if (j > 0) 
    goto _jump1656;
    fail_assertion("non-positive loop bound");
    _jump1656:;
    // Computing bound for C
    _a2_bool _236;
    // Computing bound for A
    int64_t _237 = 861;
    _236.d0 = _237;
    if (_237 > 0) 
    goto _jump1657;
    fail_assertion("non-positive loop bound");
    _jump1657:;
    // Computing bound for B
    _236.d1 = i;
    if (i > 0) 
    goto _jump1658;
    fail_assertion("non-positive loop bound");
    _jump1658:;
    // Computing total size of heap memory to allocate
    int64_t _238 = 1;
    _238 *= _237;
    _238 *= i;
    _238 *= sizeof(bool);
    _236.data = jpl_alloc(_238);
    int64_t _239 = 0; // B
    int64_t _240 = 0; // A
    _jump1659:; // Begin body of loop
    bool _241 = f();
    int64_t _242 = 0;
    _242 *= _236.d0;
    _242 += _240;
    _242 *= _236.d1;
    _242 += _239;
    _236.data[_242] = _241;
    _239++;
    if (_239 < i)
    goto _jump1659;
    _239 = 0;
    _240++;
    if (_240 < _237)
    goto _jump1659;
    // End body of loop
    int64_t _243 = -_22.d1;
    if (m >= 0)
    goto _jump1660;
    fail_assertion("negative array index");
    _jump1660:;
    if (m < _236.d0)
    goto _jump1661;
    fail_assertion("index too large");
    _jump1661:;
    if (_243 >= 0)
    goto _jump1662;
    fail_assertion("negative array index");
    _jump1662:;
    if (_243 < _236.d1)
    goto _jump1663;
    fail_assertion("index too large");
    _jump1663:;
    int64_t _244 = 0;
    _244 *= _236.d0;
    _244 += m;
    _244 *= _236.d1;
    _244 += _243;
    bool _245 = _236.data[_244];
    int64_t _246;
    if (!_245)
    goto _jump1664;
    _a1_int64_t _247;
    // Computing bound for A
    _247.d0 = i;
    if (i > 0) 
    goto _jump1665;
    fail_assertion("non-positive loop bound");
    _jump1665:;
    // Computing total size of heap memory to allocate
    int64_t _248 = 1;
    _248 *= i;
    _248 *= sizeof(int64_t);
    _247.data = jpl_alloc(_248);
    int64_t _249 = 0; // A
    _jump1666:; // Begin body of loop
    int64_t _250 = 598;
    int64_t _251 = 0;
    _251 *= _247.d0;
    _251 += _249;
    _247.data[_251] = _250;
    _249++;
    if (_249 < i)
    goto _jump1666;
    // End body of loop
    if (_22.d0 >= 0)
    goto _jump1667;
    fail_assertion("negative array index");
    _jump1667:;
    if (_22.d0 < _247.d0)
    goto _jump1668;
    fail_assertion("index too large");
    _jump1668:;
    int64_t _252 = 0;
    _252 *= _247.d0;
    _252 += _22.d0;
    int64_t _253 = _247.data[_252];
    _246 = _253;
    goto _jump1669;
    _jump1664:;
    _246 = m;
    _jump1669:;
    if (_246 > 0) 
    goto _jump1670;
    fail_assertion("non-positive loop bound");
    _jump1670:;
    _232 = 0;
    int64_t _254 = 0; // C
    int64_t _255 = 0; // B
    int64_t _256 = 0; // A
    _jump1671:; // Begin body of loop
    double _257;
    // Computing bound for D
    if (i > 0) 
    goto _jump1672;
    fail_assertion("non-positive loop bound");
    _jump1672:;
    // Computing bound for E
    int64_t _258 = _254 % _22.d0;
    if (_258 > 0) 
    goto _jump1673;
    fail_assertion("non-positive loop bound");
    _jump1673:;
    // Computing bound for F
    if (_22.d1 > 0) 
    goto _jump1674;
    fail_assertion("non-positive loop bound");
    _jump1674:;
    _257 = 0;
    int64_t _259 = 0; // F
    int64_t _260 = 0; // E
    int64_t _261 = 0; // D
    _jump1675:; // Begin body of loop
    _257 += k;
    _259++;
    if (_259 < _22.d1)
    goto _jump1675;
    _259 = 0;
    _260++;
    if (_260 < _258)
    goto _jump1675;
    _260 = 0;
    _261++;
    if (_261 < i)
    goto _jump1675;
    // End body of loop
    _232 += _257;
    _254++;
    if (_254 < _246)
    goto _jump1671;
    _254 = 0;
    _255++;
    if (_255 < j)
    goto _jump1671;
    _255 = 0;
    _256++;
    if (_256 < _233)
    goto _jump1671;
    // End body of loop
    int64_t _262 = 0;
    _262 *= _200.d0;
    _262 += _231;
    _262 *= _200.d1;
    _262 += _230;
    _200.data[_262] = _232;
    _230++;
    if (_230 < _214)
    goto _jump1651;
    _230 = 0;
    _231++;
    if (_231 < _201)
    goto _jump1651;
    // End body of loop
    if (j >= 0)
    goto _jump1676;
    fail_assertion("negative array index");
    _jump1676:;
    if (j < _200.d0)
    goto _jump1677;
    fail_assertion("index too large");
    _jump1677:;
    if (n >= 0)
    goto _jump1678;
    fail_assertion("negative array index");
    _jump1678:;
    if (n < _200.d1)
    goto _jump1679;
    fail_assertion("index too large");
    _jump1679:;
    int64_t _263 = 0;
    _263 *= _200.d0;
    _263 += j;
    _263 *= _200.d1;
    _263 += n;
    double _264 = _200.data[_263];
    _a1__a2_int64_t _265;
    // Computing bound for y
    _265.d0 = m;
    if (m > 0) 
    goto _jump1680;
    fail_assertion("non-positive loop bound");
    _jump1680:;
    // Computing total size of heap memory to allocate
    int64_t _266 = 1;
    _266 *= m;
    _266 *= sizeof(_a2_int64_t);
    _265.data = jpl_alloc(_266);
    int64_t _267 = 0; // y
    _jump1681:; // Begin body of loop
    int64_t _268 = 0;
    _268 *= _265.d0;
    _268 += _267;
    _265.data[_268] = _22;
    _267++;
    if (_267 < m)
    goto _jump1681;
    // End body of loop
    bool _269 = c(_265);
    _a3_rgba _270;
    if (!_269)
    goto _jump1682;
    _a3_rgba _271;
    // Computing bound for y
    _271.d0 = _22.d1;
    if (_22.d1 > 0) 
    goto _jump1683;
    fail_assertion("non-positive loop bound");
    _jump1683:;
    // Computing bound for z
    int64_t _272 = j - _22.d0;
    _271.d1 = _272;
    if (_272 > 0) 
    goto _jump1684;
    fail_assertion("non-positive loop bound");
    _jump1684:;
    // Computing bound for A
    int64_t _273 = 799;
    _271.d2 = _273;
    if (_273 > 0) 
    goto _jump1685;
    fail_assertion("non-positive loop bound");
    _jump1685:;
    // Computing total size of heap memory to allocate
    int64_t _274 = 1;
    _274 *= _22.d1;
    _274 *= _272;
    _274 *= _273;
    _274 *= sizeof(rgba);
    _271.data = jpl_alloc(_274);
    int64_t _275 = 0; // A
    int64_t _276 = 0; // z
    int64_t _277 = 0; // y
    _jump1686:; // Begin body of loop
    double _278 = 1.0;
    double _279 = -_278;
    double _280 = 24.0;
    double _281 = 76.0;
    rgba _282 = { _279, _280, _281, b };
    int64_t _283 = 0;
    _283 *= _271.d0;
    _283 += _277;
    _283 *= _271.d1;
    _283 += _276;
    _283 *= _271.d2;
    _283 += _275;
    _271.data[_283] = _282;
    _275++;
    if (_275 < _273)
    goto _jump1686;
    _275 = 0;
    _276++;
    if (_276 < _272)
    goto _jump1686;
    _276 = 0;
    _277++;
    if (_277 < _22.d1)
    goto _jump1686;
    // End body of loop
    _270 = _271;
    goto _jump1687;
    _jump1682:;
    _a3_rgba _284;
    // Computing bound for y
    _284.d0 = o;
    if (o > 0) 
    goto _jump1688;
    fail_assertion("non-positive loop bound");
    _jump1688:;
    // Computing bound for z
    _284.d1 = o;
    if (o > 0) 
    goto _jump1689;
    fail_assertion("non-positive loop bound");
    _jump1689:;
    // Computing bound for A
    _284.d2 = i;
    if (i > 0) 
    goto _jump1690;
    fail_assertion("non-positive loop bound");
    _jump1690:;
    // Computing total size of heap memory to allocate
    int64_t _285 = 1;
    _285 *= o;
    _285 *= o;
    _285 *= i;
    _285 *= sizeof(rgba);
    _284.data = jpl_alloc(_285);
    int64_t _286 = 0; // A
    int64_t _287 = 0; // z
    int64_t _288 = 0; // y
    _jump1691:; // Begin body of loop
    rgba _289 = { k, b, b, k };
    int64_t _290 = 0;
    _290 *= _284.d0;
    _290 += _288;
    _290 *= _284.d1;
    _290 += _287;
    _290 *= _284.d2;
    _290 += _286;
    _284.data[_290] = _289;
    _286++;
    if (_286 < i)
    goto _jump1691;
    _286 = 0;
    _287++;
    if (_287 < o)
    goto _jump1691;
    _287 = 0;
    _288++;
    if (_288 < o)
    goto _jump1691;
    // End body of loop
    _270 = _284;
    _jump1687:;
    int64_t _291;
    // Computing bound for y
    _a3_int64_t _292;
    // Computing bound for y
    int64_t _293 = j * n;
    _292.d0 = _293;
    if (_293 > 0) 
    goto _jump1692;
    fail_assertion("non-positive loop bound");
    _jump1692:;
    // Computing bound for z
    if (h >= 0)
    goto _jump1693;
    fail_assertion("negative array index");
    _jump1693:;
    if (h < l.d0)
    goto _jump1694;
    fail_assertion("index too large");
    _jump1694:;
    if (m >= 0)
    goto _jump1695;
    fail_assertion("negative array index");
    _jump1695:;
    if (m < l.d1)
    goto _jump1696;
    fail_assertion("index too large");
    _jump1696:;
    if (j >= 0)
    goto _jump1697;
    fail_assertion("negative array index");
    _jump1697:;
    if (j < l.d2)
    goto _jump1698;
    fail_assertion("index too large");
    _jump1698:;
    int64_t _294 = 0;
    _294 *= l.d0;
    _294 += h;
    _294 *= l.d1;
    _294 += m;
    _294 *= l.d2;
    _294 += j;
    int64_t _295 = l.data[_294];
    _292.d1 = _295;
    if (_295 > 0) 
    goto _jump1699;
    fail_assertion("non-positive loop bound");
    _jump1699:;
    // Computing bound for A
    int64_t _296 = 422;
    _292.d2 = _296;
    if (_296 > 0) 
    goto _jump1700;
    fail_assertion("non-positive loop bound");
    _jump1700:;
    // Computing total size of heap memory to allocate
    int64_t _297 = 1;
    _297 *= _293;
    _297 *= _295;
    _297 *= _296;
    _297 *= sizeof(int64_t);
    _292.data = jpl_alloc(_297);
    int64_t _298 = 0; // A
    int64_t _299 = 0; // z
    int64_t _300 = 0; // y
    _jump1701:; // Begin body of loop
    int64_t _301 = 0;
    _301 *= _292.d0;
    _301 += _300;
    _301 *= _292.d1;
    _301 += _299;
    _301 *= _292.d2;
    _301 += _298;
    _292.data[_301] = i;
    _298++;
    if (_298 < _296)
    goto _jump1701;
    _298 = 0;
    _299++;
    if (_299 < _295)
    goto _jump1701;
    _299 = 0;
    _300++;
    if (_300 < _293)
    goto _jump1701;
    // End body of loop
    if (_22.d0 >= 0)
    goto _jump1702;
    fail_assertion("negative array index");
    _jump1702:;
    if (_22.d0 < _292.d0)
    goto _jump1703;
    fail_assertion("index too large");
    _jump1703:;
    if (_22.d0 >= 0)
    goto _jump1704;
    fail_assertion("negative array index");
    _jump1704:;
    if (_22.d0 < _292.d1)
    goto _jump1705;
    fail_assertion("index too large");
    _jump1705:;
    if (j >= 0)
    goto _jump1706;
    fail_assertion("negative array index");
    _jump1706:;
    if (j < _292.d2)
    goto _jump1707;
    fail_assertion("index too large");
    _jump1707:;
    int64_t _302 = 0;
    _302 *= _292.d0;
    _302 += _22.d0;
    _302 *= _292.d1;
    _302 += _22.d0;
    _302 *= _292.d2;
    _302 += j;
    int64_t _303 = _292.data[_302];
    if (_303 > 0) 
    goto _jump1708;
    fail_assertion("non-positive loop bound");
    _jump1708:;
    _291 = 0;
    int64_t _304 = 0; // y
    _jump1709:; // Begin body of loop
    _291 += j;
    _304++;
    if (_304 < _303)
    goto _jump1709;
    // End body of loop
    _a2_int64_t _305;
    // Computing bound for y
    _305.d0 = o;
    if (o > 0) 
    goto _jump1710;
    fail_assertion("non-positive loop bound");
    _jump1710:;
    // Computing bound for z
    if (o >= 0)
    goto _jump1711;
    fail_assertion("negative array index");
    _jump1711:;
    if (o < _22.d0)
    goto _jump1712;
    fail_assertion("index too large");
    _jump1712:;
    if (h >= 0)
    goto _jump1713;
    fail_assertion("negative array index");
    _jump1713:;
    if (h < _22.d1)
    goto _jump1714;
    fail_assertion("index too large");
    _jump1714:;
    int64_t _306 = 0;
    _306 *= _22.d0;
    _306 += o;
    _306 *= _22.d1;
    _306 += h;
    int64_t _307 = _22.data[_306];
    _305.d1 = _307;
    if (_307 > 0) 
    goto _jump1715;
    fail_assertion("non-positive loop bound");
    _jump1715:;
    // Computing total size of heap memory to allocate
    int64_t _308 = 1;
    _308 *= o;
    _308 *= _307;
    _308 *= sizeof(int64_t);
    _305.data = jpl_alloc(_308);
    int64_t _309 = 0; // z
    int64_t _310 = 0; // y
    _jump1716:; // Begin body of loop
    int64_t _311 = 0;
    _311 *= _305.d0;
    _311 += _310;
    _311 *= _305.d1;
    _311 += _309;
    _305.data[_311] = _22.d0;
    _309++;
    if (_309 < _307)
    goto _jump1716;
    _309 = 0;
    _310++;
    if (_310 < o)
    goto _jump1716;
    // End body of loop
    if (i >= 0)
    goto _jump1717;
    fail_assertion("negative array index");
    _jump1717:;
    if (i < _305.d0)
    goto _jump1718;
    fail_assertion("index too large");
    _jump1718:;
    if (o >= 0)
    goto _jump1719;
    fail_assertion("negative array index");
    _jump1719:;
    if (o < _305.d1)
    goto _jump1720;
    fail_assertion("index too large");
    _jump1720:;
    int64_t _312 = 0;
    _312 *= _305.d0;
    _312 += i;
    _312 *= _305.d1;
    _312 += o;
    int64_t _313 = _305.data[_312];
    if (_291 >= 0)
    goto _jump1721;
    fail_assertion("negative array index");
    _jump1721:;
    if (_291 < _270.d0)
    goto _jump1722;
    fail_assertion("index too large");
    _jump1722:;
    if (_313 >= 0)
    goto _jump1723;
    fail_assertion("negative array index");
    _jump1723:;
    if (_313 < _270.d1)
    goto _jump1724;
    fail_assertion("index too large");
    _jump1724:;
    if (j >= 0)
    goto _jump1725;
    fail_assertion("negative array index");
    _jump1725:;
    if (j < _270.d2)
    goto _jump1726;
    fail_assertion("index too large");
    _jump1726:;
    int64_t _314 = 0;
    _314 *= _270.d0;
    _314 += _291;
    _314 *= _270.d1;
    _314 += _313;
    _314 *= _270.d2;
    _314 += j;
    rgba _315 = _270.data[_314];
    double _316 = _315.g;
    bool _317 = f();
    double _318;
    if (!_317)
    goto _jump1727;
    double _319 = a(r);
    _318 = _319;
    goto _jump1728;
    _jump1727:;
    _318 = k;
    _jump1728:;
    double _320 = 24.0;
    double _321 = a(b);
    double _322 = fmod(_320, _321);
    bool _323 = true;
    double _324;
    if (!_323)
    goto _jump1729;
    _324 = b;
    goto _jump1730;
    _jump1729:;
    double _325 = 20.0;
    _324 = _325;
    _jump1730:;
    double _326 = fmod(_324, r);
    double _327 = 94.0;
    double _328 = b * _327;
    rgba _329 = { _318, _322, _326, _328 };
    double _330 = _329.b;
    double _331 = 91.0;
    double _332 = 20.0;
    double _333 = a(_332);
    bool _334 = _331 == _333;
    _a2_double _335;
    if (!_334)
    goto _jump1731;
    bool _336 = false;
    _a2_double _337;
    if (!_336)
    goto _jump1732;
    _a2_double _338;
    // Computing bound for y
    _338.d0 = i;
    if (i > 0) 
    goto _jump1733;
    fail_assertion("non-positive loop bound");
    _jump1733:;
    // Computing bound for z
    _338.d1 = i;
    if (i > 0) 
    goto _jump1734;
    fail_assertion("non-positive loop bound");
    _jump1734:;
    // Computing total size of heap memory to allocate
    int64_t _339 = 1;
    _339 *= i;
    _339 *= i;
    _339 *= sizeof(double);
    _338.data = jpl_alloc(_339);
    int64_t _340 = 0; // z
    int64_t _341 = 0; // y
    _jump1735:; // Begin body of loop
    double _342 = 83.0;
    int64_t _343 = 0;
    _343 *= _338.d0;
    _343 += _341;
    _343 *= _338.d1;
    _343 += _340;
    _338.data[_343] = _342;
    _340++;
    if (_340 < i)
    goto _jump1735;
    _340 = 0;
    _341++;
    if (_341 < i)
    goto _jump1735;
    // End body of loop
    _337 = _338;
    goto _jump1736;
    _jump1732:;
    if (_22.d0 >= 0)
    goto _jump1737;
    fail_assertion("negative array index");
    _jump1737:;
    if (_22.d0 < q.d0)
    goto _jump1738;
    fail_assertion("index too large");
    _jump1738:;
    int64_t _344 = 0;
    _344 *= q.d0;
    _344 += _22.d0;
    _a2_double _345 = q.data[_344];
    _337 = _345;
    _jump1736:;
    _335 = _337;
    goto _jump1739;
    _jump1731:;
    _a2_double _346;
    // Computing bound for y
    _346.d0 = _22.d0;
    if (_22.d0 > 0) 
    goto _jump1740;
    fail_assertion("non-positive loop bound");
    _jump1740:;
    // Computing bound for z
    _346.d1 = j;
    if (j > 0) 
    goto _jump1741;
    fail_assertion("non-positive loop bound");
    _jump1741:;
    // Computing total size of heap memory to allocate
    int64_t _347 = 1;
    _347 *= _22.d0;
    _347 *= j;
    _347 *= sizeof(double);
    _346.data = jpl_alloc(_347);
    int64_t _348 = 0; // z
    int64_t _349 = 0; // y
    _jump1742:; // Begin body of loop
    int64_t _350 = 0;
    _350 *= _346.d0;
    _350 += _349;
    _350 *= _346.d1;
    _350 += _348;
    _346.data[_350] = r;
    _348++;
    if (_348 < j)
    goto _jump1742;
    _348 = 0;
    _349++;
    if (_349 < _22.d0)
    goto _jump1742;
    // End body of loop
    _335 = _346;
    _jump1739:;
    int64_t _351 = -h;
    if (_351 >= 0)
    goto _jump1743;
    fail_assertion("negative array index");
    _jump1743:;
    if (_351 < _335.d0)
    goto _jump1744;
    fail_assertion("index too large");
    _jump1744:;
    if (n >= 0)
    goto _jump1745;
    fail_assertion("negative array index");
    _jump1745:;
    if (n < _335.d1)
    goto _jump1746;
    fail_assertion("index too large");
    _jump1746:;
    int64_t _352 = 0;
    _352 *= _335.d0;
    _352 += _351;
    _352 *= _335.d1;
    _352 += n;
    double _353 = _335.data[_352];
    rgba _354 = { b, r, _330, _353 };
    double _355 = _354.g;
    double _356 = 98.0;
    double _357 = a(_356);
    rgba _358 = { _264, _316, _355, _357 };
    bool _359 = m == i;
    _a2_double _360;
    if (!_359)
    goto _jump1747;
    _a2_double _361;
    // Computing bound for z
    _361.d0 = n;
    if (n > 0) 
    goto _jump1748;
    fail_assertion("non-positive loop bound");
    _jump1748:;
    // Computing bound for A
    _361.d1 = h;
    if (h > 0) 
    goto _jump1749;
    fail_assertion("non-positive loop bound");
    _jump1749:;
    // Computing total size of heap memory to allocate
    int64_t _362 = 1;
    _362 *= n;
    _362 *= h;
    _362 *= sizeof(double);
    _361.data = jpl_alloc(_362);
    int64_t _363 = 0; // A
    int64_t _364 = 0; // z
    _jump1750:; // Begin body of loop
    double _365 = p(q, r);
    int64_t _366 = 0;
    _366 *= _361.d0;
    _366 += _364;
    _366 *= _361.d1;
    _366 += _363;
    _361.data[_366] = _365;
    _363++;
    if (_363 < h)
    goto _jump1750;
    _363 = 0;
    _364++;
    if (_364 < n)
    goto _jump1750;
    // End body of loop
    _360 = _361;
    goto _jump1751;
    _jump1747:;
    _a2_double _367;
    // Computing bound for z
    _367.d0 = _22.d1;
    if (_22.d1 > 0) 
    goto _jump1752;
    fail_assertion("non-positive loop bound");
    _jump1752:;
    // Computing bound for A
    _367.d1 = n;
    if (n > 0) 
    goto _jump1753;
    fail_assertion("non-positive loop bound");
    _jump1753:;
    // Computing total size of heap memory to allocate
    int64_t _368 = 1;
    _368 *= _22.d1;
    _368 *= n;
    _368 *= sizeof(double);
    _367.data = jpl_alloc(_368);
    int64_t _369 = 0; // A
    int64_t _370 = 0; // z
    _jump1754:; // Begin body of loop
    double _371 = 51.0;
    double _372 = -_371;
    int64_t _373 = 0;
    _373 *= _367.d0;
    _373 += _370;
    _373 *= _367.d1;
    _373 += _369;
    _367.data[_373] = _372;
    _369++;
    if (_369 < n)
    goto _jump1754;
    _369 = 0;
    _370++;
    if (_370 < _22.d1)
    goto _jump1754;
    // End body of loop
    _360 = _367;
    _jump1751:;
    _a2_double _374;
    // Computing bound for z
    _374.d0 = m;
    if (m > 0) 
    goto _jump1755;
    fail_assertion("non-positive loop bound");
    _jump1755:;
    // Computing bound for A
    _374.d1 = m;
    if (m > 0) 
    goto _jump1756;
    fail_assertion("non-positive loop bound");
    _jump1756:;
    // Computing total size of heap memory to allocate
    int64_t _375 = 1;
    _375 *= m;
    _375 *= m;
    _375 *= sizeof(double);
    _374.data = jpl_alloc(_375);
    int64_t _376 = 0; // A
    int64_t _377 = 0; // z
    _jump1757:; // Begin body of loop
    double _378 = _358.b;
    int64_t _379 = 0;
    _379 *= _374.d0;
    _379 += _377;
    _379 *= _374.d1;
    _379 += _376;
    _374.data[_379] = _378;
    _376++;
    if (_376 < m)
    goto _jump1757;
    _376 = 0;
    _377++;
    if (_377 < m)
    goto _jump1757;
    // End body of loop
    _a1__a2_int64_t _380;
    // Computing bound for z
    _380.d0 = _22.d0;
    if (_22.d0 > 0) 
    goto _jump1758;
    fail_assertion("non-positive loop bound");
    _jump1758:;
    // Computing total size of heap memory to allocate
    int64_t _381 = 1;
    _381 *= _22.d0;
    _381 *= sizeof(_a2_int64_t);
    _380.data = jpl_alloc(_381);
    int64_t _382 = 0; // z
    _jump1759:; // Begin body of loop
    int64_t _383 = 0;
    _383 *= _380.d0;
    _383 += _382;
    _380.data[_383] = _22;
    _382++;
    if (_382 < _22.d0)
    goto _jump1759;
    // End body of loop
    bool _384 = c(_380);
    _a2_double _385;
    if (!_384)
    goto _jump1760;
    _a2_double _386;
    // Computing bound for z
    int64_t _387 = 390;
    _386.d0 = _387;
    if (_387 > 0) 
    goto _jump1761;
    fail_assertion("non-positive loop bound");
    _jump1761:;
    // Computing bound for A
    _386.d1 = _22.d0;
    if (_22.d0 > 0) 
    goto _jump1762;
    fail_assertion("non-positive loop bound");
    _jump1762:;
    // Computing total size of heap memory to allocate
    int64_t _388 = 1;
    _388 *= _387;
    _388 *= _22.d0;
    _388 *= sizeof(double);
    _386.data = jpl_alloc(_388);
    int64_t _389 = 0; // A
    int64_t _390 = 0; // z
    _jump1763:; // Begin body of loop
    double _391 = a(k);
    int64_t _392 = 0;
    _392 *= _386.d0;
    _392 += _390;
    _392 *= _386.d1;
    _392 += _389;
    _386.data[_392] = _391;
    _389++;
    if (_389 < _22.d0)
    goto _jump1763;
    _389 = 0;
    _390++;
    if (_390 < _387)
    goto _jump1763;
    // End body of loop
    _385 = _386;
    goto _jump1764;
    _jump1760:;
    _a2_double _393;
    // Computing bound for z
    _a2_int64_t _394;
    // Computing bound for z
    int64_t _395 = 248;
    _394.d0 = _395;
    if (_395 > 0) 
    goto _jump1765;
    fail_assertion("non-positive loop bound");
    _jump1765:;
    // Computing bound for A
    _394.d1 = _22.d0;
    if (_22.d0 > 0) 
    goto _jump1766;
    fail_assertion("non-positive loop bound");
    _jump1766:;
    // Computing total size of heap memory to allocate
    int64_t _396 = 1;
    _396 *= _395;
    _396 *= _22.d0;
    _396 *= sizeof(int64_t);
    _394.data = jpl_alloc(_396);
    int64_t _397 = 0; // A
    int64_t _398 = 0; // z
    _jump1767:; // Begin body of loop
    int64_t _399 = 0;
    _399 *= _394.d0;
    _399 += _398;
    _399 *= _394.d1;
    _399 += _397;
    _394.data[_399] = _22.d0;
    _397++;
    if (_397 < _22.d0)
    goto _jump1767;
    _397 = 0;
    _398++;
    if (_398 < _395)
    goto _jump1767;
    // End body of loop
    int64_t _400 = _22.d0 + j;
    if (_22.d0 >= 0)
    goto _jump1768;
    fail_assertion("negative array index");
    _jump1768:;
    if (_22.d0 < _394.d0)
    goto _jump1769;
    fail_assertion("index too large");
    _jump1769:;
    if (_400 >= 0)
    goto _jump1770;
    fail_assertion("negative array index");
    _jump1770:;
    if (_400 < _394.d1)
    goto _jump1771;
    fail_assertion("index too large");
    _jump1771:;
    int64_t _401 = 0;
    _401 *= _394.d0;
    _401 += _22.d0;
    _401 *= _394.d1;
    _401 += _400;
    int64_t _402 = _394.data[_401];
    _393.d0 = _402;
    if (_402 > 0) 
    goto _jump1772;
    fail_assertion("non-positive loop bound");
    _jump1772:;
    // Computing bound for A
    _393.d1 = _22.d1;
    if (_22.d1 > 0) 
    goto _jump1773;
    fail_assertion("non-positive loop bound");
    _jump1773:;
    // Computing total size of heap memory to allocate
    int64_t _403 = 1;
    _403 *= _402;
    _403 *= _22.d1;
    _403 *= sizeof(double);
    _393.data = jpl_alloc(_403);
    int64_t _404 = 0; // A
    int64_t _405 = 0; // z
    _jump1774:; // Begin body of loop
    int64_t _406 = 0;
    _406 *= _393.d0;
    _406 += _405;
    _406 *= _393.d1;
    _406 += _404;
    _393.data[_406] = b;
    _404++;
    if (_404 < _22.d1)
    goto _jump1774;
    _404 = 0;
    _405++;
    if (_405 < _402)
    goto _jump1774;
    // End body of loop
    _385 = _393;
    _jump1764:;
    _a1__a2_double _407;
    _407.d0 = 3;
    _407.data = jpl_alloc(sizeof(_a2_double) * 3);
    _407.data[0] = _360;
    _407.data[1] = _374;
    _407.data[2] = _385;
    _a1__a2_double _408;
    // Computing bound for z
    _408.d0 = i;
    if (i > 0) 
    goto _jump1775;
    fail_assertion("non-positive loop bound");
    _jump1775:;
    // Computing total size of heap memory to allocate
    int64_t _409 = 1;
    _409 *= i;
    _409 *= sizeof(_a2_double);
    _408.data = jpl_alloc(_409);
    int64_t _410 = 0; // z
    _jump1776:; // Begin body of loop
    bool _411 = k <= k;
    _a2_double _412;
    if (!_411)
    goto _jump1777;
    _a2_double _413;
    // Computing bound for A
    int64_t _414;
    // Computing bound for A
    if (j > 0) 
    goto _jump1778;
    fail_assertion("non-positive loop bound");
    _jump1778:;
    // Computing bound for B
    if (_22.d0 > 0) 
    goto _jump1779;
    fail_assertion("non-positive loop bound");
    _jump1779:;
    // Computing bound for C
    int64_t _415 = 473;
    if (_415 > 0) 
    goto _jump1780;
    fail_assertion("non-positive loop bound");
    _jump1780:;
    _414 = 0;
    int64_t _416 = 0; // C
    int64_t _417 = 0; // B
    int64_t _418 = 0; // A
    _jump1781:; // Begin body of loop
    _414 += _22.d0;
    _416++;
    if (_416 < _415)
    goto _jump1781;
    _416 = 0;
    _417++;
    if (_417 < _22.d0)
    goto _jump1781;
    _417 = 0;
    _418++;
    if (_418 < j)
    goto _jump1781;
    // End body of loop
    _413.d0 = _414;
    if (_414 > 0) 
    goto _jump1782;
    fail_assertion("non-positive loop bound");
    _jump1782:;
    // Computing bound for B
    _413.d1 = h;
    if (h > 0) 
    goto _jump1783;
    fail_assertion("non-positive loop bound");
    _jump1783:;
    // Computing total size of heap memory to allocate
    int64_t _419 = 1;
    _419 *= _414;
    _419 *= h;
    _419 *= sizeof(double);
    _413.data = jpl_alloc(_419);
    int64_t _420 = 0; // B
    int64_t _421 = 0; // A
    _jump1784:; // Begin body of loop
    int64_t _422 = 0;
    _422 *= _413.d0;
    _422 += _421;
    _422 *= _413.d1;
    _422 += _420;
    _413.data[_422] = r;
    _420++;
    if (_420 < h)
    goto _jump1784;
    _420 = 0;
    _421++;
    if (_421 < _414)
    goto _jump1784;
    // End body of loop
    _412 = _413;
    goto _jump1785;
    _jump1777:;
    bool _423 = r < b;
    _a2_double _424;
    if (!_423)
    goto _jump1786;
    _a2_double _425;
    // Computing bound for A
    _425.d0 = h;
    if (h > 0) 
    goto _jump1787;
    fail_assertion("non-positive loop bound");
    _jump1787:;
    // Computing bound for B
    _425.d1 = h;
    if (h > 0) 
    goto _jump1788;
    fail_assertion("non-positive loop bound");
    _jump1788:;
    // Computing total size of heap memory to allocate
    int64_t _426 = 1;
    _426 *= h;
    _426 *= h;
    _426 *= sizeof(double);
    _425.data = jpl_alloc(_426);
    int64_t _427 = 0; // B
    int64_t _428 = 0; // A
    _jump1789:; // Begin body of loop
    double _429 = 61.0;
    int64_t _430 = 0;
    _430 *= _425.d0;
    _430 += _428;
    _430 *= _425.d1;
    _430 += _427;
    _425.data[_430] = _429;
    _427++;
    if (_427 < h)
    goto _jump1789;
    _427 = 0;
    _428++;
    if (_428 < h)
    goto _jump1789;
    // End body of loop
    _424 = _425;
    goto _jump1790;
    _jump1786:;
    if (m >= 0)
    goto _jump1791;
    fail_assertion("negative array index");
    _jump1791:;
    if (m < q.d0)
    goto _jump1792;
    fail_assertion("index too large");
    _jump1792:;
    int64_t _431 = 0;
    _431 *= q.d0;
    _431 += m;
    _a2_double _432 = q.data[_431];
    _424 = _432;
    _jump1790:;
    _412 = _424;
    _jump1785:;
    int64_t _433 = 0;
    _433 *= _408.d0;
    _433 += _410;
    _408.data[_433] = _412;
    _410++;
    if (_410 < i)
    goto _jump1776;
    // End body of loop
    int64_t _434;
    // Computing bound for z
    if (_22.d0 > 0) 
    goto _jump1793;
    fail_assertion("non-positive loop bound");
    _jump1793:;
    // Computing bound for A
    if (n > 0) 
    goto _jump1794;
    fail_assertion("non-positive loop bound");
    _jump1794:;
    _434 = 0;
    int64_t _435 = 0; // A
    int64_t _436 = 0; // z
    _jump1795:; // Begin body of loop
    _434 += m;
    _435++;
    if (_435 < n)
    goto _jump1795;
    _435 = 0;
    _436++;
    if (_436 < _22.d0)
    goto _jump1795;
    // End body of loop
    bool _437 = _22.d0 == _434;
    rgba _438;
    if (!_437)
    goto _jump1796;
    _438 = _358;
    goto _jump1797;
    _jump1796:;
    bool _439 = false;
    rgba _440;
    if (!_439)
    goto _jump1798;
    _440 = _358;
    goto _jump1799;
    _jump1798:;
    _440 = _358;
    _jump1799:;
    _438 = _440;
    _jump1797:;
    double _441 = _438.a;
    double _442 = p(_408, _441);
    double _443 = p(_407, _442);
    double _444;
    // Computing bound for z
    if (j > 0) 
    goto _jump1800;
    fail_assertion("non-positive loop bound");
    _jump1800:;
    // Computing bound for A
    int64_t _445 = -m;
    if (_445 > 0) 
    goto _jump1801;
    fail_assertion("non-positive loop bound");
    _jump1801:;
    _444 = 0;
    int64_t _446 = 0; // A
    int64_t _447 = 0; // z
    _jump1802:; // Begin body of loop
    double _448;
    // Computing bound for B
    int64_t _449 = -j;
    if (_22.d0 >= 0)
    goto _jump1803;
    fail_assertion("negative array index");
    _jump1803:;
    if (_22.d0 < l.d0)
    goto _jump1804;
    fail_assertion("index too large");
    _jump1804:;
    if (_449 >= 0)
    goto _jump1805;
    fail_assertion("negative array index");
    _jump1805:;
    if (_449 < l.d1)
    goto _jump1806;
    fail_assertion("index too large");
    _jump1806:;
    if (h >= 0)
    goto _jump1807;
    fail_assertion("negative array index");
    _jump1807:;
    if (h < l.d2)
    goto _jump1808;
    fail_assertion("index too large");
    _jump1808:;
    int64_t _450 = 0;
    _450 *= l.d0;
    _450 += _22.d0;
    _450 *= l.d1;
    _450 += _449;
    _450 *= l.d2;
    _450 += h;
    int64_t _451 = l.data[_450];
    if (_451 > 0) 
    goto _jump1809;
    fail_assertion("non-positive loop bound");
    _jump1809:;
    // Computing bound for C
    if (j > 0) 
    goto _jump1810;
    fail_assertion("non-positive loop bound");
    _jump1810:;
    // Computing bound for D
    int64_t _452;
    // Computing bound for B
    if (j > 0) 
    goto _jump1811;
    fail_assertion("non-positive loop bound");
    _jump1811:;
    _452 = 0;
    int64_t _453 = 0; // B
    _jump1812:; // Begin body of loop
    _452 += i;
    _453++;
    if (_453 < j)
    goto _jump1812;
    // End body of loop
    if (_452 > 0) 
    goto _jump1813;
    fail_assertion("non-positive loop bound");
    _jump1813:;
    _448 = 0;
    int64_t _454 = 0; // D
    int64_t _455 = 0; // C
    int64_t _456 = 0; // B
    _jump1814:; // Begin body of loop
    double _457;
    // Computing bound for E
    if (n > 0) 
    goto _jump1815;
    fail_assertion("non-positive loop bound");
    _jump1815:;
    // Computing bound for F
    if (j > 0) 
    goto _jump1816;
    fail_assertion("non-positive loop bound");
    _jump1816:;
    // Computing bound for G
    int64_t _458 = -o;
    if (_458 > 0) 
    goto _jump1817;
    fail_assertion("non-positive loop bound");
    _jump1817:;
    _457 = 0;
    int64_t _459 = 0; // G
    int64_t _460 = 0; // F
    int64_t _461 = 0; // E
    _jump1818:; // Begin body of loop
    double _462 = a(b);
    if (m >= 0)
    goto _jump1819;
    fail_assertion("negative array index");
    _jump1819:;
    if (m < d.d0)
    goto _jump1820;
    fail_assertion("index too large");
    _jump1820:;
    int64_t _463 = 0;
    _463 *= d.d0;
    _463 += m;
    double _464 = d.data[_463];
    double _465 = fmod(_462, _464);
    _457 += _465;
    _459++;
    if (_459 < _458)
    goto _jump1818;
    _459 = 0;
    _460++;
    if (_460 < j)
    goto _jump1818;
    _460 = 0;
    _461++;
    if (_461 < n)
    goto _jump1818;
    // End body of loop
    _448 += _457;
    _454++;
    if (_454 < _452)
    goto _jump1814;
    _454 = 0;
    _455++;
    if (_455 < j)
    goto _jump1814;
    _455 = 0;
    _456++;
    if (_456 < _451)
    goto _jump1814;
    // End body of loop
    double _466 = -_448;
    _444 += _466;
    _446++;
    if (_446 < _445)
    goto _jump1802;
    _446 = 0;
    _447++;
    if (_447 < j)
    goto _jump1802;
    // End body of loop
    double _467 = _443 + _444;
    return _467;
}

e s(_a3_double t) {
    e _0 = s(t);
    _a1__a3__a3_double _1;
    // Computing bound for y
    int64_t _2;
    // Computing bound for y
    int64_t _3 = 721;
    if (_3 > 0) 
    goto _jump1900;
    fail_assertion("non-positive loop bound");
    _jump1900:;
    _2 = 0;
    int64_t _4 = 0; // y
    _jump1901:; // Begin body of loop
    _2 += r;
    _4++;
    if (_4 < _3)
    goto _jump1901;
    // End body of loop
    int64_t _5 = _2 / t.d1;
    _1.d0 = _5;
    if (_5 > 0) 
    goto _jump1902;
    fail_assertion("non-positive loop bound");
    _jump1902:;
    // Computing total size of heap memory to allocate
    int64_t _6 = 1;
    _6 *= _5;
    _6 *= sizeof(_a3__a3_double);
    _1.data = jpl_alloc(_6);
    int64_t _7 = 0; // y
    _jump1903:; // Begin body of loop
    _a3__a3_double _8;
    // Computing bound for z
    if (_7 >= 0)
    goto _jump1904;
    fail_assertion("negative array index");
    _jump1904:;
    if (_7 < q.d0)
    goto _jump1905;
    fail_assertion("index too large");
    _jump1905:;
    if (m >= 0)
    goto _jump1906;
    fail_assertion("negative array index");
    _jump1906:;
    if (m < q.d1)
    goto _jump1907;
    fail_assertion("index too large");
    _jump1907:;
    if (_7 >= 0)
    goto _jump1908;
    fail_assertion("negative array index");
    _jump1908:;
    if (_7 < q.d2)
    goto _jump1909;
    fail_assertion("index too large");
    _jump1909:;
    int64_t _9 = 0;
    _9 *= q.d0;
    _9 += _7;
    _9 *= q.d1;
    _9 += m;
    _9 *= q.d2;
    _9 += _7;
    int64_t _10 = q.data[_9];
    _8.d0 = _10;
    if (_10 > 0) 
    goto _jump1910;
    fail_assertion("non-positive loop bound");
    _jump1910:;
    // Computing bound for A
    _8.d1 = _7;
    if (_7 > 0) 
    goto _jump1911;
    fail_assertion("non-positive loop bound");
    _jump1911:;
    // Computing bound for B
    _8.d2 = h;
    if (h > 0) 
    goto _jump1912;
    fail_assertion("non-positive loop bound");
    _jump1912:;
    // Computing total size of heap memory to allocate
    int64_t _11 = 1;
    _11 *= _10;
    _11 *= _7;
    _11 *= h;
    _11 *= sizeof(_a3_double);
    _8.data = jpl_alloc(_11);
    int64_t _12 = 0; // B
    int64_t _13 = 0; // A
    int64_t _14 = 0; // z
    _jump1913:; // Begin body of loop
    _a3_double _15;
    // Computing bound for C
    _15.d0 = n;
    if (n > 0) 
    goto _jump1914;
    fail_assertion("non-positive loop bound");
    _jump1914:;
    // Computing bound for D
    _15.d1 = h;
    if (h > 0) 
    goto _jump1915;
    fail_assertion("non-positive loop bound");
    _jump1915:;
    // Computing bound for E
    _15.d2 = h;
    if (h > 0) 
    goto _jump1916;
    fail_assertion("non-positive loop bound");
    _jump1916:;
    // Computing total size of heap memory to allocate
    int64_t _16 = 1;
    _16 *= n;
    _16 *= h;
    _16 *= h;
    _16 *= sizeof(double);
    _15.data = jpl_alloc(_16);
    int64_t _17 = 0; // E
    int64_t _18 = 0; // D
    int64_t _19 = 0; // C
    _jump1917:; // Begin body of loop
    int64_t _20 = 0;
    _20 *= _15.d0;
    _20 += _19;
    _20 *= _15.d1;
    _20 += _18;
    _20 *= _15.d2;
    _20 += _17;
    _15.data[_20] = b;
    _17++;
    if (_17 < h)
    goto _jump1917;
    _17 = 0;
    _18++;
    if (_18 < h)
    goto _jump1917;
    _18 = 0;
    _19++;
    if (_19 < n)
    goto _jump1917;
    // End body of loop
    int64_t _21 = 0;
    _21 *= _8.d0;
    _21 += _14;
    _21 *= _8.d1;
    _21 += _13;
    _21 *= _8.d2;
    _21 += _12;
    _8.data[_21] = _15;
    _12++;
    if (_12 < h)
    goto _jump1913;
    _12 = 0;
    _13++;
    if (_13 < _7)
    goto _jump1913;
    _13 = 0;
    _14++;
    if (_14 < _10)
    goto _jump1913;
    // End body of loop
    int64_t _22 = 0;
    _22 *= _1.d0;
    _22 += _7;
    _1.data[_22] = _8;
    _7++;
    if (_7 < _5)
    goto _jump1903;
    // End body of loop
    int64_t _23;
    // Computing bound for y
    _a1_int64_t _24;
    _24.d0 = 1;
    _24.data = jpl_alloc(sizeof(int64_t) * 1);
    _24.data[0] = r;
    if (r >= 0)
    goto _jump1918;
    fail_assertion("negative array index");
    _jump1918:;
    if (r < _24.d0)
    goto _jump1919;
    fail_assertion("index too large");
    _jump1919:;
    int64_t _25 = 0;
    _25 *= _24.d0;
    _25 += r;
    int64_t _26 = _24.data[_25];
    if (_26 > 0) 
    goto _jump1920;
    fail_assertion("non-positive loop bound");
    _jump1920:;
    // Computing bound for z
    int64_t _27 = 987;
    if (_27 > 0) 
    goto _jump1921;
    fail_assertion("non-positive loop bound");
    _jump1921:;
    _23 = 0;
    int64_t _28 = 0; // z
    int64_t _29 = 0; // y
    _jump1922:; // Begin body of loop
    _23 += _29;
    _28++;
    if (_28 < _27)
    goto _jump1922;
    _28 = 0;
    _29++;
    if (_29 < _26)
    goto _jump1922;
    // End body of loop
    if (_23 >= 0)
    goto _jump1923;
    fail_assertion("negative array index");
    _jump1923:;
    if (_23 < _1.d0)
    goto _jump1924;
    fail_assertion("index too large");
    _jump1924:;
    int64_t _30 = 0;
    _30 *= _1.d0;
    _30 += _23;
    _a3__a3_double _31 = _1.data[_30];
    int64_t _32;
    // Computing bound for y
    _a2_int64_t _33;
    // Computing bound for y
    _33.d0 = j;
    if (j > 0) 
    goto _jump1925;
    fail_assertion("non-positive loop bound");
    _jump1925:;
    // Computing bound for z
    int64_t _34;
    // Computing bound for y
    if (n > 0) 
    goto _jump1926;
    fail_assertion("non-positive loop bound");
    _jump1926:;
    _34 = 0;
    int64_t _35 = 0; // y
    _jump1927:; // Begin body of loop
    _34 += o;
    _35++;
    if (_35 < n)
    goto _jump1927;
    // End body of loop
    _33.d1 = _34;
    if (_34 > 0) 
    goto _jump1928;
    fail_assertion("non-positive loop bound");
    _jump1928:;
    // Computing total size of heap memory to allocate
    int64_t _36 = 1;
    _36 *= j;
    _36 *= _34;
    _36 *= sizeof(int64_t);
    _33.data = jpl_alloc(_36);
    int64_t _37 = 0; // z
    int64_t _38 = 0; // y
    _jump1929:; // Begin body of loop
    int64_t _39 = 0;
    _39 *= _33.d0;
    _39 += _38;
    _39 *= _33.d1;
    _39 += _37;
    _33.data[_39] = i;
    _37++;
    if (_37 < _34)
    goto _jump1929;
    _37 = 0;
    _38++;
    if (_38 < j)
    goto _jump1929;
    // End body of loop
    if (t.d1 >= 0)
    goto _jump1930;
    fail_assertion("negative array index");
    _jump1930:;
    if (t.d1 < _33.d0)
    goto _jump1931;
    fail_assertion("index too large");
    _jump1931:;
    if (m >= 0)
    goto _jump1932;
    fail_assertion("negative array index");
    _jump1932:;
    if (m < _33.d1)
    goto _jump1933;
    fail_assertion("index too large");
    _jump1933:;
    int64_t _40 = 0;
    _40 *= _33.d0;
    _40 += t.d1;
    _40 *= _33.d1;
    _40 += m;
    int64_t _41 = _33.data[_40];
    if (_41 > 0) 
    goto _jump1934;
    fail_assertion("non-positive loop bound");
    _jump1934:;
    // Computing bound for z
    if (t.d2 > 0) 
    goto _jump1935;
    fail_assertion("non-positive loop bound");
    _jump1935:;
    // Computing bound for A
    int64_t _42 = -i;
    if (_42 > 0) 
    goto _jump1936;
    fail_assertion("non-positive loop bound");
    _jump1936:;
    _32 = 0;
    int64_t _43 = 0; // A
    int64_t _44 = 0; // z
    int64_t _45 = 0; // y
    _jump1937:; // Begin body of loop
    int64_t _46 = 600;
    _32 += _46;
    _43++;
    if (_43 < _42)
    goto _jump1937;
    _43 = 0;
    _44++;
    if (_44 < t.d2)
    goto _jump1937;
    _44 = 0;
    _45++;
    if (_45 < _41)
    goto _jump1937;
    // End body of loop
    if (t.d2 >= 0)
    goto _jump1938;
    fail_assertion("negative array index");
    _jump1938:;
    if (t.d2 < _31.d0)
    goto _jump1939;
    fail_assertion("index too large");
    _jump1939:;
    if (_32 >= 0)
    goto _jump1940;
    fail_assertion("negative array index");
    _jump1940:;
    if (_32 < _31.d1)
    goto _jump1941;
    fail_assertion("index too large");
    _jump1941:;
    if (t.d1 >= 0)
    goto _jump1942;
    fail_assertion("negative array index");
    _jump1942:;
    if (t.d1 < _31.d2)
    goto _jump1943;
    fail_assertion("index too large");
    _jump1943:;
    int64_t _47 = 0;
    _47 *= _31.d0;
    _47 += t.d2;
    _47 *= _31.d1;
    _47 += _32;
    _47 *= _31.d2;
    _47 += t.d1;
    _a3_double _48 = _31.data[_47];
    if (i >= 0)
    goto _jump1944;
    fail_assertion("negative array index");
    _jump1944:;
    if (i < _48.d0)
    goto _jump1945;
    fail_assertion("index too large");
    _jump1945:;
    if (i >= 0)
    goto _jump1946;
    fail_assertion("negative array index");
    _jump1946:;
    if (i < _48.d1)
    goto _jump1947;
    fail_assertion("index too large");
    _jump1947:;
    if (n >= 0)
    goto _jump1948;
    fail_assertion("negative array index");
    _jump1948:;
    if (n < _48.d2)
    goto _jump1949;
    fail_assertion("index too large");
    _jump1949:;
    int64_t _49 = 0;
    _49 *= _48.d0;
    _49 += i;
    _49 *= _48.d1;
    _49 += i;
    _49 *= _48.d2;
    _49 += n;
    double _50 = _48.data[_49];
    double _51 = -_50;
    _a2__a1__a2_int64_t _52;
    // Computing bound for E
    _52.d0 = m;
    if (m > 0) 
    goto _jump1950;
    fail_assertion("non-positive loop bound");
    _jump1950:;
    // Computing bound for F
    _52.d1 = i;
    if (i > 0) 
    goto _jump1951;
    fail_assertion("non-positive loop bound");
    _jump1951:;
    // Computing total size of heap memory to allocate
    int64_t _53 = 1;
    _53 *= m;
    _53 *= i;
    _53 *= sizeof(_a1__a2_int64_t);
    _52.data = jpl_alloc(_53);
    int64_t _54 = 0; // F
    int64_t _55 = 0; // E
    _jump1952:; // Begin body of loop
    _a2_int64_t _56;
    // Computing bound for G
    _56.d0 = j;
    if (j > 0) 
    goto _jump1953;
    fail_assertion("non-positive loop bound");
    _jump1953:;
    // Computing bound for H
    _56.d1 = i;
    if (i > 0) 
    goto _jump1954;
    fail_assertion("non-positive loop bound");
    _jump1954:;
    // Computing total size of heap memory to allocate
    int64_t _57 = 1;
    _57 *= j;
    _57 *= i;
    _57 *= sizeof(int64_t);
    _56.data = jpl_alloc(_57);
    int64_t _58 = 0; // H
    int64_t _59 = 0; // G
    _jump1955:; // Begin body of loop
    int64_t _60 = 0;
    _60 *= _56.d0;
    _60 += _59;
    _60 *= _56.d1;
    _60 += _58;
    _56.data[_60] = _58;
    _58++;
    if (_58 < i)
    goto _jump1955;
    _58 = 0;
    _59++;
    if (_59 < j)
    goto _jump1955;
    // End body of loop
    _a1__a2_int64_t _61;
    _61.d0 = 1;
    _61.data = jpl_alloc(sizeof(_a2_int64_t) * 1);
    _61.data[0] = _56;
    int64_t _62 = 0;
    _62 *= _52.d0;
    _62 += _55;
    _62 *= _52.d1;
    _62 += _54;
    _52.data[_62] = _61;
    _54++;
    if (_54 < i)
    goto _jump1952;
    _54 = 0;
    _55++;
    if (_55 < m)
    goto _jump1952;
    // End body of loop
    bool _63 = t.d0 != n;
    bool _64 = !_63;
    bool _65 = !_64;
    int64_t _66;
    if (!_65)
    goto _jump1956;
    _66 = h;
    goto _jump1957;
    _jump1956:;
    _66 = t.d0;
    _jump1957:;
    if (i >= 0)
    goto _jump1958;
    fail_assertion("negative array index");
    _jump1958:;
    if (i < _52.d0)
    goto _jump1959;
    fail_assertion("index too large");
    _jump1959:;
    if (_66 >= 0)
    goto _jump1960;
    fail_assertion("negative array index");
    _jump1960:;
    if (_66 < _52.d1)
    goto _jump1961;
    fail_assertion("index too large");
    _jump1961:;
    int64_t _67 = 0;
    _67 *= _52.d0;
    _67 += i;
    _67 *= _52.d1;
    _67 += _66;
    _a1__a2_int64_t _68 = _52.data[_67];
    bool _69 = c(_68);
    bool _70;
    if (!_69)
    goto _jump1962;
    bool _72 = f();
    bool _71 = _72;
    if (0 != _72)
    goto _jump1963;
    bool _73 = true;
    _71 = _73;
    _jump1963:;
    _a1__a2_int64_t _74;
    if (!_71)
    goto _jump1964;
    bool _76 = true;
    bool _75 = _76;
    if (0 == _76)
    goto _jump1965;
    bool _77 = f();
    _75 = _77;
    _jump1965:;
    _a1__a2_int64_t _78;
    if (!_75)
    goto _jump1966;
    _a2_int64_t _79;
    // Computing bound for E
    int64_t _80 = 806;
    _79.d0 = _80;
    if (_80 > 0) 
    goto _jump1967;
    fail_assertion("non-positive loop bound");
    _jump1967:;
    // Computing bound for F
    if (t.d2 >= 0)
    goto _jump1968;
    fail_assertion("negative array index");
    _jump1968:;
    if (t.d2 < l.d0)
    goto _jump1969;
    fail_assertion("index too large");
    _jump1969:;
    if (t.d2 >= 0)
    goto _jump1970;
    fail_assertion("negative array index");
    _jump1970:;
    if (t.d2 < l.d1)
    goto _jump1971;
    fail_assertion("index too large");
    _jump1971:;
    if (i >= 0)
    goto _jump1972;
    fail_assertion("negative array index");
    _jump1972:;
    if (i < l.d2)
    goto _jump1973;
    fail_assertion("index too large");
    _jump1973:;
    int64_t _81 = 0;
    _81 *= l.d0;
    _81 += t.d2;
    _81 *= l.d1;
    _81 += t.d2;
    _81 *= l.d2;
    _81 += i;
    int64_t _82 = l.data[_81];
    _79.d1 = _82;
    if (_82 > 0) 
    goto _jump1974;
    fail_assertion("non-positive loop bound");
    _jump1974:;
    // Computing total size of heap memory to allocate
    int64_t _83 = 1;
    _83 *= _80;
    _83 *= _82;
    _83 *= sizeof(int64_t);
    _79.data = jpl_alloc(_83);
    int64_t _84 = 0; // F
    int64_t _85 = 0; // E
    _jump1975:; // Begin body of loop
    int64_t _86 = 0;
    _86 *= _79.d0;
    _86 += _85;
    _86 *= _79.d1;
    _86 += _84;
    _79.data[_86] = t.d2;
    _84++;
    if (_84 < _82)
    goto _jump1975;
    _84 = 0;
    _85++;
    if (_85 < _80)
    goto _jump1975;
    // End body of loop
    _a2_int64_t _87;
    // Computing bound for E
    _87.d0 = n;
    if (n > 0) 
    goto _jump1976;
    fail_assertion("non-positive loop bound");
    _jump1976:;
    // Computing bound for F
    _87.d1 = t.d2;
    if (t.d2 > 0) 
    goto _jump1977;
    fail_assertion("non-positive loop bound");
    _jump1977:;
    // Computing total size of heap memory to allocate
    int64_t _88 = 1;
    _88 *= n;
    _88 *= t.d2;
    _88 *= sizeof(int64_t);
    _87.data = jpl_alloc(_88);
    int64_t _89 = 0; // F
    int64_t _90 = 0; // E
    _jump1978:; // Begin body of loop
    int64_t _91 = 0;
    _91 *= _87.d0;
    _91 += _90;
    _91 *= _87.d1;
    _91 += _89;
    _87.data[_91] = t.d2;
    _89++;
    if (_89 < t.d2)
    goto _jump1978;
    _89 = 0;
    _90++;
    if (_90 < n)
    goto _jump1978;
    // End body of loop
    _a2_int64_t _92;
    // Computing bound for E
    _92.d0 = t.d2;
    if (t.d2 > 0) 
    goto _jump1979;
    fail_assertion("non-positive loop bound");
    _jump1979:;
    // Computing bound for F
    int64_t _93 = r * t.d1;
    _92.d1 = _93;
    if (_93 > 0) 
    goto _jump1980;
    fail_assertion("non-positive loop bound");
    _jump1980:;
    // Computing total size of heap memory to allocate
    int64_t _94 = 1;
    _94 *= t.d2;
    _94 *= _93;
    _94 *= sizeof(int64_t);
    _92.data = jpl_alloc(_94);
    int64_t _95 = 0; // F
    int64_t _96 = 0; // E
    _jump1981:; // Begin body of loop
    int64_t _97 = 0;
    _97 *= _92.d0;
    _97 += _96;
    _97 *= _92.d1;
    _97 += _95;
    _92.data[_97] = t.d1;
    _95++;
    if (_95 < _93)
    goto _jump1981;
    _95 = 0;
    _96++;
    if (_96 < t.d2)
    goto _jump1981;
    // End body of loop
    _a1__a2_int64_t _98;
    _98.d0 = 3;
    _98.data = jpl_alloc(sizeof(_a2_int64_t) * 3);
    _98.data[0] = _79;
    _98.data[1] = _87;
    _98.data[2] = _92;
    _78 = _98;
    goto _jump1982;
    _jump1966:;
    bool _99 = f();
    _a2_int64_t _100;
    if (!_99)
    goto _jump1983;
    _a2_int64_t _101;
    // Computing bound for E
    _101.d0 = m;
    if (m > 0) 
    goto _jump1984;
    fail_assertion("non-positive loop bound");
    _jump1984:;
    // Computing bound for F
    _101.d1 = t.d2;
    if (t.d2 > 0) 
    goto _jump1985;
    fail_assertion("non-positive loop bound");
    _jump1985:;
    // Computing total size of heap memory to allocate
    int64_t _102 = 1;
    _102 *= m;
    _102 *= t.d2;
    _102 *= sizeof(int64_t);
    _101.data = jpl_alloc(_102);
    int64_t _103 = 0; // F
    int64_t _104 = 0; // E
    _jump1986:; // Begin body of loop
    int64_t _105 = 570;
    int64_t _106 = 0;
    _106 *= _101.d0;
    _106 += _104;
    _106 *= _101.d1;
    _106 += _103;
    _101.data[_106] = _105;
    _103++;
    if (_103 < t.d2)
    goto _jump1986;
    _103 = 0;
    _104++;
    if (_104 < m)
    goto _jump1986;
    // End body of loop
    _100 = _101;
    goto _jump1987;
    _jump1983:;
    _a2_int64_t _107;
    // Computing bound for E
    _107.d0 = t.d2;
    if (t.d2 > 0) 
    goto _jump1988;
    fail_assertion("non-positive loop bound");
    _jump1988:;
    // Computing bound for F
    _107.d1 = m;
    if (m > 0) 
    goto _jump1989;
    fail_assertion("non-positive loop bound");
    _jump1989:;
    // Computing total size of heap memory to allocate
    int64_t _108 = 1;
    _108 *= t.d2;
    _108 *= m;
    _108 *= sizeof(int64_t);
    _107.data = jpl_alloc(_108);
    int64_t _109 = 0; // F
    int64_t _110 = 0; // E
    _jump1990:; // Begin body of loop
    int64_t _111 = 0;
    _111 *= _107.d0;
    _111 += _110;
    _111 *= _107.d1;
    _111 += _109;
    _107.data[_111] = j;
    _109++;
    if (_109 < m)
    goto _jump1990;
    _109 = 0;
    _110++;
    if (_110 < t.d2)
    goto _jump1990;
    // End body of loop
    _100 = _107;
    _jump1987:;
    _a2_int64_t _112;
    // Computing bound for E
    _112.d0 = t.d1;
    if (t.d1 > 0) 
    goto _jump1991;
    fail_assertion("non-positive loop bound");
    _jump1991:;
    // Computing bound for F
    _112.d1 = t.d0;
    if (t.d0 > 0) 
    goto _jump1992;
    fail_assertion("non-positive loop bound");
    _jump1992:;
    // Computing total size of heap memory to allocate
    int64_t _113 = 1;
    _113 *= t.d1;
    _113 *= t.d0;
    _113 *= sizeof(int64_t);
    _112.data = jpl_alloc(_113);
    int64_t _114 = 0; // F
    int64_t _115 = 0; // E
    _jump1993:; // Begin body of loop
    int64_t _116 = 0;
    _116 *= _112.d0;
    _116 += _115;
    _116 *= _112.d1;
    _116 += _114;
    _112.data[_116] = t.d0;
    _114++;
    if (_114 < t.d0)
    goto _jump1993;
    _114 = 0;
    _115++;
    if (_115 < t.d1)
    goto _jump1993;
    // End body of loop
    _a1__a2_int64_t _117;
    _117.d0 = 2;
    _117.data = jpl_alloc(sizeof(_a2_int64_t) * 2);
    _117.data[0] = _100;
    _117.data[1] = _112;
    _78 = _117;
    _jump1982:;
    _74 = _78;
    goto _jump1994;
    _jump1964:;
    _a1__a2_int64_t _118;
    // Computing bound for E
    _118.d0 = t.d0;
    if (t.d0 > 0) 
    goto _jump1995;
    fail_assertion("non-positive loop bound");
    _jump1995:;
    // Computing total size of heap memory to allocate
    int64_t _119 = 1;
    _119 *= t.d0;
    _119 *= sizeof(_a2_int64_t);
    _118.data = jpl_alloc(_119);
    int64_t _120 = 0; // E
    _jump1996:; // Begin body of loop
    _a2_int64_t _121;
    // Computing bound for F
    _121.d0 = t.d1;
    if (t.d1 > 0) 
    goto _jump1997;
    fail_assertion("non-positive loop bound");
    _jump1997:;
    // Computing bound for G
    _121.d1 = t.d2;
    if (t.d2 > 0) 
    goto _jump1998;
    fail_assertion("non-positive loop bound");
    _jump1998:;
    // Computing total size of heap memory to allocate
    int64_t _122 = 1;
    _122 *= t.d1;
    _122 *= t.d2;
    _122 *= sizeof(int64_t);
    _121.data = jpl_alloc(_122);
    int64_t _123 = 0; // G
    int64_t _124 = 0; // F
    _jump1999:; // Begin body of loop
    int64_t _125 = 0;
    _125 *= _121.d0;
    _125 += _124;
    _125 *= _121.d1;
    _125 += _123;
    _121.data[_125] = n;
    _123++;
    if (_123 < t.d2)
    goto _jump1999;
    _123 = 0;
    _124++;
    if (_124 < t.d1)
    goto _jump1999;
    // End body of loop
    int64_t _126 = 0;
    _126 *= _118.d0;
    _126 += _120;
    _118.data[_126] = _121;
    _120++;
    if (_120 < t.d0)
    goto _jump1996;
    // End body of loop
    int64_t _127 = -h;
    if (_127 >= 0)
    goto _jump2000;
    fail_assertion("negative array index");
    _jump2000:;
    if (_127 < _118.d0)
    goto _jump2001;
    fail_assertion("index too large");
    _jump2001:;
    int64_t _128 = 0;
    _128 *= _118.d0;
    _128 += _127;
    _a2_int64_t _129 = _118.data[_128];
    _a1__a2_int64_t _130;
    // Computing bound for E
    _130.d0 = n;
    if (n > 0) 
    goto _jump2002;
    fail_assertion("non-positive loop bound");
    _jump2002:;
    // Computing total size of heap memory to allocate
    int64_t _131 = 1;
    _131 *= n;
    _131 *= sizeof(_a2_int64_t);
    _130.data = jpl_alloc(_131);
    int64_t _132 = 0; // E
    _jump2003:; // Begin body of loop
    _a2_int64_t _133;
    // Computing bound for F
    _133.d0 = t.d1;
    if (t.d1 > 0) 
    goto _jump2004;
    fail_assertion("non-positive loop bound");
    _jump2004:;
    // Computing bound for G
    _133.d1 = o;
    if (o > 0) 
    goto _jump2005;
    fail_assertion("non-positive loop bound");
    _jump2005:;
    // Computing total size of heap memory to allocate
    int64_t _134 = 1;
    _134 *= t.d1;
    _134 *= o;
    _134 *= sizeof(int64_t);
    _133.data = jpl_alloc(_134);
    int64_t _135 = 0; // G
    int64_t _136 = 0; // F
    _jump2006:; // Begin body of loop
    int64_t _137 = 0;
    _137 *= _133.d0;
    _137 += _136;
    _137 *= _133.d1;
    _137 += _135;
    _133.data[_137] = t.d2;
    _135++;
    if (_135 < o)
    goto _jump2006;
    _135 = 0;
    _136++;
    if (_136 < t.d1)
    goto _jump2006;
    // End body of loop
    int64_t _138 = 0;
    _138 *= _130.d0;
    _138 += _132;
    _130.data[_138] = _133;
    _132++;
    if (_132 < n)
    goto _jump2003;
    // End body of loop
    if (t.d1 >= 0)
    goto _jump2007;
    fail_assertion("negative array index");
    _jump2007:;
    if (t.d1 < _130.d0)
    goto _jump2008;
    fail_assertion("index too large");
    _jump2008:;
    int64_t _139 = 0;
    _139 *= _130.d0;
    _139 += t.d1;
    _a2_int64_t _140 = _130.data[_139];
    _a2_int64_t _141;
    // Computing bound for E
    _141.d0 = o;
    if (o > 0) 
    goto _jump2009;
    fail_assertion("non-positive loop bound");
    _jump2009:;
    // Computing bound for F
    _141.d1 = r;
    if (r > 0) 
    goto _jump2010;
    fail_assertion("non-positive loop bound");
    _jump2010:;
    // Computing total size of heap memory to allocate
    int64_t _142 = 1;
    _142 *= o;
    _142 *= r;
    _142 *= sizeof(int64_t);
    _141.data = jpl_alloc(_142);
    int64_t _143 = 0; // F
    int64_t _144 = 0; // E
    _jump2011:; // Begin body of loop
    int64_t _145 = 0;
    _145 *= _141.d0;
    _145 += _144;
    _145 *= _141.d1;
    _145 += _143;
    _141.data[_145] = t.d0;
    _143++;
    if (_143 < r)
    goto _jump2011;
    _143 = 0;
    _144++;
    if (_144 < o)
    goto _jump2011;
    // End body of loop
    _a1__a2_int64_t _146;
    _146.d0 = 3;
    _146.data = jpl_alloc(sizeof(_a2_int64_t) * 3);
    _146.data[0] = _129;
    _146.data[1] = _140;
    _146.data[2] = _141;
    _74 = _146;
    _jump1994:;
    bool _147 = c(_74);
    _70 = _147;
    goto _jump2012;
    _jump1962:;
    bool _148 = f();
    bool _149 = !_148;
    _a1_int64_t _150;
    if (!_149)
    goto _jump2013;
    _a3__a1_int64_t _151;
    // Computing bound for E
    _151.d0 = t.d2;
    if (t.d2 > 0) 
    goto _jump2014;
    fail_assertion("non-positive loop bound");
    _jump2014:;
    // Computing bound for F
    if (t.d2 >= 0)
    goto _jump2015;
    fail_assertion("negative array index");
    _jump2015:;
    if (t.d2 < q.d0)
    goto _jump2016;
    fail_assertion("index too large");
    _jump2016:;
    if (j >= 0)
    goto _jump2017;
    fail_assertion("negative array index");
    _jump2017:;
    if (j < q.d1)
    goto _jump2018;
    fail_assertion("index too large");
    _jump2018:;
    if (t.d0 >= 0)
    goto _jump2019;
    fail_assertion("negative array index");
    _jump2019:;
    if (t.d0 < q.d2)
    goto _jump2020;
    fail_assertion("index too large");
    _jump2020:;
    int64_t _152 = 0;
    _152 *= q.d0;
    _152 += t.d2;
    _152 *= q.d1;
    _152 += j;
    _152 *= q.d2;
    _152 += t.d0;
    int64_t _153 = q.data[_152];
    _151.d1 = _153;
    if (_153 > 0) 
    goto _jump2021;
    fail_assertion("non-positive loop bound");
    _jump2021:;
    // Computing bound for G
    int64_t _154;
    // Computing bound for E
    if (t.d1 > 0) 
    goto _jump2022;
    fail_assertion("non-positive loop bound");
    _jump2022:;
    // Computing bound for F
    if (t.d2 > 0) 
    goto _jump2023;
    fail_assertion("non-positive loop bound");
    _jump2023:;
    _154 = 0;
    int64_t _155 = 0; // F
    int64_t _156 = 0; // E
    _jump2024:; // Begin body of loop
    _154 += t.d2;
    _155++;
    if (_155 < t.d2)
    goto _jump2024;
    _155 = 0;
    _156++;
    if (_156 < t.d1)
    goto _jump2024;
    // End body of loop
    _151.d2 = _154;
    if (_154 > 0) 
    goto _jump2025;
    fail_assertion("non-positive loop bound");
    _jump2025:;
    // Computing total size of heap memory to allocate
    int64_t _157 = 1;
    _157 *= t.d2;
    _157 *= _153;
    _157 *= _154;
    _157 *= sizeof(_a1_int64_t);
    _151.data = jpl_alloc(_157);
    int64_t _158 = 0; // G
    int64_t _159 = 0; // F
    int64_t _160 = 0; // E
    _jump2026:; // Begin body of loop
    _a1_int64_t _161;
    // Computing bound for H
    _161.d0 = t.d1;
    if (t.d1 > 0) 
    goto _jump2027;
    fail_assertion("non-positive loop bound");
    _jump2027:;
    // Computing total size of heap memory to allocate
    int64_t _162 = 1;
    _162 *= t.d1;
    _162 *= sizeof(int64_t);
    _161.data = jpl_alloc(_162);
    int64_t _163 = 0; // H
    _jump2028:; // Begin body of loop
    int64_t _164 = 0;
    _164 *= _161.d0;
    _164 += _163;
    _161.data[_164] = j;
    _163++;
    if (_163 < t.d1)
    goto _jump2028;
    // End body of loop
    int64_t _165 = 0;
    _165 *= _151.d0;
    _165 += _160;
    _165 *= _151.d1;
    _165 += _159;
    _165 *= _151.d2;
    _165 += _158;
    _151.data[_165] = _161;
    _158++;
    if (_158 < _154)
    goto _jump2026;
    _158 = 0;
    _159++;
    if (_159 < _153)
    goto _jump2026;
    _159 = 0;
    _160++;
    if (_160 < t.d2)
    goto _jump2026;
    // End body of loop
    int64_t _166 = 650;
    int64_t _167 = -_166;
    if (t.d2 >= 0)
    goto _jump2029;
    fail_assertion("negative array index");
    _jump2029:;
    if (t.d2 < _151.d0)
    goto _jump2030;
    fail_assertion("index too large");
    _jump2030:;
    if (t.d1 >= 0)
    goto _jump2031;
    fail_assertion("negative array index");
    _jump2031:;
    if (t.d1 < _151.d1)
    goto _jump2032;
    fail_assertion("index too large");
    _jump2032:;
    if (_167 >= 0)
    goto _jump2033;
    fail_assertion("negative array index");
    _jump2033:;
    if (_167 < _151.d2)
    goto _jump2034;
    fail_assertion("index too large");
    _jump2034:;
    int64_t _168 = 0;
    _168 *= _151.d0;
    _168 += t.d2;
    _168 *= _151.d1;
    _168 += t.d1;
    _168 *= _151.d2;
    _168 += _167;
    _a1_int64_t _169 = _151.data[_168];
    _150 = _169;
    goto _jump2035;
    _jump2013:;
    _a1_int64_t _170;
    // Computing bound for E
    int64_t _171 = -t.d0;
    int64_t _172 = -_171;
    _170.d0 = _172;
    if (_172 > 0) 
    goto _jump2036;
    fail_assertion("non-positive loop bound");
    _jump2036:;
    // Computing total size of heap memory to allocate
    int64_t _173 = 1;
    _173 *= _172;
    _173 *= sizeof(int64_t);
    _170.data = jpl_alloc(_173);
    int64_t _174 = 0; // E
    _jump2037:; // Begin body of loop
    int64_t _175 = 0;
    _175 *= _170.d0;
    _175 += _174;
    _170.data[_175] = t.d0;
    _174++;
    if (_174 < _172)
    goto _jump2037;
    // End body of loop
    _150 = _170;
    _jump2035:;
    int64_t _176 = t.d0 % t.d2;
    int64_t _177 = -_176;
    if (_177 >= 0)
    goto _jump2038;
    fail_assertion("negative array index");
    _jump2038:;
    if (_177 < _150.d0)
    goto _jump2039;
    fail_assertion("index too large");
    _jump2039:;
    int64_t _178 = 0;
    _178 *= _150.d0;
    _178 += _177;
    int64_t _179 = _150.data[_178];
    int64_t _180;
    // Computing bound for E
    if (i > 0) 
    goto _jump2040;
    fail_assertion("non-positive loop bound");
    _jump2040:;
    _180 = 0;
    int64_t _181 = 0; // E
    _jump2041:; // Begin body of loop
    _180 += t.d2;
    _181++;
    if (_181 < i)
    goto _jump2041;
    // End body of loop
    int64_t _182 = _180 * t.d1;
    bool _183 = _179 < _182;
    _70 = _183;
    _jump2012:;
    if (0 != _70)
    goto _jump2042;
    fail_assertion("E");
    _jump2042:;
    _a1_double _184;
    // Computing bound for E
    _184.d0 = t.d2;
    if (t.d2 > 0) 
    goto _jump2043;
    fail_assertion("non-positive loop bound");
    _jump2043:;
    // Computing total size of heap memory to allocate
    int64_t _185 = 1;
    _185 *= t.d2;
    _185 *= sizeof(double);
    _184.data = jpl_alloc(_185);
    int64_t _186 = 0; // E
    _jump2044:; // Begin body of loop
    int64_t _187 = 0;
    _187 *= _184.d0;
    _187 += _186;
    _184.data[_187] = k;
    _186++;
    if (_186 < t.d2)
    goto _jump2044;
    // End body of loop
    e _188 = s(t);
    double _189 = _188.a;
    bool _190 = true;
    bool _191 = !_190;
    _a3_e _192;
    if (!_191)
    goto _jump2045;
    _a3_e _193;
    // Computing bound for G
    _193.d0 = o;
    if (o > 0) 
    goto _jump2046;
    fail_assertion("non-positive loop bound");
    _jump2046:;
    // Computing bound for H
    int64_t _194 = 838;
    _193.d1 = _194;
    if (_194 > 0) 
    goto _jump2047;
    fail_assertion("non-positive loop bound");
    _jump2047:;
    // Computing bound for I
    _193.d2 = o;
    if (o > 0) 
    goto _jump2048;
    fail_assertion("non-positive loop bound");
    _jump2048:;
    // Computing total size of heap memory to allocate
    int64_t _195 = 1;
    _195 *= o;
    _195 *= _194;
    _195 *= o;
    _195 *= sizeof(e);
    _193.data = jpl_alloc(_195);
    int64_t _196 = 0; // I
    int64_t _197 = 0; // H
    int64_t _198 = 0; // G
    _jump2049:; // Begin body of loop
    int64_t _199 = 0;
    _199 *= _193.d0;
    _199 += _198;
    _199 *= _193.d1;
    _199 += _197;
    _199 *= _193.d2;
    _199 += _196;
    _193.data[_199] = _0;
    _196++;
    if (_196 < o)
    goto _jump2049;
    _196 = 0;
    _197++;
    if (_197 < _194)
    goto _jump2049;
    _197 = 0;
    _198++;
    if (_198 < o)
    goto _jump2049;
    // End body of loop
    _192 = _193;
    goto _jump2050;
    _jump2045:;
    _a3_e _200;
    // Computing bound for G
    int64_t _201 = 493;
    _200.d0 = _201;
    if (_201 > 0) 
    goto _jump2051;
    fail_assertion("non-positive loop bound");
    _jump2051:;
    // Computing bound for H
    _200.d1 = t.d0;
    if (t.d0 > 0) 
    goto _jump2052;
    fail_assertion("non-positive loop bound");
    _jump2052:;
    // Computing bound for I
    _200.d2 = r;
    if (r > 0) 
    goto _jump2053;
    fail_assertion("non-positive loop bound");
    _jump2053:;
    // Computing total size of heap memory to allocate
    int64_t _202 = 1;
    _202 *= _201;
    _202 *= t.d0;
    _202 *= r;
    _202 *= sizeof(e);
    _200.data = jpl_alloc(_202);
    int64_t _203 = 0; // I
    int64_t _204 = 0; // H
    int64_t _205 = 0; // G
    _jump2054:; // Begin body of loop
    int64_t _206 = 0;
    _206 *= _200.d0;
    _206 += _205;
    _206 *= _200.d1;
    _206 += _204;
    _206 *= _200.d2;
    _206 += _203;
    _200.data[_206] = _0;
    _203++;
    if (_203 < r)
    goto _jump2054;
    _203 = 0;
    _204++;
    if (_204 < t.d0)
    goto _jump2054;
    _204 = 0;
    _205++;
    if (_205 < _201)
    goto _jump2054;
    // End body of loop
    _192 = _200;
    _jump2050:;
    int64_t _207;
    // Computing bound for G
    if (t.d1 > 0) 
    goto _jump2055;
    fail_assertion("non-positive loop bound");
    _jump2055:;
    // Computing bound for H
    int64_t _208 = -j;
    if (_208 > 0) 
    goto _jump2056;
    fail_assertion("non-positive loop bound");
    _jump2056:;
    // Computing bound for I
    if (t.d0 > 0) 
    goto _jump2057;
    fail_assertion("non-positive loop bound");
    _jump2057:;
    _207 = 0;
    int64_t _209 = 0; // I
    int64_t _210 = 0; // H
    int64_t _211 = 0; // G
    _jump2058:; // Begin body of loop
    _207 += t.d1;
    _209++;
    if (_209 < t.d0)
    goto _jump2058;
    _209 = 0;
    _210++;
    if (_210 < _208)
    goto _jump2058;
    _210 = 0;
    _211++;
    if (_211 < t.d1)
    goto _jump2058;
    // End body of loop
    if (t.d1 >= 0)
    goto _jump2059;
    fail_assertion("negative array index");
    _jump2059:;
    if (t.d1 < _192.d0)
    goto _jump2060;
    fail_assertion("index too large");
    _jump2060:;
    if (_207 >= 0)
    goto _jump2061;
    fail_assertion("negative array index");
    _jump2061:;
    if (_207 < _192.d1)
    goto _jump2062;
    fail_assertion("index too large");
    _jump2062:;
    if (j >= 0)
    goto _jump2063;
    fail_assertion("negative array index");
    _jump2063:;
    if (j < _192.d2)
    goto _jump2064;
    fail_assertion("index too large");
    _jump2064:;
    int64_t _212 = 0;
    _212 *= _192.d0;
    _212 += t.d1;
    _212 *= _192.d1;
    _212 += _207;
    _212 *= _192.d2;
    _212 += j;
    e _213 = _192.data[_212];
    double _214 = _213.a;
    bool _215 = _214 < b;
    void_t _216;
    if (!_215)
    goto _jump2065;
    if (j >= 0)
    goto _jump2066;
    fail_assertion("negative array index");
    _jump2066:;
    if (j < d.d0)
    goto _jump2067;
    fail_assertion("index too large");
    _jump2067:;
    int64_t _217 = 0;
    _217 *= d.d0;
    _217 += j;
    double _218 = d.data[_217];
    double _219 = -_218;
    void_t _220 = _0.b;
    e _221 = { _219, _220 };
    void_t _222 = _221.b;
    _216 = _222;
    goto _jump2068;
    _jump2065:;
    void_t _223 = _0.b;
    _216 = _223;
    _jump2068:;
    e _224 = { _189, _216 };
    return _224;
}

int64_t t(int64_t u, _a1_double v, _a3_double x) {
    int64_t _0;
    // Computing bound for B
    _a1__a1_double _1;
    // Computing bound for B
    _1.d0 = x.d2;
    if (x.d2 > 0) 
    goto _jump2129;
    fail_assertion("non-positive loop bound");
    _jump2129:;
    // Computing total size of heap memory to allocate
    int64_t _2 = 1;
    _2 *= x.d2;
    _2 *= sizeof(_a1_double);
    _1.data = jpl_alloc(_2);
    int64_t _3 = 0; // B
    _jump2130:; // Begin body of loop
    bool _4 = f();
    _a1_double _5;
    if (!_4)
    goto _jump2131;
    _5 = d;
    goto _jump2132;
    _jump2131:;
    _5 = d;
    _jump2132:;
    int64_t _6 = 0;
    _6 *= _1.d0;
    _6 += _3;
    _1.data[_6] = _5;
    _3++;
    if (_3 < x.d2)
    goto _jump2130;
    // End body of loop
    int64_t _7 = r % u;
    if (_7 >= 0)
    goto _jump2133;
    fail_assertion("negative array index");
    _jump2133:;
    if (_7 < _1.d0)
    goto _jump2134;
    fail_assertion("index too large");
    _jump2134:;
    int64_t _8 = 0;
    _8 *= _1.d0;
    _8 += _7;
    _a1_double _9 = _1.data[_8];
    int64_t _10 = t(j, _9, x);
    if (_10 > 0) 
    goto _jump2135;
    fail_assertion("non-positive loop bound");
    _jump2135:;
    // Computing bound for C
    int64_t _11 = 859;
    if (_11 > 0) 
    goto _jump2136;
    fail_assertion("non-positive loop bound");
    _jump2136:;
    // Computing bound for D
    if (j > 0) 
    goto _jump2137;
    fail_assertion("non-positive loop bound");
    _jump2137:;
    _0 = 0;
    int64_t _12 = 0; // D
    int64_t _13 = 0; // C
    int64_t _14 = 0; // B
    _jump2138:; // Begin body of loop
    _0 += x.d1;
    _12++;
    if (_12 < j)
    goto _jump2138;
    _12 = 0;
    _13++;
    if (_13 < _11)
    goto _jump2138;
    _13 = 0;
    _14++;
    if (_14 < _10)
    goto _jump2138;
    // End body of loop
    if (x.d2 >= 0)
    goto _jump2139;
    fail_assertion("negative array index");
    _jump2139:;
    if (x.d2 < l.d0)
    goto _jump2140;
    fail_assertion("index too large");
    _jump2140:;
    if (r >= 0)
    goto _jump2141;
    fail_assertion("negative array index");
    _jump2141:;
    if (r < l.d1)
    goto _jump2142;
    fail_assertion("index too large");
    _jump2142:;
    if (_0 >= 0)
    goto _jump2143;
    fail_assertion("negative array index");
    _jump2143:;
    if (_0 < l.d2)
    goto _jump2144;
    fail_assertion("index too large");
    _jump2144:;
    int64_t _15 = 0;
    _15 *= l.d0;
    _15 += x.d2;
    _15 *= l.d1;
    _15 += r;
    _15 *= l.d2;
    _15 += _0;
    int64_t _16 = l.data[_15];
    _a1_int64_t _17;
    _17.d0 = 3;
    _17.data = jpl_alloc(sizeof(int64_t) * 3);
    _17.data[0] = v.d0;
    _17.data[1] = _16;
    _17.data[2] = h;
    _a1__a2_int64_t _18;
    // Computing bound for J
    _18.d0 = l.d0;
    if (l.d0 > 0) 
    goto _jump2145;
    fail_assertion("non-positive loop bound");
    _jump2145:;
    // Computing total size of heap memory to allocate
    int64_t _19 = 1;
    _19 *= l.d0;
    _19 *= sizeof(_a2_int64_t);
    _18.data = jpl_alloc(_19);
    int64_t _20 = 0; // J
    _jump2146:; // Begin body of loop
    _a2_int64_t _21;
    // Computing bound for K
    _21.d0 = x.d0;
    if (x.d0 > 0) 
    goto _jump2147;
    fail_assertion("non-positive loop bound");
    _jump2147:;
    // Computing bound for L
    _21.d1 = n;
    if (n > 0) 
    goto _jump2148;
    fail_assertion("non-positive loop bound");
    _jump2148:;
    // Computing total size of heap memory to allocate
    int64_t _22 = 1;
    _22 *= x.d0;
    _22 *= n;
    _22 *= sizeof(int64_t);
    _21.data = jpl_alloc(_22);
    int64_t _23 = 0; // L
    int64_t _24 = 0; // K
    _jump2149:; // Begin body of loop
    int64_t _25 = 0;
    _25 *= _21.d0;
    _25 += _24;
    _25 *= _21.d1;
    _25 += _23;
    _21.data[_25] = u;
    _23++;
    if (_23 < n)
    goto _jump2149;
    _23 = 0;
    _24++;
    if (_24 < x.d0)
    goto _jump2149;
    // End body of loop
    int64_t _26 = 0;
    _26 *= _18.d0;
    _26 += _20;
    _18.data[_26] = _21;
    _20++;
    if (_20 < l.d0)
    goto _jump2146;
    // End body of loop
    bool _27 = c(_18);
    e _28;
    if (!_27)
    goto _jump2150;
    e _29 = s(x);
    double _30 = _29.a;
    _a3_void_t _31;
    // Computing bound for J
    _31.d0 = i;
    if (i > 0) 
    goto _jump2151;
    fail_assertion("non-positive loop bound");
    _jump2151:;
    // Computing bound for K
    _31.d1 = n;
    if (n > 0) 
    goto _jump2152;
    fail_assertion("non-positive loop bound");
    _jump2152:;
    // Computing bound for L
    _31.d2 = m;
    if (m > 0) 
    goto _jump2153;
    fail_assertion("non-positive loop bound");
    _jump2153:;
    // Computing total size of heap memory to allocate
    int64_t _32 = 1;
    _32 *= i;
    _32 *= n;
    _32 *= m;
    _32 *= sizeof(void_t);
    _31.data = jpl_alloc(_32);
    int64_t _33 = 0; // L
    int64_t _34 = 0; // K
    int64_t _35 = 0; // J
    _jump2154:; // Begin body of loop
    e _36 = s(x);
    void_t _37 = _36.b;
    int64_t _38 = 0;
    _38 *= _31.d0;
    _38 += _35;
    _38 *= _31.d1;
    _38 += _34;
    _38 *= _31.d2;
    _38 += _33;
    _31.data[_38] = _37;
    _33++;
    if (_33 < m)
    goto _jump2154;
    _33 = 0;
    _34++;
    if (_34 < n)
    goto _jump2154;
    _34 = 0;
    _35++;
    if (_35 < i)
    goto _jump2154;
    // End body of loop
    if (o >= 0)
    goto _jump2155;
    fail_assertion("negative array index");
    _jump2155:;
    if (o < _31.d0)
    goto _jump2156;
    fail_assertion("index too large");
    _jump2156:;
    if (n >= 0)
    goto _jump2157;
    fail_assertion("negative array index");
    _jump2157:;
    if (n < _31.d1)
    goto _jump2158;
    fail_assertion("index too large");
    _jump2158:;
    if (l.d1 >= 0)
    goto _jump2159;
    fail_assertion("negative array index");
    _jump2159:;
    if (l.d1 < _31.d2)
    goto _jump2160;
    fail_assertion("index too large");
    _jump2160:;
    int64_t _39 = 0;
    _39 *= _31.d0;
    _39 += o;
    _39 *= _31.d1;
    _39 += n;
    _39 *= _31.d2;
    _39 += l.d1;
    void_t _40 = _31.data[_39];
    e _41 = { _30, _40 };
    _28 = _41;
    goto _jump2161;
    _jump2150:;
    bool _42 = false;
    bool _43;
    if (!_42)
    goto _jump2162;
    bool _44 = f();
    _43 = _44;
    goto _jump2163;
    _jump2162:;
    bool _45 = true;
    _43 = _45;
    _jump2163:;
    _a2_bool _46;
    if (!_43)
    goto _jump2164;
    _a2_bool _47;
    // Computing bound for J
    _47.d0 = v.d0;
    if (v.d0 > 0) 
    goto _jump2165;
    fail_assertion("non-positive loop bound");
    _jump2165:;
    // Computing bound for K
    _47.d1 = x.d0;
    if (x.d0 > 0) 
    goto _jump2166;
    fail_assertion("non-positive loop bound");
    _jump2166:;
    // Computing total size of heap memory to allocate
    int64_t _48 = 1;
    _48 *= v.d0;
    _48 *= x.d0;
    _48 *= sizeof(bool);
    _47.data = jpl_alloc(_48);
    int64_t _49 = 0; // K
    int64_t _50 = 0; // J
    _jump2167:; // Begin body of loop
    bool _51 = false;
    int64_t _52 = 0;
    _52 *= _47.d0;
    _52 += _50;
    _52 *= _47.d1;
    _52 += _49;
    _47.data[_52] = _51;
    _49++;
    if (_49 < x.d0)
    goto _jump2167;
    _49 = 0;
    _50++;
    if (_50 < v.d0)
    goto _jump2167;
    // End body of loop
    _46 = _47;
    goto _jump2168;
    _jump2164:;
    bool _53 = f();
    _a2_bool _54;
    if (!_53)
    goto _jump2169;
    _a2_bool _55;
    // Computing bound for J
    _55.d0 = n;
    if (n > 0) 
    goto _jump2170;
    fail_assertion("non-positive loop bound");
    _jump2170:;
    // Computing bound for K
    _55.d1 = x.d0;
    if (x.d0 > 0) 
    goto _jump2171;
    fail_assertion("non-positive loop bound");
    _jump2171:;
    // Computing total size of heap memory to allocate
    int64_t _56 = 1;
    _56 *= n;
    _56 *= x.d0;
    _56 *= sizeof(bool);
    _55.data = jpl_alloc(_56);
    int64_t _57 = 0; // K
    int64_t _58 = 0; // J
    _jump2172:; // Begin body of loop
    bool _59 = f();
    int64_t _60 = 0;
    _60 *= _55.d0;
    _60 += _58;
    _60 *= _55.d1;
    _60 += _57;
    _55.data[_60] = _59;
    _57++;
    if (_57 < x.d0)
    goto _jump2172;
    _57 = 0;
    _58++;
    if (_58 < n)
    goto _jump2172;
    // End body of loop
    _54 = _55;
    goto _jump2173;
    _jump2169:;
    _a2_bool _61;
    // Computing bound for J
    _61.d0 = j;
    if (j > 0) 
    goto _jump2174;
    fail_assertion("non-positive loop bound");
    _jump2174:;
    // Computing bound for K
    _61.d1 = x.d0;
    if (x.d0 > 0) 
    goto _jump2175;
    fail_assertion("non-positive loop bound");
    _jump2175:;
    // Computing total size of heap memory to allocate
    int64_t _62 = 1;
    _62 *= j;
    _62 *= x.d0;
    _62 *= sizeof(bool);
    _61.data = jpl_alloc(_62);
    int64_t _63 = 0; // K
    int64_t _64 = 0; // J
    _jump2176:; // Begin body of loop
    bool _65 = true;
    int64_t _66 = 0;
    _66 *= _61.d0;
    _66 += _64;
    _66 *= _61.d1;
    _66 += _63;
    _61.data[_66] = _65;
    _63++;
    if (_63 < x.d0)
    goto _jump2176;
    _63 = 0;
    _64++;
    if (_64 < j)
    goto _jump2176;
    // End body of loop
    _54 = _61;
    _jump2173:;
    _46 = _54;
    _jump2168:;
    if (l.d1 >= 0)
    goto _jump2177;
    fail_assertion("negative array index");
    _jump2177:;
    if (l.d1 < _46.d0)
    goto _jump2178;
    fail_assertion("index too large");
    _jump2178:;
    if (u >= 0)
    goto _jump2179;
    fail_assertion("negative array index");
    _jump2179:;
    if (u < _46.d1)
    goto _jump2180;
    fail_assertion("index too large");
    _jump2180:;
    int64_t _67 = 0;
    _67 *= _46.d0;
    _67 += l.d1;
    _67 *= _46.d1;
    _67 += u;
    bool _68 = _46.data[_67];
    e _69;
    if (!_68)
    goto _jump2181;
    double _70 = 78.0;
    double _71 = fmod(_70, b);
    _a3_double _72;
    // Computing bound for J
    _72.d0 = l.d0;
    if (l.d0 > 0) 
    goto _jump2182;
    fail_assertion("non-positive loop bound");
    _jump2182:;
    // Computing bound for K
    _72.d1 = l.d0;
    if (l.d0 > 0) 
    goto _jump2183;
    fail_assertion("non-positive loop bound");
    _jump2183:;
    // Computing bound for L
    _72.d2 = x.d1;
    if (x.d1 > 0) 
    goto _jump2184;
    fail_assertion("non-positive loop bound");
    _jump2184:;
    // Computing total size of heap memory to allocate
    int64_t _73 = 1;
    _73 *= l.d0;
    _73 *= l.d0;
    _73 *= x.d1;
    _73 *= sizeof(double);
    _72.data = jpl_alloc(_73);
    int64_t _74 = 0; // L
    int64_t _75 = 0; // K
    int64_t _76 = 0; // J
    _jump2185:; // Begin body of loop
    int64_t _77 = 0;
    _77 *= _72.d0;
    _77 += _76;
    _77 *= _72.d1;
    _77 += _75;
    _77 *= _72.d2;
    _77 += _74;
    _72.data[_77] = b;
    _74++;
    if (_74 < x.d1)
    goto _jump2185;
    _74 = 0;
    _75++;
    if (_75 < l.d0)
    goto _jump2185;
    _75 = 0;
    _76++;
    if (_76 < l.d0)
    goto _jump2185;
    // End body of loop
    e _78 = s(_72);
    void_t _79 = _78.b;
    e _80 = { _71, _79 };
    _69 = _80;
    goto _jump2186;
    _jump2181:;
    _a3_double _81;
    // Computing bound for J
    _81.d0 = u;
    if (u > 0) 
    goto _jump2187;
    fail_assertion("non-positive loop bound");
    _jump2187:;
    // Computing bound for K
    _81.d1 = m;
    if (m > 0) 
    goto _jump2188;
    fail_assertion("non-positive loop bound");
    _jump2188:;
    // Computing bound for L
    bool _82 = false;
    int64_t _83;
    if (!_82)
    goto _jump2189;
    _83 = l.d1;
    goto _jump2190;
    _jump2189:;
    _83 = h;
    _jump2190:;
    _81.d2 = _83;
    if (_83 > 0) 
    goto _jump2191;
    fail_assertion("non-positive loop bound");
    _jump2191:;
    // Computing total size of heap memory to allocate
    int64_t _84 = 1;
    _84 *= u;
    _84 *= m;
    _84 *= _83;
    _84 *= sizeof(double);
    _81.data = jpl_alloc(_84);
    int64_t _85 = 0; // L
    int64_t _86 = 0; // K
    int64_t _87 = 0; // J
    _jump2192:; // Begin body of loop
    double _88 = 86.0;
    int64_t _89 = 0;
    _89 *= _81.d0;
    _89 += _87;
    _89 *= _81.d1;
    _89 += _86;
    _89 *= _81.d2;
    _89 += _85;
    _81.data[_89] = _88;
    _85++;
    if (_85 < _83)
    goto _jump2192;
    _85 = 0;
    _86++;
    if (_86 < m)
    goto _jump2192;
    _86 = 0;
    _87++;
    if (_87 < u)
    goto _jump2192;
    // End body of loop
    e _90 = s(_81);
    _69 = _90;
    _jump2186:;
    _28 = _69;
    _jump2161:;
    void_t _91 = _28.b;
    return x.d0;
}

void jpl_main(struct args args) {
    double _0;
    // Computing bound for b
    int64_t _1 = 98;
    int64_t _2 = 25;
    int64_t _3 = 472;
    int64_t _4 = -_3;
    int64_t _5 = _2 % _4;
    bool _6 = _1 > _5;
    int64_t _7;
    if (!_6)
    goto _jump516;
    _a3_int64_t _8;
    // Computing bound for b
    int64_t _9 = 814;
    _8.d0 = _9;
    if (_9 > 0) 
    goto _jump517;
    fail_assertion("non-positive loop bound");
    _jump517:;
    // Computing bound for c
    int64_t _10;
    // Computing bound for b
    int64_t _11 = 826;
    if (_11 > 0) 
    goto _jump518;
    fail_assertion("non-positive loop bound");
    _jump518:;
    _10 = 0;
    int64_t _12 = 0; // b
    _jump519:; // Begin body of loop
    _10 += _12;
    _12++;
    if (_12 < _11)
    goto _jump519;
    // End body of loop
    _8.d1 = _10;
    if (_10 > 0) 
    goto _jump520;
    fail_assertion("non-positive loop bound");
    _jump520:;
    // Computing bound for d
    int64_t _13;
    // Computing bound for b
    int64_t _14 = 461;
    if (_14 > 0) 
    goto _jump521;
    fail_assertion("non-positive loop bound");
    _jump521:;
    _13 = 0;
    int64_t _15 = 0; // b
    _jump522:; // Begin body of loop
    _13 += _15;
    _15++;
    if (_15 < _14)
    goto _jump522;
    // End body of loop
    _8.d2 = _13;
    if (_13 > 0) 
    goto _jump523;
    fail_assertion("non-positive loop bound");
    _jump523:;
    // Computing total size of heap memory to allocate
    int64_t _16 = 1;
    _16 *= _9;
    _16 *= _10;
    _16 *= _13;
    _16 *= sizeof(int64_t);
    _8.data = jpl_alloc(_16);
    int64_t _17 = 0; // d
    int64_t _18 = 0; // c
    int64_t _19 = 0; // b
    _jump524:; // Begin body of loop
    int64_t _20 = 0;
    _20 *= _8.d0;
    _20 += _19;
    _20 *= _8.d1;
    _20 += _18;
    _20 *= _8.d2;
    _20 += _17;
    _8.data[_20] = _17;
    _17++;
    if (_17 < _13)
    goto _jump524;
    _17 = 0;
    _18++;
    if (_18 < _10)
    goto _jump524;
    _18 = 0;
    _19++;
    if (_19 < _9)
    goto _jump524;
    // End body of loop
    int64_t _21;
    // Computing bound for b
    int64_t _22;
    // Computing bound for b
    int64_t _23 = 735;
    if (_23 > 0) 
    goto _jump525;
    fail_assertion("non-positive loop bound");
    _jump525:;
    _22 = 0;
    int64_t _24 = 0; // b
    _jump526:; // Begin body of loop
    _22 += _24;
    _24++;
    if (_24 < _23)
    goto _jump526;
    // End body of loop
    if (_22 > 0) 
    goto _jump527;
    fail_assertion("non-positive loop bound");
    _jump527:;
    _21 = 0;
    int64_t _25 = 0; // b
    _jump528:; // Begin body of loop
    int64_t _26 = 450;
    _21 += _26;
    _25++;
    if (_25 < _22)
    goto _jump528;
    // End body of loop
    int64_t _27 = 370;
    int64_t _28 = -_27;
    int64_t _29 = -_28;
    int64_t _30 = 585;
    if (_21 >= 0)
    goto _jump529;
    fail_assertion("negative array index");
    _jump529:;
    if (_21 < _8.d0)
    goto _jump530;
    fail_assertion("index too large");
    _jump530:;
    if (_29 >= 0)
    goto _jump531;
    fail_assertion("negative array index");
    _jump531:;
    if (_29 < _8.d1)
    goto _jump532;
    fail_assertion("index too large");
    _jump532:;
    if (_30 >= 0)
    goto _jump533;
    fail_assertion("negative array index");
    _jump533:;
    if (_30 < _8.d2)
    goto _jump534;
    fail_assertion("index too large");
    _jump534:;
    int64_t _31 = 0;
    _31 *= _8.d0;
    _31 += _21;
    _31 *= _8.d1;
    _31 += _29;
    _31 *= _8.d2;
    _31 += _30;
    int64_t _32 = _8.data[_31];
    _7 = _32;
    goto _jump535;
    _jump516:;
    int64_t _33 = 73;
    int64_t _34 = -_33;
    _7 = _34;
    _jump535:;
    int64_t _35;
    // Computing bound for b
    int64_t _36 = 819;
    int64_t _37 = -_36;
    _a1_int64_t _38;
    _38.d0 = 1;
    _38.data = jpl_alloc(sizeof(int64_t) * 1);
    _38.data[0] = _37;
    int64_t _39 = 676;
    if (_39 >= 0)
    goto _jump536;
    fail_assertion("negative array index");
    _jump536:;
    if (_39 < _38.d0)
    goto _jump537;
    fail_assertion("index too large");
    _jump537:;
    int64_t _40 = 0;
    _40 *= _38.d0;
    _40 += _39;
    int64_t _41 = _38.data[_40];
    if (_41 > 0) 
    goto _jump538;
    fail_assertion("non-positive loop bound");
    _jump538:;
    // Computing bound for c
    int64_t _42 = 649;
    if (_42 > 0) 
    goto _jump539;
    fail_assertion("non-positive loop bound");
    _jump539:;
    // Computing bound for d
    int64_t _43 = 158;
    if (_43 > 0) 
    goto _jump540;
    fail_assertion("non-positive loop bound");
    _jump540:;
    _35 = 0;
    int64_t _44 = 0; // d
    int64_t _45 = 0; // c
    int64_t _46 = 0; // b
    _jump541:; // Begin body of loop
    _35 += _46;
    _44++;
    if (_44 < _43)
    goto _jump541;
    _44 = 0;
    _45++;
    if (_45 < _42)
    goto _jump541;
    _45 = 0;
    _46++;
    if (_46 < _41)
    goto _jump541;
    // End body of loop
    bool _47 = _7 >= _35;
    int64_t _48;
    if (!_47)
    goto _jump542;
    int64_t _49;
    // Computing bound for b
    int64_t _50 = 693;
    int64_t _51 = -_50;
    if (_51 > 0) 
    goto _jump543;
    fail_assertion("non-positive loop bound");
    _jump543:;
    // Computing bound for c
    int64_t _52 = 509;
    if (_52 > 0) 
    goto _jump544;
    fail_assertion("non-positive loop bound");
    _jump544:;
    _49 = 0;
    int64_t _53 = 0; // c
    int64_t _54 = 0; // b
    _jump545:; // Begin body of loop
    int64_t _55 = 772;
    _49 += _55;
    _53++;
    if (_53 < _52)
    goto _jump545;
    _53 = 0;
    _54++;
    if (_54 < _51)
    goto _jump545;
    // End body of loop
    _a1_int64_t _56;
    // Computing bound for b
    int64_t _57 = 661;
    int64_t _58 = 350;
    int64_t _59 = _57 / _58;
    _56.d0 = _59;
    if (_59 > 0) 
    goto _jump546;
    fail_assertion("non-positive loop bound");
    _jump546:;
    // Computing total size of heap memory to allocate
    int64_t _60 = 1;
    _60 *= _59;
    _60 *= sizeof(int64_t);
    _56.data = jpl_alloc(_60);
    int64_t _61 = 0; // b
    _jump547:; // Begin body of loop
    int64_t _62 = 142;
    int64_t _63 = 0;
    _63 *= _56.d0;
    _63 += _61;
    _56.data[_63] = _62;
    _61++;
    if (_61 < _59)
    goto _jump547;
    // End body of loop
    int64_t _64 = 229;
    int64_t _65 = 819;
    int64_t _66 = -_65;
    int64_t _67 = _64 - _66;
    if (_67 >= 0)
    goto _jump548;
    fail_assertion("negative array index");
    _jump548:;
    if (_67 < _56.d0)
    goto _jump549;
    fail_assertion("index too large");
    _jump549:;
    int64_t _68 = 0;
    _68 *= _56.d0;
    _68 += _67;
    int64_t _69 = _56.data[_68];
    int64_t _70 = _49 / _69;
    int64_t _71 = -_70;
    _48 = _71;
    goto _jump550;
    _jump542:;
    int64_t _72;
    // Computing bound for b
    _a1__a3_int64_t _73;
    // Computing bound for b
    int64_t _74;
    // Computing bound for b
    int64_t _75 = 776;
    if (_75 > 0) 
    goto _jump551;
    fail_assertion("non-positive loop bound");
    _jump551:;
    _74 = 0;
    int64_t _76 = 0; // b
    _jump552:; // Begin body of loop
    _74 += _76;
    _76++;
    if (_76 < _75)
    goto _jump552;
    // End body of loop
    _73.d0 = _74;
    if (_74 > 0) 
    goto _jump553;
    fail_assertion("non-positive loop bound");
    _jump553:;
    // Computing total size of heap memory to allocate
    int64_t _77 = 1;
    _77 *= _74;
    _77 *= sizeof(_a3_int64_t);
    _73.data = jpl_alloc(_77);
    int64_t _78 = 0; // b
    _jump554:; // Begin body of loop
    _a3_int64_t _79;
    // Computing bound for c
    _79.d0 = _78;
    if (_78 > 0) 
    goto _jump555;
    fail_assertion("non-positive loop bound");
    _jump555:;
    // Computing bound for d
    _79.d1 = _78;
    if (_78 > 0) 
    goto _jump556;
    fail_assertion("non-positive loop bound");
    _jump556:;
    // Computing bound for e
    _79.d2 = _78;
    if (_78 > 0) 
    goto _jump557;
    fail_assertion("non-positive loop bound");
    _jump557:;
    // Computing total size of heap memory to allocate
    int64_t _80 = 1;
    _80 *= _78;
    _80 *= _78;
    _80 *= _78;
    _80 *= sizeof(int64_t);
    _79.data = jpl_alloc(_80);
    int64_t _81 = 0; // e
    int64_t _82 = 0; // d
    int64_t _83 = 0; // c
    _jump558:; // Begin body of loop
    int64_t _84 = 0;
    _84 *= _79.d0;
    _84 += _83;
    _84 *= _79.d1;
    _84 += _82;
    _84 *= _79.d2;
    _84 += _81;
    _79.data[_84] = _82;
    _81++;
    if (_81 < _78)
    goto _jump558;
    _81 = 0;
    _82++;
    if (_82 < _78)
    goto _jump558;
    _82 = 0;
    _83++;
    if (_83 < _78)
    goto _jump558;
    // End body of loop
    int64_t _85 = 0;
    _85 *= _73.d0;
    _85 += _78;
    _73.data[_85] = _79;
    _78++;
    if (_78 < _74)
    goto _jump554;
    // End body of loop
    int64_t _86 = 668;
    if (_86 >= 0)
    goto _jump559;
    fail_assertion("negative array index");
    _jump559:;
    if (_86 < _73.d0)
    goto _jump560;
    fail_assertion("index too large");
    _jump560:;
    int64_t _87 = 0;
    _87 *= _73.d0;
    _87 += _86;
    _a3_int64_t _88 = _73.data[_87];
    int64_t _89 = 948;
    int64_t _90 = -_89;
    int64_t _91 = 766;
    int64_t _92 = _90 / _91;
    int64_t _93;
    // Computing bound for b
    int64_t _94 = 238;
    int64_t _95 = 616;
    int64_t _96 = _94 * _95;
    int64_t _97 = -_96;
    if (_97 > 0) 
    goto _jump561;
    fail_assertion("non-positive loop bound");
    _jump561:;
    // Computing bound for c
    int64_t _98 = 626;
    _a1_int64_t _99;
    _99.d0 = 1;
    _99.data = jpl_alloc(sizeof(int64_t) * 1);
    _99.data[0] = _98;
    int64_t _100 = 647;
    if (_100 >= 0)
    goto _jump562;
    fail_assertion("negative array index");
    _jump562:;
    if (_100 < _99.d0)
    goto _jump563;
    fail_assertion("index too large");
    _jump563:;
    int64_t _101 = 0;
    _101 *= _99.d0;
    _101 += _100;
    int64_t _102 = _99.data[_101];
    if (_102 > 0) 
    goto _jump564;
    fail_assertion("non-positive loop bound");
    _jump564:;
    _93 = 0;
    int64_t _103 = 0; // c
    int64_t _104 = 0; // b
    _jump565:; // Begin body of loop
    bool _106 = false;
    bool _105 = _106;
    if (0 != _106)
    goto _jump566;
    bool _107 = false;
    _105 = _107;
    _jump566:;
    int64_t _108;
    if (!_105)
    goto _jump567;
    _108 = _103;
    goto _jump568;
    _jump567:;
    int64_t _109 = 252;
    _108 = _109;
    _jump568:;
    _93 += _108;
    _103++;
    if (_103 < _102)
    goto _jump565;
    _103 = 0;
    _104++;
    if (_104 < _97)
    goto _jump565;
    // End body of loop
    int64_t _110 = 439;
    if (_92 >= 0)
    goto _jump569;
    fail_assertion("negative array index");
    _jump569:;
    if (_92 < _88.d0)
    goto _jump570;
    fail_assertion("index too large");
    _jump570:;
    if (_93 >= 0)
    goto _jump571;
    fail_assertion("negative array index");
    _jump571:;
    if (_93 < _88.d1)
    goto _jump572;
    fail_assertion("index too large");
    _jump572:;
    if (_110 >= 0)
    goto _jump573;
    fail_assertion("negative array index");
    _jump573:;
    if (_110 < _88.d2)
    goto _jump574;
    fail_assertion("index too large");
    _jump574:;
    int64_t _111 = 0;
    _111 *= _88.d0;
    _111 += _92;
    _111 *= _88.d1;
    _111 += _93;
    _111 *= _88.d2;
    _111 += _110;
    int64_t _112 = _88.data[_111];
    if (_112 > 0) 
    goto _jump575;
    fail_assertion("non-positive loop bound");
    _jump575:;
    _72 = 0;
    int64_t _113 = 0; // b
    _jump576:; // Begin body of loop
    _72 += _113;
    _113++;
    if (_113 < _112)
    goto _jump576;
    // End body of loop
    _48 = _72;
    _jump550:;
    if (_48 > 0) 
    goto _jump577;
    fail_assertion("non-positive loop bound");
    _jump577:;
    _0 = 0;
    int64_t _114 = 0; // b
    _jump578:; // Begin body of loop
    _a2_double _115;
    // Computing bound for c
    int64_t _116 = 666;
    int64_t _117 = _114 * _116;
    int64_t _118 = _114 + _117;
    _115.d0 = _118;
    if (_118 > 0) 
    goto _jump579;
    fail_assertion("non-positive loop bound");
    _jump579:;
    // Computing bound for d
    int64_t _119;
    // Computing bound for c
    int64_t _120 = 951;
    if (_120 > 0) 
    goto _jump580;
    fail_assertion("non-positive loop bound");
    _jump580:;
    // Computing bound for d
    if (_114 > 0) 
    goto _jump581;
    fail_assertion("non-positive loop bound");
    _jump581:;
    // Computing bound for e
    int64_t _121 = -_114;
    if (_121 > 0) 
    goto _jump582;
    fail_assertion("non-positive loop bound");
    _jump582:;
    _119 = 0;
    int64_t _122 = 0; // e
    int64_t _123 = 0; // d
    int64_t _124 = 0; // c
    _jump583:; // Begin body of loop
    int64_t _125 = 973;
    _119 += _125;
    _122++;
    if (_122 < _121)
    goto _jump583;
    _122 = 0;
    _123++;
    if (_123 < _114)
    goto _jump583;
    _123 = 0;
    _124++;
    if (_124 < _120)
    goto _jump583;
    // End body of loop
    _115.d1 = _119;
    if (_119 > 0) 
    goto _jump584;
    fail_assertion("non-positive loop bound");
    _jump584:;
    // Computing total size of heap memory to allocate
    int64_t _126 = 1;
    _126 *= _118;
    _126 *= _119;
    _126 *= sizeof(double);
    _115.data = jpl_alloc(_126);
    int64_t _127 = 0; // d
    int64_t _128 = 0; // c
    _jump585:; // Begin body of loop
    double _129 = 17.0;
    double _130 = a(_129);
    double _131 = 11.0;
    double _132 = _130 - _131;
    int64_t _133 = 0;
    _133 *= _115.d0;
    _133 += _128;
    _133 *= _115.d1;
    _133 += _127;
    _115.data[_133] = _132;
    _127++;
    if (_127 < _119)
    goto _jump585;
    _127 = 0;
    _128++;
    if (_128 < _118)
    goto _jump585;
    // End body of loop
    int64_t _134 = 613;
    int64_t _135;
    // Computing bound for c
    if (_114 > 0) 
    goto _jump586;
    fail_assertion("non-positive loop bound");
    _jump586:;
    _135 = 0;
    int64_t _136 = 0; // c
    _jump587:; // Begin body of loop
    int64_t _137;
    // Computing bound for d
    int64_t _138 = 931;
    int64_t _139 = -_138;
    if (_139 > 0) 
    goto _jump588;
    fail_assertion("non-positive loop bound");
    _jump588:;
    // Computing bound for e
    int64_t _140 = 911;
    if (_140 > 0) 
    goto _jump589;
    fail_assertion("non-positive loop bound");
    _jump589:;
    // Computing bound for f
    if (_136 > 0) 
    goto _jump590;
    fail_assertion("non-positive loop bound");
    _jump590:;
    _137 = 0;
    int64_t _141 = 0; // f
    int64_t _142 = 0; // e
    int64_t _143 = 0; // d
    _jump591:; // Begin body of loop
    int64_t _144 = 728;
    _137 += _144;
    _141++;
    if (_141 < _136)
    goto _jump591;
    _141 = 0;
    _142++;
    if (_142 < _140)
    goto _jump591;
    _142 = 0;
    _143++;
    if (_143 < _139)
    goto _jump591;
    // End body of loop
    _135 += _137;
    _136++;
    if (_136 < _114)
    goto _jump587;
    // End body of loop
    if (_134 >= 0)
    goto _jump592;
    fail_assertion("negative array index");
    _jump592:;
    if (_134 < _115.d0)
    goto _jump593;
    fail_assertion("index too large");
    _jump593:;
    if (_135 >= 0)
    goto _jump594;
    fail_assertion("negative array index");
    _jump594:;
    if (_135 < _115.d1)
    goto _jump595;
    fail_assertion("index too large");
    _jump595:;
    int64_t _145 = 0;
    _145 *= _115.d0;
    _145 += _134;
    _145 *= _115.d1;
    _145 += _135;
    double _146 = _115.data[_145];
    double _147 = a(_146);
    double _148 = 35.0;
    double _149 = 77.0;
    double _150 = -_149;
    double _151 = -_150;
    bool _152 = _148 == _151;
    rgba _153;
    if (!_152)
    goto _jump596;
    double _154 = 43.0;
    double _155 = a(_154);
    double _156 = a(_155);
    double _157 = 24.0;
    double _158 = a(_157);
    double _159;
    // Computing bound for c
    int64_t _160 = 49;
    if (_160 > 0) 
    goto _jump597;
    fail_assertion("non-positive loop bound");
    _jump597:;
    _159 = 0;
    int64_t _161 = 0; // c
    _jump598:; // Begin body of loop
    double _162 = 14.0;
    _159 += _162;
    _161++;
    if (_161 < _160)
    goto _jump598;
    // End body of loop
    double _163;
    // Computing bound for c
    int64_t _164 = 496;
    if (_164 > 0) 
    goto _jump599;
    fail_assertion("non-positive loop bound");
    _jump599:;
    _163 = 0;
    int64_t _165 = 0; // c
    _jump600:; // Begin body of loop
    double _166 = 79.0;
    _163 += _166;
    _165++;
    if (_165 < _164)
    goto _jump600;
    // End body of loop
    rgba _167 = { _156, _158, _159, _163 };
    _153 = _167;
    goto _jump601;
    _jump596:;
    double _168 = 28.0;
    double _169 = a(_168);
    double _170 = a(_169);
    bool _171 = false;
    double _172;
    if (!_171)
    goto _jump602;
    double _173 = 67.0;
    double _174 = a(_173);
    _172 = _174;
    goto _jump603;
    _jump602:;
    double _175 = 97.0;
    double _176 = -_175;
    _172 = _176;
    _jump603:;
    double _177 = 88.0;
    double _178 = -_177;
    double _179 = 25.0;
    double _180 = a(_179);
    rgba _181 = { _170, _172, _178, _180 };
    _153 = _181;
    _jump601:;
    double _182 = _153.b;
    double _183 = fmod(_147, _182);
    _0 += _183;
    _114++;
    if (_114 < _48)
    goto _jump578;
    // End body of loop
    _a1_double _184;
    // Computing bound for d
    _a2_int64_t _185;
    // Computing bound for d
    int64_t _186;
    // Computing bound for d
    int64_t _187 = 48;
    if (_187 > 0) 
    goto _jump816;
    fail_assertion("non-positive loop bound");
    _jump816:;
    // Computing bound for e
    int64_t _188;
    // Computing bound for d
    int64_t _189 = 408;
    int64_t _190 = 317;
    int64_t _191 = _189 / _190;
    if (_191 > 0) 
    goto _jump817;
    fail_assertion("non-positive loop bound");
    _jump817:;
    // Computing bound for e
    int64_t _192;
    // Computing bound for d
    int64_t _193 = 217;
    if (_193 > 0) 
    goto _jump818;
    fail_assertion("non-positive loop bound");
    _jump818:;
    _192 = 0;
    int64_t _194 = 0; // d
    _jump819:; // Begin body of loop
    int64_t _195 = 641;
    _192 += _195;
    _194++;
    if (_194 < _193)
    goto _jump819;
    // End body of loop
    if (_192 > 0) 
    goto _jump820;
    fail_assertion("non-positive loop bound");
    _jump820:;
    _188 = 0;
    int64_t _196 = 0; // e
    int64_t _197 = 0; // d
    _jump821:; // Begin body of loop
    _188 += _196;
    _196++;
    if (_196 < _192)
    goto _jump821;
    _196 = 0;
    _197++;
    if (_197 < _191)
    goto _jump821;
    // End body of loop
    if (_188 > 0) 
    goto _jump822;
    fail_assertion("non-positive loop bound");
    _jump822:;
    _186 = 0;
    int64_t _198 = 0; // e
    int64_t _199 = 0; // d
    _jump823:; // Begin body of loop
    _186 += _199;
    _198++;
    if (_198 < _188)
    goto _jump823;
    _198 = 0;
    _199++;
    if (_199 < _187)
    goto _jump823;
    // End body of loop
    int64_t _200 = 499;
    int64_t _201 = 902;
    int64_t _202 = -_201;
    int64_t _203 = -_202;
    int64_t _204 = _200 + _203;
    int64_t _205 = _186 % _204;
    _185.d0 = _205;
    if (_205 > 0) 
    goto _jump824;
    fail_assertion("non-positive loop bound");
    _jump824:;
    // Computing bound for e
    int64_t _206 = 486;
    _185.d1 = _206;
    if (_206 > 0) 
    goto _jump825;
    fail_assertion("non-positive loop bound");
    _jump825:;
    // Computing total size of heap memory to allocate
    int64_t _207 = 1;
    _207 *= _205;
    _207 *= _206;
    _207 *= sizeof(int64_t);
    _185.data = jpl_alloc(_207);
    int64_t _208 = 0; // e
    int64_t _209 = 0; // d
    _jump826:; // Begin body of loop
    bool _210 = false;
    int64_t _211;
    if (!_210)
    goto _jump827;
    _211 = _209;
    goto _jump828;
    _jump827:;
    int64_t _212 = 610;
    _211 = _212;
    _jump828:;
    int64_t _213;
    // Computing bound for f
    int64_t _214 = _208 / _208;
    if (_214 > 0) 
    goto _jump829;
    fail_assertion("non-positive loop bound");
    _jump829:;
    // Computing bound for g
    int64_t _215 = 450;
    if (_215 > 0) 
    goto _jump830;
    fail_assertion("non-positive loop bound");
    _jump830:;
    _213 = 0;
    int64_t _216 = 0; // g
    int64_t _217 = 0; // f
    _jump831:; // Begin body of loop
    int64_t _218 = _216 % _209;
    _213 += _218;
    _216++;
    if (_216 < _215)
    goto _jump831;
    _216 = 0;
    _217++;
    if (_217 < _214)
    goto _jump831;
    // End body of loop
    bool _219 = _211 <= _213;
    int64_t _220;
    if (!_219)
    goto _jump832;
    int64_t _221 = -_208;
    _220 = _221;
    goto _jump833;
    _jump832:;
    _a2_int64_t _222;
    // Computing bound for f
    int64_t _223 = -_208;
    _222.d0 = _223;
    if (_223 > 0) 
    goto _jump834;
    fail_assertion("non-positive loop bound");
    _jump834:;
    // Computing bound for g
    _222.d1 = _208;
    if (_208 > 0) 
    goto _jump835;
    fail_assertion("non-positive loop bound");
    _jump835:;
    // Computing total size of heap memory to allocate
    int64_t _224 = 1;
    _224 *= _223;
    _224 *= _208;
    _224 *= sizeof(int64_t);
    _222.data = jpl_alloc(_224);
    int64_t _225 = 0; // g
    int64_t _226 = 0; // f
    _jump836:; // Begin body of loop
    int64_t _227 = 0;
    _227 *= _222.d0;
    _227 += _226;
    _227 *= _222.d1;
    _227 += _225;
    _222.data[_227] = _209;
    _225++;
    if (_225 < _208)
    goto _jump836;
    _225 = 0;
    _226++;
    if (_226 < _223)
    goto _jump836;
    // End body of loop
    int64_t _228;
    // Computing bound for f
    int64_t _229 = 950;
    if (_229 > 0) 
    goto _jump837;
    fail_assertion("non-positive loop bound");
    _jump837:;
    // Computing bound for g
    int64_t _230;
    // Computing bound for f
    int64_t _231 = 619;
    if (_231 > 0) 
    goto _jump838;
    fail_assertion("non-positive loop bound");
    _jump838:;
    // Computing bound for g
    if (_209 > 0) 
    goto _jump839;
    fail_assertion("non-positive loop bound");
    _jump839:;
    // Computing bound for h
    if (_208 > 0) 
    goto _jump840;
    fail_assertion("non-positive loop bound");
    _jump840:;
    _230 = 0;
    int64_t _232 = 0; // h
    int64_t _233 = 0; // g
    int64_t _234 = 0; // f
    _jump841:; // Begin body of loop
    _230 += _232;
    _232++;
    if (_232 < _208)
    goto _jump841;
    _232 = 0;
    _233++;
    if (_233 < _209)
    goto _jump841;
    _233 = 0;
    _234++;
    if (_234 < _231)
    goto _jump841;
    // End body of loop
    if (_230 > 0) 
    goto _jump842;
    fail_assertion("non-positive loop bound");
    _jump842:;
    // Computing bound for h
    int64_t _235;
    // Computing bound for f
    int64_t _236 = 604;
    if (_236 > 0) 
    goto _jump843;
    fail_assertion("non-positive loop bound");
    _jump843:;
    _235 = 0;
    int64_t _237 = 0; // f
    _jump844:; // Begin body of loop
    _235 += _209;
    _237++;
    if (_237 < _236)
    goto _jump844;
    // End body of loop
    if (_235 > 0) 
    goto _jump845;
    fail_assertion("non-positive loop bound");
    _jump845:;
    _228 = 0;
    int64_t _238 = 0; // h
    int64_t _239 = 0; // g
    int64_t _240 = 0; // f
    _jump846:; // Begin body of loop
    _228 += _208;
    _238++;
    if (_238 < _235)
    goto _jump846;
    _238 = 0;
    _239++;
    if (_239 < _230)
    goto _jump846;
    _239 = 0;
    _240++;
    if (_240 < _229)
    goto _jump846;
    // End body of loop
    if (_228 >= 0)
    goto _jump847;
    fail_assertion("negative array index");
    _jump847:;
    if (_228 < _222.d0)
    goto _jump848;
    fail_assertion("index too large");
    _jump848:;
    if (_209 >= 0)
    goto _jump849;
    fail_assertion("negative array index");
    _jump849:;
    if (_209 < _222.d1)
    goto _jump850;
    fail_assertion("index too large");
    _jump850:;
    int64_t _241 = 0;
    _241 *= _222.d0;
    _241 += _228;
    _241 *= _222.d1;
    _241 += _209;
    int64_t _242 = _222.data[_241];
    _220 = _242;
    _jump833:;
    int64_t _243 = 0;
    _243 *= _185.d0;
    _243 += _209;
    _243 *= _185.d1;
    _243 += _208;
    _185.data[_243] = _220;
    _208++;
    if (_208 < _206)
    goto _jump826;
    _208 = 0;
    _209++;
    if (_209 < _205)
    goto _jump826;
    // End body of loop
    int64_t _244 = 95;
    _a1_int64_t _245;
    // Computing bound for d
    int64_t _246 = 924;
    _245.d0 = _246;
    if (_246 > 0) 
    goto _jump851;
    fail_assertion("non-positive loop bound");
    _jump851:;
    // Computing total size of heap memory to allocate
    int64_t _247 = 1;
    _247 *= _246;
    _247 *= sizeof(int64_t);
    _245.data = jpl_alloc(_247);
    int64_t _248 = 0; // d
    _jump852:; // Begin body of loop
    int64_t _249 = 0;
    _249 *= _245.d0;
    _249 += _248;
    _245.data[_249] = _248;
    _248++;
    if (_248 < _246)
    goto _jump852;
    // End body of loop
    int64_t _250 = 706;
    if (_250 >= 0)
    goto _jump853;
    fail_assertion("negative array index");
    _jump853:;
    if (_250 < _245.d0)
    goto _jump854;
    fail_assertion("index too large");
    _jump854:;
    int64_t _251 = 0;
    _251 *= _245.d0;
    _251 += _250;
    int64_t _252 = _245.data[_251];
    int64_t _253 = _244 / _252;
    int64_t _254;
    // Computing bound for d
    bool _255 = false;
    int64_t _256;
    if (!_255)
    goto _jump855;
    int64_t _257;
    // Computing bound for d
    int64_t _258 = 825;
    if (_258 > 0) 
    goto _jump856;
    fail_assertion("non-positive loop bound");
    _jump856:;
    _257 = 0;
    int64_t _259 = 0; // d
    _jump857:; // Begin body of loop
    int64_t _260 = 680;
    _257 += _260;
    _259++;
    if (_259 < _258)
    goto _jump857;
    // End body of loop
    int64_t _261 = -_257;
    _256 = _261;
    goto _jump858;
    _jump855:;
    bool _262 = true;
    bool _263;
    if (!_262)
    goto _jump859;
    bool _264 = true;
    _263 = _264;
    goto _jump860;
    _jump859:;
    bool _265 = false;
    _263 = _265;
    _jump860:;
    int64_t _266;
    if (!_263)
    goto _jump861;
    int64_t _267 = 154;
    _266 = _267;
    goto _jump862;
    _jump861:;
    int64_t _268 = 194;
    int64_t _269 = -_268;
    _266 = _269;
    _jump862:;
    _256 = _266;
    _jump858:;
    if (_256 > 0) 
    goto _jump863;
    fail_assertion("non-positive loop bound");
    _jump863:;
    _254 = 0;
    int64_t _270 = 0; // d
    _jump864:; // Begin body of loop
    int64_t _271 = 233;
    _254 += _271;
    _270++;
    if (_270 < _256)
    goto _jump864;
    // End body of loop
    int64_t _272 = -_254;
    if (_253 >= 0)
    goto _jump865;
    fail_assertion("negative array index");
    _jump865:;
    if (_253 < _185.d0)
    goto _jump866;
    fail_assertion("index too large");
    _jump866:;
    if (_272 >= 0)
    goto _jump867;
    fail_assertion("negative array index");
    _jump867:;
    if (_272 < _185.d1)
    goto _jump868;
    fail_assertion("index too large");
    _jump868:;
    int64_t _273 = 0;
    _273 *= _185.d0;
    _273 += _253;
    _273 *= _185.d1;
    _273 += _272;
    int64_t _274 = _185.data[_273];
    _184.d0 = _274;
    if (_274 > 0) 
    goto _jump869;
    fail_assertion("non-positive loop bound");
    _jump869:;
    // Computing total size of heap memory to allocate
    int64_t _275 = 1;
    _275 *= _274;
    _275 *= sizeof(double);
    _184.data = jpl_alloc(_275);
    int64_t _276 = 0; // d
    _jump870:; // Begin body of loop
    double _277 = 29.0;
    double _278;
    // Computing bound for e
    int64_t _279 = -_276;
    if (_279 > 0) 
    goto _jump871;
    fail_assertion("non-positive loop bound");
    _jump871:;
    _278 = 0;
    int64_t _280 = 0; // e
    _jump872:; // Begin body of loop
    double _281;
    // Computing bound for f
    int64_t _282 = 647;
    if (_282 > 0) 
    goto _jump873;
    fail_assertion("non-positive loop bound");
    _jump873:;
    // Computing bound for g
    int64_t _283 = 719;
    int64_t _284;
    // Computing bound for f
    int64_t _285 = 321;
    if (_285 > 0) 
    goto _jump874;
    fail_assertion("non-positive loop bound");
    _jump874:;
    // Computing bound for g
    int64_t _286 = 292;
    int64_t _287 = _286 + _276;
    if (_287 > 0) 
    goto _jump875;
    fail_assertion("non-positive loop bound");
    _jump875:;
    _284 = 0;
    int64_t _288 = 0; // g
    int64_t _289 = 0; // f
    _jump876:; // Begin body of loop
    _284 += _289;
    _288++;
    if (_288 < _287)
    goto _jump876;
    _288 = 0;
    _289++;
    if (_289 < _285)
    goto _jump876;
    // End body of loop
    int64_t _290 = _283 / _284;
    if (_290 > 0) 
    goto _jump877;
    fail_assertion("non-positive loop bound");
    _jump877:;
    _281 = 0;
    int64_t _291 = 0; // g
    int64_t _292 = 0; // f
    _jump878:; // Begin body of loop
    double _293 = a(_0);
    double _294 = a(_293);
    double _295 = -_294;
    _281 += _295;
    _291++;
    if (_291 < _290)
    goto _jump878;
    _291 = 0;
    _292++;
    if (_292 < _282)
    goto _jump878;
    // End body of loop
    _278 += _281;
    _280++;
    if (_280 < _279)
    goto _jump872;
    // End body of loop
    double _296 = _277 - _278;
    int64_t _297 = 0;
    _297 *= _184.d0;
    _297 += _276;
    _184.data[_297] = _296;
    _276++;
    if (_276 < _274)
    goto _jump870;
    // End body of loop
    double _298 = get_time();
    double _299 = get_time();
    print_time(_299 - _298);
    bool _300 = false;
    _a2__a3_int64_t _301;
    if (!_300)
    goto _jump1290;
    _a2_bool _303;
    // Computing bound for g
    int64_t _304 = 304;
    _303.d0 = _304;
    if (_304 > 0) 
    goto _jump1291;
    fail_assertion("non-positive loop bound");
    _jump1291:;
    // Computing bound for h
    int64_t _305 = 945;
    _303.d1 = _305;
    if (_305 > 0) 
    goto _jump1292;
    fail_assertion("non-positive loop bound");
    _jump1292:;
    // Computing total size of heap memory to allocate
    int64_t _306 = 1;
    _306 *= _304;
    _306 *= _305;
    _306 *= sizeof(bool);
    _303.data = jpl_alloc(_306);
    int64_t _307 = 0; // h
    int64_t _308 = 0; // g
    _jump1293:; // Begin body of loop
    bool _309 = f();
    bool _310 = !_309;
    int64_t _311 = 0;
    _311 *= _303.d0;
    _311 += _308;
    _311 *= _303.d1;
    _311 += _307;
    _303.data[_311] = _310;
    _307++;
    if (_307 < _305)
    goto _jump1293;
    _307 = 0;
    _308++;
    if (_308 < _304)
    goto _jump1293;
    // End body of loop
    int64_t _312 = 94;
    int64_t _313 = -_312;
    int64_t _314 = 86;
    int64_t _315 = -_314;
    int64_t _316 = _313 % _315;
    int64_t _317;
    // Computing bound for g
    int64_t _318 = 156;
    if (_318 > 0) 
    goto _jump1294;
    fail_assertion("non-positive loop bound");
    _jump1294:;
    // Computing bound for h
    int64_t _319 = 582;
    if (_319 > 0) 
    goto _jump1295;
    fail_assertion("non-positive loop bound");
    _jump1295:;
    _317 = 0;
    int64_t _320 = 0; // h
    int64_t _321 = 0; // g
    _jump1296:; // Begin body of loop
    int64_t _322;
    // Computing bound for i
    if (_320 > 0) 
    goto _jump1297;
    fail_assertion("non-positive loop bound");
    _jump1297:;
    // Computing bound for j
    if (_321 > 0) 
    goto _jump1298;
    fail_assertion("non-positive loop bound");
    _jump1298:;
    _322 = 0;
    int64_t _323 = 0; // j
    int64_t _324 = 0; // i
    _jump1299:; // Begin body of loop
    _322 += _321;
    _323++;
    if (_323 < _321)
    goto _jump1299;
    _323 = 0;
    _324++;
    if (_324 < _320)
    goto _jump1299;
    // End body of loop
    _317 += _322;
    _320++;
    if (_320 < _319)
    goto _jump1296;
    _320 = 0;
    _321++;
    if (_321 < _318)
    goto _jump1296;
    // End body of loop
    if (_316 >= 0)
    goto _jump1300;
    fail_assertion("negative array index");
    _jump1300:;
    if (_316 < _303.d0)
    goto _jump1301;
    fail_assertion("index too large");
    _jump1301:;
    if (_317 >= 0)
    goto _jump1302;
    fail_assertion("negative array index");
    _jump1302:;
    if (_317 < _303.d1)
    goto _jump1303;
    fail_assertion("index too large");
    _jump1303:;
    int64_t _325 = 0;
    _325 *= _303.d0;
    _325 += _316;
    _325 *= _303.d1;
    _325 += _317;
    bool _326 = _303.data[_325];
    bool _302 = _326;
    if (0 != _326)
    goto _jump1304;
    bool _327 = f();
    bool _328;
    if (!_327)
    goto _jump1305;
    bool _329 = false;
    bool _330 = !_329;
    _328 = _330;
    goto _jump1306;
    _jump1305:;
    bool _331 = f();
    _328 = _331;
    _jump1306:;
    _302 = _328;
    _jump1304:;
    _a2__a3_int64_t _332;
    if (!_302)
    goto _jump1307;
    _a2__a3_int64_t _333;
    // Computing bound for g
    int64_t _334 = 698;
    _333.d0 = _334;
    if (_334 > 0) 
    goto _jump1308;
    fail_assertion("non-positive loop bound");
    _jump1308:;
    // Computing bound for h
    int64_t _335;
    // Computing bound for g
    bool _336 = false;
    bool _337 = true;
    bool _338 = _336 == _337;
    int64_t _339;
    if (!_338)
    goto _jump1309;
    int64_t _340 = 198;
    _339 = _340;
    goto _jump1310;
    _jump1309:;
    int64_t _341 = 676;
    int64_t _342 = -_341;
    _339 = _342;
    _jump1310:;
    if (_339 > 0) 
    goto _jump1311;
    fail_assertion("non-positive loop bound");
    _jump1311:;
    // Computing bound for h
    int64_t _343 = 392;
    if (_343 > 0) 
    goto _jump1312;
    fail_assertion("non-positive loop bound");
    _jump1312:;
    // Computing bound for i
    _a1_int64_t _344;
    // Computing bound for g
    int64_t _345 = 103;
    _344.d0 = _345;
    if (_345 > 0) 
    goto _jump1313;
    fail_assertion("non-positive loop bound");
    _jump1313:;
    // Computing total size of heap memory to allocate
    int64_t _346 = 1;
    _346 *= _345;
    _346 *= sizeof(int64_t);
    _344.data = jpl_alloc(_346);
    int64_t _347 = 0; // g
    _jump1314:; // Begin body of loop
    int64_t _348 = 848;
    int64_t _349 = 0;
    _349 *= _344.d0;
    _349 += _347;
    _344.data[_349] = _348;
    _347++;
    if (_347 < _345)
    goto _jump1314;
    // End body of loop
    int64_t _350 = 522;
    if (_350 >= 0)
    goto _jump1315;
    fail_assertion("negative array index");
    _jump1315:;
    if (_350 < _344.d0)
    goto _jump1316;
    fail_assertion("index too large");
    _jump1316:;
    int64_t _351 = 0;
    _351 *= _344.d0;
    _351 += _350;
    int64_t _352 = _344.data[_351];
    if (_352 > 0) 
    goto _jump1317;
    fail_assertion("non-positive loop bound");
    _jump1317:;
    _335 = 0;
    int64_t _353 = 0; // i
    int64_t _354 = 0; // h
    int64_t _355 = 0; // g
    _jump1318:; // Begin body of loop
    bool _356 = _0 < _0;
    int64_t _357;
    if (!_356)
    goto _jump1319;
    _357 = _353;
    goto _jump1320;
    _jump1319:;
    int64_t _358 = 459;
    int64_t _359 = _358 - _355;
    _357 = _359;
    _jump1320:;
    _335 += _357;
    _353++;
    if (_353 < _352)
    goto _jump1318;
    _353 = 0;
    _354++;
    if (_354 < _343)
    goto _jump1318;
    _354 = 0;
    _355++;
    if (_355 < _339)
    goto _jump1318;
    // End body of loop
    _333.d1 = _335;
    if (_335 > 0) 
    goto _jump1321;
    fail_assertion("non-positive loop bound");
    _jump1321:;
    // Computing total size of heap memory to allocate
    int64_t _360 = 1;
    _360 *= _334;
    _360 *= _335;
    _360 *= sizeof(_a3_int64_t);
    _333.data = jpl_alloc(_360);
    int64_t _361 = 0; // h
    int64_t _362 = 0; // g
    _jump1322:; // Begin body of loop
    bool _363 = false;
    _a1_bool _364;
    _364.d0 = 1;
    _364.data = jpl_alloc(sizeof(bool) * 1);
    _364.data[0] = _363;
    int64_t _365 = 284;
    int64_t _366 = _361 / _365;
    if (_366 >= 0)
    goto _jump1323;
    fail_assertion("negative array index");
    _jump1323:;
    if (_366 < _364.d0)
    goto _jump1324;
    fail_assertion("index too large");
    _jump1324:;
    int64_t _367 = 0;
    _367 *= _364.d0;
    _367 += _366;
    bool _368 = _364.data[_367];
    _a3_int64_t _369;
    if (!_368)
    goto _jump1325;
    _a3_int64_t _370;
    // Computing bound for i
    _370.d0 = _362;
    if (_362 > 0) 
    goto _jump1326;
    fail_assertion("non-positive loop bound");
    _jump1326:;
    // Computing bound for j
    _370.d1 = _361;
    if (_361 > 0) 
    goto _jump1327;
    fail_assertion("non-positive loop bound");
    _jump1327:;
    // Computing bound for k
    int64_t _371 = 142;
    int64_t _372 = _361 * _371;
    _370.d2 = _372;
    if (_372 > 0) 
    goto _jump1328;
    fail_assertion("non-positive loop bound");
    _jump1328:;
    // Computing total size of heap memory to allocate
    int64_t _373 = 1;
    _373 *= _362;
    _373 *= _361;
    _373 *= _372;
    _373 *= sizeof(int64_t);
    _370.data = jpl_alloc(_373);
    int64_t _374 = 0; // k
    int64_t _375 = 0; // j
    int64_t _376 = 0; // i
    _jump1329:; // Begin body of loop
    int64_t _377 = 351;
    int64_t _378 = 0;
    _378 *= _370.d0;
    _378 += _376;
    _378 *= _370.d1;
    _378 += _375;
    _378 *= _370.d2;
    _378 += _374;
    _370.data[_378] = _377;
    _374++;
    if (_374 < _372)
    goto _jump1329;
    _374 = 0;
    _375++;
    if (_375 < _361)
    goto _jump1329;
    _375 = 0;
    _376++;
    if (_376 < _362)
    goto _jump1329;
    // End body of loop
    _369 = _370;
    goto _jump1330;
    _jump1325:;
    _a3_int64_t _379;
    // Computing bound for i
    int64_t _380 = -_361;
    _379.d0 = _380;
    if (_380 > 0) 
    goto _jump1331;
    fail_assertion("non-positive loop bound");
    _jump1331:;
    // Computing bound for j
    int64_t _381;
    // Computing bound for i
    if (_361 > 0) 
    goto _jump1332;
    fail_assertion("non-positive loop bound");
    _jump1332:;
    // Computing bound for j
    if (_362 > 0) 
    goto _jump1333;
    fail_assertion("non-positive loop bound");
    _jump1333:;
    _381 = 0;
    int64_t _382 = 0; // j
    int64_t _383 = 0; // i
    _jump1334:; // Begin body of loop
    _381 += _383;
    _382++;
    if (_382 < _362)
    goto _jump1334;
    _382 = 0;
    _383++;
    if (_383 < _361)
    goto _jump1334;
    // End body of loop
    _379.d1 = _381;
    if (_381 > 0) 
    goto _jump1335;
    fail_assertion("non-positive loop bound");
    _jump1335:;
    // Computing bound for k
    int64_t _384 = 458;
    _379.d2 = _384;
    if (_384 > 0) 
    goto _jump1336;
    fail_assertion("non-positive loop bound");
    _jump1336:;
    // Computing total size of heap memory to allocate
    int64_t _385 = 1;
    _385 *= _380;
    _385 *= _381;
    _385 *= _384;
    _385 *= sizeof(int64_t);
    _379.data = jpl_alloc(_385);
    int64_t _386 = 0; // k
    int64_t _387 = 0; // j
    int64_t _388 = 0; // i
    _jump1337:; // Begin body of loop
    int64_t _389 = _361 - _386;
    int64_t _390 = 0;
    _390 *= _379.d0;
    _390 += _388;
    _390 *= _379.d1;
    _390 += _387;
    _390 *= _379.d2;
    _390 += _386;
    _379.data[_390] = _389;
    _386++;
    if (_386 < _384)
    goto _jump1337;
    _386 = 0;
    _387++;
    if (_387 < _381)
    goto _jump1337;
    _387 = 0;
    _388++;
    if (_388 < _380)
    goto _jump1337;
    // End body of loop
    _369 = _379;
    _jump1330:;
    int64_t _391 = 0;
    _391 *= _333.d0;
    _391 += _362;
    _391 *= _333.d1;
    _391 += _361;
    _333.data[_391] = _369;
    _361++;
    if (_361 < _335)
    goto _jump1322;
    _361 = 0;
    _362++;
    if (_362 < _334)
    goto _jump1322;
    // End body of loop
    _332 = _333;
    goto _jump1338;
    _jump1307:;
    bool _392 = f();
    _a2__a3_int64_t _393;
    if (!_392)
    goto _jump1339;
    _a2__a3_int64_t _394;
    // Computing bound for g
    int64_t _395 = 74;
    _394.d0 = _395;
    if (_395 > 0) 
    goto _jump1340;
    fail_assertion("non-positive loop bound");
    _jump1340:;
    // Computing bound for h
    int64_t _396 = 620;
    _a1_int64_t _397;
    _397.d0 = 1;
    _397.data = jpl_alloc(sizeof(int64_t) * 1);
    _397.data[0] = _396;
    int64_t _398 = 683;
    int64_t _399 = -_398;
    if (_399 >= 0)
    goto _jump1341;
    fail_assertion("negative array index");
    _jump1341:;
    if (_399 < _397.d0)
    goto _jump1342;
    fail_assertion("index too large");
    _jump1342:;
    int64_t _400 = 0;
    _400 *= _397.d0;
    _400 += _399;
    int64_t _401 = _397.data[_400];
    _394.d1 = _401;
    if (_401 > 0) 
    goto _jump1343;
    fail_assertion("non-positive loop bound");
    _jump1343:;
    // Computing total size of heap memory to allocate
    int64_t _402 = 1;
    _402 *= _395;
    _402 *= _401;
    _402 *= sizeof(_a3_int64_t);
    _394.data = jpl_alloc(_402);
    int64_t _403 = 0; // h
    int64_t _404 = 0; // g
    _jump1344:; // Begin body of loop
    _a3_int64_t _405;
    // Computing bound for i
    int64_t _406 = 120;
    _405.d0 = _406;
    if (_406 > 0) 
    goto _jump1345;
    fail_assertion("non-positive loop bound");
    _jump1345:;
    // Computing bound for j
    _405.d1 = _404;
    if (_404 > 0) 
    goto _jump1346;
    fail_assertion("non-positive loop bound");
    _jump1346:;
    // Computing bound for k
    _405.d2 = _404;
    if (_404 > 0) 
    goto _jump1347;
    fail_assertion("non-positive loop bound");
    _jump1347:;
    // Computing total size of heap memory to allocate
    int64_t _407 = 1;
    _407 *= _406;
    _407 *= _404;
    _407 *= _404;
    _407 *= sizeof(int64_t);
    _405.data = jpl_alloc(_407);
    int64_t _408 = 0; // k
    int64_t _409 = 0; // j
    int64_t _410 = 0; // i
    _jump1348:; // Begin body of loop
    int64_t _411 = _404 * _410;
    int64_t _412 = 0;
    _412 *= _405.d0;
    _412 += _410;
    _412 *= _405.d1;
    _412 += _409;
    _412 *= _405.d2;
    _412 += _408;
    _405.data[_412] = _411;
    _408++;
    if (_408 < _404)
    goto _jump1348;
    _408 = 0;
    _409++;
    if (_409 < _404)
    goto _jump1348;
    _409 = 0;
    _410++;
    if (_410 < _406)
    goto _jump1348;
    // End body of loop
    int64_t _413 = 0;
    _413 *= _394.d0;
    _413 += _404;
    _413 *= _394.d1;
    _413 += _403;
    _394.data[_413] = _405;
    _403++;
    if (_403 < _401)
    goto _jump1344;
    _403 = 0;
    _404++;
    if (_404 < _395)
    goto _jump1344;
    // End body of loop
    _393 = _394;
    goto _jump1349;
    _jump1339:;
    _a2__a3_int64_t _414;
    // Computing bound for g
    int64_t _415 = 234;
    int64_t _416 = 463;
    int64_t _417 = _415 - _416;
    int64_t _418 = -_417;
    _414.d0 = _418;
    if (_418 > 0) 
    goto _jump1350;
    fail_assertion("non-positive loop bound");
    _jump1350:;
    // Computing bound for h
    int64_t _419;
    // Computing bound for g
    int64_t _420 = 108;
    int64_t _421 = -_420;
    if (_421 > 0) 
    goto _jump1351;
    fail_assertion("non-positive loop bound");
    _jump1351:;
    // Computing bound for h
    int64_t _422 = 966;
    int64_t _423 = -_422;
    if (_423 > 0) 
    goto _jump1352;
    fail_assertion("non-positive loop bound");
    _jump1352:;
    // Computing bound for i
    int64_t _424;
    // Computing bound for g
    int64_t _425 = 570;
    if (_425 > 0) 
    goto _jump1353;
    fail_assertion("non-positive loop bound");
    _jump1353:;
    _424 = 0;
    int64_t _426 = 0; // g
    _jump1354:; // Begin body of loop
    _424 += _426;
    _426++;
    if (_426 < _425)
    goto _jump1354;
    // End body of loop
    if (_424 > 0) 
    goto _jump1355;
    fail_assertion("non-positive loop bound");
    _jump1355:;
    _419 = 0;
    int64_t _427 = 0; // i
    int64_t _428 = 0; // h
    int64_t _429 = 0; // g
    _jump1356:; // Begin body of loop
    int64_t _430 = 537;
    int64_t _431 = _427 / _430;
    _419 += _431;
    _427++;
    if (_427 < _424)
    goto _jump1356;
    _427 = 0;
    _428++;
    if (_428 < _423)
    goto _jump1356;
    _428 = 0;
    _429++;
    if (_429 < _421)
    goto _jump1356;
    // End body of loop
    _414.d1 = _419;
    if (_419 > 0) 
    goto _jump1357;
    fail_assertion("non-positive loop bound");
    _jump1357:;
    // Computing total size of heap memory to allocate
    int64_t _432 = 1;
    _432 *= _418;
    _432 *= _419;
    _432 *= sizeof(_a3_int64_t);
    _414.data = jpl_alloc(_432);
    int64_t _433 = 0; // h
    int64_t _434 = 0; // g
    _jump1358:; // Begin body of loop
    _a3_int64_t _435;
    // Computing bound for i
    int64_t _436 = 127;
    int64_t _437 = -_436;
    _435.d0 = _437;
    if (_437 > 0) 
    goto _jump1359;
    fail_assertion("non-positive loop bound");
    _jump1359:;
    // Computing bound for j
    int64_t _438 = 648;
    int64_t _439 = _438 + _433;
    _435.d1 = _439;
    if (_439 > 0) 
    goto _jump1360;
    fail_assertion("non-positive loop bound");
    _jump1360:;
    // Computing bound for k
    int64_t _440;
    // Computing bound for i
    int64_t _441 = 917;
    if (_441 > 0) 
    goto _jump1361;
    fail_assertion("non-positive loop bound");
    _jump1361:;
    _440 = 0;
    int64_t _442 = 0; // i
    _jump1362:; // Begin body of loop
    _440 += _434;
    _442++;
    if (_442 < _441)
    goto _jump1362;
    // End body of loop
    _435.d2 = _440;
    if (_440 > 0) 
    goto _jump1363;
    fail_assertion("non-positive loop bound");
    _jump1363:;
    // Computing total size of heap memory to allocate
    int64_t _443 = 1;
    _443 *= _437;
    _443 *= _439;
    _443 *= _440;
    _443 *= sizeof(int64_t);
    _435.data = jpl_alloc(_443);
    int64_t _444 = 0; // k
    int64_t _445 = 0; // j
    int64_t _446 = 0; // i
    _jump1364:; // Begin body of loop
    int64_t _447 = 0;
    _447 *= _435.d0;
    _447 += _446;
    _447 *= _435.d1;
    _447 += _445;
    _447 *= _435.d2;
    _447 += _444;
    _435.data[_447] = _446;
    _444++;
    if (_444 < _440)
    goto _jump1364;
    _444 = 0;
    _445++;
    if (_445 < _439)
    goto _jump1364;
    _445 = 0;
    _446++;
    if (_446 < _437)
    goto _jump1364;
    // End body of loop
    int64_t _448 = 0;
    _448 *= _414.d0;
    _448 += _434;
    _448 *= _414.d1;
    _448 += _433;
    _414.data[_448] = _435;
    _433++;
    if (_433 < _419)
    goto _jump1358;
    _433 = 0;
    _434++;
    if (_434 < _418)
    goto _jump1358;
    // End body of loop
    _393 = _414;
    _jump1349:;
    _332 = _393;
    _jump1338:;
    _301 = _332;
    goto _jump1365;
    _jump1290:;
    _a2__a3_int64_t _449;
    // Computing bound for g
    int64_t _450 = 913;
    _449.d0 = _450;
    if (_450 > 0) 
    goto _jump1366;
    fail_assertion("non-positive loop bound");
    _jump1366:;
    // Computing bound for h
    int64_t _451 = 641;
    int64_t _452 = 151;
    int64_t _453 = -_452;
    int64_t _454 = 291;
    int64_t _455 = 999;
    int64_t _456 = _454 % _455;
    int64_t _457 = _453 - _456;
    int64_t _458 = _451 / _457;
    _449.d1 = _458;
    if (_458 > 0) 
    goto _jump1367;
    fail_assertion("non-positive loop bound");
    _jump1367:;
    // Computing total size of heap memory to allocate
    int64_t _459 = 1;
    _459 *= _450;
    _459 *= _458;
    _459 *= sizeof(_a3_int64_t);
    _449.data = jpl_alloc(_459);
    int64_t _460 = 0; // h
    int64_t _461 = 0; // g
    _jump1368:; // Begin body of loop
    _a1__a3_int64_t _462;
    // Computing bound for i
    int64_t _463;
    // Computing bound for i
    if (_461 > 0) 
    goto _jump1369;
    fail_assertion("non-positive loop bound");
    _jump1369:;
    // Computing bound for j
    int64_t _464 = _461 % _461;
    if (_464 > 0) 
    goto _jump1370;
    fail_assertion("non-positive loop bound");
    _jump1370:;
    _463 = 0;
    int64_t _465 = 0; // j
    int64_t _466 = 0; // i
    _jump1371:; // Begin body of loop
    int64_t _467 = 962;
    _463 += _467;
    _465++;
    if (_465 < _464)
    goto _jump1371;
    _465 = 0;
    _466++;
    if (_466 < _461)
    goto _jump1371;
    // End body of loop
    _462.d0 = _463;
    if (_463 > 0) 
    goto _jump1372;
    fail_assertion("non-positive loop bound");
    _jump1372:;
    // Computing total size of heap memory to allocate
    int64_t _468 = 1;
    _468 *= _463;
    _468 *= sizeof(_a3_int64_t);
    _462.data = jpl_alloc(_468);
    int64_t _469 = 0; // i
    _jump1373:; // Begin body of loop
    bool _470 = f();
    _a3_int64_t _471;
    if (!_470)
    goto _jump1374;
    _a3_int64_t _472;
    // Computing bound for j
    _472.d0 = _460;
    if (_460 > 0) 
    goto _jump1375;
    fail_assertion("non-positive loop bound");
    _jump1375:;
    // Computing bound for k
    int64_t _473 = 286;
    _472.d1 = _473;
    if (_473 > 0) 
    goto _jump1376;
    fail_assertion("non-positive loop bound");
    _jump1376:;
    // Computing bound for l
    int64_t _474 = 619;
    _472.d2 = _474;
    if (_474 > 0) 
    goto _jump1377;
    fail_assertion("non-positive loop bound");
    _jump1377:;
    // Computing total size of heap memory to allocate
    int64_t _475 = 1;
    _475 *= _460;
    _475 *= _473;
    _475 *= _474;
    _475 *= sizeof(int64_t);
    _472.data = jpl_alloc(_475);
    int64_t _476 = 0; // l
    int64_t _477 = 0; // k
    int64_t _478 = 0; // j
    _jump1378:; // Begin body of loop
    int64_t _479 = 746;
    int64_t _480 = 0;
    _480 *= _472.d0;
    _480 += _478;
    _480 *= _472.d1;
    _480 += _477;
    _480 *= _472.d2;
    _480 += _476;
    _472.data[_480] = _479;
    _476++;
    if (_476 < _474)
    goto _jump1378;
    _476 = 0;
    _477++;
    if (_477 < _473)
    goto _jump1378;
    _477 = 0;
    _478++;
    if (_478 < _460)
    goto _jump1378;
    // End body of loop
    _471 = _472;
    goto _jump1379;
    _jump1374:;
    _a3_int64_t _481;
    // Computing bound for j
    _481.d0 = _461;
    if (_461 > 0) 
    goto _jump1380;
    fail_assertion("non-positive loop bound");
    _jump1380:;
    // Computing bound for k
    _481.d1 = _469;
    if (_469 > 0) 
    goto _jump1381;
    fail_assertion("non-positive loop bound");
    _jump1381:;
    // Computing bound for l
    _481.d2 = _469;
    if (_469 > 0) 
    goto _jump1382;
    fail_assertion("non-positive loop bound");
    _jump1382:;
    // Computing total size of heap memory to allocate
    int64_t _482 = 1;
    _482 *= _461;
    _482 *= _469;
    _482 *= _469;
    _482 *= sizeof(int64_t);
    _481.data = jpl_alloc(_482);
    int64_t _483 = 0; // l
    int64_t _484 = 0; // k
    int64_t _485 = 0; // j
    _jump1383:; // Begin body of loop
    int64_t _486 = 495;
    int64_t _487 = 0;
    _487 *= _481.d0;
    _487 += _485;
    _487 *= _481.d1;
    _487 += _484;
    _487 *= _481.d2;
    _487 += _483;
    _481.data[_487] = _486;
    _483++;
    if (_483 < _469)
    goto _jump1383;
    _483 = 0;
    _484++;
    if (_484 < _469)
    goto _jump1383;
    _484 = 0;
    _485++;
    if (_485 < _461)
    goto _jump1383;
    // End body of loop
    _471 = _481;
    _jump1379:;
    int64_t _488 = 0;
    _488 *= _462.d0;
    _488 += _469;
    _462.data[_488] = _471;
    _469++;
    if (_469 < _463)
    goto _jump1373;
    // End body of loop
    if (_460 >= 0)
    goto _jump1384;
    fail_assertion("negative array index");
    _jump1384:;
    if (_460 < _462.d0)
    goto _jump1385;
    fail_assertion("index too large");
    _jump1385:;
    int64_t _489 = 0;
    _489 *= _462.d0;
    _489 += _460;
    _a3_int64_t _490 = _462.data[_489];
    int64_t _491 = 0;
    _491 *= _449.d0;
    _491 += _461;
    _491 *= _449.d1;
    _491 += _460;
    _449.data[_491] = _490;
    _460++;
    if (_460 < _458)
    goto _jump1368;
    _460 = 0;
    _461++;
    if (_461 < _450)
    goto _jump1368;
    // End body of loop
    _301 = _449;
    _jump1365:;
    int64_t _492 = 387;
    int64_t _493 = -_492;
    _a1_int64_t _494;
    _494.d0 = 1;
    _494.data = jpl_alloc(sizeof(int64_t) * 1);
    _494.data[0] = _493;
    _a1_int64_t _495;
    // Computing bound for g
    bool _496 = false;
    int64_t _497;
    if (!_496)
    goto _jump1386;
    int64_t _498;
    // Computing bound for g
    int64_t _499 = 634;
    if (_499 > 0) 
    goto _jump1387;
    fail_assertion("non-positive loop bound");
    _jump1387:;
    _498 = 0;
    int64_t _500 = 0; // g
    _jump1388:; // Begin body of loop
    _498 += _500;
    _500++;
    if (_500 < _499)
    goto _jump1388;
    // End body of loop
    _497 = _498;
    goto _jump1389;
    _jump1386:;
    int64_t _501 = 659;
    int64_t _502 = -_501;
    _497 = _502;
    _jump1389:;
    _495.d0 = _497;
    if (_497 > 0) 
    goto _jump1390;
    fail_assertion("non-positive loop bound");
    _jump1390:;
    // Computing total size of heap memory to allocate
    int64_t _503 = 1;
    _503 *= _497;
    _503 *= sizeof(int64_t);
    _495.data = jpl_alloc(_503);
    int64_t _504 = 0; // g
    _jump1391:; // Begin body of loop
    int64_t _505 = 177;
    int64_t _506 = 972;
    int64_t _507 = _505 * _506;
    int64_t _508 = -_507;
    int64_t _509 = 0;
    _509 *= _495.d0;
    _509 += _504;
    _495.data[_509] = _508;
    _504++;
    if (_504 < _497)
    goto _jump1391;
    // End body of loop
    int64_t _510 = 346;
    if (_510 >= 0)
    goto _jump1392;
    fail_assertion("negative array index");
    _jump1392:;
    if (_510 < _495.d0)
    goto _jump1393;
    fail_assertion("index too large");
    _jump1393:;
    int64_t _511 = 0;
    _511 *= _495.d0;
    _511 += _510;
    int64_t _512 = _495.data[_511];
    if (_512 >= 0)
    goto _jump1394;
    fail_assertion("negative array index");
    _jump1394:;
    if (_512 < _494.d0)
    goto _jump1395;
    fail_assertion("index too large");
    _jump1395:;
    int64_t _513 = 0;
    _513 *= _494.d0;
    _513 += _512;
    int64_t _514 = _494.data[_513];
    bool _515 = f();
    bool _516;
    if (!_515)
    goto _jump1396;
    int64_t _517 = 376;
    int64_t _518 = 330;
    bool _519 = _517 < _518;
    _516 = _519;
    goto _jump1397;
    _jump1396:;
    bool _520 = f();
    _516 = _520;
    _jump1397:;
    bool _521 = !_516;
    int64_t _522;
    if (!_521)
    goto _jump1398;
    bool _523 = _0 < _0;
    int64_t _524;
    if (!_523)
    goto _jump1399;
    int64_t _525 = 64;
    _524 = _525;
    goto _jump1400;
    _jump1399:;
    int64_t _526 = 987;
    _524 = _526;
    _jump1400:;
    _522 = _524;
    goto _jump1401;
    _jump1398:;
    int64_t _527 = 160;
    _522 = _527;
    _jump1401:;
    int64_t _528;
    // Computing bound for g
    int64_t _529 = 314;
    if (_529 > 0) 
    goto _jump1402;
    fail_assertion("non-positive loop bound");
    _jump1402:;
    // Computing bound for h
    int64_t _530;
    // Computing bound for g
    int64_t _531 = 935;
    if (_531 > 0) 
    goto _jump1403;
    fail_assertion("non-positive loop bound");
    _jump1403:;
    _530 = 0;
    int64_t _532 = 0; // g
    _jump1404:; // Begin body of loop
    _530 += _532;
    _532++;
    if (_532 < _531)
    goto _jump1404;
    // End body of loop
    if (_530 > 0) 
    goto _jump1405;
    fail_assertion("non-positive loop bound");
    _jump1405:;
    // Computing bound for i
    int64_t _533 = 63;
    if (_533 > 0) 
    goto _jump1406;
    fail_assertion("non-positive loop bound");
    _jump1406:;
    _528 = 0;
    int64_t _534 = 0; // i
    int64_t _535 = 0; // h
    int64_t _536 = 0; // g
    _jump1407:; // Begin body of loop
    int64_t _537;
    // Computing bound for j
    if (_535 > 0) 
    goto _jump1408;
    fail_assertion("non-positive loop bound");
    _jump1408:;
    _537 = 0;
    int64_t _538 = 0; // j
    _jump1409:; // Begin body of loop
    _537 += _535;
    _538++;
    if (_538 < _535)
    goto _jump1409;
    // End body of loop
    int64_t _539 = _537 / _536;
    _528 += _539;
    _534++;
    if (_534 < _533)
    goto _jump1407;
    _534 = 0;
    _535++;
    if (_535 < _530)
    goto _jump1407;
    _535 = 0;
    _536++;
    if (_536 < _529)
    goto _jump1407;
    // End body of loop
    int64_t _540 = _522 * _528;
    int64_t _541 = _514 % _540;
    int64_t _542 = 612;
    if (_541 >= 0)
    goto _jump1410;
    fail_assertion("negative array index");
    _jump1410:;
    if (_541 < _301.d0)
    goto _jump1411;
    fail_assertion("index too large");
    _jump1411:;
    if (_542 >= 0)
    goto _jump1412;
    fail_assertion("negative array index");
    _jump1412:;
    if (_542 < _301.d1)
    goto _jump1413;
    fail_assertion("index too large");
    _jump1413:;
    int64_t _543 = 0;
    _543 *= _301.d0;
    _543 += _541;
    _543 *= _301.d1;
    _543 += _542;
    _a3_int64_t _544 = _301.data[_543];
    _a3_rgba _545;
    // Computing bound for k
    _545.d0 = _544.d1;
    if (_544.d1 > 0) 
    goto _jump1414;
    fail_assertion("non-positive loop bound");
    _jump1414:;
    // Computing bound for l
    int64_t _546 = 104;
    int64_t _547 = -_546;
    int64_t _548 = 862;
    int64_t _549 = _547 * _548;
    _545.d1 = _549;
    if (_549 > 0) 
    goto _jump1415;
    fail_assertion("non-positive loop bound");
    _jump1415:;
    // Computing bound for m
    int64_t _550 = 2;
    _545.d2 = _550;
    if (_550 > 0) 
    goto _jump1416;
    fail_assertion("non-positive loop bound");
    _jump1416:;
    // Computing total size of heap memory to allocate
    int64_t _551 = 1;
    _551 *= _544.d1;
    _551 *= _549;
    _551 *= _550;
    _551 *= sizeof(rgba);
    _545.data = jpl_alloc(_551);
    int64_t _552 = 0; // m
    int64_t _553 = 0; // l
    int64_t _554 = 0; // k
    _jump1417:; // Begin body of loop
    bool _555 = true;
    rgba _556;
    if (!_555)
    goto _jump1418;
    double _557;
    // Computing bound for n
    if (_544.d0 > 0) 
    goto _jump1419;
    fail_assertion("non-positive loop bound");
    _jump1419:;
    _557 = 0;
    int64_t _558 = 0; // n
    _jump1420:; // Begin body of loop
    double _559 = a(_0);
    _557 += _559;
    _558++;
    if (_558 < _544.d0)
    goto _jump1420;
    // End body of loop
    double _560 = -_0;
    double _561 = -_560;
    double _562 = 93.0;
    double _563 = -_562;
    double _564 = fmod(_563, _0);
    double _565 = a(_0);
    rgba _566 = { _557, _561, _564, _565 };
    _556 = _566;
    goto _jump1421;
    _jump1418:;
    double _567 = 24.0;
    double _568 = a(_567);
    double _569 = -_568;
    double _570;
    // Computing bound for n
    if (_554 > 0) 
    goto _jump1422;
    fail_assertion("non-positive loop bound");
    _jump1422:;
    // Computing bound for o
    int64_t _571;
    // Computing bound for n
    if (_552 > 0) 
    goto _jump1423;
    fail_assertion("non-positive loop bound");
    _jump1423:;
    _571 = 0;
    int64_t _572 = 0; // n
    _jump1424:; // Begin body of loop
    _571 += _544.d2;
    _572++;
    if (_572 < _552)
    goto _jump1424;
    // End body of loop
    if (_571 > 0) 
    goto _jump1425;
    fail_assertion("non-positive loop bound");
    _jump1425:;
    // Computing bound for p
    if (_552 > 0) 
    goto _jump1426;
    fail_assertion("non-positive loop bound");
    _jump1426:;
    _570 = 0;
    int64_t _573 = 0; // p
    int64_t _574 = 0; // o
    int64_t _575 = 0; // n
    _jump1427:; // Begin body of loop
    double _576 = 5.0;
    _570 += _576;
    _573++;
    if (_573 < _552)
    goto _jump1427;
    _573 = 0;
    _574++;
    if (_574 < _571)
    goto _jump1427;
    _574 = 0;
    _575++;
    if (_575 < _554)
    goto _jump1427;
    // End body of loop
    double _577 = a(_0);
    double _578 = -_577;
    double _579 = 74.0;
    rgba _580 = { _569, _570, _578, _579 };
    _556 = _580;
    _jump1421:;
    int64_t _581 = 0;
    _581 *= _545.d0;
    _581 += _554;
    _581 *= _545.d1;
    _581 += _553;
    _581 *= _545.d2;
    _581 += _552;
    _545.data[_581] = _556;
    _552++;
    if (_552 < _550)
    goto _jump1417;
    _552 = 0;
    _553++;
    if (_553 < _549)
    goto _jump1417;
    _553 = 0;
    _554++;
    if (_554 < _544.d1)
    goto _jump1417;
    // End body of loop
    bool _582 = f();
    int64_t _583;
    if (!_582)
    goto _jump1428;
    int64_t _584;
    // Computing bound for k
    bool _585 = true;
    bool _586 = !_585;
    bool _587 = !_586;
    int64_t _588;
    if (!_587)
    goto _jump1429;
    _a2_int64_t _589;
    // Computing bound for k
    _589.d0 = _544.d2;
    if (_544.d2 > 0) 
    goto _jump1430;
    fail_assertion("non-positive loop bound");
    _jump1430:;
    // Computing bound for l
    _589.d1 = _544.d2;
    if (_544.d2 > 0) 
    goto _jump1431;
    fail_assertion("non-positive loop bound");
    _jump1431:;
    // Computing total size of heap memory to allocate
    int64_t _590 = 1;
    _590 *= _544.d2;
    _590 *= _544.d2;
    _590 *= sizeof(int64_t);
    _589.data = jpl_alloc(_590);
    int64_t _591 = 0; // l
    int64_t _592 = 0; // k
    _jump1432:; // Begin body of loop
    int64_t _593 = 0;
    _593 *= _589.d0;
    _593 += _592;
    _593 *= _589.d1;
    _593 += _591;
    _589.data[_593] = _544.d0;
    _591++;
    if (_591 < _544.d2)
    goto _jump1432;
    _591 = 0;
    _592++;
    if (_592 < _544.d2)
    goto _jump1432;
    // End body of loop
    int64_t _594 = 566;
    int64_t _595 = -_594;
    if (_595 >= 0)
    goto _jump1433;
    fail_assertion("negative array index");
    _jump1433:;
    if (_595 < _589.d0)
    goto _jump1434;
    fail_assertion("index too large");
    _jump1434:;
    if (_544.d1 >= 0)
    goto _jump1435;
    fail_assertion("negative array index");
    _jump1435:;
    if (_544.d1 < _589.d1)
    goto _jump1436;
    fail_assertion("index too large");
    _jump1436:;
    int64_t _596 = 0;
    _596 *= _589.d0;
    _596 += _595;
    _596 *= _589.d1;
    _596 += _544.d1;
    int64_t _597 = _589.data[_596];
    _588 = _597;
    goto _jump1437;
    _jump1429:;
    bool _598 = f();
    int64_t _599;
    if (!_598)
    goto _jump1438;
    int64_t _600 = _544.d2 / _544.d2;
    _599 = _600;
    goto _jump1439;
    _jump1438:;
    int64_t _601 = -_544.d1;
    _599 = _601;
    _jump1439:;
    _588 = _599;
    _jump1437:;
    if (_588 > 0) 
    goto _jump1440;
    fail_assertion("non-positive loop bound");
    _jump1440:;
    // Computing bound for l
    int64_t _602;
    // Computing bound for k
    bool _603 = f();
    int64_t _604;
    if (!_603)
    goto _jump1441;
    _604 = _544.d1;
    goto _jump1442;
    _jump1441:;
    int64_t _605 = 788;
    _604 = _605;
    _jump1442:;
    if (_604 > 0) 
    goto _jump1443;
    fail_assertion("non-positive loop bound");
    _jump1443:;
    // Computing bound for l
    if (_544.d0 > 0) 
    goto _jump1444;
    fail_assertion("non-positive loop bound");
    _jump1444:;
    // Computing bound for m
    bool _606 = f();
    int64_t _607;
    if (!_606)
    goto _jump1445;
    int64_t _608 = 625;
    _607 = _608;
    goto _jump1446;
    _jump1445:;
    int64_t _609 = -_544.d0;
    _607 = _609;
    _jump1446:;
    if (_607 > 0) 
    goto _jump1447;
    fail_assertion("non-positive loop bound");
    _jump1447:;
    _602 = 0;
    int64_t _610 = 0; // m
    int64_t _611 = 0; // l
    int64_t _612 = 0; // k
    _jump1448:; // Begin body of loop
    _602 += _544.d1;
    _610++;
    if (_610 < _607)
    goto _jump1448;
    _610 = 0;
    _611++;
    if (_611 < _544.d0)
    goto _jump1448;
    _611 = 0;
    _612++;
    if (_612 < _604)
    goto _jump1448;
    // End body of loop
    if (_602 > 0) 
    goto _jump1449;
    fail_assertion("non-positive loop bound");
    _jump1449:;
    // Computing bound for m
    int64_t _613 = 516;
    if (_613 > 0) 
    goto _jump1450;
    fail_assertion("non-positive loop bound");
    _jump1450:;
    _584 = 0;
    int64_t _614 = 0; // m
    int64_t _615 = 0; // l
    int64_t _616 = 0; // k
    _jump1451:; // Begin body of loop
    _584 += _544.d0;
    _614++;
    if (_614 < _613)
    goto _jump1451;
    _614 = 0;
    _615++;
    if (_615 < _602)
    goto _jump1451;
    _615 = 0;
    _616++;
    if (_616 < _588)
    goto _jump1451;
    // End body of loop
    _583 = _584;
    goto _jump1452;
    _jump1428:;
    int64_t _617 = -_544.d2;
    _583 = _617;
    _jump1452:;
    int64_t _618 = 454;
    int64_t _619 = 748;
    if (_583 >= 0)
    goto _jump1453;
    fail_assertion("negative array index");
    _jump1453:;
    if (_583 < _545.d0)
    goto _jump1454;
    fail_assertion("index too large");
    _jump1454:;
    if (_618 >= 0)
    goto _jump1455;
    fail_assertion("negative array index");
    _jump1455:;
    if (_618 < _545.d1)
    goto _jump1456;
    fail_assertion("index too large");
    _jump1456:;
    if (_619 >= 0)
    goto _jump1457;
    fail_assertion("negative array index");
    _jump1457:;
    if (_619 < _545.d2)
    goto _jump1458;
    fail_assertion("index too large");
    _jump1458:;
    int64_t _620 = 0;
    _620 *= _545.d0;
    _620 += _583;
    _620 *= _545.d1;
    _620 += _618;
    _620 *= _545.d2;
    _620 += _619;
    rgba _621 = _545.data[_620];
    double _622 = _621.b;
    show("(IntType)", &_544.d2);
    bool _623 = f();
    _a2_rgba _624;
    if (!_623)
    goto _jump1821;
    _a3__a2_rgba _625;
    // Computing bound for s
    _a2_bool _626;
    // Computing bound for s
    _626.d0 = _544.d2;
    if (_544.d2 > 0) 
    goto _jump1822;
    fail_assertion("non-positive loop bound");
    _jump1822:;
    // Computing bound for t
    _626.d1 = _544.d1;
    if (_544.d1 > 0) 
    goto _jump1823;
    fail_assertion("non-positive loop bound");
    _jump1823:;
    // Computing total size of heap memory to allocate
    int64_t _627 = 1;
    _627 *= _544.d2;
    _627 *= _544.d1;
    _627 *= sizeof(bool);
    _626.data = jpl_alloc(_627);
    int64_t _628 = 0; // t
    int64_t _629 = 0; // s
    _jump1824:; // Begin body of loop
    bool _630 = f();
    int64_t _631 = 0;
    _631 *= _626.d0;
    _631 += _629;
    _631 *= _626.d1;
    _631 += _628;
    _626.data[_631] = _630;
    _628++;
    if (_628 < _544.d1)
    goto _jump1824;
    _628 = 0;
    _629++;
    if (_629 < _544.d2)
    goto _jump1824;
    // End body of loop
    int64_t _632 = _544.d1 * _544.d0;
    if (_544.d1 >= 0)
    goto _jump1825;
    fail_assertion("negative array index");
    _jump1825:;
    if (_544.d1 < _626.d0)
    goto _jump1826;
    fail_assertion("index too large");
    _jump1826:;
    if (_632 >= 0)
    goto _jump1827;
    fail_assertion("negative array index");
    _jump1827:;
    if (_632 < _626.d1)
    goto _jump1828;
    fail_assertion("index too large");
    _jump1828:;
    int64_t _633 = 0;
    _633 *= _626.d0;
    _633 += _544.d1;
    _633 *= _626.d1;
    _633 += _632;
    bool _634 = _626.data[_633];
    int64_t _635;
    if (!_634)
    goto _jump1829;
    _635 = _544.d1;
    goto _jump1830;
    _jump1829:;
    _635 = _544.d1;
    _jump1830:;
    int64_t _636 = _635 % _544.d1;
    _625.d0 = _636;
    if (_636 > 0) 
    goto _jump1831;
    fail_assertion("non-positive loop bound");
    _jump1831:;
    // Computing bound for t
    int64_t _637;
    // Computing bound for s
    if (_544.d1 > 0) 
    goto _jump1832;
    fail_assertion("non-positive loop bound");
    _jump1832:;
    // Computing bound for t
    int64_t _638 = 897;
    if (_638 > 0) 
    goto _jump1833;
    fail_assertion("non-positive loop bound");
    _jump1833:;
    // Computing bound for u
    _a2_int64_t _639;
    // Computing bound for s
    _639.d0 = _544.d1;
    if (_544.d1 > 0) 
    goto _jump1834;
    fail_assertion("non-positive loop bound");
    _jump1834:;
    // Computing bound for t
    int64_t _640 = _544.d1 / _544.d1;
    _639.d1 = _640;
    if (_640 > 0) 
    goto _jump1835;
    fail_assertion("non-positive loop bound");
    _jump1835:;
    // Computing total size of heap memory to allocate
    int64_t _641 = 1;
    _641 *= _544.d1;
    _641 *= _640;
    _641 *= sizeof(int64_t);
    _639.data = jpl_alloc(_641);
    int64_t _642 = 0; // t
    int64_t _643 = 0; // s
    _jump1836:; // Begin body of loop
    int64_t _644 = 0;
    _644 *= _639.d0;
    _644 += _643;
    _644 *= _639.d1;
    _644 += _642;
    _639.data[_644] = _544.d1;
    _642++;
    if (_642 < _640)
    goto _jump1836;
    _642 = 0;
    _643++;
    if (_643 < _544.d1)
    goto _jump1836;
    // End body of loop
    int64_t _645 = _544.d1 % _544.d1;
    if (_645 >= 0)
    goto _jump1837;
    fail_assertion("negative array index");
    _jump1837:;
    if (_645 < _639.d0)
    goto _jump1838;
    fail_assertion("index too large");
    _jump1838:;
    if (_544.d1 >= 0)
    goto _jump1839;
    fail_assertion("negative array index");
    _jump1839:;
    if (_544.d1 < _639.d1)
    goto _jump1840;
    fail_assertion("index too large");
    _jump1840:;
    int64_t _646 = 0;
    _646 *= _639.d0;
    _646 += _645;
    _646 *= _639.d1;
    _646 += _544.d1;
    int64_t _647 = _639.data[_646];
    if (_647 > 0) 
    goto _jump1841;
    fail_assertion("non-positive loop bound");
    _jump1841:;
    _637 = 0;
    int64_t _648 = 0; // u
    int64_t _649 = 0; // t
    int64_t _650 = 0; // s
    _jump1842:; // Begin body of loop
    int64_t _651 = 228;
    _637 += _651;
    _648++;
    if (_648 < _647)
    goto _jump1842;
    _648 = 0;
    _649++;
    if (_649 < _638)
    goto _jump1842;
    _649 = 0;
    _650++;
    if (_650 < _544.d1)
    goto _jump1842;
    // End body of loop
    _625.d1 = _637;
    if (_637 > 0) 
    goto _jump1843;
    fail_assertion("non-positive loop bound");
    _jump1843:;
    // Computing bound for u
    _625.d2 = _544.d1;
    if (_544.d1 > 0) 
    goto _jump1844;
    fail_assertion("non-positive loop bound");
    _jump1844:;
    // Computing total size of heap memory to allocate
    int64_t _652 = 1;
    _652 *= _636;
    _652 *= _637;
    _652 *= _544.d1;
    _652 *= sizeof(_a2_rgba);
    _625.data = jpl_alloc(_652);
    int64_t _653 = 0; // u
    int64_t _654 = 0; // t
    int64_t _655 = 0; // s
    _jump1845:; // Begin body of loop
    _a2_rgba _656;
    // Computing bound for v
    _656.d0 = _544.d2;
    if (_544.d2 > 0) 
    goto _jump1846;
    fail_assertion("non-positive loop bound");
    _jump1846:;
    // Computing bound for w
    _656.d1 = _544.d1;
    if (_544.d1 > 0) 
    goto _jump1847;
    fail_assertion("non-positive loop bound");
    _jump1847:;
    // Computing total size of heap memory to allocate
    int64_t _657 = 1;
    _657 *= _544.d2;
    _657 *= _544.d1;
    _657 *= sizeof(rgba);
    _656.data = jpl_alloc(_657);
    int64_t _658 = 0; // w
    int64_t _659 = 0; // v
    _jump1848:; // Begin body of loop
    double _660 = 61.0;
    double _661 = 47.0;
    if (_544.d1 >= 0)
    goto _jump1849;
    fail_assertion("negative array index");
    _jump1849:;
    if (_544.d1 < _184.d0)
    goto _jump1850;
    fail_assertion("index too large");
    _jump1850:;
    int64_t _662 = 0;
    _662 *= _184.d0;
    _662 += _544.d1;
    double _663 = _184.data[_662];
    if (_544.d1 >= 0)
    goto _jump1851;
    fail_assertion("negative array index");
    _jump1851:;
    if (_544.d1 < _184.d0)
    goto _jump1852;
    fail_assertion("index too large");
    _jump1852:;
    int64_t _664 = 0;
    _664 *= _184.d0;
    _664 += _544.d1;
    double _665 = _184.data[_664];
    rgba _666 = { _660, _661, _663, _665 };
    int64_t _667 = 0;
    _667 *= _656.d0;
    _667 += _659;
    _667 *= _656.d1;
    _667 += _658;
    _656.data[_667] = _666;
    _658++;
    if (_658 < _544.d1)
    goto _jump1848;
    _658 = 0;
    _659++;
    if (_659 < _544.d2)
    goto _jump1848;
    // End body of loop
    int64_t _668 = 0;
    _668 *= _625.d0;
    _668 += _655;
    _668 *= _625.d1;
    _668 += _654;
    _668 *= _625.d2;
    _668 += _653;
    _625.data[_668] = _656;
    _653++;
    if (_653 < _544.d1)
    goto _jump1845;
    _653 = 0;
    _654++;
    if (_654 < _637)
    goto _jump1845;
    _654 = 0;
    _655++;
    if (_655 < _636)
    goto _jump1845;
    // End body of loop
    if (_544.d1 >= 0)
    goto _jump1853;
    fail_assertion("negative array index");
    _jump1853:;
    if (_544.d1 < _625.d0)
    goto _jump1854;
    fail_assertion("index too large");
    _jump1854:;
    if (_544.d2 >= 0)
    goto _jump1855;
    fail_assertion("negative array index");
    _jump1855:;
    if (_544.d2 < _625.d1)
    goto _jump1856;
    fail_assertion("index too large");
    _jump1856:;
    if (_544.d1 >= 0)
    goto _jump1857;
    fail_assertion("negative array index");
    _jump1857:;
    if (_544.d1 < _625.d2)
    goto _jump1858;
    fail_assertion("index too large");
    _jump1858:;
    int64_t _669 = 0;
    _669 *= _625.d0;
    _669 += _544.d1;
    _669 *= _625.d1;
    _669 += _544.d2;
    _669 *= _625.d2;
    _669 += _544.d1;
    _a2_rgba _670 = _625.data[_669];
    _624 = _670;
    goto _jump1859;
    _jump1821:;
    double _671 = 41.0;
    double _672 = 3.0;
    bool _673 = _671 < _672;
    _a2_rgba _674;
    if (!_673)
    goto _jump1860;
    _a1__a1_bool _675;
    // Computing bound for s
    int64_t _676 = -_544.d0;
    _675.d0 = _676;
    if (_676 > 0) 
    goto _jump1861;
    fail_assertion("non-positive loop bound");
    _jump1861:;
    // Computing total size of heap memory to allocate
    int64_t _677 = 1;
    _677 *= _676;
    _677 *= sizeof(_a1_bool);
    _675.data = jpl_alloc(_677);
    int64_t _678 = 0; // s
    _jump1862:; // Begin body of loop
    _a1_bool _679;
    // Computing bound for t
    int64_t _680 = 627;
    _679.d0 = _680;
    if (_680 > 0) 
    goto _jump1863;
    fail_assertion("non-positive loop bound");
    _jump1863:;
    // Computing total size of heap memory to allocate
    int64_t _681 = 1;
    _681 *= _680;
    _681 *= sizeof(bool);
    _679.data = jpl_alloc(_681);
    int64_t _682 = 0; // t
    _jump1864:; // Begin body of loop
    bool _683 = f();
    int64_t _684 = 0;
    _684 *= _679.d0;
    _684 += _682;
    _679.data[_684] = _683;
    _682++;
    if (_682 < _680)
    goto _jump1864;
    // End body of loop
    int64_t _685 = 0;
    _685 *= _675.d0;
    _685 += _678;
    _675.data[_685] = _679;
    _678++;
    if (_678 < _676)
    goto _jump1862;
    // End body of loop
    if (_544.d1 >= 0)
    goto _jump1865;
    fail_assertion("negative array index");
    _jump1865:;
    if (_544.d1 < _675.d0)
    goto _jump1866;
    fail_assertion("index too large");
    _jump1866:;
    int64_t _686 = 0;
    _686 *= _675.d0;
    _686 += _544.d1;
    _a1_bool _687 = _675.data[_686];
    int64_t _688 = 268;
    if (_688 >= 0)
    goto _jump1867;
    fail_assertion("negative array index");
    _jump1867:;
    if (_688 < _687.d0)
    goto _jump1868;
    fail_assertion("index too large");
    _jump1868:;
    int64_t _689 = 0;
    _689 *= _687.d0;
    _689 += _688;
    bool _690 = _687.data[_689];
    _a2_rgba _691;
    if (!_690)
    goto _jump1869;
    _a1__a2_rgba _692;
    // Computing bound for s
    int64_t _693 = 61;
    int64_t _694 = _693 / _544.d0;
    _692.d0 = _694;
    if (_694 > 0) 
    goto _jump1870;
    fail_assertion("non-positive loop bound");
    _jump1870:;
    // Computing total size of heap memory to allocate
    int64_t _695 = 1;
    _695 *= _694;
    _695 *= sizeof(_a2_rgba);
    _692.data = jpl_alloc(_695);
    int64_t _696 = 0; // s
    _jump1871:; // Begin body of loop
    _a2_rgba _697;
    // Computing bound for t
    _697.d0 = _696;
    if (_696 > 0) 
    goto _jump1872;
    fail_assertion("non-positive loop bound");
    _jump1872:;
    // Computing bound for u
    if (_696 >= 0)
    goto _jump1873;
    fail_assertion("negative array index");
    _jump1873:;
    if (_696 < _544.d0)
    goto _jump1874;
    fail_assertion("index too large");
    _jump1874:;
    if (_544.d2 >= 0)
    goto _jump1875;
    fail_assertion("negative array index");
    _jump1875:;
    if (_544.d2 < _544.d1)
    goto _jump1876;
    fail_assertion("index too large");
    _jump1876:;
    if (_544.d2 >= 0)
    goto _jump1877;
    fail_assertion("negative array index");
    _jump1877:;
    if (_544.d2 < _544.d2)
    goto _jump1878;
    fail_assertion("index too large");
    _jump1878:;
    int64_t _698 = 0;
    _698 *= _544.d0;
    _698 += _696;
    _698 *= _544.d1;
    _698 += _544.d2;
    _698 *= _544.d2;
    _698 += _544.d2;
    int64_t _699 = _544.data[_698];
    _697.d1 = _699;
    if (_699 > 0) 
    goto _jump1879;
    fail_assertion("non-positive loop bound");
    _jump1879:;
    // Computing total size of heap memory to allocate
    int64_t _700 = 1;
    _700 *= _696;
    _700 *= _699;
    _700 *= sizeof(rgba);
    _697.data = jpl_alloc(_700);
    int64_t _701 = 0; // u
    int64_t _702 = 0; // t
    _jump1880:; // Begin body of loop
    rgba _703 = { _622, _0, _0, _0 };
    int64_t _704 = 0;
    _704 *= _697.d0;
    _704 += _702;
    _704 *= _697.d1;
    _704 += _701;
    _697.data[_704] = _703;
    _701++;
    if (_701 < _699)
    goto _jump1880;
    _701 = 0;
    _702++;
    if (_702 < _696)
    goto _jump1880;
    // End body of loop
    int64_t _705 = 0;
    _705 *= _692.d0;
    _705 += _696;
    _692.data[_705] = _697;
    _696++;
    if (_696 < _694)
    goto _jump1871;
    // End body of loop
    if (_544.d0 >= 0)
    goto _jump1881;
    fail_assertion("negative array index");
    _jump1881:;
    if (_544.d0 < _692.d0)
    goto _jump1882;
    fail_assertion("index too large");
    _jump1882:;
    int64_t _706 = 0;
    _706 *= _692.d0;
    _706 += _544.d0;
    _a2_rgba _707 = _692.data[_706];
    _691 = _707;
    goto _jump1883;
    _jump1869:;
    _a2_rgba _708;
    // Computing bound for s
    _708.d0 = _544.d1;
    if (_544.d1 > 0) 
    goto _jump1884;
    fail_assertion("non-positive loop bound");
    _jump1884:;
    // Computing bound for t
    bool _709 = f();
    int64_t _710;
    if (!_709)
    goto _jump1885;
    int64_t _711 = -_544.d1;
    _710 = _711;
    goto _jump1886;
    _jump1885:;
    _710 = _544.d0;
    _jump1886:;
    int64_t _712 = _710 - _544.d2;
    _708.d1 = _712;
    if (_712 > 0) 
    goto _jump1887;
    fail_assertion("non-positive loop bound");
    _jump1887:;
    // Computing total size of heap memory to allocate
    int64_t _713 = 1;
    _713 *= _544.d1;
    _713 *= _712;
    _713 *= sizeof(rgba);
    _708.data = jpl_alloc(_713);
    int64_t _714 = 0; // t
    int64_t _715 = 0; // s
    _jump1888:; // Begin body of loop
    double _716 = 21.0;
    if (_544.d2 >= 0)
    goto _jump1889;
    fail_assertion("negative array index");
    _jump1889:;
    if (_544.d2 < _184.d0)
    goto _jump1890;
    fail_assertion("index too large");
    _jump1890:;
    int64_t _717 = 0;
    _717 *= _184.d0;
    _717 += _544.d2;
    double _718 = _184.data[_717];
    double _719 = -_718;
    double _720 = a(_0);
    double _721 = a(_720);
    rgba _722 = { _716, _719, _0, _721 };
    int64_t _723 = 0;
    _723 *= _708.d0;
    _723 += _715;
    _723 *= _708.d1;
    _723 += _714;
    _708.data[_723] = _722;
    _714++;
    if (_714 < _712)
    goto _jump1888;
    _714 = 0;
    _715++;
    if (_715 < _544.d1)
    goto _jump1888;
    // End body of loop
    _691 = _708;
    _jump1883:;
    _674 = _691;
    goto _jump1891;
    _jump1860:;
    _a2_rgba _724;
    // Computing bound for s
    _724.d0 = _544.d0;
    if (_544.d0 > 0) 
    goto _jump1892;
    fail_assertion("non-positive loop bound");
    _jump1892:;
    // Computing bound for t
    int64_t _725 = 838;
    int64_t _726 = _544.d0 * _725;
    int64_t _727 = _726 % _544.d0;
    _724.d1 = _727;
    if (_727 > 0) 
    goto _jump1893;
    fail_assertion("non-positive loop bound");
    _jump1893:;
    // Computing total size of heap memory to allocate
    int64_t _728 = 1;
    _728 *= _544.d0;
    _728 *= _727;
    _728 *= sizeof(rgba);
    _724.data = jpl_alloc(_728);
    int64_t _729 = 0; // t
    int64_t _730 = 0; // s
    _jump1894:; // Begin body of loop
    double _731 = a(_0);
    double _732 = 30.0;
    double _733 = _732 / _622;
    double _734 = a(_622);
    double _735 = a(_622);
    double _736 = 5.0;
    double _737 = -_736;
    rgba _738 = { _733, _734, _735, _737 };
    double _739 = _738.a;
    bool _740 = f();
    double _741;
    if (!_740)
    goto _jump1895;
    double _742;
    // Computing bound for u
    int64_t _743 = 865;
    if (_743 > 0) 
    goto _jump1896;
    fail_assertion("non-positive loop bound");
    _jump1896:;
    // Computing bound for v
    int64_t _744 = 85;
    if (_744 > 0) 
    goto _jump1897;
    fail_assertion("non-positive loop bound");
    _jump1897:;
    _742 = 0;
    int64_t _745 = 0; // v
    int64_t _746 = 0; // u
    _jump1898:; // Begin body of loop
    double _747 = -_622;
    _742 += _747;
    _745++;
    if (_745 < _744)
    goto _jump1898;
    _745 = 0;
    _746++;
    if (_746 < _743)
    goto _jump1898;
    // End body of loop
    _741 = _742;
    goto _jump1899;
    _jump1895:;
    double _748 = 6.0;
    _741 = _748;
    _jump1899:;
    rgba _749 = { _731, _739, _741, _0 };
    int64_t _750 = 0;
    _750 *= _724.d0;
    _750 += _730;
    _750 *= _724.d1;
    _750 += _729;
    _724.data[_750] = _749;
    _729++;
    if (_729 < _727)
    goto _jump1894;
    _729 = 0;
    _730++;
    if (_730 < _544.d0)
    goto _jump1894;
    // End body of loop
    _674 = _724;
    _jump1891:;
    _624 = _674;
    _jump1859:;
    write_image(_624, "s.png");
    show("(IntType)", &_544.d0);
    bool _751 = true;
    bool _752 = !_751;
    bool _753 = f();
    bool _754;
    if (!_753)
    goto _jump2069;
    _a2_bool _755;
    // Computing bound for t
    bool _756 = _544.d2 < _544.d1;
    int64_t _757;
    if (!_756)
    goto _jump2070;
    _757 = _544.d1;
    goto _jump2071;
    _jump2070:;
    _757 = _544.d0;
    _jump2071:;
    _755.d0 = _757;
    if (_757 > 0) 
    goto _jump2072;
    fail_assertion("non-positive loop bound");
    _jump2072:;
    // Computing bound for u
    _755.d1 = _544.d1;
    if (_544.d1 > 0) 
    goto _jump2073;
    fail_assertion("non-positive loop bound");
    _jump2073:;
    // Computing total size of heap memory to allocate
    int64_t _758 = 1;
    _758 *= _757;
    _758 *= _544.d1;
    _758 *= sizeof(bool);
    _755.data = jpl_alloc(_758);
    int64_t _759 = 0; // u
    int64_t _760 = 0; // t
    _jump2074:; // Begin body of loop
    bool _761 = true;
    int64_t _762 = 0;
    _762 *= _755.d0;
    _762 += _760;
    _762 *= _755.d1;
    _762 += _759;
    _755.data[_762] = _761;
    _759++;
    if (_759 < _544.d1)
    goto _jump2074;
    _759 = 0;
    _760++;
    if (_760 < _757)
    goto _jump2074;
    // End body of loop
    if (_544.d2 >= 0)
    goto _jump2075;
    fail_assertion("negative array index");
    _jump2075:;
    if (_544.d2 < _755.d0)
    goto _jump2076;
    fail_assertion("index too large");
    _jump2076:;
    if (_544.d2 >= 0)
    goto _jump2077;
    fail_assertion("negative array index");
    _jump2077:;
    if (_544.d2 < _755.d1)
    goto _jump2078;
    fail_assertion("index too large");
    _jump2078:;
    int64_t _763 = 0;
    _763 *= _755.d0;
    _763 += _544.d2;
    _763 *= _755.d1;
    _763 += _544.d2;
    bool _764 = _755.data[_763];
    bool _765;
    if (!_764)
    goto _jump2079;
    _a2_int64_t _766;
    // Computing bound for t
    if (_544.d0 >= 0)
    goto _jump2080;
    fail_assertion("negative array index");
    _jump2080:;
    if (_544.d0 < _544.d0)
    goto _jump2081;
    fail_assertion("index too large");
    _jump2081:;
    if (_544.d2 >= 0)
    goto _jump2082;
    fail_assertion("negative array index");
    _jump2082:;
    if (_544.d2 < _544.d1)
    goto _jump2083;
    fail_assertion("index too large");
    _jump2083:;
    if (_544.d1 >= 0)
    goto _jump2084;
    fail_assertion("negative array index");
    _jump2084:;
    if (_544.d1 < _544.d2)
    goto _jump2085;
    fail_assertion("index too large");
    _jump2085:;
    int64_t _767 = 0;
    _767 *= _544.d0;
    _767 += _544.d0;
    _767 *= _544.d1;
    _767 += _544.d2;
    _767 *= _544.d2;
    _767 += _544.d1;
    int64_t _768 = _544.data[_767];
    _766.d0 = _768;
    if (_768 > 0) 
    goto _jump2086;
    fail_assertion("non-positive loop bound");
    _jump2086:;
    // Computing bound for u
    _766.d1 = _544.d1;
    if (_544.d1 > 0) 
    goto _jump2087;
    fail_assertion("non-positive loop bound");
    _jump2087:;
    // Computing total size of heap memory to allocate
    int64_t _769 = 1;
    _769 *= _768;
    _769 *= _544.d1;
    _769 *= sizeof(int64_t);
    _766.data = jpl_alloc(_769);
    int64_t _770 = 0; // u
    int64_t _771 = 0; // t
    _jump2088:; // Begin body of loop
    int64_t _772 = 0;
    _772 *= _766.d0;
    _772 += _771;
    _772 *= _766.d1;
    _772 += _770;
    _766.data[_772] = _544.d1;
    _770++;
    if (_770 < _544.d1)
    goto _jump2088;
    _770 = 0;
    _771++;
    if (_771 < _768)
    goto _jump2088;
    // End body of loop
    bool _773 = _544.d2 == _544.d2;
    _a2_int64_t _774;
    if (!_773)
    goto _jump2089;
    _a2_int64_t _775;
    // Computing bound for t
    _775.d0 = _544.d2;
    if (_544.d2 > 0) 
    goto _jump2090;
    fail_assertion("non-positive loop bound");
    _jump2090:;
    // Computing bound for u
    _775.d1 = _544.d2;
    if (_544.d2 > 0) 
    goto _jump2091;
    fail_assertion("non-positive loop bound");
    _jump2091:;
    // Computing total size of heap memory to allocate
    int64_t _776 = 1;
    _776 *= _544.d2;
    _776 *= _544.d2;
    _776 *= sizeof(int64_t);
    _775.data = jpl_alloc(_776);
    int64_t _777 = 0; // u
    int64_t _778 = 0; // t
    _jump2092:; // Begin body of loop
    int64_t _779 = 751;
    int64_t _780 = 0;
    _780 *= _775.d0;
    _780 += _778;
    _780 *= _775.d1;
    _780 += _777;
    _775.data[_780] = _779;
    _777++;
    if (_777 < _544.d2)
    goto _jump2092;
    _777 = 0;
    _778++;
    if (_778 < _544.d2)
    goto _jump2092;
    // End body of loop
    _774 = _775;
    goto _jump2093;
    _jump2089:;
    _a2_int64_t _781;
    // Computing bound for t
    _781.d0 = _544.d2;
    if (_544.d2 > 0) 
    goto _jump2094;
    fail_assertion("non-positive loop bound");
    _jump2094:;
    // Computing bound for u
    _781.d1 = _544.d1;
    if (_544.d1 > 0) 
    goto _jump2095;
    fail_assertion("non-positive loop bound");
    _jump2095:;
    // Computing total size of heap memory to allocate
    int64_t _782 = 1;
    _782 *= _544.d2;
    _782 *= _544.d1;
    _782 *= sizeof(int64_t);
    _781.data = jpl_alloc(_782);
    int64_t _783 = 0; // u
    int64_t _784 = 0; // t
    _jump2096:; // Begin body of loop
    int64_t _785 = 0;
    _785 *= _781.d0;
    _785 += _784;
    _785 *= _781.d1;
    _785 += _783;
    _781.data[_785] = _544.d1;
    _783++;
    if (_783 < _544.d1)
    goto _jump2096;
    _783 = 0;
    _784++;
    if (_784 < _544.d2)
    goto _jump2096;
    // End body of loop
    _774 = _781;
    _jump2093:;
    _a2_int64_t _786;
    // Computing bound for t
    int64_t _787 = _544.d1 + _544.d0;
    _786.d0 = _787;
    if (_787 > 0) 
    goto _jump2097;
    fail_assertion("non-positive loop bound");
    _jump2097:;
    // Computing bound for u
    int64_t _788 = 818;
    _786.d1 = _788;
    if (_788 > 0) 
    goto _jump2098;
    fail_assertion("non-positive loop bound");
    _jump2098:;
    // Computing total size of heap memory to allocate
    int64_t _789 = 1;
    _789 *= _787;
    _789 *= _788;
    _789 *= sizeof(int64_t);
    _786.data = jpl_alloc(_789);
    int64_t _790 = 0; // u
    int64_t _791 = 0; // t
    _jump2099:; // Begin body of loop
    int64_t _792 = 0;
    _792 *= _786.d0;
    _792 += _791;
    _792 *= _786.d1;
    _792 += _790;
    _786.data[_792] = _544.d1;
    _790++;
    if (_790 < _788)
    goto _jump2099;
    _790 = 0;
    _791++;
    if (_791 < _787)
    goto _jump2099;
    // End body of loop
    _a1__a2_int64_t _793;
    _793.d0 = 3;
    _793.data = jpl_alloc(sizeof(_a2_int64_t) * 3);
    _793.data[0] = _766;
    _793.data[1] = _774;
    _793.data[2] = _786;
    bool _794 = c(_793);
    _765 = _794;
    goto _jump2100;
    _jump2079:;
    _a1_double _795;
    // Computing bound for t
    _795.d0 = _544.d1;
    if (_544.d1 > 0) 
    goto _jump2101;
    fail_assertion("non-positive loop bound");
    _jump2101:;
    // Computing total size of heap memory to allocate
    int64_t _796 = 1;
    _796 *= _544.d1;
    _796 *= sizeof(double);
    _795.data = jpl_alloc(_796);
    int64_t _797 = 0; // t
    _jump2102:; // Begin body of loop
    double _798;
    // Computing bound for u
    if (_544.d1 > 0) 
    goto _jump2103;
    fail_assertion("non-positive loop bound");
    _jump2103:;
    // Computing bound for v
    if (_544.d1 > 0) 
    goto _jump2104;
    fail_assertion("non-positive loop bound");
    _jump2104:;
    _798 = 0;
    int64_t _799 = 0; // v
    int64_t _800 = 0; // u
    _jump2105:; // Begin body of loop
    _798 += _622;
    _799++;
    if (_799 < _544.d1)
    goto _jump2105;
    _799 = 0;
    _800++;
    if (_800 < _544.d1)
    goto _jump2105;
    // End body of loop
    int64_t _801 = 0;
    _801 *= _795.d0;
    _801 += _797;
    _795.data[_801] = _798;
    _797++;
    if (_797 < _544.d1)
    goto _jump2102;
    // End body of loop
    if (_544.d0 >= 0)
    goto _jump2106;
    fail_assertion("negative array index");
    _jump2106:;
    if (_544.d0 < _795.d0)
    goto _jump2107;
    fail_assertion("index too large");
    _jump2107:;
    int64_t _802 = 0;
    _802 *= _795.d0;
    _802 += _544.d0;
    double _803 = _795.data[_802];
    double _804;
    // Computing bound for t
    if (_544.d1 > 0) 
    goto _jump2108;
    fail_assertion("non-positive loop bound");
    _jump2108:;
    _804 = 0;
    int64_t _805 = 0; // t
    _jump2109:; // Begin body of loop
    double _806 = 55.0;
    _804 += _806;
    _805++;
    if (_805 < _544.d1)
    goto _jump2109;
    // End body of loop
    double _807 = -_804;
    bool _808 = _803 <= _807;
    _765 = _808;
    _jump2100:;
    _754 = _765;
    goto _jump2110;
    _jump2069:;
    _a1__a2_int64_t _809;
    // Computing bound for t
    int64_t _810 = 244;
    int64_t _811 = _544.d0 - _810;
    _809.d0 = _811;
    if (_811 > 0) 
    goto _jump2111;
    fail_assertion("non-positive loop bound");
    _jump2111:;
    // Computing total size of heap memory to allocate
    int64_t _812 = 1;
    _812 *= _811;
    _812 *= sizeof(_a2_int64_t);
    _809.data = jpl_alloc(_812);
    int64_t _813 = 0; // t
    _jump2112:; // Begin body of loop
    bool _814 = f();
    _a2_int64_t _815;
    if (!_814)
    goto _jump2113;
    _a2_int64_t _816;
    // Computing bound for u
    bool _817 = f();
    int64_t _818;
    if (!_817)
    goto _jump2114;
    _818 = _813;
    goto _jump2115;
    _jump2114:;
    _818 = _813;
    _jump2115:;
    _816.d0 = _818;
    if (_818 > 0) 
    goto _jump2116;
    fail_assertion("non-positive loop bound");
    _jump2116:;
    // Computing bound for v
    _816.d1 = _544.d1;
    if (_544.d1 > 0) 
    goto _jump2117;
    fail_assertion("non-positive loop bound");
    _jump2117:;
    // Computing total size of heap memory to allocate
    int64_t _819 = 1;
    _819 *= _818;
    _819 *= _544.d1;
    _819 *= sizeof(int64_t);
    _816.data = jpl_alloc(_819);
    int64_t _820 = 0; // v
    int64_t _821 = 0; // u
    _jump2118:; // Begin body of loop
    int64_t _822 = 0;
    _822 *= _816.d0;
    _822 += _821;
    _822 *= _816.d1;
    _822 += _820;
    _816.data[_822] = _544.d1;
    _820++;
    if (_820 < _544.d1)
    goto _jump2118;
    _820 = 0;
    _821++;
    if (_821 < _818)
    goto _jump2118;
    // End body of loop
    _815 = _816;
    goto _jump2119;
    _jump2113:;
    bool _823 = _544.d1 >= _544.d1;
    _a2_int64_t _824;
    if (!_823)
    goto _jump2120;
    _a2_int64_t _825;
    // Computing bound for u
    _825.d0 = _544.d1;
    if (_544.d1 > 0) 
    goto _jump2121;
    fail_assertion("non-positive loop bound");
    _jump2121:;
    // Computing bound for v
    _825.d1 = _544.d1;
    if (_544.d1 > 0) 
    goto _jump2122;
    fail_assertion("non-positive loop bound");
    _jump2122:;
    // Computing total size of heap memory to allocate
    int64_t _826 = 1;
    _826 *= _544.d1;
    _826 *= _544.d1;
    _826 *= sizeof(int64_t);
    _825.data = jpl_alloc(_826);
    int64_t _827 = 0; // v
    int64_t _828 = 0; // u
    _jump2123:; // Begin body of loop
    int64_t _829 = 0;
    _829 *= _825.d0;
    _829 += _828;
    _829 *= _825.d1;
    _829 += _827;
    _825.data[_829] = _544.d2;
    _827++;
    if (_827 < _544.d1)
    goto _jump2123;
    _827 = 0;
    _828++;
    if (_828 < _544.d1)
    goto _jump2123;
    // End body of loop
    _824 = _825;
    goto _jump2124;
    _jump2120:;
    _a2_int64_t _830;
    // Computing bound for u
    _830.d0 = _544.d1;
    if (_544.d1 > 0) 
    goto _jump2125;
    fail_assertion("non-positive loop bound");
    _jump2125:;
    // Computing bound for v
    _830.d1 = _544.d0;
    if (_544.d0 > 0) 
    goto _jump2126;
    fail_assertion("non-positive loop bound");
    _jump2126:;
    // Computing total size of heap memory to allocate
    int64_t _831 = 1;
    _831 *= _544.d1;
    _831 *= _544.d0;
    _831 *= sizeof(int64_t);
    _830.data = jpl_alloc(_831);
    int64_t _832 = 0; // v
    int64_t _833 = 0; // u
    _jump2127:; // Begin body of loop
    int64_t _834 = 0;
    _834 *= _830.d0;
    _834 += _833;
    _834 *= _830.d1;
    _834 += _832;
    _830.data[_834] = _544.d1;
    _832++;
    if (_832 < _544.d0)
    goto _jump2127;
    _832 = 0;
    _833++;
    if (_833 < _544.d1)
    goto _jump2127;
    // End body of loop
    _824 = _830;
    _jump2124:;
    _815 = _824;
    _jump2119:;
    int64_t _835 = 0;
    _835 *= _809.d0;
    _835 += _813;
    _809.data[_835] = _815;
    _813++;
    if (_813 < _811)
    goto _jump2112;
    // End body of loop
    bool _836 = c(_809);
    _754 = _836;
    _jump2110:;
    bool _837 = _752 != _754;
    if (0 != _837)
    goto _jump2128;
    fail_assertion("t");
    _jump2128:;
    _a1__a1__a3__a2_int64_t _838;
    // Computing bound for u
    int64_t _839;
    // Computing bound for u
    if (_544.d1 > 0) 
    goto _jump2193;
    fail_assertion("non-positive loop bound");
    _jump2193:;
    // Computing bound for v
    if (_544.d0 > 0) 
    goto _jump2194;
    fail_assertion("non-positive loop bound");
    _jump2194:;
    _839 = 0;
    int64_t _840 = 0; // v
    int64_t _841 = 0; // u
    _jump2195:; // Begin body of loop
    _839 += _544.d0;
    _840++;
    if (_840 < _544.d0)
    goto _jump2195;
    _840 = 0;
    _841++;
    if (_841 < _544.d1)
    goto _jump2195;
    // End body of loop
    _838.d0 = _839;
    if (_839 > 0) 
    goto _jump2196;
    fail_assertion("non-positive loop bound");
    _jump2196:;
    // Computing total size of heap memory to allocate
    int64_t _842 = 1;
    _842 *= _839;
    _842 *= sizeof(_a1__a3__a2_int64_t);
    _838.data = jpl_alloc(_842);
    int64_t _843 = 0; // u
    _jump2197:; // Begin body of loop
    _a1__a3__a2_int64_t _844;
    // Computing bound for v
    _844.d0 = _544.d0;
    if (_544.d0 > 0) 
    goto _jump2198;
    fail_assertion("non-positive loop bound");
    _jump2198:;
    // Computing total size of heap memory to allocate
    int64_t _845 = 1;
    _845 *= _544.d0;
    _845 *= sizeof(_a3__a2_int64_t);
    _844.data = jpl_alloc(_845);
    int64_t _846 = 0; // v
    _jump2199:; // Begin body of loop
    _a3__a2_int64_t _847;
    // Computing bound for w
    _847.d0 = _544.d2;
    if (_544.d2 > 0) 
    goto _jump2200;
    fail_assertion("non-positive loop bound");
    _jump2200:;
    // Computing bound for x
    int64_t _848 = -_544.d1;
    _847.d1 = _848;
    if (_848 > 0) 
    goto _jump2201;
    fail_assertion("non-positive loop bound");
    _jump2201:;
    // Computing bound for y
    _847.d2 = _544.d1;
    if (_544.d1 > 0) 
    goto _jump2202;
    fail_assertion("non-positive loop bound");
    _jump2202:;
    // Computing total size of heap memory to allocate
    int64_t _849 = 1;
    _849 *= _544.d2;
    _849 *= _848;
    _849 *= _544.d1;
    _849 *= sizeof(_a2_int64_t);
    _847.data = jpl_alloc(_849);
    int64_t _850 = 0; // y
    int64_t _851 = 0; // x
    int64_t _852 = 0; // w
    _jump2203:; // Begin body of loop
    _a2_int64_t _853;
    // Computing bound for z
    _853.d0 = _852;
    if (_852 > 0) 
    goto _jump2204;
    fail_assertion("non-positive loop bound");
    _jump2204:;
    // Computing bound for A
    _853.d1 = _544.d0;
    if (_544.d0 > 0) 
    goto _jump2205;
    fail_assertion("non-positive loop bound");
    _jump2205:;
    // Computing total size of heap memory to allocate
    int64_t _854 = 1;
    _854 *= _852;
    _854 *= _544.d0;
    _854 *= sizeof(int64_t);
    _853.data = jpl_alloc(_854);
    int64_t _855 = 0; // A
    int64_t _856 = 0; // z
    _jump2206:; // Begin body of loop
    int64_t _857 = 0;
    _857 *= _853.d0;
    _857 += _856;
    _857 *= _853.d1;
    _857 += _855;
    _853.data[_857] = _544.d1;
    _855++;
    if (_855 < _544.d0)
    goto _jump2206;
    _855 = 0;
    _856++;
    if (_856 < _852)
    goto _jump2206;
    // End body of loop
    int64_t _858 = 0;
    _858 *= _847.d0;
    _858 += _852;
    _858 *= _847.d1;
    _858 += _851;
    _858 *= _847.d2;
    _858 += _850;
    _847.data[_858] = _853;
    _850++;
    if (_850 < _544.d1)
    goto _jump2203;
    _850 = 0;
    _851++;
    if (_851 < _848)
    goto _jump2203;
    _851 = 0;
    _852++;
    if (_852 < _544.d2)
    goto _jump2203;
    // End body of loop
    int64_t _859 = 0;
    _859 *= _844.d0;
    _859 += _846;
    _844.data[_859] = _847;
    _846++;
    if (_846 < _544.d0)
    goto _jump2199;
    // End body of loop
    int64_t _860 = 0;
    _860 *= _838.d0;
    _860 += _843;
    _838.data[_860] = _844;
    _843++;
    if (_843 < _839)
    goto _jump2197;
    // End body of loop
    int64_t _861;
    // Computing bound for u
    bool _862 = f();
    bool _863 = !_862;
    _a1_int64_t _864;
    if (!_863)
    goto _jump2207;
    _a1_int64_t _865;
    _865.d0 = 1;
    _865.data = jpl_alloc(sizeof(int64_t) * 1);
    _865.data[0] = _544.d2;
    _864 = _865;
    goto _jump2208;
    _jump2207:;
    _a1_int64_t _866;
    _866.d0 = 1;
    _866.data = jpl_alloc(sizeof(int64_t) * 1);
    _866.data[0] = _544.d2;
    _864 = _866;
    _jump2208:;
    int64_t _867;
    // Computing bound for u
    int64_t _868;
    // Computing bound for u
    int64_t _869 = 146;
    if (_869 > 0) 
    goto _jump2209;
    fail_assertion("non-positive loop bound");
    _jump2209:;
    // Computing bound for v
    int64_t _870 = 0;
    if (_870 > 0) 
    goto _jump2210;
    fail_assertion("non-positive loop bound");
    _jump2210:;
    _868 = 0;
    int64_t _871 = 0; // v
    int64_t _872 = 0; // u
    _jump2211:; // Begin body of loop
    _868 += _871;
    _871++;
    if (_871 < _870)
    goto _jump2211;
    _871 = 0;
    _872++;
    if (_872 < _869)
    goto _jump2211;
    // End body of loop
    if (_868 > 0) 
    goto _jump2212;
    fail_assertion("non-positive loop bound");
    _jump2212:;
    _867 = 0;
    int64_t _873 = 0; // u
    _jump2213:; // Begin body of loop
    _867 += _544.d0;
    _873++;
    if (_873 < _868)
    goto _jump2213;
    // End body of loop
    if (_867 >= 0)
    goto _jump2214;
    fail_assertion("negative array index");
    _jump2214:;
    if (_867 < _864.d0)
    goto _jump2215;
    fail_assertion("index too large");
    _jump2215:;
    int64_t _874 = 0;
    _874 *= _864.d0;
    _874 += _867;
    int64_t _875 = _864.data[_874];
    if (_875 > 0) 
    goto _jump2216;
    fail_assertion("non-positive loop bound");
    _jump2216:;
    _861 = 0;
    int64_t _876 = 0; // u
    _jump2217:; // Begin body of loop
    bool _877 = _544.d0 != _544.d0;
    int64_t _878;
    if (!_877)
    goto _jump2218;
    int64_t _879;
    // Computing bound for v
    if (_544.d0 > 0) 
    goto _jump2219;
    fail_assertion("non-positive loop bound");
    _jump2219:;
    // Computing bound for w
    if (_544.d1 > 0) 
    goto _jump2220;
    fail_assertion("non-positive loop bound");
    _jump2220:;
    // Computing bound for x
    if (_876 > 0) 
    goto _jump2221;
    fail_assertion("non-positive loop bound");
    _jump2221:;
    _879 = 0;
    int64_t _880 = 0; // x
    int64_t _881 = 0; // w
    int64_t _882 = 0; // v
    _jump2222:; // Begin body of loop
    _879 += _880;
    _880++;
    if (_880 < _876)
    goto _jump2222;
    _880 = 0;
    _881++;
    if (_881 < _544.d1)
    goto _jump2222;
    _881 = 0;
    _882++;
    if (_882 < _544.d0)
    goto _jump2222;
    // End body of loop
    if (_544.d0 >= 0)
    goto _jump2223;
    fail_assertion("negative array index");
    _jump2223:;
    if (_544.d0 < _544.d0)
    goto _jump2224;
    fail_assertion("index too large");
    _jump2224:;
    if (_879 >= 0)
    goto _jump2225;
    fail_assertion("negative array index");
    _jump2225:;
    if (_879 < _544.d1)
    goto _jump2226;
    fail_assertion("index too large");
    _jump2226:;
    if (_544.d0 >= 0)
    goto _jump2227;
    fail_assertion("negative array index");
    _jump2227:;
    if (_544.d0 < _544.d2)
    goto _jump2228;
    fail_assertion("index too large");
    _jump2228:;
    int64_t _883 = 0;
    _883 *= _544.d0;
    _883 += _544.d0;
    _883 *= _544.d1;
    _883 += _879;
    _883 *= _544.d2;
    _883 += _544.d0;
    int64_t _884 = _544.data[_883];
    _878 = _884;
    goto _jump2229;
    _jump2218:;
    int64_t _885 = -_544.d0;
    if (_544.d0 >= 0)
    goto _jump2230;
    fail_assertion("negative array index");
    _jump2230:;
    if (_544.d0 < _544.d0)
    goto _jump2231;
    fail_assertion("index too large");
    _jump2231:;
    if (_544.d1 >= 0)
    goto _jump2232;
    fail_assertion("negative array index");
    _jump2232:;
    if (_544.d1 < _544.d1)
    goto _jump2233;
    fail_assertion("index too large");
    _jump2233:;
    if (_885 >= 0)
    goto _jump2234;
    fail_assertion("negative array index");
    _jump2234:;
    if (_885 < _544.d2)
    goto _jump2235;
    fail_assertion("index too large");
    _jump2235:;
    int64_t _886 = 0;
    _886 *= _544.d0;
    _886 += _544.d0;
    _886 *= _544.d1;
    _886 += _544.d1;
    _886 *= _544.d2;
    _886 += _885;
    int64_t _887 = _544.data[_886];
    _878 = _887;
    _jump2229:;
    _861 += _878;
    _876++;
    if (_876 < _875)
    goto _jump2217;
    // End body of loop
    if (_861 >= 0)
    goto _jump2236;
    fail_assertion("negative array index");
    _jump2236:;
    if (_861 < _838.d0)
    goto _jump2237;
    fail_assertion("index too large");
    _jump2237:;
    int64_t _888 = 0;
    _888 *= _838.d0;
    _888 += _861;
    _a1__a3__a2_int64_t _889 = _838.data[_888];
    if (_544.d1 >= 0)
    goto _jump2238;
    fail_assertion("negative array index");
    _jump2238:;
    if (_544.d1 < _889.d0)
    goto _jump2239;
    fail_assertion("index too large");
    _jump2239:;
    int64_t _890 = 0;
    _890 *= _889.d0;
    _890 += _544.d1;
    _a3__a2_int64_t _891 = _889.data[_890];
    bool _893 = true;
    bool _892 = _893;
    if (0 != _893)
    goto _jump2240;
    bool _895 = f();
    bool _894 = _895;
    if (0 == _895)
    goto _jump2241;
    bool _896 = f();
    _894 = _896;
    _jump2241:;
    _892 = _894;
    _jump2240:;
    bool _897 = !_892;
    _a1_double _898;
    if (!_897)
    goto _jump2242;
    _a1_bool _899;
    // Computing bound for u
    _899.d0 = _544.d2;
    if (_544.d2 > 0) 
    goto _jump2243;
    fail_assertion("non-positive loop bound");
    _jump2243:;
    // Computing total size of heap memory to allocate
    int64_t _900 = 1;
    _900 *= _544.d2;
    _900 *= sizeof(bool);
    _899.data = jpl_alloc(_900);
    int64_t _901 = 0; // u
    _jump2244:; // Begin body of loop
    bool _902 = f();
    int64_t _903 = 0;
    _903 *= _899.d0;
    _903 += _901;
    _899.data[_903] = _902;
    _901++;
    if (_901 < _544.d2)
    goto _jump2244;
    // End body of loop
    if (_544.d0 >= 0)
    goto _jump2245;
    fail_assertion("negative array index");
    _jump2245:;
    if (_544.d0 < _899.d0)
    goto _jump2246;
    fail_assertion("index too large");
    _jump2246:;
    int64_t _904 = 0;
    _904 *= _899.d0;
    _904 += _544.d0;
    bool _905 = _899.data[_904];
    _a1_double _906;
    if (!_905)
    goto _jump2247;
    _906 = _184;
    goto _jump2248;
    _jump2247:;
    int64_t _907 = 89;
    bool _908 = _544.d0 >= _907;
    _a1_double _909;
    if (!_908)
    goto _jump2249;
    _a1_double _910;
    _910.d0 = 1;
    _910.data = jpl_alloc(sizeof(double) * 1);
    _910.data[0] = _622;
    _909 = _910;
    goto _jump2250;
    _jump2249:;
    _a1_double _911;
    // Computing bound for u
    int64_t _912 = 561;
    _911.d0 = _912;
    if (_912 > 0) 
    goto _jump2251;
    fail_assertion("non-positive loop bound");
    _jump2251:;
    // Computing total size of heap memory to allocate
    int64_t _913 = 1;
    _913 *= _912;
    _913 *= sizeof(double);
    _911.data = jpl_alloc(_913);
    int64_t _914 = 0; // u
    _jump2252:; // Begin body of loop
    int64_t _915 = 0;
    _915 *= _911.d0;
    _915 += _914;
    _911.data[_915] = _0;
    _914++;
    if (_914 < _912)
    goto _jump2252;
    // End body of loop
    _909 = _911;
    _jump2250:;
    _906 = _909;
    _jump2248:;
    _898 = _906;
    goto _jump2253;
    _jump2242:;
    _898 = _184;
    _jump2253:;
    _a3_double _916;
    // Computing bound for u
    _916.d0 = _544.d1;
    if (_544.d1 > 0) 
    goto _jump2254;
    fail_assertion("non-positive loop bound");
    _jump2254:;
    // Computing bound for v
    _916.d1 = _544.d1;
    if (_544.d1 > 0) 
    goto _jump2255;
    fail_assertion("non-positive loop bound");
    _jump2255:;
    // Computing bound for w
    _916.d2 = _544.d1;
    if (_544.d1 > 0) 
    goto _jump2256;
    fail_assertion("non-positive loop bound");
    _jump2256:;
    // Computing total size of heap memory to allocate
    int64_t _917 = 1;
    _917 *= _544.d1;
    _917 *= _544.d1;
    _917 *= _544.d1;
    _917 *= sizeof(double);
    _916.data = jpl_alloc(_917);
    int64_t _918 = 0; // w
    int64_t _919 = 0; // v
    int64_t _920 = 0; // u
    _jump2257:; // Begin body of loop
    int64_t _921 = 0;
    _921 *= _916.d0;
    _921 += _920;
    _921 *= _916.d1;
    _921 += _919;
    _921 *= _916.d2;
    _921 += _918;
    _916.data[_921] = _622;
    _918++;
    if (_918 < _544.d1)
    goto _jump2257;
    _918 = 0;
    _919++;
    if (_919 < _544.d1)
    goto _jump2257;
    _919 = 0;
    _920++;
    if (_920 < _544.d1)
    goto _jump2257;
    // End body of loop
    int64_t _922 = t(_544.d1, _898, _916);
    int64_t _923 = _922 / _544.d1;
    int64_t _924 = 762;
    if (_544.d0 >= 0)
    goto _jump2258;
    fail_assertion("negative array index");
    _jump2258:;
    if (_544.d0 < _891.d0)
    goto _jump2259;
    fail_assertion("index too large");
    _jump2259:;
    if (_923 >= 0)
    goto _jump2260;
    fail_assertion("negative array index");
    _jump2260:;
    if (_923 < _891.d1)
    goto _jump2261;
    fail_assertion("index too large");
    _jump2261:;
    if (_924 >= 0)
    goto _jump2262;
    fail_assertion("negative array index");
    _jump2262:;
    if (_924 < _891.d2)
    goto _jump2263;
    fail_assertion("index too large");
    _jump2263:;
    int64_t _925 = 0;
    _925 *= _891.d0;
    _925 += _544.d0;
    _925 *= _891.d1;
    _925 += _923;
    _925 *= _891.d2;
    _925 += _924;
    _a2_int64_t _926 = _891.data[_925];
    _a3_e _927;
    // Computing bound for x
    _927.d0 = _544.d2;
    if (_544.d2 > 0) 
    goto _jump2264;
    fail_assertion("non-positive loop bound");
    _jump2264:;
    // Computing bound for y
    int64_t _928;
    // Computing bound for x
    int64_t _929 = 116;
    int64_t _930 = -_929;
    if (_930 > 0) 
    goto _jump2265;
    fail_assertion("non-positive loop bound");
    _jump2265:;
    // Computing bound for y
    int64_t _931 = 639;
    if (_931 > 0) 
    goto _jump2266;
    fail_assertion("non-positive loop bound");
    _jump2266:;
    _928 = 0;
    int64_t _932 = 0; // y
    int64_t _933 = 0; // x
    _jump2267:; // Begin body of loop
    _928 += _544.d0;
    _932++;
    if (_932 < _931)
    goto _jump2267;
    _932 = 0;
    _933++;
    if (_933 < _930)
    goto _jump2267;
    // End body of loop
    _927.d1 = _928;
    if (_928 > 0) 
    goto _jump2268;
    fail_assertion("non-positive loop bound");
    _jump2268:;
    // Computing bound for z
    _927.d2 = _544.d1;
    if (_544.d1 > 0) 
    goto _jump2269;
    fail_assertion("non-positive loop bound");
    _jump2269:;
    // Computing total size of heap memory to allocate
    int64_t _934 = 1;
    _934 *= _544.d2;
    _934 *= _928;
    _934 *= _544.d1;
    _934 *= sizeof(e);
    _927.data = jpl_alloc(_934);
    int64_t _935 = 0; // z
    int64_t _936 = 0; // y
    int64_t _937 = 0; // x
    _jump2270:; // Begin body of loop
    _a2_e _938;
    // Computing bound for A
    _938.d0 = _926.d0;
    if (_926.d0 > 0) 
    goto _jump2271;
    fail_assertion("non-positive loop bound");
    _jump2271:;
    // Computing bound for B
    int64_t _939;
    // Computing bound for A
    if (_926.d1 > 0) 
    goto _jump2272;
    fail_assertion("non-positive loop bound");
    _jump2272:;
    // Computing bound for B
    if (_544.d0 > 0) 
    goto _jump2273;
    fail_assertion("non-positive loop bound");
    _jump2273:;
    _939 = 0;
    int64_t _940 = 0; // B
    int64_t _941 = 0; // A
    _jump2274:; // Begin body of loop
    _939 += _544.d1;
    _940++;
    if (_940 < _544.d0)
    goto _jump2274;
    _940 = 0;
    _941++;
    if (_941 < _926.d1)
    goto _jump2274;
    // End body of loop
    _938.d1 = _939;
    if (_939 > 0) 
    goto _jump2275;
    fail_assertion("non-positive loop bound");
    _jump2275:;
    // Computing total size of heap memory to allocate
    int64_t _942 = 1;
    _942 *= _926.d0;
    _942 *= _939;
    _942 *= sizeof(e);
    _938.data = jpl_alloc(_942);
    int64_t _943 = 0; // B
    int64_t _944 = 0; // A
    _jump2276:; // Begin body of loop
    _a3_double _945;
    // Computing bound for C
    _945.d0 = _544.d1;
    if (_544.d1 > 0) 
    goto _jump2277;
    fail_assertion("non-positive loop bound");
    _jump2277:;
    // Computing bound for D
    _945.d1 = _544.d1;
    if (_544.d1 > 0) 
    goto _jump2278;
    fail_assertion("non-positive loop bound");
    _jump2278:;
    // Computing bound for E
    _945.d2 = _936;
    if (_936 > 0) 
    goto _jump2279;
    fail_assertion("non-positive loop bound");
    _jump2279:;
    // Computing total size of heap memory to allocate
    int64_t _946 = 1;
    _946 *= _544.d1;
    _946 *= _544.d1;
    _946 *= _936;
    _946 *= sizeof(double);
    _945.data = jpl_alloc(_946);
    int64_t _947 = 0; // E
    int64_t _948 = 0; // D
    int64_t _949 = 0; // C
    _jump2280:; // Begin body of loop
    int64_t _950 = 0;
    _950 *= _945.d0;
    _950 += _949;
    _950 *= _945.d1;
    _950 += _948;
    _950 *= _945.d2;
    _950 += _947;
    _945.data[_950] = _0;
    _947++;
    if (_947 < _936)
    goto _jump2280;
    _947 = 0;
    _948++;
    if (_948 < _544.d1)
    goto _jump2280;
    _948 = 0;
    _949++;
    if (_949 < _544.d1)
    goto _jump2280;
    // End body of loop
    e _951 = s(_945);
    int64_t _952 = 0;
    _952 *= _938.d0;
    _952 += _944;
    _952 *= _938.d1;
    _952 += _943;
    _938.data[_952] = _951;
    _943++;
    if (_943 < _939)
    goto _jump2276;
    _943 = 0;
    _944++;
    if (_944 < _926.d0)
    goto _jump2276;
    // End body of loop
    bool _953 = f();
    int64_t _954;
    if (!_953)
    goto _jump2281;
    _954 = _926.d0;
    goto _jump2282;
    _jump2281:;
    _954 = _544.d2;
    _jump2282:;
    int64_t _955 = -_954;
    if (_955 >= 0)
    goto _jump2283;
    fail_assertion("negative array index");
    _jump2283:;
    if (_955 < _938.d0)
    goto _jump2284;
    fail_assertion("index too large");
    _jump2284:;
    if (_544.d1 >= 0)
    goto _jump2285;
    fail_assertion("negative array index");
    _jump2285:;
    if (_544.d1 < _938.d1)
    goto _jump2286;
    fail_assertion("index too large");
    _jump2286:;
    int64_t _956 = 0;
    _956 *= _938.d0;
    _956 += _955;
    _956 *= _938.d1;
    _956 += _544.d1;
    e _957 = _938.data[_956];
    int64_t _958 = 0;
    _958 *= _927.d0;
    _958 += _937;
    _958 *= _927.d1;
    _958 += _936;
    _958 *= _927.d2;
    _958 += _935;
    _927.data[_958] = _957;
    _935++;
    if (_935 < _544.d1)
    goto _jump2270;
    _935 = 0;
    _936++;
    if (_936 < _928)
    goto _jump2270;
    _936 = 0;
    _937++;
    if (_937 < _544.d2)
    goto _jump2270;
    // End body of loop
    bool _960 = f();
    bool _959 = _960;
    if (0 == _960)
    goto _jump2287;
    bool _961 = false;
    _959 = _961;
    _jump2287:;
    bool _962 = !_959;
    int64_t _963;
    if (!_962)
    goto _jump2288;
    _a3_int64_t _964;
    // Computing bound for x
    _964.d0 = _544.d2;
    if (_544.d2 > 0) 
    goto _jump2289;
    fail_assertion("non-positive loop bound");
    _jump2289:;
    // Computing bound for y
    int64_t _965 = _544.d2 % _544.d0;
    _964.d1 = _965;
    if (_965 > 0) 
    goto _jump2290;
    fail_assertion("non-positive loop bound");
    _jump2290:;
    // Computing bound for z
    _964.d2 = _926.d0;
    if (_926.d0 > 0) 
    goto _jump2291;
    fail_assertion("non-positive loop bound");
    _jump2291:;
    // Computing total size of heap memory to allocate
    int64_t _966 = 1;
    _966 *= _544.d2;
    _966 *= _965;
    _966 *= _926.d0;
    _966 *= sizeof(int64_t);
    _964.data = jpl_alloc(_966);
    int64_t _967 = 0; // z
    int64_t _968 = 0; // y
    int64_t _969 = 0; // x
    _jump2292:; // Begin body of loop
    int64_t _970 = 0;
    _970 *= _964.d0;
    _970 += _969;
    _970 *= _964.d1;
    _970 += _968;
    _970 *= _964.d2;
    _970 += _967;
    _964.data[_970] = _969;
    _967++;
    if (_967 < _926.d0)
    goto _jump2292;
    _967 = 0;
    _968++;
    if (_968 < _965)
    goto _jump2292;
    _968 = 0;
    _969++;
    if (_969 < _544.d2)
    goto _jump2292;
    // End body of loop
    if (_544.d0 >= 0)
    goto _jump2293;
    fail_assertion("negative array index");
    _jump2293:;
    if (_544.d0 < _964.d0)
    goto _jump2294;
    fail_assertion("index too large");
    _jump2294:;
    if (_544.d2 >= 0)
    goto _jump2295;
    fail_assertion("negative array index");
    _jump2295:;
    if (_544.d2 < _964.d1)
    goto _jump2296;
    fail_assertion("index too large");
    _jump2296:;
    if (_926.d0 >= 0)
    goto _jump2297;
    fail_assertion("negative array index");
    _jump2297:;
    if (_926.d0 < _964.d2)
    goto _jump2298;
    fail_assertion("index too large");
    _jump2298:;
    int64_t _971 = 0;
    _971 *= _964.d0;
    _971 += _544.d0;
    _971 *= _964.d1;
    _971 += _544.d2;
    _971 *= _964.d2;
    _971 += _926.d0;
    int64_t _972 = _964.data[_971];
    _963 = _972;
    goto _jump2299;
    _jump2288:;
    bool _973 = f();
    _a3_int64_t _974;
    if (!_973)
    goto _jump2300;
    _974 = _544;
    goto _jump2301;
    _jump2300:;
    _a3_int64_t _975;
    // Computing bound for x
    _975.d0 = _926.d1;
    if (_926.d1 > 0) 
    goto _jump2302;
    fail_assertion("non-positive loop bound");
    _jump2302:;
    // Computing bound for y
    _975.d1 = _926.d1;
    if (_926.d1 > 0) 
    goto _jump2303;
    fail_assertion("non-positive loop bound");
    _jump2303:;
    // Computing bound for z
    _975.d2 = _544.d1;
    if (_544.d1 > 0) 
    goto _jump2304;
    fail_assertion("non-positive loop bound");
    _jump2304:;
    // Computing total size of heap memory to allocate
    int64_t _976 = 1;
    _976 *= _926.d1;
    _976 *= _926.d1;
    _976 *= _544.d1;
    _976 *= sizeof(int64_t);
    _975.data = jpl_alloc(_976);
    int64_t _977 = 0; // z
    int64_t _978 = 0; // y
    int64_t _979 = 0; // x
    _jump2305:; // Begin body of loop
    int64_t _980 = 412;
    int64_t _981 = 0;
    _981 *= _975.d0;
    _981 += _979;
    _981 *= _975.d1;
    _981 += _978;
    _981 *= _975.d2;
    _981 += _977;
    _975.data[_981] = _980;
    _977++;
    if (_977 < _544.d1)
    goto _jump2305;
    _977 = 0;
    _978++;
    if (_978 < _926.d1)
    goto _jump2305;
    _978 = 0;
    _979++;
    if (_979 < _926.d1)
    goto _jump2305;
    // End body of loop
    _974 = _975;
    _jump2301:;
    bool _982 = true;
    int64_t _983;
    if (!_982)
    goto _jump2306;
    _983 = _544.d0;
    goto _jump2307;
    _jump2306:;
    _983 = _544.d2;
    _jump2307:;
    int64_t _984 = _544.d0 * _544.d0;
    _a1_double _985;
    // Computing bound for x
    _985.d0 = _544.d2;
    if (_544.d2 > 0) 
    goto _jump2308;
    fail_assertion("non-positive loop bound");
    _jump2308:;
    // Computing total size of heap memory to allocate
    int64_t _986 = 1;
    _986 *= _544.d2;
    _986 *= sizeof(double);
    _985.data = jpl_alloc(_986);
    int64_t _987 = 0; // x
    _jump2309:; // Begin body of loop
    int64_t _988 = 0;
    _988 *= _985.d0;
    _988 += _987;
    _985.data[_988] = _622;
    _987++;
    if (_987 < _544.d2)
    goto _jump2309;
    // End body of loop
    _a3_double _989;
    // Computing bound for x
    _989.d0 = _544.d0;
    if (_544.d0 > 0) 
    goto _jump2310;
    fail_assertion("non-positive loop bound");
    _jump2310:;
    // Computing bound for y
    _989.d1 = _926.d0;
    if (_926.d0 > 0) 
    goto _jump2311;
    fail_assertion("non-positive loop bound");
    _jump2311:;
    // Computing bound for z
    _989.d2 = _544.d1;
    if (_544.d1 > 0) 
    goto _jump2312;
    fail_assertion("non-positive loop bound");
    _jump2312:;
    // Computing total size of heap memory to allocate
    int64_t _990 = 1;
    _990 *= _544.d0;
    _990 *= _926.d0;
    _990 *= _544.d1;
    _990 *= sizeof(double);
    _989.data = jpl_alloc(_990);
    int64_t _991 = 0; // z
    int64_t _992 = 0; // y
    int64_t _993 = 0; // x
    _jump2313:; // Begin body of loop
    int64_t _994 = 0;
    _994 *= _989.d0;
    _994 += _993;
    _994 *= _989.d1;
    _994 += _992;
    _994 *= _989.d2;
    _994 += _991;
    _989.data[_994] = _622;
    _991++;
    if (_991 < _544.d1)
    goto _jump2313;
    _991 = 0;
    _992++;
    if (_992 < _926.d0)
    goto _jump2313;
    _992 = 0;
    _993++;
    if (_993 < _544.d0)
    goto _jump2313;
    // End body of loop
    int64_t _995 = t(_984, _985, _989);
    if (_544.d1 >= 0)
    goto _jump2314;
    fail_assertion("negative array index");
    _jump2314:;
    if (_544.d1 < _974.d0)
    goto _jump2315;
    fail_assertion("index too large");
    _jump2315:;
    if (_983 >= 0)
    goto _jump2316;
    fail_assertion("negative array index");
    _jump2316:;
    if (_983 < _974.d1)
    goto _jump2317;
    fail_assertion("index too large");
    _jump2317:;
    if (_995 >= 0)
    goto _jump2318;
    fail_assertion("negative array index");
    _jump2318:;
    if (_995 < _974.d2)
    goto _jump2319;
    fail_assertion("index too large");
    _jump2319:;
    int64_t _996 = 0;
    _996 *= _974.d0;
    _996 += _544.d1;
    _996 *= _974.d1;
    _996 += _983;
    _996 *= _974.d2;
    _996 += _995;
    int64_t _997 = _974.data[_996];
    _963 = _997;
    _jump2299:;
    _a1_double _998;
    // Computing bound for x
    _998.d0 = _926.d1;
    if (_926.d1 > 0) 
    goto _jump2320;
    fail_assertion("non-positive loop bound");
    _jump2320:;
    // Computing total size of heap memory to allocate
    int64_t _999 = 1;
    _999 *= _926.d1;
    _999 *= sizeof(double);
    _998.data = jpl_alloc(_999);
    int64_t _1000 = 0; // x
    _jump2321:; // Begin body of loop
    int64_t _1001 = 0;
    _1001 *= _998.d0;
    _1001 += _1000;
    _998.data[_1001] = _622;
    _1000++;
    if (_1000 < _926.d1)
    goto _jump2321;
    // End body of loop
    _a3_double _1002;
    // Computing bound for x
    _1002.d0 = _544.d2;
    if (_544.d2 > 0) 
    goto _jump2322;
    fail_assertion("non-positive loop bound");
    _jump2322:;
    // Computing bound for y
    _1002.d1 = _544.d0;
    if (_544.d0 > 0) 
    goto _jump2323;
    fail_assertion("non-positive loop bound");
    _jump2323:;
    // Computing bound for z
    _1002.d2 = _544.d1;
    if (_544.d1 > 0) 
    goto _jump2324;
    fail_assertion("non-positive loop bound");
    _jump2324:;
    // Computing total size of heap memory to allocate
    int64_t _1003 = 1;
    _1003 *= _544.d2;
    _1003 *= _544.d0;
    _1003 *= _544.d1;
    _1003 *= sizeof(double);
    _1002.data = jpl_alloc(_1003);
    int64_t _1004 = 0; // z
    int64_t _1005 = 0; // y
    int64_t _1006 = 0; // x
    _jump2325:; // Begin body of loop
    double _1007 = 66.0;
    double _1008 = _622 - _1007;
    double _1009 = -_1008;
    int64_t _1010 = 0;
    _1010 *= _1002.d0;
    _1010 += _1006;
    _1010 *= _1002.d1;
    _1010 += _1005;
    _1010 *= _1002.d2;
    _1010 += _1004;
    _1002.data[_1010] = _1009;
    _1004++;
    if (_1004 < _544.d1)
    goto _jump2325;
    _1004 = 0;
    _1005++;
    if (_1005 < _544.d0)
    goto _jump2325;
    _1005 = 0;
    _1006++;
    if (_1006 < _544.d2)
    goto _jump2325;
    // End body of loop
    int64_t _1011 = t(_963, _998, _1002);
    _a3_double _1012;
    // Computing bound for x
    _1012.d0 = _926.d0;
    if (_926.d0 > 0) 
    goto _jump2326;
    fail_assertion("non-positive loop bound");
    _jump2326:;
    // Computing bound for y
    _1012.d1 = _544.d1;
    if (_544.d1 > 0) 
    goto _jump2327;
    fail_assertion("non-positive loop bound");
    _jump2327:;
    // Computing bound for z
    _1012.d2 = _544.d2;
    if (_544.d2 > 0) 
    goto _jump2328;
    fail_assertion("non-positive loop bound");
    _jump2328:;
    // Computing total size of heap memory to allocate
    int64_t _1013 = 1;
    _1013 *= _926.d0;
    _1013 *= _544.d1;
    _1013 *= _544.d2;
    _1013 *= sizeof(double);
    _1012.data = jpl_alloc(_1013);
    int64_t _1014 = 0; // z
    int64_t _1015 = 0; // y
    int64_t _1016 = 0; // x
    _jump2329:; // Begin body of loop
    double _1017 = 83.0;
    int64_t _1018 = 0;
    _1018 *= _1012.d0;
    _1018 += _1016;
    _1018 *= _1012.d1;
    _1018 += _1015;
    _1018 *= _1012.d2;
    _1018 += _1014;
    _1012.data[_1018] = _1017;
    _1014++;
    if (_1014 < _544.d2)
    goto _jump2329;
    _1014 = 0;
    _1015++;
    if (_1015 < _544.d1)
    goto _jump2329;
    _1015 = 0;
    _1016++;
    if (_1016 < _926.d0)
    goto _jump2329;
    // End body of loop
    e _1019 = s(_1012);
    double _1020 = _1019.a;
    double _1021 = 94.0;
    double _1022 = -_1021;
    _a1_double _1023;
    _1023.d0 = 3;
    _1023.data = jpl_alloc(sizeof(double) * 3);
    _1023.data[0] = _1020;
    _1023.data[1] = _1022;
    _1023.data[2] = _622;
    _a3_double _1024;
    // Computing bound for x
    int64_t _1025 = -_544.d2;
    int64_t _1026 = _544.d0 * _1025;
    _1024.d0 = _1026;
    if (_1026 > 0) 
    goto _jump2330;
    fail_assertion("non-positive loop bound");
    _jump2330:;
    // Computing bound for y
    int64_t _1027;
    // Computing bound for x
    if (_544.d2 > 0) 
    goto _jump2331;
    fail_assertion("non-positive loop bound");
    _jump2331:;
    // Computing bound for y
    int64_t _1028;
    // Computing bound for x
    if (_544.d2 > 0) 
    goto _jump2332;
    fail_assertion("non-positive loop bound");
    _jump2332:;
    // Computing bound for y
    if (_544.d2 > 0) 
    goto _jump2333;
    fail_assertion("non-positive loop bound");
    _jump2333:;
    _1028 = 0;
    int64_t _1029 = 0; // y
    int64_t _1030 = 0; // x
    _jump2334:; // Begin body of loop
    if (_544.d2 >= 0)
    goto _jump2335;
    fail_assertion("negative array index");
    _jump2335:;
    if (_544.d2 < _926.d0)
    goto _jump2336;
    fail_assertion("index too large");
    _jump2336:;
    if (_544.d2 >= 0)
    goto _jump2337;
    fail_assertion("negative array index");
    _jump2337:;
    if (_544.d2 < _926.d1)
    goto _jump2338;
    fail_assertion("index too large");
    _jump2338:;
    int64_t _1031 = 0;
    _1031 *= _926.d0;
    _1031 += _544.d2;
    _1031 *= _926.d1;
    _1031 += _544.d2;
    int64_t _1032 = _926.data[_1031];
    _1028 += _1032;
    _1029++;
    if (_1029 < _544.d2)
    goto _jump2334;
    _1029 = 0;
    _1030++;
    if (_1030 < _544.d2)
    goto _jump2334;
    // End body of loop
    if (_1028 > 0) 
    goto _jump2339;
    fail_assertion("non-positive loop bound");
    _jump2339:;
    _1027 = 0;
    int64_t _1033 = 0; // y
    int64_t _1034 = 0; // x
    _jump2340:; // Begin body of loop
    int64_t _1035 = _544.d2 + _1033;
    _1027 += _1035;
    _1033++;
    if (_1033 < _1028)
    goto _jump2340;
    _1033 = 0;
    _1034++;
    if (_1034 < _544.d2)
    goto _jump2340;
    // End body of loop
    _1024.d1 = _1027;
    if (_1027 > 0) 
    goto _jump2341;
    fail_assertion("non-positive loop bound");
    _jump2341:;
    // Computing bound for z
    _a1_int64_t _1036;
    _1036.d0 = 3;
    _1036.data = jpl_alloc(sizeof(int64_t) * 3);
    _1036.data[0] = _544.d1;
    _1036.data[1] = _544.d1;
    _1036.data[2] = _544.d1;
    if (_926.d0 >= 0)
    goto _jump2342;
    fail_assertion("negative array index");
    _jump2342:;
    if (_926.d0 < _1036.d0)
    goto _jump2343;
    fail_assertion("index too large");
    _jump2343:;
    int64_t _1037 = 0;
    _1037 *= _1036.d0;
    _1037 += _926.d0;
    int64_t _1038 = _1036.data[_1037];
    _1024.d2 = _1038;
    if (_1038 > 0) 
    goto _jump2344;
    fail_assertion("non-positive loop bound");
    _jump2344:;
    // Computing total size of heap memory to allocate
    int64_t _1039 = 1;
    _1039 *= _1026;
    _1039 *= _1027;
    _1039 *= _1038;
    _1039 *= sizeof(double);
    _1024.data = jpl_alloc(_1039);
    int64_t _1040 = 0; // z
    int64_t _1041 = 0; // y
    int64_t _1042 = 0; // x
    _jump2345:; // Begin body of loop
    double _1043;
    // Computing bound for A
    bool _1044 = f();
    int64_t _1045;
    if (!_1044)
    goto _jump2346;
    _1045 = _544.d1;
    goto _jump2347;
    _jump2346:;
    _1045 = _544.d0;
    _jump2347:;
    if (_1045 > 0) 
    goto _jump2348;
    fail_assertion("non-positive loop bound");
    _jump2348:;
    // Computing bound for B
    if (_926.d1 > 0) 
    goto _jump2349;
    fail_assertion("non-positive loop bound");
    _jump2349:;
    _1043 = 0;
    int64_t _1046 = 0; // B
    int64_t _1047 = 0; // A
    _jump2350:; // Begin body of loop
    _1043 += _622;
    _1046++;
    if (_1046 < _926.d1)
    goto _jump2350;
    _1046 = 0;
    _1047++;
    if (_1047 < _1045)
    goto _jump2350;
    // End body of loop
    double _1048 = -_1043;
    int64_t _1049 = 0;
    _1049 *= _1024.d0;
    _1049 += _1042;
    _1049 *= _1024.d1;
    _1049 += _1041;
    _1049 *= _1024.d2;
    _1049 += _1040;
    _1024.data[_1049] = _1048;
    _1040++;
    if (_1040 < _1038)
    goto _jump2345;
    _1040 = 0;
    _1041++;
    if (_1041 < _1027)
    goto _jump2345;
    _1041 = 0;
    _1042++;
    if (_1042 < _1026)
    goto _jump2345;
    // End body of loop
    int64_t _1050 = t(_544.d0, _1023, _1024);
    int64_t _1051 = -_926.d0;
    int64_t _1052 = _544.d1 + _1051;
    if (_1011 >= 0)
    goto _jump2351;
    fail_assertion("negative array index");
    _jump2351:;
    if (_1011 < _927.d0)
    goto _jump2352;
    fail_assertion("index too large");
    _jump2352:;
    if (_1050 >= 0)
    goto _jump2353;
    fail_assertion("negative array index");
    _jump2353:;
    if (_1050 < _927.d1)
    goto _jump2354;
    fail_assertion("index too large");
    _jump2354:;
    if (_1052 >= 0)
    goto _jump2355;
    fail_assertion("negative array index");
    _jump2355:;
    if (_1052 < _927.d2)
    goto _jump2356;
    fail_assertion("index too large");
    _jump2356:;
    int64_t _1053 = 0;
    _1053 *= _927.d0;
    _1053 += _1011;
    _1053 *= _927.d1;
    _1053 += _1050;
    _1053 *= _927.d2;
    _1053 += _1052;
    e _1054 = _927.data[_1053];
    double _1055 = _1054.a;
    _a1_bool _1056;
    // Computing bound for C
    _1056.d0 = _544.d0;
    if (_544.d0 > 0) 
    goto _jump2357;
    fail_assertion("non-positive loop bound");
    _jump2357:;
    // Computing total size of heap memory to allocate
    int64_t _1057 = 1;
    _1057 *= _544.d0;
    _1057 *= sizeof(bool);
    _1056.data = jpl_alloc(_1057);
    int64_t _1058 = 0; // C
    _jump2358:; // Begin body of loop
    bool _1059 = f();
    int64_t _1060 = 0;
    _1060 *= _1056.d0;
    _1060 += _1058;
    _1056.data[_1060] = _1059;
    _1058++;
    if (_1058 < _544.d0)
    goto _jump2358;
    // End body of loop
    if (_544.d1 >= 0)
    goto _jump2359;
    fail_assertion("negative array index");
    _jump2359:;
    if (_544.d1 < _1056.d0)
    goto _jump2360;
    fail_assertion("index too large");
    _jump2360:;
    int64_t _1061 = 0;
    _1061 *= _1056.d0;
    _1061 += _544.d1;
    bool _1062 = _1056.data[_1061];
    e _1063;
    if (!_1062)
    goto _jump2361;
    _a3_double _1064;
    // Computing bound for C
    _1064.d0 = _544.d1;
    if (_544.d1 > 0) 
    goto _jump2362;
    fail_assertion("non-positive loop bound");
    _jump2362:;
    // Computing bound for D
    _1064.d1 = _544.d1;
    if (_544.d1 > 0) 
    goto _jump2363;
    fail_assertion("non-positive loop bound");
    _jump2363:;
    // Computing bound for E
    _1064.d2 = _544.d0;
    if (_544.d0 > 0) 
    goto _jump2364;
    fail_assertion("non-positive loop bound");
    _jump2364:;
    // Computing total size of heap memory to allocate
    int64_t _1065 = 1;
    _1065 *= _544.d1;
    _1065 *= _544.d1;
    _1065 *= _544.d0;
    _1065 *= sizeof(double);
    _1064.data = jpl_alloc(_1065);
    int64_t _1066 = 0; // E
    int64_t _1067 = 0; // D
    int64_t _1068 = 0; // C
    _jump2365:; // Begin body of loop
    int64_t _1069 = 0;
    _1069 *= _1064.d0;
    _1069 += _1068;
    _1069 *= _1064.d1;
    _1069 += _1067;
    _1069 *= _1064.d2;
    _1069 += _1066;
    _1064.data[_1069] = _0;
    _1066++;
    if (_1066 < _544.d0)
    goto _jump2365;
    _1066 = 0;
    _1067++;
    if (_1067 < _544.d1)
    goto _jump2365;
    _1067 = 0;
    _1068++;
    if (_1068 < _544.d1)
    goto _jump2365;
    // End body of loop
    e _1070 = s(_1064);
    void_t _1071 = _1070.b;
    e _1072 = { _622, _1071 };
    _1063 = _1072;
    goto _jump2366;
    _jump2361:;
    _a3_double _1073;
    // Computing bound for C
    _1073.d0 = _544.d2;
    if (_544.d2 > 0) 
    goto _jump2367;
    fail_assertion("non-positive loop bound");
    _jump2367:;
    // Computing bound for D
    _1073.d1 = _544.d1;
    if (_544.d1 > 0) 
    goto _jump2368;
    fail_assertion("non-positive loop bound");
    _jump2368:;
    // Computing bound for E
    _1073.d2 = _544.d1;
    if (_544.d1 > 0) 
    goto _jump2369;
    fail_assertion("non-positive loop bound");
    _jump2369:;
    // Computing total size of heap memory to allocate
    int64_t _1074 = 1;
    _1074 *= _544.d2;
    _1074 *= _544.d1;
    _1074 *= _544.d1;
    _1074 *= sizeof(double);
    _1073.data = jpl_alloc(_1074);
    int64_t _1075 = 0; // E
    int64_t _1076 = 0; // D
    int64_t _1077 = 0; // C
    _jump2370:; // Begin body of loop
    int64_t _1078 = 0;
    _1078 *= _1073.d0;
    _1078 += _1077;
    _1078 *= _1073.d1;
    _1078 += _1076;
    _1078 *= _1073.d2;
    _1078 += _1075;
    _1073.data[_1078] = _1055;
    _1075++;
    if (_1075 < _544.d1)
    goto _jump2370;
    _1075 = 0;
    _1076++;
    if (_1076 < _544.d1)
    goto _jump2370;
    _1076 = 0;
    _1077++;
    if (_1077 < _544.d2)
    goto _jump2370;
    // End body of loop
    e _1079 = s(_1073);
    _1063 = _1079;
    _jump2366:;
    double _1080 = _1063.a;
    int64_t _1081 = -_544.d2;
    bool _1082 = _544.d0 > _1081;
    double _1083;
    if (!_1082)
    goto _jump2371;
    double _1084;
    // Computing bound for C
    if (_544.d1 > 0) 
    goto _jump2372;
    fail_assertion("non-positive loop bound");
    _jump2372:;
    // Computing bound for D
    if (_926.d0 >= 0)
    goto _jump2373;
    fail_assertion("negative array index");
    _jump2373:;
    if (_926.d0 < _544.d0)
    goto _jump2374;
    fail_assertion("index too large");
    _jump2374:;
    if (_544.d0 >= 0)
    goto _jump2375;
    fail_assertion("negative array index");
    _jump2375:;
    if (_544.d0 < _544.d1)
    goto _jump2376;
    fail_assertion("index too large");
    _jump2376:;
    if (_544.d1 >= 0)
    goto _jump2377;
    fail_assertion("negative array index");
    _jump2377:;
    if (_544.d1 < _544.d2)
    goto _jump2378;
    fail_assertion("index too large");
    _jump2378:;
    int64_t _1085 = 0;
    _1085 *= _544.d0;
    _1085 += _926.d0;
    _1085 *= _544.d1;
    _1085 += _544.d0;
    _1085 *= _544.d2;
    _1085 += _544.d1;
    int64_t _1086 = _544.data[_1085];
    if (_1086 > 0) 
    goto _jump2379;
    fail_assertion("non-positive loop bound");
    _jump2379:;
    _1084 = 0;
    int64_t _1087 = 0; // D
    int64_t _1088 = 0; // C
    _jump2380:; // Begin body of loop
    double _1089;
    // Computing bound for E
    if (_544.d1 > 0) 
    goto _jump2381;
    fail_assertion("non-positive loop bound");
    _jump2381:;
    // Computing bound for F
    if (_544.d2 > 0) 
    goto _jump2382;
    fail_assertion("non-positive loop bound");
    _jump2382:;
    _1089 = 0;
    int64_t _1090 = 0; // F
    int64_t _1091 = 0; // E
    _jump2383:; // Begin body of loop
    _1089 += _0;
    _1090++;
    if (_1090 < _544.d2)
    goto _jump2383;
    _1090 = 0;
    _1091++;
    if (_1091 < _544.d1)
    goto _jump2383;
    // End body of loop
    _1084 += _1089;
    _1087++;
    if (_1087 < _1086)
    goto _jump2380;
    _1087 = 0;
    _1088++;
    if (_1088 < _544.d1)
    goto _jump2380;
    // End body of loop
    _1083 = _1084;
    goto _jump2384;
    _jump2371:;
    _1083 = _622;
    _jump2384:;
    double _1092 = fmod(_1083, _0);
    double _1093 = -_1092;
    if (_544.d2 >= 0)
    goto _jump2385;
    fail_assertion("negative array index");
    _jump2385:;
    if (_544.d2 < _184.d0)
    goto _jump2386;
    fail_assertion("index too large");
    _jump2386:;
    int64_t _1094 = 0;
    _1094 *= _184.d0;
    _1094 += _544.d2;
    double _1095 = _184.data[_1094];
    double _1096 = _1093 - _1095;
    bool _1097 = _1080 != _1096;
    if (0 != _1097)
    goto _jump2387;
    fail_assertion("C");
    _jump2387:;
    _a1__a3_int64_t _1098;
    _1098.d0 = 3;
    _1098.data = jpl_alloc(sizeof(_a3_int64_t) * 3);
    _1098.data[0] = _544;
    _1098.data[1] = _544;
    _1098.data[2] = _544;
    int64_t _1099 = -_544.d0;
    _a1_double _1100;
    _1100.d0 = 3;
    _1100.data = jpl_alloc(sizeof(double) * 3);
    _1100.data[0] = _622;
    _1100.data[1] = _622;
    _1100.data[2] = _622;
    _a3_double _1101;
    // Computing bound for D
    _1101.d0 = _544.d1;
    if (_544.d1 > 0) 
    goto _jump2388;
    fail_assertion("non-positive loop bound");
    _jump2388:;
    // Computing bound for E
    _1101.d1 = _544.d1;
    if (_544.d1 > 0) 
    goto _jump2389;
    fail_assertion("non-positive loop bound");
    _jump2389:;
    // Computing bound for F
    _1101.d2 = _544.d1;
    if (_544.d1 > 0) 
    goto _jump2390;
    fail_assertion("non-positive loop bound");
    _jump2390:;
    // Computing total size of heap memory to allocate
    int64_t _1102 = 1;
    _1102 *= _544.d1;
    _1102 *= _544.d1;
    _1102 *= _544.d1;
    _1102 *= sizeof(double);
    _1101.data = jpl_alloc(_1102);
    int64_t _1103 = 0; // F
    int64_t _1104 = 0; // E
    int64_t _1105 = 0; // D
    _jump2391:; // Begin body of loop
    double _1106 = -_1055;
    double _1107 = 97.0;
    double _1108 = 69.0;
    rgba _1109 = { _1106, _1107, _0, _1108 };
    double _1110 = _1109.g;
    int64_t _1111 = 0;
    _1111 *= _1101.d0;
    _1111 += _1105;
    _1111 *= _1101.d1;
    _1111 += _1104;
    _1111 *= _1101.d2;
    _1111 += _1103;
    _1101.data[_1111] = _1110;
    _1103++;
    if (_1103 < _544.d1)
    goto _jump2391;
    _1103 = 0;
    _1104++;
    if (_1104 < _544.d1)
    goto _jump2391;
    _1104 = 0;
    _1105++;
    if (_1105 < _544.d1)
    goto _jump2391;
    // End body of loop
    int64_t _1112 = t(_1099, _1100, _1101);
    int64_t _1113 = _1112 % _926.d0;
    int64_t _1114 = 876;
    bool _1115 = _1113 >= _1114;
    show("(BoolType)", &_1115);
}

