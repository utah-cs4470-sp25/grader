
#include <math.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include "rt/runtime.h"

typedef struct { } void_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  double *data;
} _a2_double;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  _a2_double *data;
} _a3__a2_double;

typedef struct {
  int64_t d0;
  int64_t *data;
} _a1_int64_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  int64_t *data;
} _a3_int64_t;

typedef struct {
  int64_t d0;
  _a3_int64_t *data;
} _a1__a3_int64_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  bool *data;
} _a2_bool;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t *data;
} _a2_int64_t;

typedef struct {
  int64_t d0;
  _a1_int64_t *data;
} _a1__a1_int64_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  bool *data;
} _a3_bool;

typedef struct {
  int64_t d0;
  _a3_bool *data;
} _a1__a3_bool;

typedef struct {
  int64_t d0;
  int64_t d1;
  _a3_bool *data;
} _a2__a3_bool;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  _a3_bool *data;
} _a3__a3_bool;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  _a3__a3_bool *data;
} _a3__a3__a3_bool;

typedef struct {
  int64_t d0;
  _a3__a3__a3_bool *data;
} _a1__a3__a3__a3_bool;

typedef struct {
  int64_t d0;
  int64_t d1;
  _a1_int64_t *data;
} _a2__a1_int64_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  double *data;
} _a3_double;

typedef struct {
  int64_t d0;
  int64_t d1;
  _a2_double *data;
} _a2__a2_double;

typedef struct {
  int64_t d0;
  _a2__a2_double *data;
} _a1__a2__a2_double;

typedef struct {
  int64_t d0;
  bool *data;
} _a1_bool;

typedef struct {
  int64_t d0;
  double *data;
} _a1_double;

typedef struct {
  int64_t d0;
  _a2_double *data;
} _a1__a2_double;

typedef struct {
  int64_t d0;
  int64_t d1;
  _a3_int64_t *data;
} _a2__a3_int64_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  _a2__a3_int64_t *data;
} _a3__a2__a3_int64_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  _a2_int64_t *data;
} _a2__a2_int64_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  _a2_rgba *data;
} _a3__a2_rgba;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  _a3__a2_rgba *data;
} _a3__a3__a2_rgba;

typedef struct {
    double a;
    int64_t b;
    bool c;
} e;

typedef struct {
  int64_t d0;
  int64_t d1;
  e *data;
} _a2_e;

typedef struct {
  int64_t d0;
  _a2_e *data;
} _a1__a2_e;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  _a1__a2_e *data;
} _a3__a1__a2_e;

typedef struct {
  int64_t d0;
  _a1__a2_e *data;
} _a1__a1__a2_e;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  _a1__a1__a2_e *data;
} _a3__a1__a1__a2_e;

typedef struct {
  int64_t d0;
  int64_t d1;
  _a2_e *data;
} _a2__a2_e;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  _a2__a2_double *data;
} _a3__a2__a2_double;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  _a3__a2__a2_double *data;
} _a3__a3__a2__a2_double;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  _a2_int64_t *data;
} _a3__a2_int64_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  _a1__a2_e *data;
} _a2__a1__a2_e;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  e *data;
} _a3_e;

typedef struct {
  int64_t d0;
  e *data;
} _a1_e;

typedef struct {
    bool a;
    e b;
} u;

typedef struct {
  int64_t d0;
  rgba *data;
} _a1_rgba;

typedef struct {
  int64_t d0;
  int64_t d1;
  _a1_rgba *data;
} _a2__a1_rgba;

typedef struct {
  int64_t d0;
  int64_t d1;
  _a2_bool *data;
} _a2__a2_bool;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  _a3_int64_t *data;
} _a3__a3_int64_t;

_a2_double a() {
    double _0 = 98.0;
    double _1 = -_0;
    double _2 = 72.0;
    double _3 = -_2;
    bool _4 = _1 == _3;
    _a3__a2_double _5;
    if (!_4)
    goto _jump1;
    _a3__a2_double _6;
    // Computing bound for b
    int64_t _7 = 22;
    _6.d0 = _7;
    if (_7 > 0) 
    goto _jump2;
    fail_assertion("non-positive loop bound");
    _jump2:;
    // Computing bound for c
    bool _8 = true;
    int64_t _9;
    if (!_8)
    goto _jump3;
    int64_t _10 = 121;
    _9 = _10;
    goto _jump4;
    _jump3:;
    int64_t _11 = 495;
    _9 = _11;
    _jump4:;
    int64_t _12 = 57;
    int64_t _13 = _9 - _12;
    _6.d1 = _13;
    if (_13 > 0) 
    goto _jump5;
    fail_assertion("non-positive loop bound");
    _jump5:;
    // Computing bound for d
    int64_t _14;
    // Computing bound for b
    int64_t _15 = 920;
    int64_t _16 = -_15;
    if (_16 > 0) 
    goto _jump6;
    fail_assertion("non-positive loop bound");
    _jump6:;
    // Computing bound for c
    int64_t _17 = 435;
    if (_17 > 0) 
    goto _jump7;
    fail_assertion("non-positive loop bound");
    _jump7:;
    _14 = 0;
    int64_t _18 = 0; // c
    int64_t _19 = 0; // b
    _jump8:; // Begin body of loop
    _14 += _19;
    _18++;
    if (_18 < _17)
    goto _jump8;
    _18 = 0;
    _19++;
    if (_19 < _16)
    goto _jump8;
    // End body of loop
    _6.d2 = _14;
    if (_14 > 0) 
    goto _jump9;
    fail_assertion("non-positive loop bound");
    _jump9:;
    // Computing total size of heap memory to allocate
    int64_t _20 = 1;
    _20 *= _7;
    _20 *= _13;
    _20 *= _14;
    _20 *= sizeof(_a2_double);
    _6.data = jpl_alloc(_20);
    int64_t _21 = 0; // d
    int64_t _22 = 0; // c
    int64_t _23 = 0; // b
    _jump10:; // Begin body of loop
    bool _24 = false;
    _a2_double _25;
    if (!_24)
    goto _jump11;
    _a2_double _26 = a();
    _25 = _26;
    goto _jump12;
    _jump11:;
    _a2_double _27;
    // Computing bound for e
    _27.d0 = _23;
    if (_23 > 0) 
    goto _jump13;
    fail_assertion("non-positive loop bound");
    _jump13:;
    // Computing bound for f
    int64_t _28 = 744;
    _27.d1 = _28;
    if (_28 > 0) 
    goto _jump14;
    fail_assertion("non-positive loop bound");
    _jump14:;
    // Computing total size of heap memory to allocate
    int64_t _29 = 1;
    _29 *= _23;
    _29 *= _28;
    _29 *= sizeof(double);
    _27.data = jpl_alloc(_29);
    int64_t _30 = 0; // f
    int64_t _31 = 0; // e
    _jump15:; // Begin body of loop
    double _32 = 14.0;
    int64_t _33 = 0;
    _33 *= _27.d0;
    _33 += _31;
    _33 *= _27.d1;
    _33 += _30;
    _27.data[_33] = _32;
    _30++;
    if (_30 < _28)
    goto _jump15;
    _30 = 0;
    _31++;
    if (_31 < _23)
    goto _jump15;
    // End body of loop
    _25 = _27;
    _jump12:;
    int64_t _34 = 0;
    _34 *= _6.d0;
    _34 += _23;
    _34 *= _6.d1;
    _34 += _22;
    _34 *= _6.d2;
    _34 += _21;
    _6.data[_34] = _25;
    _21++;
    if (_21 < _14)
    goto _jump10;
    _21 = 0;
    _22++;
    if (_22 < _13)
    goto _jump10;
    _22 = 0;
    _23++;
    if (_23 < _7)
    goto _jump10;
    // End body of loop
    _5 = _6;
    goto _jump16;
    _jump1:;
    _a3__a2_double _35;
    // Computing bound for b
    int64_t _36;
    // Computing bound for b
    int64_t _37 = 557;
    if (_37 > 0) 
    goto _jump17;
    fail_assertion("non-positive loop bound");
    _jump17:;
    _36 = 0;
    int64_t _38 = 0; // b
    _jump18:; // Begin body of loop
    int64_t _39 = 525;
    int64_t _40 = -_39;
    _36 += _40;
    _38++;
    if (_38 < _37)
    goto _jump18;
    // End body of loop
    _35.d0 = _36;
    if (_36 > 0) 
    goto _jump19;
    fail_assertion("non-positive loop bound");
    _jump19:;
    // Computing bound for c
    int64_t _41;
    // Computing bound for b
    bool _42 = true;
    int64_t _43;
    if (!_42)
    goto _jump20;
    int64_t _44 = 875;
    _43 = _44;
    goto _jump21;
    _jump20:;
    int64_t _45 = 239;
    _43 = _45;
    _jump21:;
    if (_43 > 0) 
    goto _jump22;
    fail_assertion("non-positive loop bound");
    _jump22:;
    // Computing bound for c
    int64_t _46 = 700;
    if (_46 > 0) 
    goto _jump23;
    fail_assertion("non-positive loop bound");
    _jump23:;
    _41 = 0;
    int64_t _47 = 0; // c
    int64_t _48 = 0; // b
    _jump24:; // Begin body of loop
    int64_t _49 = 409;
    _41 += _49;
    _47++;
    if (_47 < _46)
    goto _jump24;
    _47 = 0;
    _48++;
    if (_48 < _43)
    goto _jump24;
    // End body of loop
    _35.d1 = _41;
    if (_41 > 0) 
    goto _jump25;
    fail_assertion("non-positive loop bound");
    _jump25:;
    // Computing bound for d
    bool _50 = false;
    int64_t _51;
    if (!_50)
    goto _jump26;
    int64_t _52 = 640;
    _51 = _52;
    goto _jump27;
    _jump26:;
    int64_t _53 = 568;
    int64_t _54 = -_53;
    _51 = _54;
    _jump27:;
    _35.d2 = _51;
    if (_51 > 0) 
    goto _jump28;
    fail_assertion("non-positive loop bound");
    _jump28:;
    // Computing total size of heap memory to allocate
    int64_t _55 = 1;
    _55 *= _36;
    _55 *= _41;
    _55 *= _51;
    _55 *= sizeof(_a2_double);
    _35.data = jpl_alloc(_55);
    int64_t _56 = 0; // d
    int64_t _57 = 0; // c
    int64_t _58 = 0; // b
    _jump29:; // Begin body of loop
    _a2_double _59 = a();
    int64_t _60 = 0;
    _60 *= _35.d0;
    _60 += _58;
    _60 *= _35.d1;
    _60 += _57;
    _60 *= _35.d2;
    _60 += _56;
    _35.data[_60] = _59;
    _56++;
    if (_56 < _51)
    goto _jump29;
    _56 = 0;
    _57++;
    if (_57 < _41)
    goto _jump29;
    _57 = 0;
    _58++;
    if (_58 < _36)
    goto _jump29;
    // End body of loop
    _5 = _35;
    _jump16:;
    int64_t _61;
    // Computing bound for b
    int64_t _62;
    // Computing bound for b
    int64_t _63 = 352;
    if (_63 > 0) 
    goto _jump30;
    fail_assertion("non-positive loop bound");
    _jump30:;
    _62 = 0;
    int64_t _64 = 0; // b
    _jump31:; // Begin body of loop
    int64_t _65 = 214;
    int64_t _66 = -_65;
    _62 += _66;
    _64++;
    if (_64 < _63)
    goto _jump31;
    // End body of loop
    int64_t _67 = 882;
    _a1_int64_t _68;
    _68.d0 = 1;
    _68.data = jpl_alloc(sizeof(int64_t) * 1);
    _68.data[0] = _67;
    int64_t _69 = 329;
    int64_t _70 = -_69;
    if (_70 >= 0)
    goto _jump32;
    fail_assertion("negative array index");
    _jump32:;
    if (_70 < _68.d0)
    goto _jump33;
    fail_assertion("index too large");
    _jump33:;
    int64_t _71 = 0;
    _71 *= _68.d0;
    _71 += _70;
    int64_t _72 = _68.data[_71];
    int64_t _73 = _62 + _72;
    if (_73 > 0) 
    goto _jump34;
    fail_assertion("non-positive loop bound");
    _jump34:;
    _61 = 0;
    int64_t _74 = 0; // b
    _jump35:; // Begin body of loop
    _61 += _74;
    _74++;
    if (_74 < _73)
    goto _jump35;
    // End body of loop
    bool _77 = false;
    bool _76 = _77;
    if (0 != _77)
    goto _jump36;
    bool _78 = false;
    _76 = _78;
    _jump36:;
    bool _75 = _76;
    if (0 != _76)
    goto _jump37;
    int64_t _79 = 904;
    int64_t _80 = 550;
    int64_t _81 = _79 / _80;
    int64_t _82 = 155;
    bool _83 = _81 == _82;
    _75 = _83;
    _jump37:;
    int64_t _84;
    if (!_75)
    goto _jump38;
    int64_t _85;
    // Computing bound for b
    int64_t _86 = 940;
    int64_t _87 = -_86;
    if (_87 > 0) 
    goto _jump39;
    fail_assertion("non-positive loop bound");
    _jump39:;
    _85 = 0;
    int64_t _88 = 0; // b
    _jump40:; // Begin body of loop
    bool _89 = false;
    bool _90 = !_89;
    int64_t _91;
    if (!_90)
    goto _jump41;
    int64_t _92 = 334;
    _91 = _92;
    goto _jump42;
    _jump41:;
    int64_t _93 = 227;
    _91 = _93;
    _jump42:;
    _85 += _91;
    _88++;
    if (_88 < _87)
    goto _jump40;
    // End body of loop
    _84 = _85;
    goto _jump43;
    _jump38:;
    int64_t _94;
    // Computing bound for b
    int64_t _95 = 322;
    if (_95 > 0) 
    goto _jump44;
    fail_assertion("non-positive loop bound");
    _jump44:;
    // Computing bound for c
    int64_t _96 = 189;
    if (_96 > 0) 
    goto _jump45;
    fail_assertion("non-positive loop bound");
    _jump45:;
    // Computing bound for d
    int64_t _97 = 65;
    int64_t _98 = -_97;
    if (_98 > 0) 
    goto _jump46;
    fail_assertion("non-positive loop bound");
    _jump46:;
    _94 = 0;
    int64_t _99 = 0; // d
    int64_t _100 = 0; // c
    int64_t _101 = 0; // b
    _jump47:; // Begin body of loop
    _94 += _100;
    _99++;
    if (_99 < _98)
    goto _jump47;
    _99 = 0;
    _100++;
    if (_100 < _96)
    goto _jump47;
    _100 = 0;
    _101++;
    if (_101 < _95)
    goto _jump47;
    // End body of loop
    int64_t _102;
    // Computing bound for b
    int64_t _103;
    // Computing bound for b
    int64_t _104 = 922;
    if (_104 > 0) 
    goto _jump48;
    fail_assertion("non-positive loop bound");
    _jump48:;
    // Computing bound for c
    int64_t _105 = 357;
    if (_105 > 0) 
    goto _jump49;
    fail_assertion("non-positive loop bound");
    _jump49:;
    _103 = 0;
    int64_t _106 = 0; // c
    int64_t _107 = 0; // b
    _jump50:; // Begin body of loop
    _103 += _107;
    _106++;
    if (_106 < _105)
    goto _jump50;
    _106 = 0;
    _107++;
    if (_107 < _104)
    goto _jump50;
    // End body of loop
    if (_103 > 0) 
    goto _jump51;
    fail_assertion("non-positive loop bound");
    _jump51:;
    // Computing bound for c
    int64_t _108 = 113;
    int64_t _109 = -_108;
    if (_109 > 0) 
    goto _jump52;
    fail_assertion("non-positive loop bound");
    _jump52:;
    // Computing bound for d
    int64_t _110 = 850;
    if (_110 > 0) 
    goto _jump53;
    fail_assertion("non-positive loop bound");
    _jump53:;
    _102 = 0;
    int64_t _111 = 0; // d
    int64_t _112 = 0; // c
    int64_t _113 = 0; // b
    _jump54:; // Begin body of loop
    _102 += _112;
    _111++;
    if (_111 < _110)
    goto _jump54;
    _111 = 0;
    _112++;
    if (_112 < _109)
    goto _jump54;
    _112 = 0;
    _113++;
    if (_113 < _103)
    goto _jump54;
    // End body of loop
    int64_t _114 = _94 * _102;
    _84 = _114;
    _jump43:;
    int64_t _115 = 264;
    int64_t _116 = 87;
    int64_t _117 = _115 % _116;
    int64_t _118 = 265;
    bool _119 = _117 != _118;
    int64_t _120;
    if (!_119)
    goto _jump55;
    int64_t _121 = 212;
    int64_t _122 = -_121;
    _120 = _122;
    goto _jump56;
    _jump55:;
    int64_t _123 = 355;
    int64_t _124 = 584;
    int64_t _125 = _123 / _124;
    int64_t _126 = -_125;
    _120 = _126;
    _jump56:;
    int64_t _127;
    // Computing bound for b
    int64_t _128;
    // Computing bound for b
    int64_t _129 = 977;
    if (_129 > 0) 
    goto _jump57;
    fail_assertion("non-positive loop bound");
    _jump57:;
    _128 = 0;
    int64_t _130 = 0; // b
    _jump58:; // Begin body of loop
    _128 += _130;
    _130++;
    if (_130 < _129)
    goto _jump58;
    // End body of loop
    if (_128 > 0) 
    goto _jump59;
    fail_assertion("non-positive loop bound");
    _jump59:;
    // Computing bound for c
    int64_t _131 = 822;
    if (_131 > 0) 
    goto _jump60;
    fail_assertion("non-positive loop bound");
    _jump60:;
    _127 = 0;
    int64_t _132 = 0; // c
    int64_t _133 = 0; // b
    _jump61:; // Begin body of loop
    int64_t _134 = 749;
    _127 += _134;
    _132++;
    if (_132 < _131)
    goto _jump61;
    _132 = 0;
    _133++;
    if (_133 < _128)
    goto _jump61;
    // End body of loop
    int64_t _135 = _120 % _127;
    if (_61 >= 0)
    goto _jump62;
    fail_assertion("negative array index");
    _jump62:;
    if (_61 < _5.d0)
    goto _jump63;
    fail_assertion("index too large");
    _jump63:;
    if (_84 >= 0)
    goto _jump64;
    fail_assertion("negative array index");
    _jump64:;
    if (_84 < _5.d1)
    goto _jump65;
    fail_assertion("index too large");
    _jump65:;
    if (_135 >= 0)
    goto _jump66;
    fail_assertion("negative array index");
    _jump66:;
    if (_135 < _5.d2)
    goto _jump67;
    fail_assertion("index too large");
    _jump67:;
    int64_t _136 = 0;
    _136 *= _5.d0;
    _136 += _61;
    _136 *= _5.d1;
    _136 += _84;
    _136 *= _5.d2;
    _136 += _135;
    _a2_double _137 = _5.data[_136];
    _a1__a3_int64_t _138;
    // Computing bound for b
    int64_t _139;
    // Computing bound for b
    int64_t _140 = 814;
    if (_140 > 0) 
    goto _jump68;
    fail_assertion("non-positive loop bound");
    _jump68:;
    _139 = 0;
    int64_t _141 = 0; // b
    _jump69:; // Begin body of loop
    _139 += _141;
    _141++;
    if (_141 < _140)
    goto _jump69;
    // End body of loop
    _138.d0 = _139;
    if (_139 > 0) 
    goto _jump70;
    fail_assertion("non-positive loop bound");
    _jump70:;
    // Computing total size of heap memory to allocate
    int64_t _142 = 1;
    _142 *= _139;
    _142 *= sizeof(_a3_int64_t);
    _138.data = jpl_alloc(_142);
    int64_t _143 = 0; // b
    _jump71:; // Begin body of loop
    bool _144 = true;
    _a3_int64_t _145;
    if (!_144)
    goto _jump72;
    _a3_int64_t _146;
    // Computing bound for c
    _146.d0 = _143;
    if (_143 > 0) 
    goto _jump73;
    fail_assertion("non-positive loop bound");
    _jump73:;
    // Computing bound for d
    int64_t _147 = 763;
    _146.d1 = _147;
    if (_147 > 0) 
    goto _jump74;
    fail_assertion("non-positive loop bound");
    _jump74:;
    // Computing bound for e
    _146.d2 = _143;
    if (_143 > 0) 
    goto _jump75;
    fail_assertion("non-positive loop bound");
    _jump75:;
    // Computing total size of heap memory to allocate
    int64_t _148 = 1;
    _148 *= _143;
    _148 *= _147;
    _148 *= _143;
    _148 *= sizeof(int64_t);
    _146.data = jpl_alloc(_148);
    int64_t _149 = 0; // e
    int64_t _150 = 0; // d
    int64_t _151 = 0; // c
    _jump76:; // Begin body of loop
    int64_t _152 = 964;
    int64_t _153 = 0;
    _153 *= _146.d0;
    _153 += _151;
    _153 *= _146.d1;
    _153 += _150;
    _153 *= _146.d2;
    _153 += _149;
    _146.data[_153] = _152;
    _149++;
    if (_149 < _143)
    goto _jump76;
    _149 = 0;
    _150++;
    if (_150 < _147)
    goto _jump76;
    _150 = 0;
    _151++;
    if (_151 < _143)
    goto _jump76;
    // End body of loop
    _145 = _146;
    goto _jump77;
    _jump72:;
    _a3_int64_t _154;
    // Computing bound for c
    _154.d0 = _143;
    if (_143 > 0) 
    goto _jump78;
    fail_assertion("non-positive loop bound");
    _jump78:;
    // Computing bound for d
    int64_t _155 = 431;
    _154.d1 = _155;
    if (_155 > 0) 
    goto _jump79;
    fail_assertion("non-positive loop bound");
    _jump79:;
    // Computing bound for e
    int64_t _156 = 144;
    _154.d2 = _156;
    if (_156 > 0) 
    goto _jump80;
    fail_assertion("non-positive loop bound");
    _jump80:;
    // Computing total size of heap memory to allocate
    int64_t _157 = 1;
    _157 *= _143;
    _157 *= _155;
    _157 *= _156;
    _157 *= sizeof(int64_t);
    _154.data = jpl_alloc(_157);
    int64_t _158 = 0; // e
    int64_t _159 = 0; // d
    int64_t _160 = 0; // c
    _jump81:; // Begin body of loop
    int64_t _161 = 0;
    _161 *= _154.d0;
    _161 += _160;
    _161 *= _154.d1;
    _161 += _159;
    _161 *= _154.d2;
    _161 += _158;
    _154.data[_161] = _160;
    _158++;
    if (_158 < _156)
    goto _jump81;
    _158 = 0;
    _159++;
    if (_159 < _155)
    goto _jump81;
    _159 = 0;
    _160++;
    if (_160 < _143)
    goto _jump81;
    // End body of loop
    _145 = _154;
    _jump77:;
    int64_t _162 = 0;
    _162 *= _138.d0;
    _162 += _143;
    _138.data[_162] = _145;
    _143++;
    if (_143 < _139)
    goto _jump71;
    // End body of loop
    int64_t _163 = 38;
    int64_t _164 = -_163;
    if (_164 >= 0)
    goto _jump82;
    fail_assertion("negative array index");
    _jump82:;
    if (_164 < _138.d0)
    goto _jump83;
    fail_assertion("index too large");
    _jump83:;
    int64_t _165 = 0;
    _165 *= _138.d0;
    _165 += _164;
    _a3_int64_t _166 = _138.data[_165];
    _a1_int64_t _167;
    // Computing bound for b
    int64_t _168;
    // Computing bound for b
    int64_t _169 = 942;
    int64_t _170 = -_169;
    if (_170 > 0) 
    goto _jump84;
    fail_assertion("non-positive loop bound");
    _jump84:;
    _168 = 0;
    int64_t _171 = 0; // b
    _jump85:; // Begin body of loop
    int64_t _172 = 71;
    int64_t _173 = _172 - _171;
    _168 += _173;
    _171++;
    if (_171 < _170)
    goto _jump85;
    // End body of loop
    _167.d0 = _168;
    if (_168 > 0) 
    goto _jump86;
    fail_assertion("non-positive loop bound");
    _jump86:;
    // Computing total size of heap memory to allocate
    int64_t _174 = 1;
    _174 *= _168;
    _174 *= sizeof(int64_t);
    _167.data = jpl_alloc(_174);
    int64_t _175 = 0; // b
    _jump87:; // Begin body of loop
    int64_t _176 = _175 + _175;
    int64_t _177 = 0;
    _177 *= _167.d0;
    _177 += _175;
    _167.data[_177] = _176;
    _175++;
    if (_175 < _168)
    goto _jump87;
    // End body of loop
    int64_t _178 = 997;
    if (_178 >= 0)
    goto _jump88;
    fail_assertion("negative array index");
    _jump88:;
    if (_178 < _167.d0)
    goto _jump89;
    fail_assertion("index too large");
    _jump89:;
    int64_t _179 = 0;
    _179 *= _167.d0;
    _179 += _178;
    int64_t _180 = _167.data[_179];
    _a2_bool _181;
    // Computing bound for b
    int64_t _182 = 253;
    int64_t _183 = 812;
    int64_t _184 = _182 * _183;
    _181.d0 = _184;
    if (_184 > 0) 
    goto _jump90;
    fail_assertion("non-positive loop bound");
    _jump90:;
    // Computing bound for c
    int64_t _185 = 557;
    _181.d1 = _185;
    if (_185 > 0) 
    goto _jump91;
    fail_assertion("non-positive loop bound");
    _jump91:;
    // Computing total size of heap memory to allocate
    int64_t _186 = 1;
    _186 *= _184;
    _186 *= _185;
    _186 *= sizeof(bool);
    _181.data = jpl_alloc(_186);
    int64_t _187 = 0; // c
    int64_t _188 = 0; // b
    _jump92:; // Begin body of loop
    bool _189 = false;
    int64_t _190 = 0;
    _190 *= _181.d0;
    _190 += _188;
    _190 *= _181.d1;
    _190 += _187;
    _181.data[_190] = _189;
    _187++;
    if (_187 < _185)
    goto _jump92;
    _187 = 0;
    _188++;
    if (_188 < _184)
    goto _jump92;
    // End body of loop
    int64_t _191 = 87;
    int64_t _192 = 763;
    bool _193 = _191 > _192;
    int64_t _194;
    if (!_193)
    goto _jump93;
    int64_t _195 = 919;
    _194 = _195;
    goto _jump94;
    _jump93:;
    int64_t _196 = 462;
    int64_t _197 = -_196;
    _194 = _197;
    _jump94:;
    bool _199 = false;
    bool _198 = _199;
    if (0 == _199)
    goto _jump95;
    bool _200 = false;
    _198 = _200;
    _jump95:;
    int64_t _201;
    if (!_198)
    goto _jump96;
    int64_t _202 = 334;
    int64_t _203 = -_202;
    _201 = _203;
    goto _jump97;
    _jump96:;
    int64_t _204 = 616;
    _201 = _204;
    _jump97:;
    if (_194 >= 0)
    goto _jump98;
    fail_assertion("negative array index");
    _jump98:;
    if (_194 < _181.d0)
    goto _jump99;
    fail_assertion("index too large");
    _jump99:;
    if (_201 >= 0)
    goto _jump100;
    fail_assertion("negative array index");
    _jump100:;
    if (_201 < _181.d1)
    goto _jump101;
    fail_assertion("index too large");
    _jump101:;
    int64_t _205 = 0;
    _205 *= _181.d0;
    _205 += _194;
    _205 *= _181.d1;
    _205 += _201;
    bool _206 = _181.data[_205];
    int64_t _207;
    if (!_206)
    goto _jump102;
    int64_t _208 = 992;
    int64_t _209 = -_208;
    _207 = _209;
    goto _jump103;
    _jump102:;
    int64_t _210 = 17;
    _207 = _210;
    _jump103:;
    int64_t _211 = 353;
    int64_t _212 = -_211;
    int64_t _213 = 276;
    int64_t _214;
    // Computing bound for b
    int64_t _215 = 225;
    if (_215 > 0) 
    goto _jump104;
    fail_assertion("non-positive loop bound");
    _jump104:;
    // Computing bound for c
    int64_t _216 = 740;
    if (_216 > 0) 
    goto _jump105;
    fail_assertion("non-positive loop bound");
    _jump105:;
    _214 = 0;
    int64_t _217 = 0; // c
    int64_t _218 = 0; // b
    _jump106:; // Begin body of loop
    _214 += _217;
    _217++;
    if (_217 < _216)
    goto _jump106;
    _217 = 0;
    _218++;
    if (_218 < _215)
    goto _jump106;
    // End body of loop
    _a1_int64_t _219;
    _219.d0 = 3;
    _219.data = jpl_alloc(sizeof(int64_t) * 3);
    _219.data[0] = _212;
    _219.data[1] = _213;
    _219.data[2] = _214;
    int64_t _220 = 14;
    int64_t _221 = -_220;
    if (_221 >= 0)
    goto _jump107;
    fail_assertion("negative array index");
    _jump107:;
    if (_221 < _219.d0)
    goto _jump108;
    fail_assertion("index too large");
    _jump108:;
    int64_t _222 = 0;
    _222 *= _219.d0;
    _222 += _221;
    int64_t _223 = _219.data[_222];
    bool _224 = true;
    bool _225 = !_224;
    int64_t _226;
    if (!_225)
    goto _jump109;
    int64_t _227 = 854;
    _226 = _227;
    goto _jump110;
    _jump109:;
    int64_t _228 = 273;
    int64_t _229 = -_228;
    _226 = _229;
    _jump110:;
    int64_t _230 = _223 % _226;
    if (_180 >= 0)
    goto _jump111;
    fail_assertion("negative array index");
    _jump111:;
    if (_180 < _166.d0)
    goto _jump112;
    fail_assertion("index too large");
    _jump112:;
    if (_207 >= 0)
    goto _jump113;
    fail_assertion("negative array index");
    _jump113:;
    if (_207 < _166.d1)
    goto _jump114;
    fail_assertion("index too large");
    _jump114:;
    if (_230 >= 0)
    goto _jump115;
    fail_assertion("negative array index");
    _jump115:;
    if (_230 < _166.d2)
    goto _jump116;
    fail_assertion("index too large");
    _jump116:;
    int64_t _231 = 0;
    _231 *= _166.d0;
    _231 += _180;
    _231 *= _166.d1;
    _231 += _207;
    _231 *= _166.d2;
    _231 += _230;
    int64_t _232 = _166.data[_231];
    int64_t _233 = 882;
    if (_232 >= 0)
    goto _jump117;
    fail_assertion("negative array index");
    _jump117:;
    if (_232 < _137.d0)
    goto _jump118;
    fail_assertion("index too large");
    _jump118:;
    if (_233 >= 0)
    goto _jump119;
    fail_assertion("negative array index");
    _jump119:;
    if (_233 < _137.d1)
    goto _jump120;
    fail_assertion("index too large");
    _jump120:;
    int64_t _234 = 0;
    _234 *= _137.d0;
    _234 += _232;
    _234 *= _137.d1;
    _234 += _233;
    double _235 = _137.data[_234];
    double _236 = -_235;
    _a2_bool _237;
    // Computing bound for c
    int64_t _238 = 666;
    _237.d0 = _238;
    if (_238 > 0) 
    goto _jump121;
    fail_assertion("non-positive loop bound");
    _jump121:;
    // Computing bound for d
    bool _239 = false;
    int64_t _240;
    if (!_239)
    goto _jump122;
    _a3_int64_t _241;
    // Computing bound for c
    int64_t _242 = 49;
    _241.d0 = _242;
    if (_242 > 0) 
    goto _jump123;
    fail_assertion("non-positive loop bound");
    _jump123:;
    // Computing bound for d
    int64_t _243;
    // Computing bound for c
    int64_t _244 = 248;
    int64_t _245 = 206;
    int64_t _246 = _244 * _245;
    if (_246 > 0) 
    goto _jump124;
    fail_assertion("non-positive loop bound");
    _jump124:;
    // Computing bound for d
    int64_t _247;
    // Computing bound for c
    int64_t _248 = 676;
    if (_248 > 0) 
    goto _jump125;
    fail_assertion("non-positive loop bound");
    _jump125:;
    _247 = 0;
    int64_t _249 = 0; // c
    _jump126:; // Begin body of loop
    _247 += _249;
    _249++;
    if (_249 < _248)
    goto _jump126;
    // End body of loop
    if (_247 > 0) 
    goto _jump127;
    fail_assertion("non-positive loop bound");
    _jump127:;
    // Computing bound for e
    bool _250 = true;
    int64_t _251;
    if (!_250)
    goto _jump128;
    int64_t _252 = 86;
    _251 = _252;
    goto _jump129;
    _jump128:;
    int64_t _253 = 398;
    _251 = _253;
    _jump129:;
    if (_251 > 0) 
    goto _jump130;
    fail_assertion("non-positive loop bound");
    _jump130:;
    _243 = 0;
    int64_t _254 = 0; // e
    int64_t _255 = 0; // d
    int64_t _256 = 0; // c
    _jump131:; // Begin body of loop
    int64_t _257 = 271;
    _243 += _257;
    _254++;
    if (_254 < _251)
    goto _jump131;
    _254 = 0;
    _255++;
    if (_255 < _247)
    goto _jump131;
    _255 = 0;
    _256++;
    if (_256 < _246)
    goto _jump131;
    // End body of loop
    _241.d1 = _243;
    if (_243 > 0) 
    goto _jump132;
    fail_assertion("non-positive loop bound");
    _jump132:;
    // Computing bound for e
    int64_t _258 = 63;
    _241.d2 = _258;
    if (_258 > 0) 
    goto _jump133;
    fail_assertion("non-positive loop bound");
    _jump133:;
    // Computing total size of heap memory to allocate
    int64_t _259 = 1;
    _259 *= _242;
    _259 *= _243;
    _259 *= _258;
    _259 *= sizeof(int64_t);
    _241.data = jpl_alloc(_259);
    int64_t _260 = 0; // e
    int64_t _261 = 0; // d
    int64_t _262 = 0; // c
    _jump134:; // Begin body of loop
    bool _263 = false;
    int64_t _264;
    if (!_263)
    goto _jump135;
    int64_t _265;
    // Computing bound for f
    if (_260 > 0) 
    goto _jump136;
    fail_assertion("non-positive loop bound");
    _jump136:;
    _265 = 0;
    int64_t _266 = 0; // f
    _jump137:; // Begin body of loop
    int64_t _267 = 734;
    _265 += _267;
    _266++;
    if (_266 < _260)
    goto _jump137;
    // End body of loop
    _264 = _265;
    goto _jump138;
    _jump135:;
    int64_t _268;
    // Computing bound for f
    int64_t _269 = 110;
    if (_269 > 0) 
    goto _jump139;
    fail_assertion("non-positive loop bound");
    _jump139:;
    // Computing bound for g
    if (_262 > 0) 
    goto _jump140;
    fail_assertion("non-positive loop bound");
    _jump140:;
    // Computing bound for h
    if (_261 > 0) 
    goto _jump141;
    fail_assertion("non-positive loop bound");
    _jump141:;
    _268 = 0;
    int64_t _270 = 0; // h
    int64_t _271 = 0; // g
    int64_t _272 = 0; // f
    _jump142:; // Begin body of loop
    _268 += _260;
    _270++;
    if (_270 < _261)
    goto _jump142;
    _270 = 0;
    _271++;
    if (_271 < _262)
    goto _jump142;
    _271 = 0;
    _272++;
    if (_272 < _269)
    goto _jump142;
    // End body of loop
    _264 = _268;
    _jump138:;
    int64_t _273 = 0;
    _273 *= _241.d0;
    _273 += _262;
    _273 *= _241.d1;
    _273 += _261;
    _273 *= _241.d2;
    _273 += _260;
    _241.data[_273] = _264;
    _260++;
    if (_260 < _258)
    goto _jump134;
    _260 = 0;
    _261++;
    if (_261 < _243)
    goto _jump134;
    _261 = 0;
    _262++;
    if (_262 < _242)
    goto _jump134;
    // End body of loop
    int64_t _274 = 46;
    int64_t _275 = 624;
    int64_t _276 = -_275;
    int64_t _277 = 541;
    if (_274 >= 0)
    goto _jump143;
    fail_assertion("negative array index");
    _jump143:;
    if (_274 < _241.d0)
    goto _jump144;
    fail_assertion("index too large");
    _jump144:;
    if (_276 >= 0)
    goto _jump145;
    fail_assertion("negative array index");
    _jump145:;
    if (_276 < _241.d1)
    goto _jump146;
    fail_assertion("index too large");
    _jump146:;
    if (_277 >= 0)
    goto _jump147;
    fail_assertion("negative array index");
    _jump147:;
    if (_277 < _241.d2)
    goto _jump148;
    fail_assertion("index too large");
    _jump148:;
    int64_t _278 = 0;
    _278 *= _241.d0;
    _278 += _274;
    _278 *= _241.d1;
    _278 += _276;
    _278 *= _241.d2;
    _278 += _277;
    int64_t _279 = _241.data[_278];
    _240 = _279;
    goto _jump149;
    _jump122:;
    _a2_int64_t _280;
    // Computing bound for c
    int64_t _281 = 624;
    _280.d0 = _281;
    if (_281 > 0) 
    goto _jump150;
    fail_assertion("non-positive loop bound");
    _jump150:;
    // Computing bound for d
    int64_t _282 = 490;
    int64_t _283 = -_282;
    _280.d1 = _283;
    if (_283 > 0) 
    goto _jump151;
    fail_assertion("non-positive loop bound");
    _jump151:;
    // Computing total size of heap memory to allocate
    int64_t _284 = 1;
    _284 *= _281;
    _284 *= _283;
    _284 *= sizeof(int64_t);
    _280.data = jpl_alloc(_284);
    int64_t _285 = 0; // d
    int64_t _286 = 0; // c
    _jump152:; // Begin body of loop
    int64_t _287 = 0;
    _287 *= _280.d0;
    _287 += _286;
    _287 *= _280.d1;
    _287 += _285;
    _280.data[_287] = _285;
    _285++;
    if (_285 < _283)
    goto _jump152;
    _285 = 0;
    _286++;
    if (_286 < _281)
    goto _jump152;
    // End body of loop
    int64_t _288 = 896;
    int64_t _289 = -_288;
    int64_t _290 = 936;
    if (_289 >= 0)
    goto _jump153;
    fail_assertion("negative array index");
    _jump153:;
    if (_289 < _280.d0)
    goto _jump154;
    fail_assertion("index too large");
    _jump154:;
    if (_290 >= 0)
    goto _jump155;
    fail_assertion("negative array index");
    _jump155:;
    if (_290 < _280.d1)
    goto _jump156;
    fail_assertion("index too large");
    _jump156:;
    int64_t _291 = 0;
    _291 *= _280.d0;
    _291 += _289;
    _291 *= _280.d1;
    _291 += _290;
    int64_t _292 = _280.data[_291];
    int64_t _293 = -_292;
    _240 = _293;
    _jump149:;
    _237.d1 = _240;
    if (_240 > 0) 
    goto _jump157;
    fail_assertion("non-positive loop bound");
    _jump157:;
    // Computing total size of heap memory to allocate
    int64_t _294 = 1;
    _294 *= _238;
    _294 *= _240;
    _294 *= sizeof(bool);
    _237.data = jpl_alloc(_294);
    int64_t _295 = 0; // d
    int64_t _296 = 0; // c
    _jump158:; // Begin body of loop
    bool _297 = true;
    int64_t _298 = 0;
    _298 *= _237.d0;
    _298 += _296;
    _298 *= _237.d1;
    _298 += _295;
    _237.data[_298] = _297;
    _295++;
    if (_295 < _240)
    goto _jump158;
    _295 = 0;
    _296++;
    if (_296 < _238)
    goto _jump158;
    // End body of loop
    bool _300 = true;
    bool _301 = !_300;
    bool _302 = !_301;
    bool _299 = _302;
    if (0 == _302)
    goto _jump159;
    bool _303 = true;
    bool _304 = !_303;
    _299 = _304;
    _jump159:;
    _a3_int64_t _305;
    if (!_299)
    goto _jump160;
    _a3_int64_t _306;
    // Computing bound for c
    int64_t _307;
    // Computing bound for c
    int64_t _308 = 884;
    int64_t _309 = 129;
    int64_t _310 = _308 - _309;
    int64_t _311 = 458;
    int64_t _312 = _310 - _311;
    if (_312 > 0) 
    goto _jump161;
    fail_assertion("non-positive loop bound");
    _jump161:;
    // Computing bound for d
    int64_t _313;
    // Computing bound for c
    int64_t _314;
    // Computing bound for c
    int64_t _315 = 843;
    if (_315 > 0) 
    goto _jump162;
    fail_assertion("non-positive loop bound");
    _jump162:;
    _314 = 0;
    int64_t _316 = 0; // c
    _jump163:; // Begin body of loop
    int64_t _317 = 645;
    _314 += _317;
    _316++;
    if (_316 < _315)
    goto _jump163;
    // End body of loop
    if (_314 > 0) 
    goto _jump164;
    fail_assertion("non-positive loop bound");
    _jump164:;
    // Computing bound for d
    int64_t _318 = 838;
    if (_318 > 0) 
    goto _jump165;
    fail_assertion("non-positive loop bound");
    _jump165:;
    _313 = 0;
    int64_t _319 = 0; // d
    int64_t _320 = 0; // c
    _jump166:; // Begin body of loop
    _313 += _320;
    _319++;
    if (_319 < _318)
    goto _jump166;
    _319 = 0;
    _320++;
    if (_320 < _314)
    goto _jump166;
    // End body of loop
    if (_313 > 0) 
    goto _jump167;
    fail_assertion("non-positive loop bound");
    _jump167:;
    // Computing bound for e
    int64_t _321;
    // Computing bound for c
    int64_t _322 = 971;
    if (_322 > 0) 
    goto _jump168;
    fail_assertion("non-positive loop bound");
    _jump168:;
    _321 = 0;
    int64_t _323 = 0; // c
    _jump169:; // Begin body of loop
    int64_t _324 = 645;
    _321 += _324;
    _323++;
    if (_323 < _322)
    goto _jump169;
    // End body of loop
    int64_t _325 = -_321;
    if (_325 > 0) 
    goto _jump170;
    fail_assertion("non-positive loop bound");
    _jump170:;
    _307 = 0;
    int64_t _326 = 0; // e
    int64_t _327 = 0; // d
    int64_t _328 = 0; // c
    _jump171:; // Begin body of loop
    bool _329 = false;
    int64_t _330;
    if (!_329)
    goto _jump172;
    _330 = _327;
    goto _jump173;
    _jump172:;
    _330 = _328;
    _jump173:;
    _307 += _330;
    _326++;
    if (_326 < _325)
    goto _jump171;
    _326 = 0;
    _327++;
    if (_327 < _313)
    goto _jump171;
    _327 = 0;
    _328++;
    if (_328 < _312)
    goto _jump171;
    // End body of loop
    _306.d0 = _307;
    if (_307 > 0) 
    goto _jump174;
    fail_assertion("non-positive loop bound");
    _jump174:;
    // Computing bound for d
    int64_t _331 = 605;
    _306.d1 = _331;
    if (_331 > 0) 
    goto _jump175;
    fail_assertion("non-positive loop bound");
    _jump175:;
    // Computing bound for e
    int64_t _332 = 327;
    int64_t _333 = -_332;
    _a1_int64_t _334;
    _334.d0 = 1;
    _334.data = jpl_alloc(sizeof(int64_t) * 1);
    _334.data[0] = _333;
    int64_t _335 = 839;
    int64_t _336 = 442;
    int64_t _337 = _335 * _336;
    if (_337 >= 0)
    goto _jump176;
    fail_assertion("negative array index");
    _jump176:;
    if (_337 < _334.d0)
    goto _jump177;
    fail_assertion("index too large");
    _jump177:;
    int64_t _338 = 0;
    _338 *= _334.d0;
    _338 += _337;
    int64_t _339 = _334.data[_338];
    _306.d2 = _339;
    if (_339 > 0) 
    goto _jump178;
    fail_assertion("non-positive loop bound");
    _jump178:;
    // Computing total size of heap memory to allocate
    int64_t _340 = 1;
    _340 *= _307;
    _340 *= _331;
    _340 *= _339;
    _340 *= sizeof(int64_t);
    _306.data = jpl_alloc(_340);
    int64_t _341 = 0; // e
    int64_t _342 = 0; // d
    int64_t _343 = 0; // c
    _jump179:; // Begin body of loop
    int64_t _344 = 0;
    _344 *= _306.d0;
    _344 += _343;
    _344 *= _306.d1;
    _344 += _342;
    _344 *= _306.d2;
    _344 += _341;
    _306.data[_344] = _341;
    _341++;
    if (_341 < _339)
    goto _jump179;
    _341 = 0;
    _342++;
    if (_342 < _331)
    goto _jump179;
    _342 = 0;
    _343++;
    if (_343 < _307)
    goto _jump179;
    // End body of loop
    _305 = _306;
    goto _jump180;
    _jump160:;
    _a3_int64_t _345;
    // Computing bound for c
    int64_t _346 = 592;
    _345.d0 = _346;
    if (_346 > 0) 
    goto _jump181;
    fail_assertion("non-positive loop bound");
    _jump181:;
    // Computing bound for d
    bool _348 = true;
    bool _347 = _348;
    if (0 != _348)
    goto _jump182;
    bool _349 = true;
    _347 = _349;
    _jump182:;
    int64_t _350;
    if (!_347)
    goto _jump183;
    int64_t _351 = 495;
    int64_t _352 = -_351;
    _350 = _352;
    goto _jump184;
    _jump183:;
    int64_t _353 = 92;
    _350 = _353;
    _jump184:;
    int64_t _354 = -_350;
    _345.d1 = _354;
    if (_354 > 0) 
    goto _jump185;
    fail_assertion("non-positive loop bound");
    _jump185:;
    // Computing bound for e
    int64_t _355 = 274;
    int64_t _356 = -_355;
    int64_t _357 = -_356;
    int64_t _358 = -_357;
    _345.d2 = _358;
    if (_358 > 0) 
    goto _jump186;
    fail_assertion("non-positive loop bound");
    _jump186:;
    // Computing total size of heap memory to allocate
    int64_t _359 = 1;
    _359 *= _346;
    _359 *= _354;
    _359 *= _358;
    _359 *= sizeof(int64_t);
    _345.data = jpl_alloc(_359);
    int64_t _360 = 0; // e
    int64_t _361 = 0; // d
    int64_t _362 = 0; // c
    _jump187:; // Begin body of loop
    int64_t _363;
    // Computing bound for f
    if (_362 > 0) 
    goto _jump188;
    fail_assertion("non-positive loop bound");
    _jump188:;
    _363 = 0;
    int64_t _364 = 0; // f
    _jump189:; // Begin body of loop
    bool _365 = true;
    int64_t _366;
    if (!_365)
    goto _jump190;
    _366 = _362;
    goto _jump191;
    _jump190:;
    int64_t _367 = 204;
    int64_t _368 = -_367;
    _366 = _368;
    _jump191:;
    _363 += _366;
    _364++;
    if (_364 < _362)
    goto _jump189;
    // End body of loop
    int64_t _369 = 0;
    _369 *= _345.d0;
    _369 += _362;
    _369 *= _345.d1;
    _369 += _361;
    _369 *= _345.d2;
    _369 += _360;
    _345.data[_369] = _363;
    _360++;
    if (_360 < _358)
    goto _jump187;
    _360 = 0;
    _361++;
    if (_361 < _354)
    goto _jump187;
    _361 = 0;
    _362++;
    if (_362 < _346)
    goto _jump187;
    // End body of loop
    _305 = _345;
    _jump180:;
    int64_t _370 = 961;
    int64_t _371 = -_370;
    int64_t _372 = 124;
    int64_t _373;
    // Computing bound for c
    int64_t _374 = 152;
    if (_374 > 0) 
    goto _jump192;
    fail_assertion("non-positive loop bound");
    _jump192:;
    _373 = 0;
    int64_t _375 = 0; // c
    _jump193:; // Begin body of loop
    _373 += _375;
    _375++;
    if (_375 < _374)
    goto _jump193;
    // End body of loop
    bool _376 = _372 <= _373;
    int64_t _377;
    if (!_376)
    goto _jump194;
    int64_t _378 = 396;
    int64_t _379 = 393;
    int64_t _380 = _378 / _379;
    int64_t _381 = -_380;
    _377 = _381;
    goto _jump195;
    _jump194:;
    int64_t _382 = 206;
    int64_t _383 = 563;
    int64_t _384 = _382 - _383;
    _377 = _384;
    _jump195:;
    int64_t _385 = _371 - _377;
    int64_t _386;
    // Computing bound for c
    int64_t _387;
    // Computing bound for c
    double _388 = 28.0;
    bool _389 = _236 <= _388;
    int64_t _390;
    if (!_389)
    goto _jump196;
    int64_t _391 = 283;
    _390 = _391;
    goto _jump197;
    _jump196:;
    int64_t _392 = 252;
    _390 = _392;
    _jump197:;
    if (_390 > 0) 
    goto _jump198;
    fail_assertion("non-positive loop bound");
    _jump198:;
    _387 = 0;
    int64_t _393 = 0; // c
    _jump199:; // Begin body of loop
    int64_t _394 = 239;
    _387 += _394;
    _393++;
    if (_393 < _390)
    goto _jump199;
    // End body of loop
    if (_387 > 0) 
    goto _jump200;
    fail_assertion("non-positive loop bound");
    _jump200:;
    _386 = 0;
    int64_t _395 = 0; // c
    _jump201:; // Begin body of loop
    int64_t _396;
    // Computing bound for d
    int64_t _397;
    // Computing bound for d
    if (_395 > 0) 
    goto _jump202;
    fail_assertion("non-positive loop bound");
    _jump202:;
    _397 = 0;
    int64_t _398 = 0; // d
    _jump203:; // Begin body of loop
    int64_t _399;
    // Computing bound for e
    int64_t _400 = 654;
    if (_400 > 0) 
    goto _jump204;
    fail_assertion("non-positive loop bound");
    _jump204:;
    // Computing bound for f
    if (_395 > 0) 
    goto _jump205;
    fail_assertion("non-positive loop bound");
    _jump205:;
    // Computing bound for g
    if (_395 > 0) 
    goto _jump206;
    fail_assertion("non-positive loop bound");
    _jump206:;
    _399 = 0;
    int64_t _401 = 0; // g
    int64_t _402 = 0; // f
    int64_t _403 = 0; // e
    _jump207:; // Begin body of loop
    _399 += _401;
    _401++;
    if (_401 < _395)
    goto _jump207;
    _401 = 0;
    _402++;
    if (_402 < _395)
    goto _jump207;
    _402 = 0;
    _403++;
    if (_403 < _400)
    goto _jump207;
    // End body of loop
    _397 += _399;
    _398++;
    if (_398 < _395)
    goto _jump203;
    // End body of loop
    if (_397 > 0) 
    goto _jump208;
    fail_assertion("non-positive loop bound");
    _jump208:;
    // Computing bound for e
    bool _405 = false;
    bool _404 = _405;
    if (0 == _405)
    goto _jump209;
    bool _406 = false;
    _404 = _406;
    _jump209:;
    int64_t _407;
    if (!_404)
    goto _jump210;
    int64_t _408 = 867;
    int64_t _409 = 497;
    int64_t _410 = _408 - _409;
    _407 = _410;
    goto _jump211;
    _jump210:;
    bool _411 = false;
    int64_t _412;
    if (!_411)
    goto _jump212;
    _412 = _395;
    goto _jump213;
    _jump212:;
    _412 = _395;
    _jump213:;
    _407 = _412;
    _jump211:;
    if (_407 > 0) 
    goto _jump214;
    fail_assertion("non-positive loop bound");
    _jump214:;
    // Computing bound for f
    int64_t _413 = 302;
    int64_t _414 = 701;
    int64_t _415 = _413 * _414;
    int64_t _416 = 666;
    int64_t _417 = _416 - _395;
    int64_t _418 = _415 * _417;
    if (_418 > 0) 
    goto _jump215;
    fail_assertion("non-positive loop bound");
    _jump215:;
    _396 = 0;
    int64_t _419 = 0; // f
    int64_t _420 = 0; // e
    int64_t _421 = 0; // d
    _jump216:; // Begin body of loop
    _396 += _420;
    _419++;
    if (_419 < _418)
    goto _jump216;
    _419 = 0;
    _420++;
    if (_420 < _407)
    goto _jump216;
    _420 = 0;
    _421++;
    if (_421 < _397)
    goto _jump216;
    // End body of loop
    _386 += _396;
    _395++;
    if (_395 < _387)
    goto _jump201;
    // End body of loop
    int64_t _422 = _385 + _386;
    int64_t _423;
    // Computing bound for c
    bool _424 = true;
    int64_t _425;
    if (!_424)
    goto _jump217;
    int64_t _426;
    // Computing bound for c
    int64_t _427 = 310;
    int64_t _428 = -_427;
    if (_428 > 0) 
    goto _jump218;
    fail_assertion("non-positive loop bound");
    _jump218:;
    // Computing bound for d
    int64_t _429 = 926;
    if (_429 > 0) 
    goto _jump219;
    fail_assertion("non-positive loop bound");
    _jump219:;
    // Computing bound for e
    int64_t _430 = 109;
    if (_430 > 0) 
    goto _jump220;
    fail_assertion("non-positive loop bound");
    _jump220:;
    _426 = 0;
    int64_t _431 = 0; // e
    int64_t _432 = 0; // d
    int64_t _433 = 0; // c
    _jump221:; // Begin body of loop
    _426 += _432;
    _431++;
    if (_431 < _430)
    goto _jump221;
    _431 = 0;
    _432++;
    if (_432 < _429)
    goto _jump221;
    _432 = 0;
    _433++;
    if (_433 < _428)
    goto _jump221;
    // End body of loop
    int64_t _434 = -_426;
    _425 = _434;
    goto _jump222;
    _jump217:;
    int64_t _435 = 110;
    int64_t _436 = 604;
    bool _437 = _435 > _436;
    bool _438 = !_437;
    int64_t _439;
    if (!_438)
    goto _jump223;
    int64_t _440 = 805;
    int64_t _441 = -_440;
    _439 = _441;
    goto _jump224;
    _jump223:;
    bool _442 = false;
    bool _443 = !_442;
    int64_t _444;
    if (!_443)
    goto _jump225;
    int64_t _445 = 984;
    int64_t _446 = 822;
    int64_t _447 = _445 + _446;
    _444 = _447;
    goto _jump226;
    _jump225:;
    int64_t _448 = 213;
    int64_t _449 = -_448;
    _444 = _449;
    _jump226:;
    _439 = _444;
    _jump224:;
    _425 = _439;
    _jump222:;
    if (_425 > 0) 
    goto _jump227;
    fail_assertion("non-positive loop bound");
    _jump227:;
    _423 = 0;
    int64_t _450 = 0; // c
    _jump228:; // Begin body of loop
    bool _451 = true;
    bool _452 = !_451;
    bool _453;
    if (!_452)
    goto _jump229;
    bool _454 = _236 != _236;
    _453 = _454;
    goto _jump230;
    _jump229:;
    bool _455 = _236 > _236;
    _453 = _455;
    _jump230:;
    bool _456;
    if (!_453)
    goto _jump231;
    bool _457 = false;
    _456 = _457;
    goto _jump232;
    _jump231:;
    int64_t _458 = 444;
    int64_t _459 = 684;
    bool _460 = _458 == _459;
    _456 = _460;
    _jump232:;
    int64_t _461;
    if (!_456)
    goto _jump233;
    int64_t _462;
    // Computing bound for d
    int64_t _463 = -_450;
    if (_463 > 0) 
    goto _jump234;
    fail_assertion("non-positive loop bound");
    _jump234:;
    _462 = 0;
    int64_t _464 = 0; // d
    _jump235:; // Begin body of loop
    _462 += _450;
    _464++;
    if (_464 < _463)
    goto _jump235;
    // End body of loop
    _461 = _462;
    goto _jump236;
    _jump233:;
    int64_t _465 = 157;
    _461 = _465;
    _jump236:;
    _423 += _461;
    _450++;
    if (_450 < _425)
    goto _jump228;
    // End body of loop
    bool _466 = false;
    bool _468 = false;
    bool _467 = _468;
    if (0 == _468)
    goto _jump237;
    int64_t _469 = 817;
    int64_t _470 = 816;
    bool _471 = _469 != _470;
    _467 = _471;
    _jump237:;
    bool _472 = _466 != _467;
    bool _473;
    if (!_472)
    goto _jump238;
    int64_t _474 = 594;
    int64_t _475 = 37;
    int64_t _476 = 0;
    int64_t _477 = _475 % _476;
    int64_t _478 = _474 / _477;
    int64_t _479 = 549;
    int64_t _480 = 841;
    int64_t _481 = _479 - _480;
    bool _482 = _478 > _481;
    _473 = _482;
    goto _jump239;
    _jump238:;
    bool _484 = false;
    bool _483 = _484;
    if (0 == _484)
    goto _jump240;
    bool _485 = false;
    _483 = _485;
    _jump240:;
    bool _486 = !_483;
    _473 = _486;
    _jump239:;
    int64_t _487;
    if (!_473)
    goto _jump241;
    int64_t _488 = 344;
    _487 = _488;
    goto _jump242;
    _jump241:;
    _a1__a1_int64_t _489;
    // Computing bound for c
    int64_t _490 = 593;
    _489.d0 = _490;
    if (_490 > 0) 
    goto _jump243;
    fail_assertion("non-positive loop bound");
    _jump243:;
    // Computing total size of heap memory to allocate
    int64_t _491 = 1;
    _491 *= _490;
    _491 *= sizeof(_a1_int64_t);
    _489.data = jpl_alloc(_491);
    int64_t _492 = 0; // c
    _jump244:; // Begin body of loop
    _a1_int64_t _493;
    // Computing bound for d
    int64_t _494 = 284;
    _493.d0 = _494;
    if (_494 > 0) 
    goto _jump245;
    fail_assertion("non-positive loop bound");
    _jump245:;
    // Computing total size of heap memory to allocate
    int64_t _495 = 1;
    _495 *= _494;
    _495 *= sizeof(int64_t);
    _493.data = jpl_alloc(_495);
    int64_t _496 = 0; // d
    _jump246:; // Begin body of loop
    int64_t _497 = 0;
    _497 *= _493.d0;
    _497 += _496;
    _493.data[_497] = _492;
    _496++;
    if (_496 < _494)
    goto _jump246;
    // End body of loop
    int64_t _498 = 0;
    _498 *= _489.d0;
    _498 += _492;
    _489.data[_498] = _493;
    _492++;
    if (_492 < _490)
    goto _jump244;
    // End body of loop
    int64_t _499 = 66;
    int64_t _500 = 416;
    bool _501 = _499 >= _500;
    int64_t _502;
    if (!_501)
    goto _jump247;
    int64_t _503 = 684;
    int64_t _504 = -_503;
    _502 = _504;
    goto _jump248;
    _jump247:;
    int64_t _505 = 962;
    _502 = _505;
    _jump248:;
    if (_502 >= 0)
    goto _jump249;
    fail_assertion("negative array index");
    _jump249:;
    if (_502 < _489.d0)
    goto _jump250;
    fail_assertion("index too large");
    _jump250:;
    int64_t _506 = 0;
    _506 *= _489.d0;
    _506 += _502;
    _a1_int64_t _507 = _489.data[_506];
    int64_t _508 = 725;
    if (_508 >= 0)
    goto _jump251;
    fail_assertion("negative array index");
    _jump251:;
    if (_508 < _507.d0)
    goto _jump252;
    fail_assertion("index too large");
    _jump252:;
    int64_t _509 = 0;
    _509 *= _507.d0;
    _509 += _508;
    int64_t _510 = _507.data[_509];
    _487 = _510;
    _jump242:;
    if (_422 >= 0)
    goto _jump253;
    fail_assertion("negative array index");
    _jump253:;
    if (_422 < _305.d0)
    goto _jump254;
    fail_assertion("index too large");
    _jump254:;
    if (_423 >= 0)
    goto _jump255;
    fail_assertion("negative array index");
    _jump255:;
    if (_423 < _305.d1)
    goto _jump256;
    fail_assertion("index too large");
    _jump256:;
    if (_487 >= 0)
    goto _jump257;
    fail_assertion("negative array index");
    _jump257:;
    if (_487 < _305.d2)
    goto _jump258;
    fail_assertion("index too large");
    _jump258:;
    int64_t _511 = 0;
    _511 *= _305.d0;
    _511 += _422;
    _511 *= _305.d1;
    _511 += _423;
    _511 *= _305.d2;
    _511 += _487;
    int64_t _512 = _305.data[_511];
    int64_t _513;
    // Computing bound for c
    _a1_int64_t _514;
    // Computing bound for c
    int64_t _515 = 981;
    int64_t _516 = -_515;
    _514.d0 = _516;
    if (_516 > 0) 
    goto _jump259;
    fail_assertion("non-positive loop bound");
    _jump259:;
    // Computing total size of heap memory to allocate
    int64_t _517 = 1;
    _517 *= _516;
    _517 *= sizeof(int64_t);
    _514.data = jpl_alloc(_517);
    int64_t _518 = 0; // c
    _jump260:; // Begin body of loop
    _a3_int64_t _519;
    // Computing bound for d
    _519.d0 = _518;
    if (_518 > 0) 
    goto _jump261;
    fail_assertion("non-positive loop bound");
    _jump261:;
    // Computing bound for e
    int64_t _520 = 760;
    _519.d1 = _520;
    if (_520 > 0) 
    goto _jump262;
    fail_assertion("non-positive loop bound");
    _jump262:;
    // Computing bound for f
    _519.d2 = _518;
    if (_518 > 0) 
    goto _jump263;
    fail_assertion("non-positive loop bound");
    _jump263:;
    // Computing total size of heap memory to allocate
    int64_t _521 = 1;
    _521 *= _518;
    _521 *= _520;
    _521 *= _518;
    _521 *= sizeof(int64_t);
    _519.data = jpl_alloc(_521);
    int64_t _522 = 0; // f
    int64_t _523 = 0; // e
    int64_t _524 = 0; // d
    _jump264:; // Begin body of loop
    int64_t _525 = 0;
    _525 *= _519.d0;
    _525 += _524;
    _525 *= _519.d1;
    _525 += _523;
    _525 *= _519.d2;
    _525 += _522;
    _519.data[_525] = _522;
    _522++;
    if (_522 < _518)
    goto _jump264;
    _522 = 0;
    _523++;
    if (_523 < _520)
    goto _jump264;
    _523 = 0;
    _524++;
    if (_524 < _518)
    goto _jump264;
    // End body of loop
    int64_t _526 = 178;
    int64_t _527 = -_526;
    int64_t _528;
    // Computing bound for d
    if (_518 > 0) 
    goto _jump265;
    fail_assertion("non-positive loop bound");
    _jump265:;
    _528 = 0;
    int64_t _529 = 0; // d
    _jump266:; // Begin body of loop
    _528 += _518;
    _529++;
    if (_529 < _518)
    goto _jump266;
    // End body of loop
    int64_t _530 = 32;
    int64_t _531 = _518 * _530;
    if (_527 >= 0)
    goto _jump267;
    fail_assertion("negative array index");
    _jump267:;
    if (_527 < _519.d0)
    goto _jump268;
    fail_assertion("index too large");
    _jump268:;
    if (_528 >= 0)
    goto _jump269;
    fail_assertion("negative array index");
    _jump269:;
    if (_528 < _519.d1)
    goto _jump270;
    fail_assertion("index too large");
    _jump270:;
    if (_531 >= 0)
    goto _jump271;
    fail_assertion("negative array index");
    _jump271:;
    if (_531 < _519.d2)
    goto _jump272;
    fail_assertion("index too large");
    _jump272:;
    int64_t _532 = 0;
    _532 *= _519.d0;
    _532 += _527;
    _532 *= _519.d1;
    _532 += _528;
    _532 *= _519.d2;
    _532 += _531;
    int64_t _533 = _519.data[_532];
    int64_t _534 = 0;
    _534 *= _514.d0;
    _534 += _518;
    _514.data[_534] = _533;
    _518++;
    if (_518 < _516)
    goto _jump260;
    // End body of loop
    int64_t _535;
    // Computing bound for c
    int64_t _536 = 525;
    int64_t _537 = -_536;
    if (_537 > 0) 
    goto _jump273;
    fail_assertion("non-positive loop bound");
    _jump273:;
    _535 = 0;
    int64_t _538 = 0; // c
    _jump274:; // Begin body of loop
    _535 += _538;
    _538++;
    if (_538 < _537)
    goto _jump274;
    // End body of loop
    if (_535 >= 0)
    goto _jump275;
    fail_assertion("negative array index");
    _jump275:;
    if (_535 < _514.d0)
    goto _jump276;
    fail_assertion("index too large");
    _jump276:;
    int64_t _539 = 0;
    _539 *= _514.d0;
    _539 += _535;
    int64_t _540 = _514.data[_539];
    if (_540 > 0) 
    goto _jump277;
    fail_assertion("non-positive loop bound");
    _jump277:;
    // Computing bound for d
    int64_t _541;
    // Computing bound for c
    int64_t _542 = 440;
    int64_t _543 = -_542;
    int64_t _544 = 68;
    int64_t _545 = _543 + _544;
    int64_t _546 = -_545;
    if (_546 > 0) 
    goto _jump278;
    fail_assertion("non-positive loop bound");
    _jump278:;
    // Computing bound for d
    bool _547 = false;
    int64_t _548;
    if (!_547)
    goto _jump279;
    int64_t _549 = 660;
    _548 = _549;
    goto _jump280;
    _jump279:;
    int64_t _550;
    // Computing bound for c
    int64_t _551 = 338;
    if (_551 > 0) 
    goto _jump281;
    fail_assertion("non-positive loop bound");
    _jump281:;
    _550 = 0;
    int64_t _552 = 0; // c
    _jump282:; // Begin body of loop
    _550 += _552;
    _552++;
    if (_552 < _551)
    goto _jump282;
    // End body of loop
    _548 = _550;
    _jump280:;
    if (_548 > 0) 
    goto _jump283;
    fail_assertion("non-positive loop bound");
    _jump283:;
    _541 = 0;
    int64_t _553 = 0; // d
    int64_t _554 = 0; // c
    _jump284:; // Begin body of loop
    int64_t _555;
    // Computing bound for e
    int64_t _556 = 780;
    int64_t _557 = _554 * _556;
    if (_557 > 0) 
    goto _jump285;
    fail_assertion("non-positive loop bound");
    _jump285:;
    _555 = 0;
    int64_t _558 = 0; // e
    _jump286:; // Begin body of loop
    int64_t _559 = 910;
    int64_t _560 = _559 % _558;
    int64_t _561 = -_560;
    _555 += _561;
    _558++;
    if (_558 < _557)
    goto _jump286;
    // End body of loop
    _541 += _555;
    _553++;
    if (_553 < _548)
    goto _jump284;
    _553 = 0;
    _554++;
    if (_554 < _546)
    goto _jump284;
    // End body of loop
    if (_541 > 0) 
    goto _jump287;
    fail_assertion("non-positive loop bound");
    _jump287:;
    // Computing bound for e
    _a1_int64_t _562;
    // Computing bound for c
    int64_t _563 = 410;
    _562.d0 = _563;
    if (_563 > 0) 
    goto _jump288;
    fail_assertion("non-positive loop bound");
    _jump288:;
    // Computing total size of heap memory to allocate
    int64_t _564 = 1;
    _564 *= _563;
    _564 *= sizeof(int64_t);
    _562.data = jpl_alloc(_564);
    int64_t _565 = 0; // c
    _jump289:; // Begin body of loop
    int64_t _566;
    // Computing bound for d
    int64_t _567 = 814;
    if (_567 > 0) 
    goto _jump290;
    fail_assertion("non-positive loop bound");
    _jump290:;
    // Computing bound for e
    bool _568 = true;
    int64_t _569;
    if (!_568)
    goto _jump291;
    _569 = _565;
    goto _jump292;
    _jump291:;
    int64_t _570 = 979;
    _569 = _570;
    _jump292:;
    if (_569 > 0) 
    goto _jump293;
    fail_assertion("non-positive loop bound");
    _jump293:;
    _566 = 0;
    int64_t _571 = 0; // e
    int64_t _572 = 0; // d
    _jump294:; // Begin body of loop
    int64_t _573 = 708;
    int64_t _574 = -_573;
    _566 += _574;
    _571++;
    if (_571 < _569)
    goto _jump294;
    _571 = 0;
    _572++;
    if (_572 < _567)
    goto _jump294;
    // End body of loop
    int64_t _575 = 0;
    _575 *= _562.d0;
    _575 += _565;
    _562.data[_575] = _566;
    _565++;
    if (_565 < _563)
    goto _jump289;
    // End body of loop
    int64_t _576;
    // Computing bound for c
    int64_t _577 = 775;
    if (_577 > 0) 
    goto _jump295;
    fail_assertion("non-positive loop bound");
    _jump295:;
    _576 = 0;
    int64_t _578 = 0; // c
    _jump296:; // Begin body of loop
    _576 += _578;
    _578++;
    if (_578 < _577)
    goto _jump296;
    // End body of loop
    int64_t _579 = 569;
    int64_t _580 = _576 * _579;
    int64_t _581 = 215;
    int64_t _582 = _580 % _581;
    if (_582 >= 0)
    goto _jump297;
    fail_assertion("negative array index");
    _jump297:;
    if (_582 < _562.d0)
    goto _jump298;
    fail_assertion("index too large");
    _jump298:;
    int64_t _583 = 0;
    _583 *= _562.d0;
    _583 += _582;
    int64_t _584 = _562.data[_583];
    if (_584 > 0) 
    goto _jump299;
    fail_assertion("non-positive loop bound");
    _jump299:;
    _513 = 0;
    int64_t _585 = 0; // e
    int64_t _586 = 0; // d
    int64_t _587 = 0; // c
    _jump300:; // Begin body of loop
    _a3_int64_t _588;
    // Computing bound for f
    int64_t _589 = 835;
    _a1_int64_t _590;
    _590.d0 = 1;
    _590.data = jpl_alloc(sizeof(int64_t) * 1);
    _590.data[0] = _589;
    int64_t _591 = 145;
    int64_t _592 = -_591;
    if (_592 >= 0)
    goto _jump301;
    fail_assertion("negative array index");
    _jump301:;
    if (_592 < _590.d0)
    goto _jump302;
    fail_assertion("index too large");
    _jump302:;
    int64_t _593 = 0;
    _593 *= _590.d0;
    _593 += _592;
    int64_t _594 = _590.data[_593];
    _588.d0 = _594;
    if (_594 > 0) 
    goto _jump303;
    fail_assertion("non-positive loop bound");
    _jump303:;
    // Computing bound for g
    int64_t _595 = 58;
    _588.d1 = _595;
    if (_595 > 0) 
    goto _jump304;
    fail_assertion("non-positive loop bound");
    _jump304:;
    // Computing bound for h
    _588.d2 = _585;
    if (_585 > 0) 
    goto _jump305;
    fail_assertion("non-positive loop bound");
    _jump305:;
    // Computing total size of heap memory to allocate
    int64_t _596 = 1;
    _596 *= _594;
    _596 *= _595;
    _596 *= _585;
    _596 *= sizeof(int64_t);
    _588.data = jpl_alloc(_596);
    int64_t _597 = 0; // h
    int64_t _598 = 0; // g
    int64_t _599 = 0; // f
    _jump306:; // Begin body of loop
    int64_t _600 = 107;
    int64_t _601 = _597 - _600;
    int64_t _602 = _601 * _587;
    int64_t _603 = 0;
    _603 *= _588.d0;
    _603 += _599;
    _603 *= _588.d1;
    _603 += _598;
    _603 *= _588.d2;
    _603 += _597;
    _588.data[_603] = _602;
    _597++;
    if (_597 < _585)
    goto _jump306;
    _597 = 0;
    _598++;
    if (_598 < _595)
    goto _jump306;
    _598 = 0;
    _599++;
    if (_599 < _594)
    goto _jump306;
    // End body of loop
    int64_t _604 = 891;
    int64_t _605 = 565;
    if (_586 >= 0)
    goto _jump307;
    fail_assertion("negative array index");
    _jump307:;
    if (_586 < _588.d0)
    goto _jump308;
    fail_assertion("index too large");
    _jump308:;
    if (_604 >= 0)
    goto _jump309;
    fail_assertion("negative array index");
    _jump309:;
    if (_604 < _588.d1)
    goto _jump310;
    fail_assertion("index too large");
    _jump310:;
    if (_605 >= 0)
    goto _jump311;
    fail_assertion("negative array index");
    _jump311:;
    if (_605 < _588.d2)
    goto _jump312;
    fail_assertion("index too large");
    _jump312:;
    int64_t _606 = 0;
    _606 *= _588.d0;
    _606 += _586;
    _606 *= _588.d1;
    _606 += _604;
    _606 *= _588.d2;
    _606 += _605;
    int64_t _607 = _588.data[_606];
    _513 += _607;
    _585++;
    if (_585 < _584)
    goto _jump300;
    _585 = 0;
    _586++;
    if (_586 < _541)
    goto _jump300;
    _586 = 0;
    _587++;
    if (_587 < _540)
    goto _jump300;
    // End body of loop
    _a3_bool _608;
    // Computing bound for c
    int64_t _609 = 937;
    int64_t _610 = -_609;
    _608.d0 = _610;
    if (_610 > 0) 
    goto _jump313;
    fail_assertion("non-positive loop bound");
    _jump313:;
    // Computing bound for d
    int64_t _611 = 41;
    _608.d1 = _611;
    if (_611 > 0) 
    goto _jump314;
    fail_assertion("non-positive loop bound");
    _jump314:;
    // Computing bound for e
    int64_t _612 = 851;
    _608.d2 = _612;
    if (_612 > 0) 
    goto _jump315;
    fail_assertion("non-positive loop bound");
    _jump315:;
    // Computing total size of heap memory to allocate
    int64_t _613 = 1;
    _613 *= _610;
    _613 *= _611;
    _613 *= _612;
    _613 *= sizeof(bool);
    _608.data = jpl_alloc(_613);
    int64_t _614 = 0; // e
    int64_t _615 = 0; // d
    int64_t _616 = 0; // c
    _jump316:; // Begin body of loop
    bool _617 = true;
    bool _618 = false;
    bool _619 = _617 != _618;
    int64_t _620 = 0;
    _620 *= _608.d0;
    _620 += _616;
    _620 *= _608.d1;
    _620 += _615;
    _620 *= _608.d2;
    _620 += _614;
    _608.data[_620] = _619;
    _614++;
    if (_614 < _612)
    goto _jump316;
    _614 = 0;
    _615++;
    if (_615 < _611)
    goto _jump316;
    _615 = 0;
    _616++;
    if (_616 < _610)
    goto _jump316;
    // End body of loop
    int64_t _621 = 877;
    _a1_int64_t _622;
    _622.d0 = 1;
    _622.data = jpl_alloc(sizeof(int64_t) * 1);
    _622.data[0] = _621;
    int64_t _623 = 200;
    int64_t _624 = -_623;
    if (_624 >= 0)
    goto _jump317;
    fail_assertion("negative array index");
    _jump317:;
    if (_624 < _622.d0)
    goto _jump318;
    fail_assertion("index too large");
    _jump318:;
    int64_t _625 = 0;
    _625 *= _622.d0;
    _625 += _624;
    int64_t _626 = _622.data[_625];
    int64_t _627;
    // Computing bound for c
    int64_t _628 = 850;
    int64_t _629 = -_628;
    if (_629 > 0) 
    goto _jump319;
    fail_assertion("non-positive loop bound");
    _jump319:;
    // Computing bound for d
    int64_t _630 = 872;
    int64_t _631 = -_630;
    if (_631 > 0) 
    goto _jump320;
    fail_assertion("non-positive loop bound");
    _jump320:;
    // Computing bound for e
    int64_t _632 = 996;
    if (_632 > 0) 
    goto _jump321;
    fail_assertion("non-positive loop bound");
    _jump321:;
    _627 = 0;
    int64_t _633 = 0; // e
    int64_t _634 = 0; // d
    int64_t _635 = 0; // c
    _jump322:; // Begin body of loop
    int64_t _636 = 963;
    _627 += _636;
    _633++;
    if (_633 < _632)
    goto _jump322;
    _633 = 0;
    _634++;
    if (_634 < _631)
    goto _jump322;
    _634 = 0;
    _635++;
    if (_635 < _629)
    goto _jump322;
    // End body of loop
    int64_t _637 = 378;
    if (_626 >= 0)
    goto _jump323;
    fail_assertion("negative array index");
    _jump323:;
    if (_626 < _608.d0)
    goto _jump324;
    fail_assertion("index too large");
    _jump324:;
    if (_627 >= 0)
    goto _jump325;
    fail_assertion("negative array index");
    _jump325:;
    if (_627 < _608.d1)
    goto _jump326;
    fail_assertion("index too large");
    _jump326:;
    if (_637 >= 0)
    goto _jump327;
    fail_assertion("negative array index");
    _jump327:;
    if (_637 < _608.d2)
    goto _jump328;
    fail_assertion("index too large");
    _jump328:;
    int64_t _638 = 0;
    _638 *= _608.d0;
    _638 += _626;
    _638 *= _608.d1;
    _638 += _627;
    _638 *= _608.d2;
    _638 += _637;
    bool _639 = _608.data[_638];
    _a2_int64_t _640;
    if (!_639)
    goto _jump329;
    _a2_int64_t _641;
    // Computing bound for c
    int64_t _642;
    // Computing bound for c
    int64_t _643 = 343;
    if (_643 > 0) 
    goto _jump330;
    fail_assertion("non-positive loop bound");
    _jump330:;
    // Computing bound for d
    int64_t _644 = 842;
    if (_644 > 0) 
    goto _jump331;
    fail_assertion("non-positive loop bound");
    _jump331:;
    // Computing bound for e
    int64_t _645 = 926;
    if (_645 > 0) 
    goto _jump332;
    fail_assertion("non-positive loop bound");
    _jump332:;
    _642 = 0;
    int64_t _646 = 0; // e
    int64_t _647 = 0; // d
    int64_t _648 = 0; // c
    _jump333:; // Begin body of loop
    int64_t _649 = _648 + _647;
    _642 += _649;
    _646++;
    if (_646 < _645)
    goto _jump333;
    _646 = 0;
    _647++;
    if (_647 < _644)
    goto _jump333;
    _647 = 0;
    _648++;
    if (_648 < _643)
    goto _jump333;
    // End body of loop
    _641.d0 = _642;
    if (_642 > 0) 
    goto _jump334;
    fail_assertion("non-positive loop bound");
    _jump334:;
    // Computing bound for d
    int64_t _650 = 197;
    _641.d1 = _650;
    if (_650 > 0) 
    goto _jump335;
    fail_assertion("non-positive loop bound");
    _jump335:;
    // Computing total size of heap memory to allocate
    int64_t _651 = 1;
    _651 *= _642;
    _651 *= _650;
    _651 *= sizeof(int64_t);
    _641.data = jpl_alloc(_651);
    int64_t _652 = 0; // d
    int64_t _653 = 0; // c
    _jump336:; // Begin body of loop
    int64_t _654 = 0;
    _654 *= _641.d0;
    _654 += _653;
    _654 *= _641.d1;
    _654 += _652;
    _641.data[_654] = _652;
    _652++;
    if (_652 < _650)
    goto _jump336;
    _652 = 0;
    _653++;
    if (_653 < _642)
    goto _jump336;
    // End body of loop
    _640 = _641;
    goto _jump337;
    _jump329:;
    _a2_int64_t _655;
    // Computing bound for c
    int64_t _656 = 149;
    _655.d0 = _656;
    if (_656 > 0) 
    goto _jump338;
    fail_assertion("non-positive loop bound");
    _jump338:;
    // Computing bound for d
    int64_t _657 = 964;
    _655.d1 = _657;
    if (_657 > 0) 
    goto _jump339;
    fail_assertion("non-positive loop bound");
    _jump339:;
    // Computing total size of heap memory to allocate
    int64_t _658 = 1;
    _658 *= _656;
    _658 *= _657;
    _658 *= sizeof(int64_t);
    _655.data = jpl_alloc(_658);
    int64_t _659 = 0; // d
    int64_t _660 = 0; // c
    _jump340:; // Begin body of loop
    int64_t _661 = _660 - _660;
    int64_t _662 = 0;
    _662 *= _655.d0;
    _662 += _660;
    _662 *= _655.d1;
    _662 += _659;
    _655.data[_662] = _661;
    _659++;
    if (_659 < _657)
    goto _jump340;
    _659 = 0;
    _660++;
    if (_660 < _656)
    goto _jump340;
    // End body of loop
    _640 = _655;
    _jump337:;
    bool _663 = true;
    int64_t _664;
    if (!_663)
    goto _jump341;
    int64_t _665 = 173;
    int64_t _666 = -_665;
    int64_t _667 = -_666;
    _664 = _667;
    goto _jump342;
    _jump341:;
    int64_t _668;
    // Computing bound for c
    bool _669 = false;
    bool _670 = !_669;
    int64_t _671;
    if (!_670)
    goto _jump343;
    int64_t _672 = 385;
    _671 = _672;
    goto _jump344;
    _jump343:;
    int64_t _673 = 476;
    int64_t _674 = -_673;
    _671 = _674;
    _jump344:;
    if (_671 > 0) 
    goto _jump345;
    fail_assertion("non-positive loop bound");
    _jump345:;
    // Computing bound for d
    int64_t _675 = 24;
    int64_t _676 = -_675;
    int64_t _677 = -_676;
    if (_677 > 0) 
    goto _jump346;
    fail_assertion("non-positive loop bound");
    _jump346:;
    _668 = 0;
    int64_t _678 = 0; // d
    int64_t _679 = 0; // c
    _jump347:; // Begin body of loop
    _a1_int64_t _680;
    // Computing bound for e
    int64_t _681 = 248;
    _680.d0 = _681;
    if (_681 > 0) 
    goto _jump348;
    fail_assertion("non-positive loop bound");
    _jump348:;
    // Computing total size of heap memory to allocate
    int64_t _682 = 1;
    _682 *= _681;
    _682 *= sizeof(int64_t);
    _680.data = jpl_alloc(_682);
    int64_t _683 = 0; // e
    _jump349:; // Begin body of loop
    int64_t _684 = 0;
    _684 *= _680.d0;
    _684 += _683;
    _680.data[_684] = _679;
    _683++;
    if (_683 < _681)
    goto _jump349;
    // End body of loop
    int64_t _685 = 136;
    if (_685 >= 0)
    goto _jump350;
    fail_assertion("negative array index");
    _jump350:;
    if (_685 < _680.d0)
    goto _jump351;
    fail_assertion("index too large");
    _jump351:;
    int64_t _686 = 0;
    _686 *= _680.d0;
    _686 += _685;
    int64_t _687 = _680.data[_686];
    _668 += _687;
    _678++;
    if (_678 < _677)
    goto _jump347;
    _678 = 0;
    _679++;
    if (_679 < _671)
    goto _jump347;
    // End body of loop
    _664 = _668;
    _jump342:;
    int64_t _688;
    // Computing bound for c
    int64_t _689;
    // Computing bound for c
    int64_t _690;
    // Computing bound for c
    int64_t _691 = 108;
    if (_691 > 0) 
    goto _jump352;
    fail_assertion("non-positive loop bound");
    _jump352:;
    // Computing bound for d
    int64_t _692 = 112;
    if (_692 > 0) 
    goto _jump353;
    fail_assertion("non-positive loop bound");
    _jump353:;
    _690 = 0;
    int64_t _693 = 0; // d
    int64_t _694 = 0; // c
    _jump354:; // Begin body of loop
    int64_t _695 = _694 * _694;
    _690 += _695;
    _693++;
    if (_693 < _692)
    goto _jump354;
    _693 = 0;
    _694++;
    if (_694 < _691)
    goto _jump354;
    // End body of loop
    if (_690 > 0) 
    goto _jump355;
    fail_assertion("non-positive loop bound");
    _jump355:;
    _689 = 0;
    int64_t _696 = 0; // c
    _jump356:; // Begin body of loop
    int64_t _697 = 182;
    _689 += _697;
    _696++;
    if (_696 < _690)
    goto _jump356;
    // End body of loop
    if (_689 > 0) 
    goto _jump357;
    fail_assertion("non-positive loop bound");
    _jump357:;
    // Computing bound for d
    double _698 = -_236;
    bool _699 = _698 <= _236;
    int64_t _700;
    if (!_699)
    goto _jump358;
    bool _701 = true;
    int64_t _702;
    if (!_701)
    goto _jump359;
    int64_t _703 = 860;
    int64_t _704 = -_703;
    _702 = _704;
    goto _jump360;
    _jump359:;
    bool _705 = true;
    int64_t _706;
    if (!_705)
    goto _jump361;
    int64_t _707 = 189;
    _706 = _707;
    goto _jump362;
    _jump361:;
    int64_t _708 = 695;
    _706 = _708;
    _jump362:;
    _702 = _706;
    _jump360:;
    _700 = _702;
    goto _jump363;
    _jump358:;
    bool _709 = true;
    int64_t _710;
    if (!_709)
    goto _jump364;
    int64_t _711 = 398;
    int64_t _712 = 510;
    int64_t _713 = _711 * _712;
    _710 = _713;
    goto _jump365;
    _jump364:;
    int64_t _714 = 973;
    _710 = _714;
    _jump365:;
    _700 = _710;
    _jump363:;
    if (_700 > 0) 
    goto _jump366;
    fail_assertion("non-positive loop bound");
    _jump366:;
    // Computing bound for e
    int64_t _715;
    // Computing bound for c
    _a1_int64_t _716;
    // Computing bound for c
    int64_t _717 = 430;
    _716.d0 = _717;
    if (_717 > 0) 
    goto _jump367;
    fail_assertion("non-positive loop bound");
    _jump367:;
    // Computing total size of heap memory to allocate
    int64_t _718 = 1;
    _718 *= _717;
    _718 *= sizeof(int64_t);
    _716.data = jpl_alloc(_718);
    int64_t _719 = 0; // c
    _jump368:; // Begin body of loop
    int64_t _720 = 996;
    int64_t _721 = 0;
    _721 *= _716.d0;
    _721 += _719;
    _716.data[_721] = _720;
    _719++;
    if (_719 < _717)
    goto _jump368;
    // End body of loop
    int64_t _722 = 178;
    int64_t _723 = 720;
    int64_t _724 = _722 - _723;
    if (_724 >= 0)
    goto _jump369;
    fail_assertion("negative array index");
    _jump369:;
    if (_724 < _716.d0)
    goto _jump370;
    fail_assertion("index too large");
    _jump370:;
    int64_t _725 = 0;
    _725 *= _716.d0;
    _725 += _724;
    int64_t _726 = _716.data[_725];
    if (_726 > 0) 
    goto _jump371;
    fail_assertion("non-positive loop bound");
    _jump371:;
    _715 = 0;
    int64_t _727 = 0; // c
    _jump372:; // Begin body of loop
    _a3_int64_t _728;
    // Computing bound for d
    _728.d0 = _727;
    if (_727 > 0) 
    goto _jump373;
    fail_assertion("non-positive loop bound");
    _jump373:;
    // Computing bound for e
    int64_t _729 = 484;
    _728.d1 = _729;
    if (_729 > 0) 
    goto _jump374;
    fail_assertion("non-positive loop bound");
    _jump374:;
    // Computing bound for f
    _728.d2 = _727;
    if (_727 > 0) 
    goto _jump375;
    fail_assertion("non-positive loop bound");
    _jump375:;
    // Computing total size of heap memory to allocate
    int64_t _730 = 1;
    _730 *= _727;
    _730 *= _729;
    _730 *= _727;
    _730 *= sizeof(int64_t);
    _728.data = jpl_alloc(_730);
    int64_t _731 = 0; // f
    int64_t _732 = 0; // e
    int64_t _733 = 0; // d
    _jump376:; // Begin body of loop
    int64_t _734 = 0;
    _734 *= _728.d0;
    _734 += _733;
    _734 *= _728.d1;
    _734 += _732;
    _734 *= _728.d2;
    _734 += _731;
    _728.data[_734] = _732;
    _731++;
    if (_731 < _727)
    goto _jump376;
    _731 = 0;
    _732++;
    if (_732 < _729)
    goto _jump376;
    _732 = 0;
    _733++;
    if (_733 < _727)
    goto _jump376;
    // End body of loop
    int64_t _735 = 66;
    int64_t _736 = -_735;
    int64_t _737 = 684;
    int64_t _738 = -_737;
    if (_736 >= 0)
    goto _jump377;
    fail_assertion("negative array index");
    _jump377:;
    if (_736 < _728.d0)
    goto _jump378;
    fail_assertion("index too large");
    _jump378:;
    if (_738 >= 0)
    goto _jump379;
    fail_assertion("negative array index");
    _jump379:;
    if (_738 < _728.d1)
    goto _jump380;
    fail_assertion("index too large");
    _jump380:;
    if (_727 >= 0)
    goto _jump381;
    fail_assertion("negative array index");
    _jump381:;
    if (_727 < _728.d2)
    goto _jump382;
    fail_assertion("index too large");
    _jump382:;
    int64_t _739 = 0;
    _739 *= _728.d0;
    _739 += _736;
    _739 *= _728.d1;
    _739 += _738;
    _739 *= _728.d2;
    _739 += _727;
    int64_t _740 = _728.data[_739];
    _715 += _740;
    _727++;
    if (_727 < _726)
    goto _jump372;
    // End body of loop
    if (_715 > 0) 
    goto _jump383;
    fail_assertion("non-positive loop bound");
    _jump383:;
    _688 = 0;
    int64_t _741 = 0; // e
    int64_t _742 = 0; // d
    int64_t _743 = 0; // c
    _jump384:; // Begin body of loop
    int64_t _744 = 748;
    int64_t _745 = -_744;
    _688 += _745;
    _741++;
    if (_741 < _715)
    goto _jump384;
    _741 = 0;
    _742++;
    if (_742 < _700)
    goto _jump384;
    _742 = 0;
    _743++;
    if (_743 < _689)
    goto _jump384;
    // End body of loop
    if (_664 >= 0)
    goto _jump385;
    fail_assertion("negative array index");
    _jump385:;
    if (_664 < _640.d0)
    goto _jump386;
    fail_assertion("index too large");
    _jump386:;
    if (_688 >= 0)
    goto _jump387;
    fail_assertion("negative array index");
    _jump387:;
    if (_688 < _640.d1)
    goto _jump388;
    fail_assertion("index too large");
    _jump388:;
    int64_t _746 = 0;
    _746 *= _640.d0;
    _746 += _664;
    _746 *= _640.d1;
    _746 += _688;
    int64_t _747 = _640.data[_746];
    int64_t _748 = _513 * _747;
    if (_512 >= 0)
    goto _jump389;
    fail_assertion("negative array index");
    _jump389:;
    if (_512 < _237.d0)
    goto _jump390;
    fail_assertion("index too large");
    _jump390:;
    if (_748 >= 0)
    goto _jump391;
    fail_assertion("negative array index");
    _jump391:;
    if (_748 < _237.d1)
    goto _jump392;
    fail_assertion("index too large");
    _jump392:;
    int64_t _749 = 0;
    _749 *= _237.d0;
    _749 += _512;
    _749 *= _237.d1;
    _749 += _748;
    bool _750 = _237.data[_749];
    if (0 != _750)
    goto _jump393;
    fail_assertion("c");
    _jump393:;
    _a1__a3_bool _751;
    // Computing bound for c
    int64_t _752 = 497;
    _751.d0 = _752;
    if (_752 > 0) 
    goto _jump394;
    fail_assertion("non-positive loop bound");
    _jump394:;
    // Computing total size of heap memory to allocate
    int64_t _753 = 1;
    _753 *= _752;
    _753 *= sizeof(_a3_bool);
    _751.data = jpl_alloc(_753);
    int64_t _754 = 0; // c
    _jump395:; // Begin body of loop
    _a2__a3_bool _755;
    // Computing bound for d
    int64_t _756;
    // Computing bound for d
    if (_754 > 0) 
    goto _jump396;
    fail_assertion("non-positive loop bound");
    _jump396:;
    // Computing bound for e
    int64_t _757 = 353;
    if (_757 > 0) 
    goto _jump397;
    fail_assertion("non-positive loop bound");
    _jump397:;
    _756 = 0;
    int64_t _758 = 0; // e
    int64_t _759 = 0; // d
    _jump398:; // Begin body of loop
    int64_t _760 = 322;
    _756 += _760;
    _758++;
    if (_758 < _757)
    goto _jump398;
    _758 = 0;
    _759++;
    if (_759 < _754)
    goto _jump398;
    // End body of loop
    int64_t _761 = 239;
    int64_t _762 = _756 + _761;
    int64_t _763 = -_762;
    _755.d0 = _763;
    if (_763 > 0) 
    goto _jump399;
    fail_assertion("non-positive loop bound");
    _jump399:;
    // Computing bound for e
    int64_t _764 = 356;
    bool _765 = _754 >= _764;
    int64_t _766;
    if (!_765)
    goto _jump400;
    _766 = _754;
    goto _jump401;
    _jump400:;
    _766 = _754;
    _jump401:;
    _755.d1 = _766;
    if (_766 > 0) 
    goto _jump402;
    fail_assertion("non-positive loop bound");
    _jump402:;
    // Computing total size of heap memory to allocate
    int64_t _767 = 1;
    _767 *= _763;
    _767 *= _766;
    _767 *= sizeof(_a3_bool);
    _755.data = jpl_alloc(_767);
    int64_t _768 = 0; // e
    int64_t _769 = 0; // d
    _jump403:; // Begin body of loop
    _a3_bool _770;
    // Computing bound for f
    _770.d0 = _768;
    if (_768 > 0) 
    goto _jump404;
    fail_assertion("non-positive loop bound");
    _jump404:;
    // Computing bound for g
    int64_t _771 = -_769;
    int64_t _772 = -_771;
    _770.d1 = _772;
    if (_772 > 0) 
    goto _jump405;
    fail_assertion("non-positive loop bound");
    _jump405:;
    // Computing bound for h
    int64_t _773 = -_769;
    int64_t _774 = _773 + _754;
    _770.d2 = _774;
    if (_774 > 0) 
    goto _jump406;
    fail_assertion("non-positive loop bound");
    _jump406:;
    // Computing total size of heap memory to allocate
    int64_t _775 = 1;
    _775 *= _768;
    _775 *= _772;
    _775 *= _774;
    _775 *= sizeof(bool);
    _770.data = jpl_alloc(_775);
    int64_t _776 = 0; // h
    int64_t _777 = 0; // g
    int64_t _778 = 0; // f
    _jump407:; // Begin body of loop
    int64_t _779 = 235;
    bool _780 = _778 > _779;
    bool _781;
    if (!_780)
    goto _jump408;
    bool _783 = false;
    bool _782 = _783;
    if (0 != _783)
    goto _jump409;
    bool _784 = true;
    _782 = _784;
    _jump409:;
    _781 = _782;
    goto _jump410;
    _jump408:;
    bool _785 = true;
    _781 = _785;
    _jump410:;
    int64_t _786 = 0;
    _786 *= _770.d0;
    _786 += _778;
    _786 *= _770.d1;
    _786 += _777;
    _786 *= _770.d2;
    _786 += _776;
    _770.data[_786] = _781;
    _776++;
    if (_776 < _774)
    goto _jump407;
    _776 = 0;
    _777++;
    if (_777 < _772)
    goto _jump407;
    _777 = 0;
    _778++;
    if (_778 < _768)
    goto _jump407;
    // End body of loop
    int64_t _787 = 0;
    _787 *= _755.d0;
    _787 += _769;
    _787 *= _755.d1;
    _787 += _768;
    _755.data[_787] = _770;
    _768++;
    if (_768 < _766)
    goto _jump403;
    _768 = 0;
    _769++;
    if (_769 < _763)
    goto _jump403;
    // End body of loop
    int64_t _788 = 649;
    int64_t _789 = _754 / _788;
    int64_t _790;
    // Computing bound for d
    int64_t _791 = 236;
    if (_791 > 0) 
    goto _jump411;
    fail_assertion("non-positive loop bound");
    _jump411:;
    // Computing bound for e
    int64_t _792 = _754 * _754;
    int64_t _793 = -_792;
    if (_793 > 0) 
    goto _jump412;
    fail_assertion("non-positive loop bound");
    _jump412:;
    _790 = 0;
    int64_t _794 = 0; // e
    int64_t _795 = 0; // d
    _jump413:; // Begin body of loop
    bool _796 = false;
    int64_t _797;
    if (!_796)
    goto _jump414;
    int64_t _798 = 623;
    bool _799 = _794 < _798;
    int64_t _800;
    if (!_799)
    goto _jump415;
    _800 = _794;
    goto _jump416;
    _jump415:;
    int64_t _801 = 325;
    _800 = _801;
    _jump416:;
    _797 = _800;
    goto _jump417;
    _jump414:;
    int64_t _802;
    // Computing bound for f
    int64_t _803;
    // Computing bound for f
    if (_754 > 0) 
    goto _jump418;
    fail_assertion("non-positive loop bound");
    _jump418:;
    // Computing bound for g
    int64_t _804 = 415;
    if (_804 > 0) 
    goto _jump419;
    fail_assertion("non-positive loop bound");
    _jump419:;
    // Computing bound for h
    if (_794 > 0) 
    goto _jump420;
    fail_assertion("non-positive loop bound");
    _jump420:;
    _803 = 0;
    int64_t _805 = 0; // h
    int64_t _806 = 0; // g
    int64_t _807 = 0; // f
    _jump421:; // Begin body of loop
    _803 += _805;
    _805++;
    if (_805 < _794)
    goto _jump421;
    _805 = 0;
    _806++;
    if (_806 < _804)
    goto _jump421;
    _806 = 0;
    _807++;
    if (_807 < _754)
    goto _jump421;
    // End body of loop
    if (_803 > 0) 
    goto _jump422;
    fail_assertion("non-positive loop bound");
    _jump422:;
    // Computing bound for g
    if (_795 > 0) 
    goto _jump423;
    fail_assertion("non-positive loop bound");
    _jump423:;
    _802 = 0;
    int64_t _808 = 0; // g
    int64_t _809 = 0; // f
    _jump424:; // Begin body of loop
    int64_t _810 = 970;
    _802 += _810;
    _808++;
    if (_808 < _795)
    goto _jump424;
    _808 = 0;
    _809++;
    if (_809 < _803)
    goto _jump424;
    // End body of loop
    _797 = _802;
    _jump417:;
    _790 += _797;
    _794++;
    if (_794 < _793)
    goto _jump413;
    _794 = 0;
    _795++;
    if (_795 < _791)
    goto _jump413;
    // End body of loop
    if (_789 >= 0)
    goto _jump425;
    fail_assertion("negative array index");
    _jump425:;
    if (_789 < _755.d0)
    goto _jump426;
    fail_assertion("index too large");
    _jump426:;
    if (_790 >= 0)
    goto _jump427;
    fail_assertion("negative array index");
    _jump427:;
    if (_790 < _755.d1)
    goto _jump428;
    fail_assertion("index too large");
    _jump428:;
    int64_t _811 = 0;
    _811 *= _755.d0;
    _811 += _789;
    _811 *= _755.d1;
    _811 += _790;
    _a3_bool _812 = _755.data[_811];
    int64_t _813 = 0;
    _813 *= _751.d0;
    _813 += _754;
    _751.data[_813] = _812;
    _754++;
    if (_754 < _752)
    goto _jump395;
    // End body of loop
    _a2_int64_t _814;
    // Computing bound for c
    int64_t _815;
    // Computing bound for c
    int64_t _816;
    // Computing bound for c
    int64_t _817 = 121;
    int64_t _818 = -_817;
    if (_818 > 0) 
    goto _jump429;
    fail_assertion("non-positive loop bound");
    _jump429:;
    // Computing bound for d
    int64_t _819 = 300;
    int64_t _820 = -_819;
    if (_820 > 0) 
    goto _jump430;
    fail_assertion("non-positive loop bound");
    _jump430:;
    _816 = 0;
    int64_t _821 = 0; // d
    int64_t _822 = 0; // c
    _jump431:; // Begin body of loop
    _816 += _821;
    _821++;
    if (_821 < _820)
    goto _jump431;
    _821 = 0;
    _822++;
    if (_822 < _818)
    goto _jump431;
    // End body of loop
    if (_816 > 0) 
    goto _jump432;
    fail_assertion("non-positive loop bound");
    _jump432:;
    // Computing bound for d
    int64_t _823 = 138;
    int64_t _824 = 664;
    int64_t _825 = -_824;
    int64_t _826 = _823 % _825;
    if (_826 > 0) 
    goto _jump433;
    fail_assertion("non-positive loop bound");
    _jump433:;
    // Computing bound for e
    int64_t _827 = 45;
    int64_t _828 = 363;
    int64_t _829 = 561;
    int64_t _830 = _828 * _829;
    int64_t _831 = _827 % _830;
    if (_831 > 0) 
    goto _jump434;
    fail_assertion("non-positive loop bound");
    _jump434:;
    _815 = 0;
    int64_t _832 = 0; // e
    int64_t _833 = 0; // d
    int64_t _834 = 0; // c
    _jump435:; // Begin body of loop
    _815 += _834;
    _832++;
    if (_832 < _831)
    goto _jump435;
    _832 = 0;
    _833++;
    if (_833 < _826)
    goto _jump435;
    _833 = 0;
    _834++;
    if (_834 < _816)
    goto _jump435;
    // End body of loop
    int64_t _835;
    // Computing bound for c
    int64_t _836 = 317;
    int64_t _837 = -_836;
    if (_837 > 0) 
    goto _jump436;
    fail_assertion("non-positive loop bound");
    _jump436:;
    // Computing bound for d
    int64_t _838 = 512;
    int64_t _839 = -_838;
    if (_839 > 0) 
    goto _jump437;
    fail_assertion("non-positive loop bound");
    _jump437:;
    // Computing bound for e
    int64_t _840 = 576;
    if (_840 > 0) 
    goto _jump438;
    fail_assertion("non-positive loop bound");
    _jump438:;
    _835 = 0;
    int64_t _841 = 0; // e
    int64_t _842 = 0; // d
    int64_t _843 = 0; // c
    _jump439:; // Begin body of loop
    int64_t _844 = 514;
    _835 += _844;
    _841++;
    if (_841 < _840)
    goto _jump439;
    _841 = 0;
    _842++;
    if (_842 < _839)
    goto _jump439;
    _842 = 0;
    _843++;
    if (_843 < _837)
    goto _jump439;
    // End body of loop
    int64_t _845 = -_835;
    int64_t _846 = _815 - _845;
    _814.d0 = _846;
    if (_846 > 0) 
    goto _jump440;
    fail_assertion("non-positive loop bound");
    _jump440:;
    // Computing bound for d
    int64_t _847;
    // Computing bound for c
    int64_t _848 = 720;
    int64_t _849 = -_848;
    int64_t _850 = 107;
    int64_t _851 = _849 / _850;
    if (_851 > 0) 
    goto _jump441;
    fail_assertion("non-positive loop bound");
    _jump441:;
    // Computing bound for d
    int64_t _852;
    // Computing bound for c
    int64_t _853 = 761;
    int64_t _854 = -_853;
    if (_854 > 0) 
    goto _jump442;
    fail_assertion("non-positive loop bound");
    _jump442:;
    // Computing bound for d
    int64_t _855 = 646;
    if (_855 > 0) 
    goto _jump443;
    fail_assertion("non-positive loop bound");
    _jump443:;
    _852 = 0;
    int64_t _856 = 0; // d
    int64_t _857 = 0; // c
    _jump444:; // Begin body of loop
    _852 += _856;
    _856++;
    if (_856 < _855)
    goto _jump444;
    _856 = 0;
    _857++;
    if (_857 < _854)
    goto _jump444;
    // End body of loop
    int64_t _858 = -_852;
    if (_858 > 0) 
    goto _jump445;
    fail_assertion("non-positive loop bound");
    _jump445:;
    // Computing bound for e
    int64_t _859;
    // Computing bound for c
    int64_t _860 = 722;
    int64_t _861 = 760;
    int64_t _862 = _860 / _861;
    int64_t _863 = -_862;
    if (_863 > 0) 
    goto _jump446;
    fail_assertion("non-positive loop bound");
    _jump446:;
    _859 = 0;
    int64_t _864 = 0; // c
    _jump447:; // Begin body of loop
    int64_t _865;
    // Computing bound for d
    if (_864 > 0) 
    goto _jump448;
    fail_assertion("non-positive loop bound");
    _jump448:;
    // Computing bound for e
    int64_t _866;
    // Computing bound for d
    if (_864 > 0) 
    goto _jump449;
    fail_assertion("non-positive loop bound");
    _jump449:;
    // Computing bound for e
    int64_t _867 = 9;
    if (_867 > 0) 
    goto _jump450;
    fail_assertion("non-positive loop bound");
    _jump450:;
    _866 = 0;
    int64_t _868 = 0; // e
    int64_t _869 = 0; // d
    _jump451:; // Begin body of loop
    _866 += _869;
    _868++;
    if (_868 < _867)
    goto _jump451;
    _868 = 0;
    _869++;
    if (_869 < _864)
    goto _jump451;
    // End body of loop
    if (_866 > 0) 
    goto _jump452;
    fail_assertion("non-positive loop bound");
    _jump452:;
    // Computing bound for f
    int64_t _870;
    // Computing bound for d
    if (_864 > 0) 
    goto _jump453;
    fail_assertion("non-positive loop bound");
    _jump453:;
    _870 = 0;
    int64_t _871 = 0; // d
    _jump454:; // Begin body of loop
    _870 += _864;
    _871++;
    if (_871 < _864)
    goto _jump454;
    // End body of loop
    if (_870 > 0) 
    goto _jump455;
    fail_assertion("non-positive loop bound");
    _jump455:;
    _865 = 0;
    int64_t _872 = 0; // f
    int64_t _873 = 0; // e
    int64_t _874 = 0; // d
    _jump456:; // Begin body of loop
    int64_t _875 = _874 * _864;
    _865 += _875;
    _872++;
    if (_872 < _870)
    goto _jump456;
    _872 = 0;
    _873++;
    if (_873 < _866)
    goto _jump456;
    _873 = 0;
    _874++;
    if (_874 < _864)
    goto _jump456;
    // End body of loop
    _859 += _865;
    _864++;
    if (_864 < _863)
    goto _jump447;
    // End body of loop
    if (_859 > 0) 
    goto _jump457;
    fail_assertion("non-positive loop bound");
    _jump457:;
    _847 = 0;
    int64_t _876 = 0; // e
    int64_t _877 = 0; // d
    int64_t _878 = 0; // c
    _jump458:; // Begin body of loop
    int64_t _879;
    // Computing bound for f
    int64_t _880 = 854;
    if (_880 > 0) 
    goto _jump459;
    fail_assertion("non-positive loop bound");
    _jump459:;
    // Computing bound for g
    if (_877 > 0) 
    goto _jump460;
    fail_assertion("non-positive loop bound");
    _jump460:;
    _879 = 0;
    int64_t _881 = 0; // g
    int64_t _882 = 0; // f
    _jump461:; // Begin body of loop
    _879 += _878;
    _881++;
    if (_881 < _877)
    goto _jump461;
    _881 = 0;
    _882++;
    if (_882 < _880)
    goto _jump461;
    // End body of loop
    _a1_int64_t _883;
    _883.d0 = 1;
    _883.data = jpl_alloc(sizeof(int64_t) * 1);
    _883.data[0] = _879;
    int64_t _884 = 335;
    int64_t _885 = -_884;
    if (_885 >= 0)
    goto _jump462;
    fail_assertion("negative array index");
    _jump462:;
    if (_885 < _883.d0)
    goto _jump463;
    fail_assertion("index too large");
    _jump463:;
    int64_t _886 = 0;
    _886 *= _883.d0;
    _886 += _885;
    int64_t _887 = _883.data[_886];
    _847 += _887;
    _876++;
    if (_876 < _859)
    goto _jump458;
    _876 = 0;
    _877++;
    if (_877 < _858)
    goto _jump458;
    _877 = 0;
    _878++;
    if (_878 < _851)
    goto _jump458;
    // End body of loop
    _814.d1 = _847;
    if (_847 > 0) 
    goto _jump464;
    fail_assertion("non-positive loop bound");
    _jump464:;
    // Computing total size of heap memory to allocate
    int64_t _888 = 1;
    _888 *= _846;
    _888 *= _847;
    _888 *= sizeof(int64_t);
    _814.data = jpl_alloc(_888);
    int64_t _889 = 0; // d
    int64_t _890 = 0; // c
    _jump465:; // Begin body of loop
    int64_t _891 = 0;
    _891 *= _814.d0;
    _891 += _890;
    _891 *= _814.d1;
    _891 += _889;
    _814.data[_891] = _890;
    _889++;
    if (_889 < _847)
    goto _jump465;
    _889 = 0;
    _890++;
    if (_890 < _846)
    goto _jump465;
    // End body of loop
    _a2_int64_t _892;
    // Computing bound for c
    bool _893 = true;
    bool _894 = false;
    bool _895 = _893 == _894;
    int64_t _896;
    if (!_895)
    goto _jump466;
    int64_t _897 = 991;
    _896 = _897;
    goto _jump467;
    _jump466:;
    int64_t _898 = 202;
    _896 = _898;
    _jump467:;
    int64_t _899 = -_896;
    _892.d0 = _899;
    if (_899 > 0) 
    goto _jump468;
    fail_assertion("non-positive loop bound");
    _jump468:;
    // Computing bound for d
    int64_t _900 = 764;
    int64_t _901 = -_900;
    int64_t _902 = 803;
    int64_t _903 = _901 * _902;
    int64_t _904 = 694;
    int64_t _905 = -_904;
    int64_t _906 = _903 + _905;
    _892.d1 = _906;
    if (_906 > 0) 
    goto _jump469;
    fail_assertion("non-positive loop bound");
    _jump469:;
    // Computing total size of heap memory to allocate
    int64_t _907 = 1;
    _907 *= _899;
    _907 *= _906;
    _907 *= sizeof(int64_t);
    _892.data = jpl_alloc(_907);
    int64_t _908 = 0; // d
    int64_t _909 = 0; // c
    _jump470:; // Begin body of loop
    int64_t _910 = -_909;
    int64_t _911 = -_910;
    int64_t _912 = 0;
    _912 *= _892.d0;
    _912 += _909;
    _912 *= _892.d1;
    _912 += _908;
    _892.data[_912] = _911;
    _908++;
    if (_908 < _906)
    goto _jump470;
    _908 = 0;
    _909++;
    if (_909 < _899)
    goto _jump470;
    // End body of loop
    double _914 = 35.0;
    bool _915 = _914 == _236;
    bool _913 = _915;
    if (0 != _915)
    goto _jump471;
    bool _916 = false;
    _913 = _916;
    _jump471:;
    int64_t _917;
    if (!_913)
    goto _jump472;
    double _918 = 13.0;
    double _919 = 53.0;
    bool _920 = _918 == _919;
    int64_t _921;
    if (!_920)
    goto _jump473;
    int64_t _922 = 227;
    _921 = _922;
    goto _jump474;
    _jump473:;
    int64_t _923;
    // Computing bound for c
    int64_t _924 = 348;
    int64_t _925 = -_924;
    if (_925 > 0) 
    goto _jump475;
    fail_assertion("non-positive loop bound");
    _jump475:;
    // Computing bound for d
    int64_t _926 = 714;
    if (_926 > 0) 
    goto _jump476;
    fail_assertion("non-positive loop bound");
    _jump476:;
    _923 = 0;
    int64_t _927 = 0; // d
    int64_t _928 = 0; // c
    _jump477:; // Begin body of loop
    _923 += _928;
    _927++;
    if (_927 < _926)
    goto _jump477;
    _927 = 0;
    _928++;
    if (_928 < _925)
    goto _jump477;
    // End body of loop
    _921 = _923;
    _jump474:;
    _917 = _921;
    goto _jump478;
    _jump472:;
    int64_t _929 = 836;
    bool _930 = true;
    int64_t _931;
    if (!_930)
    goto _jump479;
    int64_t _932 = 615;
    _931 = _932;
    goto _jump480;
    _jump479:;
    int64_t _933 = 376;
    int64_t _934 = -_933;
    _931 = _934;
    _jump480:;
    int64_t _935 = _929 * _931;
    _917 = _935;
    _jump478:;
    bool _936 = true;
    int64_t _937;
    if (!_936)
    goto _jump481;
    int64_t _938;
    // Computing bound for c
    int64_t _939 = 984;
    if (_939 > 0) 
    goto _jump482;
    fail_assertion("non-positive loop bound");
    _jump482:;
    // Computing bound for d
    int64_t _940 = 20;
    if (_940 > 0) 
    goto _jump483;
    fail_assertion("non-positive loop bound");
    _jump483:;
    // Computing bound for e
    int64_t _941 = 970;
    if (_941 > 0) 
    goto _jump484;
    fail_assertion("non-positive loop bound");
    _jump484:;
    _938 = 0;
    int64_t _942 = 0; // e
    int64_t _943 = 0; // d
    int64_t _944 = 0; // c
    _jump485:; // Begin body of loop
    _938 += _943;
    _942++;
    if (_942 < _941)
    goto _jump485;
    _942 = 0;
    _943++;
    if (_943 < _940)
    goto _jump485;
    _943 = 0;
    _944++;
    if (_944 < _939)
    goto _jump485;
    // End body of loop
    _937 = _938;
    goto _jump486;
    _jump481:;
    int64_t _945 = 647;
    _937 = _945;
    _jump486:;
    int64_t _946 = -_937;
    _a2_int64_t _947;
    // Computing bound for c
    int64_t _948 = 383;
    _947.d0 = _948;
    if (_948 > 0) 
    goto _jump487;
    fail_assertion("non-positive loop bound");
    _jump487:;
    // Computing bound for d
    int64_t _949 = 112;
    _947.d1 = _949;
    if (_949 > 0) 
    goto _jump488;
    fail_assertion("non-positive loop bound");
    _jump488:;
    // Computing total size of heap memory to allocate
    int64_t _950 = 1;
    _950 *= _948;
    _950 *= _949;
    _950 *= sizeof(int64_t);
    _947.data = jpl_alloc(_950);
    int64_t _951 = 0; // d
    int64_t _952 = 0; // c
    _jump489:; // Begin body of loop
    int64_t _953 = -_952;
    int64_t _954 = 0;
    _954 *= _947.d0;
    _954 += _952;
    _954 *= _947.d1;
    _954 += _951;
    _947.data[_954] = _953;
    _951++;
    if (_951 < _949)
    goto _jump489;
    _951 = 0;
    _952++;
    if (_952 < _948)
    goto _jump489;
    // End body of loop
    int64_t _955 = 193;
    int64_t _956 = 557;
    int64_t _957 = -_956;
    int64_t _958 = -_957;
    if (_955 >= 0)
    goto _jump490;
    fail_assertion("negative array index");
    _jump490:;
    if (_955 < _947.d0)
    goto _jump491;
    fail_assertion("index too large");
    _jump491:;
    if (_958 >= 0)
    goto _jump492;
    fail_assertion("negative array index");
    _jump492:;
    if (_958 < _947.d1)
    goto _jump493;
    fail_assertion("index too large");
    _jump493:;
    int64_t _959 = 0;
    _959 *= _947.d0;
    _959 += _955;
    _959 *= _947.d1;
    _959 += _958;
    int64_t _960 = _947.data[_959];
    int64_t _961 = _946 / _960;
    if (_917 >= 0)
    goto _jump494;
    fail_assertion("negative array index");
    _jump494:;
    if (_917 < _892.d0)
    goto _jump495;
    fail_assertion("index too large");
    _jump495:;
    if (_961 >= 0)
    goto _jump496;
    fail_assertion("negative array index");
    _jump496:;
    if (_961 < _892.d1)
    goto _jump497;
    fail_assertion("index too large");
    _jump497:;
    int64_t _962 = 0;
    _962 *= _892.d0;
    _962 += _917;
    _962 *= _892.d1;
    _962 += _961;
    int64_t _963 = _892.data[_962];
    int64_t _964 = 682;
    bool _965 = false;
    bool _966 = false;
    bool _967 = _965 != _966;
    bool _968 = !_967;
    bool _969 = !_968;
    int64_t _970;
    if (!_969)
    goto _jump498;
    _a3_int64_t _971;
    // Computing bound for c
    int64_t _972 = 784;
    int64_t _973 = -_972;
    _971.d0 = _973;
    if (_973 > 0) 
    goto _jump499;
    fail_assertion("non-positive loop bound");
    _jump499:;
    // Computing bound for d
    int64_t _974 = 198;
    _971.d1 = _974;
    if (_974 > 0) 
    goto _jump500;
    fail_assertion("non-positive loop bound");
    _jump500:;
    // Computing bound for e
    int64_t _975 = 39;
    int64_t _976 = -_975;
    _971.d2 = _976;
    if (_976 > 0) 
    goto _jump501;
    fail_assertion("non-positive loop bound");
    _jump501:;
    // Computing total size of heap memory to allocate
    int64_t _977 = 1;
    _977 *= _973;
    _977 *= _974;
    _977 *= _976;
    _977 *= sizeof(int64_t);
    _971.data = jpl_alloc(_977);
    int64_t _978 = 0; // e
    int64_t _979 = 0; // d
    int64_t _980 = 0; // c
    _jump502:; // Begin body of loop
    int64_t _981 = _979 + _980;
    int64_t _982 = 0;
    _982 *= _971.d0;
    _982 += _980;
    _982 *= _971.d1;
    _982 += _979;
    _982 *= _971.d2;
    _982 += _978;
    _971.data[_982] = _981;
    _978++;
    if (_978 < _976)
    goto _jump502;
    _978 = 0;
    _979++;
    if (_979 < _974)
    goto _jump502;
    _979 = 0;
    _980++;
    if (_980 < _973)
    goto _jump502;
    // End body of loop
    int64_t _983 = 150;
    int64_t _984 = -_983;
    int64_t _985 = 424;
    int64_t _986 = -_985;
    int64_t _987 = 876;
    int64_t _988 = 489;
    int64_t _989 = _987 + _988;
    int64_t _990 = _986 - _989;
    int64_t _991;
    // Computing bound for c
    int64_t _992;
    // Computing bound for c
    int64_t _993 = 781;
    if (_993 > 0) 
    goto _jump503;
    fail_assertion("non-positive loop bound");
    _jump503:;
    // Computing bound for d
    int64_t _994 = 97;
    if (_994 > 0) 
    goto _jump504;
    fail_assertion("non-positive loop bound");
    _jump504:;
    _992 = 0;
    int64_t _995 = 0; // d
    int64_t _996 = 0; // c
    _jump505:; // Begin body of loop
    _992 += _995;
    _995++;
    if (_995 < _994)
    goto _jump505;
    _995 = 0;
    _996++;
    if (_996 < _993)
    goto _jump505;
    // End body of loop
    if (_992 > 0) 
    goto _jump506;
    fail_assertion("non-positive loop bound");
    _jump506:;
    _991 = 0;
    int64_t _997 = 0; // c
    _jump507:; // Begin body of loop
    _991 += _997;
    _997++;
    if (_997 < _992)
    goto _jump507;
    // End body of loop
    if (_984 >= 0)
    goto _jump508;
    fail_assertion("negative array index");
    _jump508:;
    if (_984 < _971.d0)
    goto _jump509;
    fail_assertion("index too large");
    _jump509:;
    if (_990 >= 0)
    goto _jump510;
    fail_assertion("negative array index");
    _jump510:;
    if (_990 < _971.d1)
    goto _jump511;
    fail_assertion("index too large");
    _jump511:;
    if (_991 >= 0)
    goto _jump512;
    fail_assertion("negative array index");
    _jump512:;
    if (_991 < _971.d2)
    goto _jump513;
    fail_assertion("index too large");
    _jump513:;
    int64_t _998 = 0;
    _998 *= _971.d0;
    _998 += _984;
    _998 *= _971.d1;
    _998 += _990;
    _998 *= _971.d2;
    _998 += _991;
    int64_t _999 = _971.data[_998];
    _970 = _999;
    goto _jump514;
    _jump498:;
    int64_t _1000 = 286;
    int64_t _1001;
    // Computing bound for c
    int64_t _1002 = 90;
    if (_1002 > 0) 
    goto _jump515;
    fail_assertion("non-positive loop bound");
    _jump515:;
    // Computing bound for d
    int64_t _1003 = 896;
    int64_t _1004 = -_1003;
    if (_1004 > 0) 
    goto _jump516;
    fail_assertion("non-positive loop bound");
    _jump516:;
    _1001 = 0;
    int64_t _1005 = 0; // d
    int64_t _1006 = 0; // c
    _jump517:; // Begin body of loop
    int64_t _1007 = 884;
    _1001 += _1007;
    _1005++;
    if (_1005 < _1004)
    goto _jump517;
    _1005 = 0;
    _1006++;
    if (_1006 < _1002)
    goto _jump517;
    // End body of loop
    int64_t _1008 = _1000 % _1001;
    _970 = _1008;
    _jump514:;
    int64_t _1009 = _964 % _970;
    if (_963 >= 0)
    goto _jump518;
    fail_assertion("negative array index");
    _jump518:;
    if (_963 < _814.d0)
    goto _jump519;
    fail_assertion("index too large");
    _jump519:;
    if (_1009 >= 0)
    goto _jump520;
    fail_assertion("negative array index");
    _jump520:;
    if (_1009 < _814.d1)
    goto _jump521;
    fail_assertion("index too large");
    _jump521:;
    int64_t _1010 = 0;
    _1010 *= _814.d0;
    _1010 += _963;
    _1010 *= _814.d1;
    _1010 += _1009;
    int64_t _1011 = _814.data[_1010];
    if (_1011 >= 0)
    goto _jump522;
    fail_assertion("negative array index");
    _jump522:;
    if (_1011 < _751.d0)
    goto _jump523;
    fail_assertion("index too large");
    _jump523:;
    int64_t _1012 = 0;
    _1012 *= _751.d0;
    _1012 += _1011;
    _a3_bool _1013 = _751.data[_1012];
    bool _1016 = true;
    bool _1015 = _1016;
    if (0 != _1016)
    goto _jump524;
    bool _1017 = true;
    _1015 = _1017;
    _jump524:;
    bool _1014 = _1015;
    if (0 != _1015)
    goto _jump525;
    bool _1019 = true;
    bool _1018 = _1019;
    if (0 != _1019)
    goto _jump526;
    bool _1020 = false;
    _1018 = _1020;
    _jump526:;
    _1014 = _1018;
    _jump525:;
    bool _1021;
    if (!_1014)
    goto _jump527;
    double _1023 = 65.0;
    double _1024 = 87.0;
    double _1025 = -_1024;
    bool _1026 = _1023 > _1025;
    bool _1022 = _1026;
    if (0 != _1026)
    goto _jump528;
    double _1027 = 51.0;
    double _1028 = -_1027;
    bool _1029 = _236 < _1028;
    _1022 = _1029;
    _jump528:;
    _1021 = _1022;
    goto _jump529;
    _jump527:;
    double _1030 = 44.0;
    double _1031 = 32.0;
    bool _1032 = _1030 != _1031;
    _1021 = _1032;
    _jump529:;
    bool _1033 = !_1021;
    _a3__a3_bool _1034;
    if (!_1033)
    goto _jump530;
    _a3__a3_bool _1035;
    // Computing bound for g
    int64_t _1036;
    // Computing bound for g
    if (_1013.d2 > 0) 
    goto _jump531;
    fail_assertion("non-positive loop bound");
    _jump531:;
    _1036 = 0;
    int64_t _1037 = 0; // g
    _jump532:; // Begin body of loop
    _1036 += _1013.d0;
    _1037++;
    if (_1037 < _1013.d2)
    goto _jump532;
    // End body of loop
    _1035.d0 = _1036;
    if (_1036 > 0) 
    goto _jump533;
    fail_assertion("non-positive loop bound");
    _jump533:;
    // Computing bound for h
    _1035.d1 = _1013.d0;
    if (_1013.d0 > 0) 
    goto _jump534;
    fail_assertion("non-positive loop bound");
    _jump534:;
    // Computing bound for i
    _a3_int64_t _1038;
    // Computing bound for g
    int64_t _1039;
    // Computing bound for g
    if (_1013.d0 > 0) 
    goto _jump535;
    fail_assertion("non-positive loop bound");
    _jump535:;
    _1039 = 0;
    int64_t _1040 = 0; // g
    _jump536:; // Begin body of loop
    _1039 += _1013.d2;
    _1040++;
    if (_1040 < _1013.d0)
    goto _jump536;
    // End body of loop
    _1038.d0 = _1039;
    if (_1039 > 0) 
    goto _jump537;
    fail_assertion("non-positive loop bound");
    _jump537:;
    // Computing bound for h
    _1038.d1 = _1013.d1;
    if (_1013.d1 > 0) 
    goto _jump538;
    fail_assertion("non-positive loop bound");
    _jump538:;
    // Computing bound for i
    _1038.d2 = _1013.d2;
    if (_1013.d2 > 0) 
    goto _jump539;
    fail_assertion("non-positive loop bound");
    _jump539:;
    // Computing total size of heap memory to allocate
    int64_t _1041 = 1;
    _1041 *= _1039;
    _1041 *= _1013.d1;
    _1041 *= _1013.d2;
    _1041 *= sizeof(int64_t);
    _1038.data = jpl_alloc(_1041);
    int64_t _1042 = 0; // i
    int64_t _1043 = 0; // h
    int64_t _1044 = 0; // g
    _jump540:; // Begin body of loop
    int64_t _1045 = 0;
    _1045 *= _1038.d0;
    _1045 += _1044;
    _1045 *= _1038.d1;
    _1045 += _1043;
    _1045 *= _1038.d2;
    _1045 += _1042;
    _1038.data[_1045] = _1042;
    _1042++;
    if (_1042 < _1013.d2)
    goto _jump540;
    _1042 = 0;
    _1043++;
    if (_1043 < _1013.d1)
    goto _jump540;
    _1043 = 0;
    _1044++;
    if (_1044 < _1039)
    goto _jump540;
    // End body of loop
    int64_t _1046 = _1013.d1 + _1013.d0;
    int64_t _1047 = -_1013.d2;
    int64_t _1048 = -_1047;
    if (_1013.d1 >= 0)
    goto _jump541;
    fail_assertion("negative array index");
    _jump541:;
    if (_1013.d1 < _1038.d0)
    goto _jump542;
    fail_assertion("index too large");
    _jump542:;
    if (_1046 >= 0)
    goto _jump543;
    fail_assertion("negative array index");
    _jump543:;
    if (_1046 < _1038.d1)
    goto _jump544;
    fail_assertion("index too large");
    _jump544:;
    if (_1048 >= 0)
    goto _jump545;
    fail_assertion("negative array index");
    _jump545:;
    if (_1048 < _1038.d2)
    goto _jump546;
    fail_assertion("index too large");
    _jump546:;
    int64_t _1049 = 0;
    _1049 *= _1038.d0;
    _1049 += _1013.d1;
    _1049 *= _1038.d1;
    _1049 += _1046;
    _1049 *= _1038.d2;
    _1049 += _1048;
    int64_t _1050 = _1038.data[_1049];
    int64_t _1051 = 704;
    int64_t _1052 = _1051 + _1013.d1;
    _a1_int64_t _1053;
    _1053.d0 = 1;
    _1053.data = jpl_alloc(sizeof(int64_t) * 1);
    _1053.data[0] = _1052;
    int64_t _1054 = 111;
    int64_t _1055 = _1054 + _1013.d1;
    int64_t _1056 = -_1055;
    if (_1056 >= 0)
    goto _jump547;
    fail_assertion("negative array index");
    _jump547:;
    if (_1056 < _1053.d0)
    goto _jump548;
    fail_assertion("index too large");
    _jump548:;
    int64_t _1057 = 0;
    _1057 *= _1053.d0;
    _1057 += _1056;
    int64_t _1058 = _1053.data[_1057];
    int64_t _1059 = _1050 - _1058;
    _1035.d2 = _1059;
    if (_1059 > 0) 
    goto _jump549;
    fail_assertion("non-positive loop bound");
    _jump549:;
    // Computing total size of heap memory to allocate
    int64_t _1060 = 1;
    _1060 *= _1036;
    _1060 *= _1013.d0;
    _1060 *= _1059;
    _1060 *= sizeof(_a3_bool);
    _1035.data = jpl_alloc(_1060);
    int64_t _1061 = 0; // i
    int64_t _1062 = 0; // h
    int64_t _1063 = 0; // g
    _jump550:; // Begin body of loop
    int64_t _1065 = -_1062;
    int64_t _1066 = 6;
    int64_t _1067 = _1061 * _1066;
    if (_1065 >= 0)
    goto _jump551;
    fail_assertion("negative array index");
    _jump551:;
    if (_1065 < _1013.d0)
    goto _jump552;
    fail_assertion("index too large");
    _jump552:;
    if (_1067 >= 0)
    goto _jump553;
    fail_assertion("negative array index");
    _jump553:;
    if (_1067 < _1013.d1)
    goto _jump554;
    fail_assertion("index too large");
    _jump554:;
    if (_1013.d1 >= 0)
    goto _jump555;
    fail_assertion("negative array index");
    _jump555:;
    if (_1013.d1 < _1013.d2)
    goto _jump556;
    fail_assertion("index too large");
    _jump556:;
    int64_t _1068 = 0;
    _1068 *= _1013.d0;
    _1068 += _1065;
    _1068 *= _1013.d1;
    _1068 += _1067;
    _1068 *= _1013.d2;
    _1068 += _1013.d1;
    bool _1069 = _1013.data[_1068];
    bool _1064 = _1069;
    if (0 == _1069)
    goto _jump557;
    bool _1071 = true;
    bool _1072 = !_1071;
    bool _1070 = _1072;
    if (0 == _1072)
    goto _jump558;
    bool _1073 = true;
    _1070 = _1073;
    _jump558:;
    _1064 = _1070;
    _jump557:;
    _a3_bool _1074;
    if (!_1064)
    goto _jump559;
    _a3_bool _1075;
    // Computing bound for j
    int64_t _1076;
    // Computing bound for j
    if (_1063 > 0) 
    goto _jump560;
    fail_assertion("non-positive loop bound");
    _jump560:;
    _1076 = 0;
    int64_t _1077 = 0; // j
    _jump561:; // Begin body of loop
    _1076 += _1013.d1;
    _1077++;
    if (_1077 < _1063)
    goto _jump561;
    // End body of loop
    _1075.d0 = _1076;
    if (_1076 > 0) 
    goto _jump562;
    fail_assertion("non-positive loop bound");
    _jump562:;
    // Computing bound for k
    bool _1078 = true;
    int64_t _1079;
    if (!_1078)
    goto _jump563;
    _1079 = _1013.d2;
    goto _jump564;
    _jump563:;
    _1079 = _1061;
    _jump564:;
    _1075.d1 = _1079;
    if (_1079 > 0) 
    goto _jump565;
    fail_assertion("non-positive loop bound");
    _jump565:;
    // Computing bound for l
    _1075.d2 = _1063;
    if (_1063 > 0) 
    goto _jump566;
    fail_assertion("non-positive loop bound");
    _jump566:;
    // Computing total size of heap memory to allocate
    int64_t _1080 = 1;
    _1080 *= _1076;
    _1080 *= _1079;
    _1080 *= _1063;
    _1080 *= sizeof(bool);
    _1075.data = jpl_alloc(_1080);
    int64_t _1081 = 0; // l
    int64_t _1082 = 0; // k
    int64_t _1083 = 0; // j
    _jump567:; // Begin body of loop
    bool _1084 = false;
    int64_t _1085 = 0;
    _1085 *= _1075.d0;
    _1085 += _1083;
    _1085 *= _1075.d1;
    _1085 += _1082;
    _1085 *= _1075.d2;
    _1085 += _1081;
    _1075.data[_1085] = _1084;
    _1081++;
    if (_1081 < _1063)
    goto _jump567;
    _1081 = 0;
    _1082++;
    if (_1082 < _1079)
    goto _jump567;
    _1082 = 0;
    _1083++;
    if (_1083 < _1076)
    goto _jump567;
    // End body of loop
    _1074 = _1075;
    goto _jump568;
    _jump559:;
    _1074 = _1013;
    _jump568:;
    int64_t _1086 = 0;
    _1086 *= _1035.d0;
    _1086 += _1063;
    _1086 *= _1035.d1;
    _1086 += _1062;
    _1086 *= _1035.d2;
    _1086 += _1061;
    _1035.data[_1086] = _1074;
    _1061++;
    if (_1061 < _1059)
    goto _jump550;
    _1061 = 0;
    _1062++;
    if (_1062 < _1013.d0)
    goto _jump550;
    _1062 = 0;
    _1063++;
    if (_1063 < _1036)
    goto _jump550;
    // End body of loop
    _1034 = _1035;
    goto _jump569;
    _jump530:;
    _a1__a3__a3__a3_bool _1087;
    // Computing bound for g
    _1087.d0 = _1013.d1;
    if (_1013.d1 > 0) 
    goto _jump570;
    fail_assertion("non-positive loop bound");
    _jump570:;
    // Computing total size of heap memory to allocate
    int64_t _1088 = 1;
    _1088 *= _1013.d1;
    _1088 *= sizeof(_a3__a3__a3_bool);
    _1087.data = jpl_alloc(_1088);
    int64_t _1089 = 0; // g
    _jump571:; // Begin body of loop
    _a3__a3__a3_bool _1090;
    // Computing bound for h
    _1090.d0 = _1013.d0;
    if (_1013.d0 > 0) 
    goto _jump572;
    fail_assertion("non-positive loop bound");
    _jump572:;
    // Computing bound for i
    _1090.d1 = _1089;
    if (_1089 > 0) 
    goto _jump573;
    fail_assertion("non-positive loop bound");
    _jump573:;
    // Computing bound for j
    _1090.d2 = _1089;
    if (_1089 > 0) 
    goto _jump574;
    fail_assertion("non-positive loop bound");
    _jump574:;
    // Computing total size of heap memory to allocate
    int64_t _1091 = 1;
    _1091 *= _1013.d0;
    _1091 *= _1089;
    _1091 *= _1089;
    _1091 *= sizeof(_a3__a3_bool);
    _1090.data = jpl_alloc(_1091);
    int64_t _1092 = 0; // j
    int64_t _1093 = 0; // i
    int64_t _1094 = 0; // h
    _jump575:; // Begin body of loop
    _a3__a3_bool _1095;
    // Computing bound for k
    _1095.d0 = _1093;
    if (_1093 > 0) 
    goto _jump576;
    fail_assertion("non-positive loop bound");
    _jump576:;
    // Computing bound for l
    _1095.d1 = _1013.d1;
    if (_1013.d1 > 0) 
    goto _jump577;
    fail_assertion("non-positive loop bound");
    _jump577:;
    // Computing bound for m
    _1095.d2 = _1089;
    if (_1089 > 0) 
    goto _jump578;
    fail_assertion("non-positive loop bound");
    _jump578:;
    // Computing total size of heap memory to allocate
    int64_t _1096 = 1;
    _1096 *= _1093;
    _1096 *= _1013.d1;
    _1096 *= _1089;
    _1096 *= sizeof(_a3_bool);
    _1095.data = jpl_alloc(_1096);
    int64_t _1097 = 0; // m
    int64_t _1098 = 0; // l
    int64_t _1099 = 0; // k
    _jump579:; // Begin body of loop
    int64_t _1100 = 0;
    _1100 *= _1095.d0;
    _1100 += _1099;
    _1100 *= _1095.d1;
    _1100 += _1098;
    _1100 *= _1095.d2;
    _1100 += _1097;
    _1095.data[_1100] = _1013;
    _1097++;
    if (_1097 < _1089)
    goto _jump579;
    _1097 = 0;
    _1098++;
    if (_1098 < _1013.d1)
    goto _jump579;
    _1098 = 0;
    _1099++;
    if (_1099 < _1093)
    goto _jump579;
    // End body of loop
    int64_t _1101 = 0;
    _1101 *= _1090.d0;
    _1101 += _1094;
    _1101 *= _1090.d1;
    _1101 += _1093;
    _1101 *= _1090.d2;
    _1101 += _1092;
    _1090.data[_1101] = _1095;
    _1092++;
    if (_1092 < _1089)
    goto _jump575;
    _1092 = 0;
    _1093++;
    if (_1093 < _1089)
    goto _jump575;
    _1093 = 0;
    _1094++;
    if (_1094 < _1013.d0)
    goto _jump575;
    // End body of loop
    int64_t _1102 = 0;
    _1102 *= _1087.d0;
    _1102 += _1089;
    _1087.data[_1102] = _1090;
    _1089++;
    if (_1089 < _1013.d1)
    goto _jump571;
    // End body of loop
    int64_t _1103 = 344;
    if (_1103 >= 0)
    goto _jump580;
    fail_assertion("negative array index");
    _jump580:;
    if (_1103 < _1087.d0)
    goto _jump581;
    fail_assertion("index too large");
    _jump581:;
    int64_t _1104 = 0;
    _1104 *= _1087.d0;
    _1104 += _1103;
    _a3__a3__a3_bool _1105 = _1087.data[_1104];
    int64_t _1106 = -_1013.d1;
    int64_t _1107;
    // Computing bound for g
    double _1108 = -_236;
    bool _1109 = _1108 >= _236;
    int64_t _1110;
    if (!_1109)
    goto _jump582;
    int64_t _1111 = 343;
    _1110 = _1111;
    goto _jump583;
    _jump582:;
    int64_t _1112;
    // Computing bound for g
    bool _1113 = false;
    int64_t _1114;
    if (!_1113)
    goto _jump584;
    _1114 = _1013.d2;
    goto _jump585;
    _jump584:;
    _1114 = _1013.d0;
    _jump585:;
    if (_1114 > 0) 
    goto _jump586;
    fail_assertion("non-positive loop bound");
    _jump586:;
    // Computing bound for h
    if (_1013.d1 > 0) 
    goto _jump587;
    fail_assertion("non-positive loop bound");
    _jump587:;
    _1112 = 0;
    int64_t _1115 = 0; // h
    int64_t _1116 = 0; // g
    _jump588:; // Begin body of loop
    _1112 += _1115;
    _1115++;
    if (_1115 < _1013.d1)
    goto _jump588;
    _1115 = 0;
    _1116++;
    if (_1116 < _1114)
    goto _jump588;
    // End body of loop
    _1110 = _1112;
    _jump583:;
    if (_1110 > 0) 
    goto _jump589;
    fail_assertion("non-positive loop bound");
    _jump589:;
    _1107 = 0;
    int64_t _1117 = 0; // g
    _jump590:; // Begin body of loop
    int64_t _1118 = -_1117;
    _1107 += _1118;
    _1117++;
    if (_1117 < _1110)
    goto _jump590;
    // End body of loop
    if (_1013.d2 >= 0)
    goto _jump591;
    fail_assertion("negative array index");
    _jump591:;
    if (_1013.d2 < _1105.d0)
    goto _jump592;
    fail_assertion("index too large");
    _jump592:;
    if (_1106 >= 0)
    goto _jump593;
    fail_assertion("negative array index");
    _jump593:;
    if (_1106 < _1105.d1)
    goto _jump594;
    fail_assertion("index too large");
    _jump594:;
    if (_1107 >= 0)
    goto _jump595;
    fail_assertion("negative array index");
    _jump595:;
    if (_1107 < _1105.d2)
    goto _jump596;
    fail_assertion("index too large");
    _jump596:;
    int64_t _1119 = 0;
    _1119 *= _1105.d0;
    _1119 += _1013.d2;
    _1119 *= _1105.d1;
    _1119 += _1106;
    _1119 *= _1105.d2;
    _1119 += _1107;
    _a3__a3_bool _1120 = _1105.data[_1119];
    _1034 = _1120;
    _jump569:;
    int64_t _1121 = 736;
    int64_t _1122 = -_1121;
    bool _1123 = true;
    bool _1124 = !_1123;
    bool _1125 = !_1124;
    bool _1126;
    if (!_1125)
    goto _jump597;
    bool _1127 = false;
    bool _1128 = !_1127;
    bool _1129 = !_1128;
    _1126 = _1129;
    goto _jump598;
    _jump597:;
    int64_t _1130 = 60;
    int64_t _1131 = _1130 % _1013.d0;
    bool _1132 = _1013.d0 >= _1131;
    _1126 = _1132;
    _jump598:;
    _a1_int64_t _1133;
    if (!_1126)
    goto _jump599;
    _a2__a1_int64_t _1134;
    // Computing bound for g
    _1134.d0 = _1013.d2;
    if (_1013.d2 > 0) 
    goto _jump600;
    fail_assertion("non-positive loop bound");
    _jump600:;
    // Computing bound for h
    int64_t _1135 = -_1013.d2;
    _1134.d1 = _1135;
    if (_1135 > 0) 
    goto _jump601;
    fail_assertion("non-positive loop bound");
    _jump601:;
    // Computing total size of heap memory to allocate
    int64_t _1136 = 1;
    _1136 *= _1013.d2;
    _1136 *= _1135;
    _1136 *= sizeof(_a1_int64_t);
    _1134.data = jpl_alloc(_1136);
    int64_t _1137 = 0; // h
    int64_t _1138 = 0; // g
    _jump602:; // Begin body of loop
    _a1_int64_t _1139;
    // Computing bound for i
    _1139.d0 = _1137;
    if (_1137 > 0) 
    goto _jump603;
    fail_assertion("non-positive loop bound");
    _jump603:;
    // Computing total size of heap memory to allocate
    int64_t _1140 = 1;
    _1140 *= _1137;
    _1140 *= sizeof(int64_t);
    _1139.data = jpl_alloc(_1140);
    int64_t _1141 = 0; // i
    _jump604:; // Begin body of loop
    int64_t _1142 = 363;
    int64_t _1143 = 0;
    _1143 *= _1139.d0;
    _1143 += _1141;
    _1139.data[_1143] = _1142;
    _1141++;
    if (_1141 < _1137)
    goto _jump604;
    // End body of loop
    int64_t _1144 = 0;
    _1144 *= _1134.d0;
    _1144 += _1138;
    _1144 *= _1134.d1;
    _1144 += _1137;
    _1134.data[_1144] = _1139;
    _1137++;
    if (_1137 < _1135)
    goto _jump602;
    _1137 = 0;
    _1138++;
    if (_1138 < _1013.d2)
    goto _jump602;
    // End body of loop
    bool _1145 = true;
    int64_t _1146;
    if (!_1145)
    goto _jump605;
    _1146 = _1013.d0;
    goto _jump606;
    _jump605:;
    int64_t _1147 = 863;
    _1146 = _1147;
    _jump606:;
    int64_t _1148 = -_1146;
    bool _1149 = false;
    int64_t _1150;
    if (!_1149)
    goto _jump607;
    _1150 = _1013.d1;
    goto _jump608;
    _jump607:;
    int64_t _1151 = 465;
    int64_t _1152 = _1151 / _1013.d0;
    _1150 = _1152;
    _jump608:;
    if (_1148 >= 0)
    goto _jump609;
    fail_assertion("negative array index");
    _jump609:;
    if (_1148 < _1134.d0)
    goto _jump610;
    fail_assertion("index too large");
    _jump610:;
    if (_1150 >= 0)
    goto _jump611;
    fail_assertion("negative array index");
    _jump611:;
    if (_1150 < _1134.d1)
    goto _jump612;
    fail_assertion("index too large");
    _jump612:;
    int64_t _1153 = 0;
    _1153 *= _1134.d0;
    _1153 += _1148;
    _1153 *= _1134.d1;
    _1153 += _1150;
    _a1_int64_t _1154 = _1134.data[_1153];
    _1133 = _1154;
    goto _jump613;
    _jump599:;
    int64_t _1155 = -_1013.d0;
    _a1_int64_t _1156;
    _1156.d0 = 2;
    _1156.data = jpl_alloc(sizeof(int64_t) * 2);
    _1156.data[0] = _1155;
    _1156.data[1] = _1013.d1;
    _1133 = _1156;
    _jump613:;
    if (_1013.d0 >= 0)
    goto _jump614;
    fail_assertion("negative array index");
    _jump614:;
    if (_1013.d0 < _1133.d0)
    goto _jump615;
    fail_assertion("index too large");
    _jump615:;
    int64_t _1157 = 0;
    _1157 *= _1133.d0;
    _1157 += _1013.d0;
    int64_t _1158 = _1133.data[_1157];
    int64_t _1159 = _1013.d0 - _1158;
    int64_t _1160 = 142;
    int64_t _1161 = _1013.d0 / _1160;
    if (_1122 >= 0)
    goto _jump616;
    fail_assertion("negative array index");
    _jump616:;
    if (_1122 < _1034.d0)
    goto _jump617;
    fail_assertion("index too large");
    _jump617:;
    if (_1159 >= 0)
    goto _jump618;
    fail_assertion("negative array index");
    _jump618:;
    if (_1159 < _1034.d1)
    goto _jump619;
    fail_assertion("index too large");
    _jump619:;
    if (_1161 >= 0)
    goto _jump620;
    fail_assertion("negative array index");
    _jump620:;
    if (_1161 < _1034.d2)
    goto _jump621;
    fail_assertion("index too large");
    _jump621:;
    int64_t _1162 = 0;
    _1162 *= _1034.d0;
    _1162 += _1122;
    _1162 *= _1034.d1;
    _1162 += _1159;
    _1162 *= _1034.d2;
    _1162 += _1161;
    _a3_bool _1163 = _1034.data[_1162];
    bool _1164 = _1163.d0 > _1013.d2;
    double _1165;
    if (!_1164)
    goto _jump622;
    _1165 = _236;
    goto _jump623;
    _jump622:;
    double _1166 = 94.0;
    double _1167 = -_1166;
    double _1168 = 24.0;
    double _1169 = -_1168;
    double _1170 = -_236;
    double _1171 = _236 + _236;
    rgba _1172 = { _1167, _1169, _1170, _1171 };
    double _1173 = _1172.b;
    bool _1174 = _236 != _1173;
    double _1175;
    if (!_1174)
    goto _jump624;
    double _1176 = 57.0;
    double _1177 = 94.0;
    rgba _1178 = { _1176, _236, _236, _1177 };
    double _1179 = _1178.r;
    double _1180 = -_1179;
    _1175 = _1180;
    goto _jump625;
    _jump624:;
    double _1181;
    // Computing bound for k
    if (_1163.d2 > 0) 
    goto _jump626;
    fail_assertion("non-positive loop bound");
    _jump626:;
    _1181 = 0;
    int64_t _1182 = 0; // k
    _jump627:; // Begin body of loop
    double _1183 = 82.0;
    _1181 += _1183;
    _1182++;
    if (_1182 < _1163.d2)
    goto _jump627;
    // End body of loop
    double _1184 = 63.0;
    double _1185 = -_1184;
    _a2_double _1186 = a();
    int64_t _1187 = 92;
    if (_1187 >= 0)
    goto _jump628;
    fail_assertion("negative array index");
    _jump628:;
    if (_1187 < _1186.d0)
    goto _jump629;
    fail_assertion("index too large");
    _jump629:;
    if (_1163.d2 >= 0)
    goto _jump630;
    fail_assertion("negative array index");
    _jump630:;
    if (_1163.d2 < _1186.d1)
    goto _jump631;
    fail_assertion("index too large");
    _jump631:;
    int64_t _1188 = 0;
    _1188 *= _1186.d0;
    _1188 += _1187;
    _1188 *= _1186.d1;
    _1188 += _1163.d2;
    double _1189 = _1186.data[_1188];
    double _1190 = 51.0;
    rgba _1191 = { _1181, _1185, _1189, _1190 };
    double _1192 = _1191.a;
    double _1193;
    // Computing bound for k
    if (_1013.d1 > 0) 
    goto _jump632;
    fail_assertion("non-positive loop bound");
    _jump632:;
    // Computing bound for l
    if (_1163.d1 > 0) 
    goto _jump633;
    fail_assertion("non-positive loop bound");
    _jump633:;
    // Computing bound for m
    int64_t _1194 = 262;
    if (_1194 > 0) 
    goto _jump634;
    fail_assertion("non-positive loop bound");
    _jump634:;
    _1193 = 0;
    int64_t _1195 = 0; // m
    int64_t _1196 = 0; // l
    int64_t _1197 = 0; // k
    _jump635:; // Begin body of loop
    _a3_double _1198;
    // Computing bound for n
    _1198.d0 = _1195;
    if (_1195 > 0) 
    goto _jump636;
    fail_assertion("non-positive loop bound");
    _jump636:;
    // Computing bound for o
    _1198.d1 = _1163.d2;
    if (_1163.d2 > 0) 
    goto _jump637;
    fail_assertion("non-positive loop bound");
    _jump637:;
    // Computing bound for p
    _1198.d2 = _1013.d1;
    if (_1013.d1 > 0) 
    goto _jump638;
    fail_assertion("non-positive loop bound");
    _jump638:;
    // Computing total size of heap memory to allocate
    int64_t _1199 = 1;
    _1199 *= _1195;
    _1199 *= _1163.d2;
    _1199 *= _1013.d1;
    _1199 *= sizeof(double);
    _1198.data = jpl_alloc(_1199);
    int64_t _1200 = 0; // p
    int64_t _1201 = 0; // o
    int64_t _1202 = 0; // n
    _jump639:; // Begin body of loop
    int64_t _1203 = 0;
    _1203 *= _1198.d0;
    _1203 += _1202;
    _1203 *= _1198.d1;
    _1203 += _1201;
    _1203 *= _1198.d2;
    _1203 += _1200;
    _1198.data[_1203] = _236;
    _1200++;
    if (_1200 < _1013.d1)
    goto _jump639;
    _1200 = 0;
    _1201++;
    if (_1201 < _1163.d2)
    goto _jump639;
    _1201 = 0;
    _1202++;
    if (_1202 < _1195)
    goto _jump639;
    // End body of loop
    int64_t _1204;
    // Computing bound for n
    if (_1163.d2 > 0) 
    goto _jump640;
    fail_assertion("non-positive loop bound");
    _jump640:;
    // Computing bound for o
    if (_1013.d1 > 0) 
    goto _jump641;
    fail_assertion("non-positive loop bound");
    _jump641:;
    _1204 = 0;
    int64_t _1205 = 0; // o
    int64_t _1206 = 0; // n
    _jump642:; // Begin body of loop
    _1204 += _1197;
    _1205++;
    if (_1205 < _1013.d1)
    goto _jump642;
    _1205 = 0;
    _1206++;
    if (_1206 < _1163.d2)
    goto _jump642;
    // End body of loop
    int64_t _1207 = _1196 * _1196;
    if (_1197 >= 0)
    goto _jump643;
    fail_assertion("negative array index");
    _jump643:;
    if (_1197 < _1198.d0)
    goto _jump644;
    fail_assertion("index too large");
    _jump644:;
    if (_1204 >= 0)
    goto _jump645;
    fail_assertion("negative array index");
    _jump645:;
    if (_1204 < _1198.d1)
    goto _jump646;
    fail_assertion("index too large");
    _jump646:;
    if (_1207 >= 0)
    goto _jump647;
    fail_assertion("negative array index");
    _jump647:;
    if (_1207 < _1198.d2)
    goto _jump648;
    fail_assertion("index too large");
    _jump648:;
    int64_t _1208 = 0;
    _1208 *= _1198.d0;
    _1208 += _1197;
    _1208 *= _1198.d1;
    _1208 += _1204;
    _1208 *= _1198.d2;
    _1208 += _1207;
    double _1209 = _1198.data[_1208];
    _1193 += _1209;
    _1195++;
    if (_1195 < _1194)
    goto _jump635;
    _1195 = 0;
    _1196++;
    if (_1196 < _1163.d1)
    goto _jump635;
    _1196 = 0;
    _1197++;
    if (_1197 < _1013.d1)
    goto _jump635;
    // End body of loop
    double _1210 = _1192 - _1193;
    _1175 = _1210;
    _jump625:;
    _1165 = _1175;
    _jump623:;
    double _1211;
    // Computing bound for k
    if (_1013.d2 > 0) 
    goto _jump649;
    fail_assertion("non-positive loop bound");
    _jump649:;
    _1211 = 0;
    int64_t _1212 = 0; // k
    _jump650:; // Begin body of loop
    bool _1213 = _1163.d2 == _1013.d2;
    bool _1214 = _1013.d1 != _1212;
    bool _1215 = _1213 == _1214;
    double _1216;
    if (!_1215)
    goto _jump651;
    double _1217 = 83.0;
    _1216 = _1217;
    goto _jump652;
    _jump651:;
    double _1218 = 90.0;
    _1216 = _1218;
    _jump652:;
    double _1219 = -_1216;
    _1211 += _1219;
    _1212++;
    if (_1212 < _1013.d2)
    goto _jump650;
    // End body of loop
    double _1220 = -_236;
    double _1221 = _1211 * _1220;
    bool _1222 = _1165 >= _1221;
    if (0 != _1222)
    goto _jump653;
    fail_assertion("k");
    _jump653:;
    double _1223 = 38.0;
    _a1__a2__a2_double _1224;
    // Computing bound for l
    int64_t _1225;
    // Computing bound for l
    if (_1013.d0 > 0) 
    goto _jump654;
    fail_assertion("non-positive loop bound");
    _jump654:;
    // Computing bound for m
    if (_1013.d0 > 0) 
    goto _jump655;
    fail_assertion("non-positive loop bound");
    _jump655:;
    _1225 = 0;
    int64_t _1226 = 0; // m
    int64_t _1227 = 0; // l
    _jump656:; // Begin body of loop
    _1225 += _1013.d1;
    _1226++;
    if (_1226 < _1013.d0)
    goto _jump656;
    _1226 = 0;
    _1227++;
    if (_1227 < _1013.d0)
    goto _jump656;
    // End body of loop
    _1224.d0 = _1225;
    if (_1225 > 0) 
    goto _jump657;
    fail_assertion("non-positive loop bound");
    _jump657:;
    // Computing total size of heap memory to allocate
    int64_t _1228 = 1;
    _1228 *= _1225;
    _1228 *= sizeof(_a2__a2_double);
    _1224.data = jpl_alloc(_1228);
    int64_t _1229 = 0; // l
    _jump658:; // Begin body of loop
    _a2__a2_double _1230;
    // Computing bound for m
    int64_t _1231 = 499;
    int64_t _1232 = _1231 + _1013.d1;
    _1230.d0 = _1232;
    if (_1232 > 0) 
    goto _jump659;
    fail_assertion("non-positive loop bound");
    _jump659:;
    // Computing bound for n
    bool _1233 = true;
    int64_t _1234;
    if (!_1233)
    goto _jump660;
    _1234 = _1163.d0;
    goto _jump661;
    _jump660:;
    _1234 = _1229;
    _jump661:;
    _1230.d1 = _1234;
    if (_1234 > 0) 
    goto _jump662;
    fail_assertion("non-positive loop bound");
    _jump662:;
    // Computing total size of heap memory to allocate
    int64_t _1235 = 1;
    _1235 *= _1232;
    _1235 *= _1234;
    _1235 *= sizeof(_a2_double);
    _1230.data = jpl_alloc(_1235);
    int64_t _1236 = 0; // n
    int64_t _1237 = 0; // m
    _jump663:; // Begin body of loop
    bool _1238 = false;
    _a2_double _1239;
    if (!_1238)
    goto _jump664;
    _a2_double _1240 = a();
    _1239 = _1240;
    goto _jump665;
    _jump664:;
    _a2_double _1241 = a();
    _1239 = _1241;
    _jump665:;
    int64_t _1242 = 0;
    _1242 *= _1230.d0;
    _1242 += _1237;
    _1242 *= _1230.d1;
    _1242 += _1236;
    _1230.data[_1242] = _1239;
    _1236++;
    if (_1236 < _1234)
    goto _jump663;
    _1236 = 0;
    _1237++;
    if (_1237 < _1232)
    goto _jump663;
    // End body of loop
    _a1__a2__a2_double _1243;
    _1243.d0 = 1;
    _1243.data = jpl_alloc(sizeof(_a2__a2_double) * 1);
    _1243.data[0] = _1230;
    int64_t _1244 = -_1013.d2;
    int64_t _1245;
    // Computing bound for m
    if (_1013.d0 > 0) 
    goto _jump666;
    fail_assertion("non-positive loop bound");
    _jump666:;
    // Computing bound for n
    if (_1013.d1 > 0) 
    goto _jump667;
    fail_assertion("non-positive loop bound");
    _jump667:;
    // Computing bound for o
    if (_1013.d2 > 0) 
    goto _jump668;
    fail_assertion("non-positive loop bound");
    _jump668:;
    _1245 = 0;
    int64_t _1246 = 0; // o
    int64_t _1247 = 0; // n
    int64_t _1248 = 0; // m
    _jump669:; // Begin body of loop
    _1245 += _1013.d0;
    _1246++;
    if (_1246 < _1013.d2)
    goto _jump669;
    _1246 = 0;
    _1247++;
    if (_1247 < _1013.d1)
    goto _jump669;
    _1247 = 0;
    _1248++;
    if (_1248 < _1013.d0)
    goto _jump669;
    // End body of loop
    if (_1013.d0 >= 0)
    goto _jump670;
    fail_assertion("negative array index");
    _jump670:;
    if (_1013.d0 < _1163.d0)
    goto _jump671;
    fail_assertion("index too large");
    _jump671:;
    if (_1244 >= 0)
    goto _jump672;
    fail_assertion("negative array index");
    _jump672:;
    if (_1244 < _1163.d1)
    goto _jump673;
    fail_assertion("index too large");
    _jump673:;
    if (_1245 >= 0)
    goto _jump674;
    fail_assertion("negative array index");
    _jump674:;
    if (_1245 < _1163.d2)
    goto _jump675;
    fail_assertion("index too large");
    _jump675:;
    int64_t _1249 = 0;
    _1249 *= _1163.d0;
    _1249 += _1013.d0;
    _1249 *= _1163.d1;
    _1249 += _1244;
    _1249 *= _1163.d2;
    _1249 += _1245;
    bool _1250 = _1163.data[_1249];
    int64_t _1251;
    if (!_1250)
    goto _jump676;
    _1251 = _1013.d0;
    goto _jump677;
    _jump676:;
    int64_t _1252 = _1229 % _1163.d2;
    int64_t _1253 = -_1252;
    _1251 = _1253;
    _jump677:;
    if (_1251 >= 0)
    goto _jump678;
    fail_assertion("negative array index");
    _jump678:;
    if (_1251 < _1243.d0)
    goto _jump679;
    fail_assertion("index too large");
    _jump679:;
    int64_t _1254 = 0;
    _1254 *= _1243.d0;
    _1254 += _1251;
    _a2__a2_double _1255 = _1243.data[_1254];
    int64_t _1256 = 0;
    _1256 *= _1224.d0;
    _1256 += _1229;
    _1224.data[_1256] = _1255;
    _1229++;
    if (_1229 < _1225)
    goto _jump658;
    // End body of loop
    if (_1013.d2 >= 0)
    goto _jump680;
    fail_assertion("negative array index");
    _jump680:;
    if (_1013.d2 < _1224.d0)
    goto _jump681;
    fail_assertion("index too large");
    _jump681:;
    int64_t _1257 = 0;
    _1257 *= _1224.d0;
    _1257 += _1013.d2;
    _a2__a2_double _1258 = _1224.data[_1257];
    int64_t _1259 = -_1013.d2;
    if (_1013.d1 >= 0)
    goto _jump682;
    fail_assertion("negative array index");
    _jump682:;
    if (_1013.d1 < _1258.d0)
    goto _jump683;
    fail_assertion("index too large");
    _jump683:;
    if (_1259 >= 0)
    goto _jump684;
    fail_assertion("negative array index");
    _jump684:;
    if (_1259 < _1258.d1)
    goto _jump685;
    fail_assertion("index too large");
    _jump685:;
    int64_t _1260 = 0;
    _1260 *= _1258.d0;
    _1260 += _1013.d1;
    _1260 *= _1258.d1;
    _1260 += _1259;
    _a2_double _1261 = _1258.data[_1260];
    return _1261;
}

double c(_a2_double d) {
    bool _1 = false;
    bool _0 = _1;
    if (0 != _1)
    goto _jump712;
    bool _2 = false;
    _0 = _2;
    _jump712:;
    _a1_bool _3;
    _3.d0 = 1;
    _3.data = jpl_alloc(sizeof(bool) * 1);
    _3.data[0] = _0;
    int64_t _4 = d.d1 - d.d1;
    if (_4 >= 0)
    goto _jump713;
    fail_assertion("negative array index");
    _jump713:;
    if (_4 < _3.d0)
    goto _jump714;
    fail_assertion("index too large");
    _jump714:;
    int64_t _5 = 0;
    _5 *= _3.d0;
    _5 += _4;
    bool _6 = _3.data[_5];
    bool _7 = !_6;
    bool _8;
    if (!_7)
    goto _jump715;
    _a3_double _9;
    // Computing bound for g
    int64_t _10 = -d.d1;
    _9.d0 = _10;
    if (_10 > 0) 
    goto _jump716;
    fail_assertion("non-positive loop bound");
    _jump716:;
    // Computing bound for h
    int64_t _11 = 701;
    _9.d1 = _11;
    if (_11 > 0) 
    goto _jump717;
    fail_assertion("non-positive loop bound");
    _jump717:;
    // Computing bound for i
    int64_t _12 = 476;
    _9.d2 = _12;
    if (_12 > 0) 
    goto _jump718;
    fail_assertion("non-positive loop bound");
    _jump718:;
    // Computing total size of heap memory to allocate
    int64_t _13 = 1;
    _13 *= _10;
    _13 *= _11;
    _13 *= _12;
    _13 *= sizeof(double);
    _9.data = jpl_alloc(_13);
    int64_t _14 = 0; // i
    int64_t _15 = 0; // h
    int64_t _16 = 0; // g
    _jump719:; // Begin body of loop
    double _17 = 67.0;
    int64_t _18 = 0;
    _18 *= _9.d0;
    _18 += _16;
    _18 *= _9.d1;
    _18 += _15;
    _18 *= _9.d2;
    _18 += _14;
    _9.data[_18] = _17;
    _14++;
    if (_14 < _12)
    goto _jump719;
    _14 = 0;
    _15++;
    if (_15 < _11)
    goto _jump719;
    _15 = 0;
    _16++;
    if (_16 < _10)
    goto _jump719;
    // End body of loop
    int64_t _19;
    // Computing bound for g
    int64_t _20 = 491;
    if (_20 > 0) 
    goto _jump720;
    fail_assertion("non-positive loop bound");
    _jump720:;
    // Computing bound for h
    if (d.d0 > 0) 
    goto _jump721;
    fail_assertion("non-positive loop bound");
    _jump721:;
    _19 = 0;
    int64_t _21 = 0; // h
    int64_t _22 = 0; // g
    _jump722:; // Begin body of loop
    _19 += _21;
    _21++;
    if (_21 < d.d0)
    goto _jump722;
    _21 = 0;
    _22++;
    if (_22 < _20)
    goto _jump722;
    // End body of loop
    bool _23 = true;
    int64_t _24;
    if (!_23)
    goto _jump723;
    _24 = d.d0;
    goto _jump724;
    _jump723:;
    _24 = d.d1;
    _jump724:;
    int64_t _25 = _24 % d.d0;
    if (_19 >= 0)
    goto _jump725;
    fail_assertion("negative array index");
    _jump725:;
    if (_19 < _9.d0)
    goto _jump726;
    fail_assertion("index too large");
    _jump726:;
    if (d.d0 >= 0)
    goto _jump727;
    fail_assertion("negative array index");
    _jump727:;
    if (d.d0 < _9.d1)
    goto _jump728;
    fail_assertion("index too large");
    _jump728:;
    if (_25 >= 0)
    goto _jump729;
    fail_assertion("negative array index");
    _jump729:;
    if (_25 < _9.d2)
    goto _jump730;
    fail_assertion("index too large");
    _jump730:;
    int64_t _26 = 0;
    _26 *= _9.d0;
    _26 += _19;
    _26 *= _9.d1;
    _26 += d.d0;
    _26 *= _9.d2;
    _26 += _25;
    double _27 = _9.data[_26];
    double _28 = 55.0;
    double _29 = 15.0;
    double _30 = c(d);
    _a1_double _31;
    _31.d0 = 3;
    _31.data = jpl_alloc(sizeof(double) * 3);
    _31.data[0] = _28;
    _31.data[1] = _29;
    _31.data[2] = _30;
    if (d.d1 >= 0)
    goto _jump731;
    fail_assertion("negative array index");
    _jump731:;
    if (d.d1 < _31.d0)
    goto _jump732;
    fail_assertion("index too large");
    _jump732:;
    int64_t _32 = 0;
    _32 *= _31.d0;
    _32 += d.d1;
    double _33 = _31.data[_32];
    bool _34 = _27 <= _33;
    _8 = _34;
    goto _jump733;
    _jump715:;
    bool _36 = true;
    bool _37 = b == _36;
    bool _38;
    if (!_37)
    goto _jump734;
    bool _39 = !b;
    _38 = _39;
    goto _jump735;
    _jump734:;
    bool _40 = true;
    _38 = _40;
    _jump735:;
    bool _35 = _38;
    if (0 != _38)
    goto _jump736;
    double _41;
    if (!b)
    goto _jump737;
    double _42 = 29.0;
    double _43 = -_42;
    _41 = _43;
    goto _jump738;
    _jump737:;
    double _44 = 6.0;
    _41 = _44;
    _jump738:;
    double _45 = c(d);
    bool _46 = _41 <= _45;
    _35 = _46;
    _jump736:;
    _8 = _35;
    _jump733:;
    bool _47;
    if (!_8)
    goto _jump739;
    _47 = b;
    goto _jump740;
    _jump739:;
    bool _48 = false;
    int64_t _49 = -d.d1;
    int64_t _50 = -d.d0;
    bool _51 = _49 == _50;
    bool _52 = _48 == _51;
    int64_t _53 = -d.d1;
    int64_t _54 = -_53;
    bool _55 = _54 != d.d0;
    bool _56 = _52 == _55;
    _47 = _56;
    _jump740:;
    bool _57;
    if (!_47)
    goto _jump741;
    int64_t _58;
    // Computing bound for g
    if (d.d1 > 0) 
    goto _jump742;
    fail_assertion("non-positive loop bound");
    _jump742:;
    // Computing bound for h
    int64_t _59 = 139;
    int64_t _60 = -_59;
    bool _61 = _60 != d.d0;
    bool _62;
    if (!_61)
    goto _jump743;
    bool _63 = true;
    bool _64 = !_63;
    _62 = _64;
    goto _jump744;
    _jump743:;
    double _65 = 72.0;
    double _66 = c(d);
    bool _67 = _65 > _66;
    _62 = _67;
    _jump744:;
    int64_t _68;
    if (!_62)
    goto _jump745;
    int64_t _69 = -d.d1;
    int64_t _70 = 749;
    int64_t _71 = _69 * _70;
    int64_t _72 = d.d1 * _71;
    _68 = _72;
    goto _jump746;
    _jump745:;
    _68 = d.d0;
    _jump746:;
    if (_68 > 0) 
    goto _jump747;
    fail_assertion("non-positive loop bound");
    _jump747:;
    _58 = 0;
    int64_t _73 = 0; // h
    int64_t _74 = 0; // g
    _jump748:; // Begin body of loop
    int64_t _75;
    // Computing bound for i
    int64_t _76 = 438;
    if (_76 > 0) 
    goto _jump749;
    fail_assertion("non-positive loop bound");
    _jump749:;
    // Computing bound for j
    int64_t _77 = -d.d1;
    if (_77 > 0) 
    goto _jump750;
    fail_assertion("non-positive loop bound");
    _jump750:;
    _75 = 0;
    int64_t _78 = 0; // j
    int64_t _79 = 0; // i
    _jump751:; // Begin body of loop
    _75 += _79;
    _78++;
    if (_78 < _77)
    goto _jump751;
    _78 = 0;
    _79++;
    if (_79 < _76)
    goto _jump751;
    // End body of loop
    _58 += _75;
    _73++;
    if (_73 < _68)
    goto _jump748;
    _73 = 0;
    _74++;
    if (_74 < d.d1)
    goto _jump748;
    // End body of loop
    _a3__a3_bool _80;
    // Computing bound for g
    int64_t _81 = 734;
    int64_t _82 = -_81;
    _80.d0 = _82;
    if (_82 > 0) 
    goto _jump752;
    fail_assertion("non-positive loop bound");
    _jump752:;
    // Computing bound for h
    int64_t _83;
    // Computing bound for g
    int64_t _84 = 117;
    if (_84 > 0) 
    goto _jump753;
    fail_assertion("non-positive loop bound");
    _jump753:;
    // Computing bound for h
    int64_t _85 = 904;
    if (_85 > 0) 
    goto _jump754;
    fail_assertion("non-positive loop bound");
    _jump754:;
    // Computing bound for i
    int64_t _86 = 114;
    if (_86 > 0) 
    goto _jump755;
    fail_assertion("non-positive loop bound");
    _jump755:;
    _83 = 0;
    int64_t _87 = 0; // i
    int64_t _88 = 0; // h
    int64_t _89 = 0; // g
    _jump756:; // Begin body of loop
    _83 += _89;
    _87++;
    if (_87 < _86)
    goto _jump756;
    _87 = 0;
    _88++;
    if (_88 < _85)
    goto _jump756;
    _88 = 0;
    _89++;
    if (_89 < _84)
    goto _jump756;
    // End body of loop
    _80.d1 = _83;
    if (_83 > 0) 
    goto _jump757;
    fail_assertion("non-positive loop bound");
    _jump757:;
    // Computing bound for i
    int64_t _90 = 694;
    _80.d2 = _90;
    if (_90 > 0) 
    goto _jump758;
    fail_assertion("non-positive loop bound");
    _jump758:;
    // Computing total size of heap memory to allocate
    int64_t _91 = 1;
    _91 *= _82;
    _91 *= _83;
    _91 *= _90;
    _91 *= sizeof(_a3_bool);
    _80.data = jpl_alloc(_91);
    int64_t _92 = 0; // i
    int64_t _93 = 0; // h
    int64_t _94 = 0; // g
    _jump759:; // Begin body of loop
    _a3_bool _95;
    // Computing bound for j
    _95.d0 = _92;
    if (_92 > 0) 
    goto _jump760;
    fail_assertion("non-positive loop bound");
    _jump760:;
    // Computing bound for k
    _95.d1 = d.d1;
    if (d.d1 > 0) 
    goto _jump761;
    fail_assertion("non-positive loop bound");
    _jump761:;
    // Computing bound for l
    int64_t _96 = 715;
    _95.d2 = _96;
    if (_96 > 0) 
    goto _jump762;
    fail_assertion("non-positive loop bound");
    _jump762:;
    // Computing total size of heap memory to allocate
    int64_t _97 = 1;
    _97 *= _92;
    _97 *= d.d1;
    _97 *= _96;
    _97 *= sizeof(bool);
    _95.data = jpl_alloc(_97);
    int64_t _98 = 0; // l
    int64_t _99 = 0; // k
    int64_t _100 = 0; // j
    _jump763:; // Begin body of loop
    int64_t _101 = 0;
    _101 *= _95.d0;
    _101 += _100;
    _101 *= _95.d1;
    _101 += _99;
    _101 *= _95.d2;
    _101 += _98;
    _95.data[_101] = b;
    _98++;
    if (_98 < _96)
    goto _jump763;
    _98 = 0;
    _99++;
    if (_99 < d.d1)
    goto _jump763;
    _99 = 0;
    _100++;
    if (_100 < _92)
    goto _jump763;
    // End body of loop
    int64_t _102 = 0;
    _102 *= _80.d0;
    _102 += _94;
    _102 *= _80.d1;
    _102 += _93;
    _102 *= _80.d2;
    _102 += _92;
    _80.data[_102] = _95;
    _92++;
    if (_92 < _90)
    goto _jump759;
    _92 = 0;
    _93++;
    if (_93 < _83)
    goto _jump759;
    _93 = 0;
    _94++;
    if (_94 < _82)
    goto _jump759;
    // End body of loop
    bool _103 = false;
    int64_t _104;
    if (!_103)
    goto _jump764;
    _104 = d.d1;
    goto _jump765;
    _jump764:;
    int64_t _105 = 311;
    _104 = _105;
    _jump765:;
    int64_t _106 = 732;
    int64_t _107 = -_106;
    if (_104 >= 0)
    goto _jump766;
    fail_assertion("negative array index");
    _jump766:;
    if (_104 < _80.d0)
    goto _jump767;
    fail_assertion("index too large");
    _jump767:;
    if (_107 >= 0)
    goto _jump768;
    fail_assertion("negative array index");
    _jump768:;
    if (_107 < _80.d1)
    goto _jump769;
    fail_assertion("index too large");
    _jump769:;
    if (d.d1 >= 0)
    goto _jump770;
    fail_assertion("negative array index");
    _jump770:;
    if (d.d1 < _80.d2)
    goto _jump771;
    fail_assertion("index too large");
    _jump771:;
    int64_t _108 = 0;
    _108 *= _80.d0;
    _108 += _104;
    _108 *= _80.d1;
    _108 += _107;
    _108 *= _80.d2;
    _108 += d.d1;
    _a3_bool _109 = _80.data[_108];
    int64_t _110 = 751;
    int64_t _111 = -d.d1;
    int64_t _112 = d.d0 / _111;
    int64_t _113 = 179;
    if (_110 >= 0)
    goto _jump772;
    fail_assertion("negative array index");
    _jump772:;
    if (_110 < _109.d0)
    goto _jump773;
    fail_assertion("index too large");
    _jump773:;
    if (_112 >= 0)
    goto _jump774;
    fail_assertion("negative array index");
    _jump774:;
    if (_112 < _109.d1)
    goto _jump775;
    fail_assertion("index too large");
    _jump775:;
    if (_113 >= 0)
    goto _jump776;
    fail_assertion("negative array index");
    _jump776:;
    if (_113 < _109.d2)
    goto _jump777;
    fail_assertion("index too large");
    _jump777:;
    int64_t _114 = 0;
    _114 *= _109.d0;
    _114 += _110;
    _114 *= _109.d1;
    _114 += _112;
    _114 *= _109.d2;
    _114 += _113;
    bool _115 = _109.data[_114];
    int64_t _116;
    if (!_115)
    goto _jump778;
    int64_t _117;
    // Computing bound for g
    int64_t _118;
    if (!b)
    goto _jump779;
    _a2_int64_t _119;
    // Computing bound for g
    int64_t _120 = 105;
    _119.d0 = _120;
    if (_120 > 0) 
    goto _jump780;
    fail_assertion("non-positive loop bound");
    _jump780:;
    // Computing bound for h
    _119.d1 = d.d0;
    if (d.d0 > 0) 
    goto _jump781;
    fail_assertion("non-positive loop bound");
    _jump781:;
    // Computing total size of heap memory to allocate
    int64_t _121 = 1;
    _121 *= _120;
    _121 *= d.d0;
    _121 *= sizeof(int64_t);
    _119.data = jpl_alloc(_121);
    int64_t _122 = 0; // h
    int64_t _123 = 0; // g
    _jump782:; // Begin body of loop
    int64_t _124 = 0;
    _124 *= _119.d0;
    _124 += _123;
    _124 *= _119.d1;
    _124 += _122;
    _119.data[_124] = d.d0;
    _122++;
    if (_122 < d.d0)
    goto _jump782;
    _122 = 0;
    _123++;
    if (_123 < _120)
    goto _jump782;
    // End body of loop
    int64_t _125 = 7;
    if (d.d1 >= 0)
    goto _jump783;
    fail_assertion("negative array index");
    _jump783:;
    if (d.d1 < _119.d0)
    goto _jump784;
    fail_assertion("index too large");
    _jump784:;
    if (_125 >= 0)
    goto _jump785;
    fail_assertion("negative array index");
    _jump785:;
    if (_125 < _119.d1)
    goto _jump786;
    fail_assertion("index too large");
    _jump786:;
    int64_t _126 = 0;
    _126 *= _119.d0;
    _126 += d.d1;
    _126 *= _119.d1;
    _126 += _125;
    int64_t _127 = _119.data[_126];
    _118 = _127;
    goto _jump787;
    _jump779:;
    int64_t _128 = -d.d1;
    int64_t _129 = d.d1 % _128;
    _118 = _129;
    _jump787:;
    if (_118 > 0) 
    goto _jump788;
    fail_assertion("non-positive loop bound");
    _jump788:;
    // Computing bound for h
    if (d.d0 > 0) 
    goto _jump789;
    fail_assertion("non-positive loop bound");
    _jump789:;
    _117 = 0;
    int64_t _130 = 0; // h
    int64_t _131 = 0; // g
    _jump790:; // Begin body of loop
    _117 += _130;
    _130++;
    if (_130 < d.d0)
    goto _jump790;
    _130 = 0;
    _131++;
    if (_131 < _118)
    goto _jump790;
    // End body of loop
    _116 = _117;
    goto _jump791;
    _jump778:;
    int64_t _132 = 974;
    _116 = _132;
    _jump791:;
    bool _133 = _58 < _116;
    _57 = _133;
    goto _jump792;
    _jump741:;
    int64_t _134 = 648;
    _a1_int64_t _135;
    // Computing bound for g
    double _136 = 75.0;
    double _137 = 9.0;
    bool _138 = _136 <= _137;
    int64_t _139;
    if (!_138)
    goto _jump793;
    _139 = d.d1;
    goto _jump794;
    _jump793:;
    bool _140 = false;
    int64_t _141;
    if (!_140)
    goto _jump795;
    _141 = d.d1;
    goto _jump796;
    _jump795:;
    _141 = d.d0;
    _jump796:;
    _139 = _141;
    _jump794:;
    int64_t _142 = -_139;
    _135.d0 = _142;
    if (_142 > 0) 
    goto _jump797;
    fail_assertion("non-positive loop bound");
    _jump797:;
    // Computing total size of heap memory to allocate
    int64_t _143 = 1;
    _143 *= _142;
    _143 *= sizeof(int64_t);
    _135.data = jpl_alloc(_143);
    int64_t _144 = 0; // g
    _jump798:; // Begin body of loop
    int64_t _145 = 639;
    int64_t _146 = 0;
    _146 *= _135.d0;
    _146 += _144;
    _135.data[_146] = _145;
    _144++;
    if (_144 < _142)
    goto _jump798;
    // End body of loop
    if (d.d1 >= 0)
    goto _jump799;
    fail_assertion("negative array index");
    _jump799:;
    if (d.d1 < _135.d0)
    goto _jump800;
    fail_assertion("index too large");
    _jump800:;
    int64_t _147 = 0;
    _147 *= _135.d0;
    _147 += d.d1;
    int64_t _148 = _135.data[_147];
    bool _149 = _134 != _148;
    _57 = _149;
    _jump792:;
    if (0 != _57)
    goto _jump801;
    fail_assertion("g");
    _jump801:;
    double _150 = 9.0;
    double _151;
    // Computing bound for h
    int64_t _152;
    // Computing bound for h
    int64_t _153 = 166;
    int64_t _154 = 31;
    int64_t _155;
    // Computing bound for h
    if (d.d0 > 0) 
    goto _jump802;
    fail_assertion("non-positive loop bound");
    _jump802:;
    _155 = 0;
    int64_t _156 = 0; // h
    _jump803:; // Begin body of loop
    int64_t _157 = 916;
    _155 += _157;
    _156++;
    if (_156 < d.d0)
    goto _jump803;
    // End body of loop
    _a1_int64_t _158;
    _158.d0 = 3;
    _158.data = jpl_alloc(sizeof(int64_t) * 3);
    _158.data[0] = _153;
    _158.data[1] = _154;
    _158.data[2] = _155;
    int64_t _159 = 191;
    _a1_int64_t _160;
    _160.d0 = 2;
    _160.data = jpl_alloc(sizeof(int64_t) * 2);
    _160.data[0] = d.d1;
    _160.data[1] = _159;
    if (d.d0 >= 0)
    goto _jump804;
    fail_assertion("negative array index");
    _jump804:;
    if (d.d0 < _160.d0)
    goto _jump805;
    fail_assertion("index too large");
    _jump805:;
    int64_t _161 = 0;
    _161 *= _160.d0;
    _161 += d.d0;
    int64_t _162 = _160.data[_161];
    if (_162 >= 0)
    goto _jump806;
    fail_assertion("negative array index");
    _jump806:;
    if (_162 < _158.d0)
    goto _jump807;
    fail_assertion("index too large");
    _jump807:;
    int64_t _163 = 0;
    _163 *= _158.d0;
    _163 += _162;
    int64_t _164 = _158.data[_163];
    int64_t _165 = -_164;
    if (_165 > 0) 
    goto _jump808;
    fail_assertion("non-positive loop bound");
    _jump808:;
    _152 = 0;
    int64_t _166 = 0; // h
    _jump809:; // Begin body of loop
    int64_t _167;
    // Computing bound for i
    int64_t _168 = -d.d0;
    if (_168 > 0) 
    goto _jump810;
    fail_assertion("non-positive loop bound");
    _jump810:;
    _167 = 0;
    int64_t _169 = 0; // i
    _jump811:; // Begin body of loop
    int64_t _170;
    // Computing bound for j
    if (d.d0 > 0) 
    goto _jump812;
    fail_assertion("non-positive loop bound");
    _jump812:;
    // Computing bound for k
    if (_166 > 0) 
    goto _jump813;
    fail_assertion("non-positive loop bound");
    _jump813:;
    _170 = 0;
    int64_t _171 = 0; // k
    int64_t _172 = 0; // j
    _jump814:; // Begin body of loop
    _170 += _166;
    _171++;
    if (_171 < _166)
    goto _jump814;
    _171 = 0;
    _172++;
    if (_172 < d.d0)
    goto _jump814;
    // End body of loop
    int64_t _173 = -_170;
    _167 += _173;
    _169++;
    if (_169 < _168)
    goto _jump811;
    // End body of loop
    _152 += _167;
    _166++;
    if (_166 < _165)
    goto _jump809;
    // End body of loop
    int64_t _174 = _152 * d.d1;
    if (_174 > 0) 
    goto _jump815;
    fail_assertion("non-positive loop bound");
    _jump815:;
    _151 = 0;
    int64_t _175 = 0; // h
    _jump816:; // Begin body of loop
    double _176 = 40.0;
    double _177 = -_176;
    _151 += _177;
    _175++;
    if (_175 < _174)
    goto _jump816;
    // End body of loop
    return _151;
    int64_t _178 = 600;
    if (_178 >= 0)
    goto _jump817;
    fail_assertion("negative array index");
    _jump817:;
    if (_178 < d.d0)
    goto _jump818;
    fail_assertion("index too large");
    _jump818:;
    if (d.d0 >= 0)
    goto _jump819;
    fail_assertion("negative array index");
    _jump819:;
    if (d.d0 < d.d1)
    goto _jump820;
    fail_assertion("index too large");
    _jump820:;
    int64_t _179 = 0;
    _179 *= d.d0;
    _179 += _178;
    _179 *= d.d1;
    _179 += d.d0;
    double _180 = d.data[_179];
    _a1_double _181;
    _181.d0 = 1;
    _181.data = jpl_alloc(sizeof(double) * 1);
    _181.data[0] = _150;
    int64_t _182 = -d.d1;
    if (_182 >= 0)
    goto _jump821;
    fail_assertion("negative array index");
    _jump821:;
    if (_182 < _181.d0)
    goto _jump822;
    fail_assertion("index too large");
    _jump822:;
    int64_t _183 = 0;
    _183 *= _181.d0;
    _183 += _182;
    double _184 = _181.data[_183];
    double _185 = -_150;
    double _186 = _184 * _185;
    double _187 = 44.0;
    double _188 = 60.0;
    rgba _189 = { _180, _186, _187, _188 };
    double _190 = _189.a;
    bool _191 = _150 == _190;
    _a2_double _192;
    if (!_191)
    goto _jump823;
    _192 = d;
    goto _jump824;
    _jump823:;
    _a1__a2_double _193;
    // Computing bound for h
    _193.d0 = d.d0;
    if (d.d0 > 0) 
    goto _jump825;
    fail_assertion("non-positive loop bound");
    _jump825:;
    // Computing total size of heap memory to allocate
    int64_t _194 = 1;
    _194 *= d.d0;
    _194 *= sizeof(_a2_double);
    _193.data = jpl_alloc(_194);
    int64_t _195 = 0; // h
    _jump826:; // Begin body of loop
    _a2_double _196 = a();
    int64_t _197 = 0;
    _197 *= _193.d0;
    _197 += _195;
    _193.data[_197] = _196;
    _195++;
    if (_195 < d.d0)
    goto _jump826;
    // End body of loop
    int64_t _198 = 36;
    if (_198 >= 0)
    goto _jump827;
    fail_assertion("negative array index");
    _jump827:;
    if (_198 < _193.d0)
    goto _jump828;
    fail_assertion("index too large");
    _jump828:;
    int64_t _199 = 0;
    _199 *= _193.d0;
    _199 += _198;
    _a2_double _200 = _193.data[_199];
    _192 = _200;
    _jump824:;
    _a3__a2__a3_int64_t _201;
    // Computing bound for k
    int64_t _202 = 165;
    _201.d0 = _202;
    if (_202 > 0) 
    goto _jump829;
    fail_assertion("non-positive loop bound");
    _jump829:;
    // Computing bound for l
    _201.d1 = d.d0;
    if (d.d0 > 0) 
    goto _jump830;
    fail_assertion("non-positive loop bound");
    _jump830:;
    // Computing bound for m
    int64_t _203 = _192.d0 / _192.d1;
    int64_t _204;
    // Computing bound for k
    if (_192.d1 > 0) 
    goto _jump831;
    fail_assertion("non-positive loop bound");
    _jump831:;
    // Computing bound for l
    if (d.d1 > 0) 
    goto _jump832;
    fail_assertion("non-positive loop bound");
    _jump832:;
    // Computing bound for m
    int64_t _205 = 466;
    if (_205 > 0) 
    goto _jump833;
    fail_assertion("non-positive loop bound");
    _jump833:;
    _204 = 0;
    int64_t _206 = 0; // m
    int64_t _207 = 0; // l
    int64_t _208 = 0; // k
    _jump834:; // Begin body of loop
    int64_t _209 = 165;
    _204 += _209;
    _206++;
    if (_206 < _205)
    goto _jump834;
    _206 = 0;
    _207++;
    if (_207 < d.d1)
    goto _jump834;
    _207 = 0;
    _208++;
    if (_208 < _192.d1)
    goto _jump834;
    // End body of loop
    bool _210 = _203 >= _204;
    int64_t _211;
    if (!_210)
    goto _jump835;
    int64_t _212 = 635;
    int64_t _213 = -_212;
    _211 = _213;
    goto _jump836;
    _jump835:;
    _211 = _192.d1;
    _jump836:;
    int64_t _214 = -_211;
    _201.d2 = _214;
    if (_214 > 0) 
    goto _jump837;
    fail_assertion("non-positive loop bound");
    _jump837:;
    // Computing total size of heap memory to allocate
    int64_t _215 = 1;
    _215 *= _202;
    _215 *= d.d0;
    _215 *= _214;
    _215 *= sizeof(_a2__a3_int64_t);
    _201.data = jpl_alloc(_215);
    int64_t _216 = 0; // m
    int64_t _217 = 0; // l
    int64_t _218 = 0; // k
    _jump838:; // Begin body of loop
    double _220 = 36.0;
    double _221 = _150 - _220;
    bool _222 = _221 < _150;
    bool _219 = _222;
    if (0 != _222)
    goto _jump839;
    int64_t _223 = 266;
    bool _224 = d.d1 > _223;
    _219 = _224;
    _jump839:;
    _a2__a3_int64_t _225;
    if (!_219)
    goto _jump840;
    _a2__a3_int64_t _226;
    // Computing bound for n
    _226.d0 = _192.d0;
    if (_192.d0 > 0) 
    goto _jump841;
    fail_assertion("non-positive loop bound");
    _jump841:;
    // Computing bound for o
    _226.d1 = _192.d0;
    if (_192.d0 > 0) 
    goto _jump842;
    fail_assertion("non-positive loop bound");
    _jump842:;
    // Computing total size of heap memory to allocate
    int64_t _227 = 1;
    _227 *= _192.d0;
    _227 *= _192.d0;
    _227 *= sizeof(_a3_int64_t);
    _226.data = jpl_alloc(_227);
    int64_t _228 = 0; // o
    int64_t _229 = 0; // n
    _jump843:; // Begin body of loop
    bool _230 = _150 != _150;
    _a3_int64_t _231;
    if (!_230)
    goto _jump844;
    _a3_int64_t _232;
    // Computing bound for p
    _232.d0 = _228;
    if (_228 > 0) 
    goto _jump845;
    fail_assertion("non-positive loop bound");
    _jump845:;
    // Computing bound for q
    _232.d1 = _229;
    if (_229 > 0) 
    goto _jump846;
    fail_assertion("non-positive loop bound");
    _jump846:;
    // Computing bound for r
    int64_t _233 = 272;
    _232.d2 = _233;
    if (_233 > 0) 
    goto _jump847;
    fail_assertion("non-positive loop bound");
    _jump847:;
    // Computing total size of heap memory to allocate
    int64_t _234 = 1;
    _234 *= _228;
    _234 *= _229;
    _234 *= _233;
    _234 *= sizeof(int64_t);
    _232.data = jpl_alloc(_234);
    int64_t _235 = 0; // r
    int64_t _236 = 0; // q
    int64_t _237 = 0; // p
    _jump848:; // Begin body of loop
    int64_t _238 = 0;
    _238 *= _232.d0;
    _238 += _237;
    _238 *= _232.d1;
    _238 += _236;
    _238 *= _232.d2;
    _238 += _235;
    _232.data[_238] = _192.d0;
    _235++;
    if (_235 < _233)
    goto _jump848;
    _235 = 0;
    _236++;
    if (_236 < _229)
    goto _jump848;
    _236 = 0;
    _237++;
    if (_237 < _228)
    goto _jump848;
    // End body of loop
    _231 = _232;
    goto _jump849;
    _jump844:;
    _a3_int64_t _239;
    // Computing bound for p
    _239.d0 = d.d1;
    if (d.d1 > 0) 
    goto _jump850;
    fail_assertion("non-positive loop bound");
    _jump850:;
    // Computing bound for q
    _239.d1 = d.d1;
    if (d.d1 > 0) 
    goto _jump851;
    fail_assertion("non-positive loop bound");
    _jump851:;
    // Computing bound for r
    int64_t _240 = 346;
    _239.d2 = _240;
    if (_240 > 0) 
    goto _jump852;
    fail_assertion("non-positive loop bound");
    _jump852:;
    // Computing total size of heap memory to allocate
    int64_t _241 = 1;
    _241 *= d.d1;
    _241 *= d.d1;
    _241 *= _240;
    _241 *= sizeof(int64_t);
    _239.data = jpl_alloc(_241);
    int64_t _242 = 0; // r
    int64_t _243 = 0; // q
    int64_t _244 = 0; // p
    _jump853:; // Begin body of loop
    int64_t _245 = 0;
    _245 *= _239.d0;
    _245 += _244;
    _245 *= _239.d1;
    _245 += _243;
    _245 *= _239.d2;
    _245 += _242;
    _239.data[_245] = d.d1;
    _242++;
    if (_242 < _240)
    goto _jump853;
    _242 = 0;
    _243++;
    if (_243 < d.d1)
    goto _jump853;
    _243 = 0;
    _244++;
    if (_244 < d.d1)
    goto _jump853;
    // End body of loop
    _231 = _239;
    _jump849:;
    int64_t _246 = 0;
    _246 *= _226.d0;
    _246 += _229;
    _246 *= _226.d1;
    _246 += _228;
    _226.data[_246] = _231;
    _228++;
    if (_228 < _192.d0)
    goto _jump843;
    _228 = 0;
    _229++;
    if (_229 < _192.d0)
    goto _jump843;
    // End body of loop
    _225 = _226;
    goto _jump854;
    _jump840:;
    _a2__a3_int64_t _247;
    // Computing bound for n
    _247.d0 = _192.d0;
    if (_192.d0 > 0) 
    goto _jump855;
    fail_assertion("non-positive loop bound");
    _jump855:;
    // Computing bound for o
    int64_t _248 = _192.d1 - d.d1;
    _247.d1 = _248;
    if (_248 > 0) 
    goto _jump856;
    fail_assertion("non-positive loop bound");
    _jump856:;
    // Computing total size of heap memory to allocate
    int64_t _249 = 1;
    _249 *= _192.d0;
    _249 *= _248;
    _249 *= sizeof(_a3_int64_t);
    _247.data = jpl_alloc(_249);
    int64_t _250 = 0; // o
    int64_t _251 = 0; // n
    _jump857:; // Begin body of loop
    _a3_int64_t _252;
    // Computing bound for p
    int64_t _253 = 244;
    _252.d0 = _253;
    if (_253 > 0) 
    goto _jump858;
    fail_assertion("non-positive loop bound");
    _jump858:;
    // Computing bound for q
    _252.d1 = _192.d1;
    if (_192.d1 > 0) 
    goto _jump859;
    fail_assertion("non-positive loop bound");
    _jump859:;
    // Computing bound for r
    _252.d2 = _192.d0;
    if (_192.d0 > 0) 
    goto _jump860;
    fail_assertion("non-positive loop bound");
    _jump860:;
    // Computing total size of heap memory to allocate
    int64_t _254 = 1;
    _254 *= _253;
    _254 *= _192.d1;
    _254 *= _192.d0;
    _254 *= sizeof(int64_t);
    _252.data = jpl_alloc(_254);
    int64_t _255 = 0; // r
    int64_t _256 = 0; // q
    int64_t _257 = 0; // p
    _jump861:; // Begin body of loop
    int64_t _258 = 0;
    _258 *= _252.d0;
    _258 += _257;
    _258 *= _252.d1;
    _258 += _256;
    _258 *= _252.d2;
    _258 += _255;
    _252.data[_258] = _257;
    _255++;
    if (_255 < _192.d0)
    goto _jump861;
    _255 = 0;
    _256++;
    if (_256 < _192.d1)
    goto _jump861;
    _256 = 0;
    _257++;
    if (_257 < _253)
    goto _jump861;
    // End body of loop
    int64_t _259 = 0;
    _259 *= _247.d0;
    _259 += _251;
    _259 *= _247.d1;
    _259 += _250;
    _247.data[_259] = _252;
    _250++;
    if (_250 < _248)
    goto _jump857;
    _250 = 0;
    _251++;
    if (_251 < _192.d0)
    goto _jump857;
    // End body of loop
    _225 = _247;
    _jump854:;
    int64_t _260 = 0;
    _260 *= _201.d0;
    _260 += _218;
    _260 *= _201.d1;
    _260 += _217;
    _260 *= _201.d2;
    _260 += _216;
    _201.data[_260] = _225;
    _216++;
    if (_216 < _214)
    goto _jump838;
    _216 = 0;
    _217++;
    if (_217 < d.d0)
    goto _jump838;
    _217 = 0;
    _218++;
    if (_218 < _202)
    goto _jump838;
    // End body of loop
    int64_t _261;
    if (!b)
    goto _jump862;
    _261 = d.d0;
    goto _jump863;
    _jump862:;
    _261 = _192.d0;
    _jump863:;
    int64_t _262 = _192.d1 + d.d1;
    int64_t _263 = d.d1 * d.d1;
    int64_t _264 = _192.d1 - _263;
    bool _265 = d.d0 >= _264;
    int64_t _266;
    if (!_265)
    goto _jump864;
    _266 = _192.d0;
    goto _jump865;
    _jump864:;
    int64_t _267;
    // Computing bound for k
    if (d.d1 > 0) 
    goto _jump866;
    fail_assertion("non-positive loop bound");
    _jump866:;
    _267 = 0;
    int64_t _268 = 0; // k
    _jump867:; // Begin body of loop
    int64_t _269;
    if (!b)
    goto _jump868;
    _269 = d.d0;
    goto _jump869;
    _jump868:;
    _269 = d.d1;
    _jump869:;
    _267 += _269;
    _268++;
    if (_268 < d.d1)
    goto _jump867;
    // End body of loop
    int64_t _270 = -_267;
    _266 = _270;
    _jump865:;
    int64_t _271 = -_266;
    if (_261 >= 0)
    goto _jump870;
    fail_assertion("negative array index");
    _jump870:;
    if (_261 < _201.d0)
    goto _jump871;
    fail_assertion("index too large");
    _jump871:;
    if (_262 >= 0)
    goto _jump872;
    fail_assertion("negative array index");
    _jump872:;
    if (_262 < _201.d1)
    goto _jump873;
    fail_assertion("index too large");
    _jump873:;
    if (_271 >= 0)
    goto _jump874;
    fail_assertion("negative array index");
    _jump874:;
    if (_271 < _201.d2)
    goto _jump875;
    fail_assertion("index too large");
    _jump875:;
    int64_t _272 = 0;
    _272 *= _201.d0;
    _272 += _261;
    _272 *= _201.d1;
    _272 += _262;
    _272 *= _201.d2;
    _272 += _271;
    _a2__a3_int64_t _273 = _201.data[_272];
    int64_t _274;
    // Computing bound for k
    int64_t _275 = 179;
    if (_275 > 0) 
    goto _jump876;
    fail_assertion("non-positive loop bound");
    _jump876:;
    // Computing bound for l
    bool _276 = false;
    int64_t _277;
    if (!_276)
    goto _jump877;
    int64_t _278 = 329;
    _277 = _278;
    goto _jump878;
    _jump877:;
    int64_t _279;
    // Computing bound for k
    if (d.d1 > 0) 
    goto _jump879;
    fail_assertion("non-positive loop bound");
    _jump879:;
    // Computing bound for l
    if (d.d0 > 0) 
    goto _jump880;
    fail_assertion("non-positive loop bound");
    _jump880:;
    _279 = 0;
    int64_t _280 = 0; // l
    int64_t _281 = 0; // k
    _jump881:; // Begin body of loop
    _279 += d.d0;
    _280++;
    if (_280 < d.d0)
    goto _jump881;
    _280 = 0;
    _281++;
    if (_281 < d.d1)
    goto _jump881;
    // End body of loop
    _277 = _279;
    _jump878:;
    if (_277 > 0) 
    goto _jump882;
    fail_assertion("non-positive loop bound");
    _jump882:;
    _274 = 0;
    int64_t _282 = 0; // l
    int64_t _283 = 0; // k
    _jump883:; // Begin body of loop
    _274 += _283;
    _282++;
    if (_282 < _277)
    goto _jump883;
    _282 = 0;
    _283++;
    if (_283 < _275)
    goto _jump883;
    // End body of loop
    int64_t _284;
    if (!b)
    goto _jump884;
    _284 = _192.d1;
    goto _jump885;
    _jump884:;
    _a2__a2_int64_t _285;
    // Computing bound for k
    _285.d0 = d.d0;
    if (d.d0 > 0) 
    goto _jump886;
    fail_assertion("non-positive loop bound");
    _jump886:;
    // Computing bound for l
    _285.d1 = d.d1;
    if (d.d1 > 0) 
    goto _jump887;
    fail_assertion("non-positive loop bound");
    _jump887:;
    // Computing total size of heap memory to allocate
    int64_t _286 = 1;
    _286 *= d.d0;
    _286 *= d.d1;
    _286 *= sizeof(_a2_int64_t);
    _285.data = jpl_alloc(_286);
    int64_t _287 = 0; // l
    int64_t _288 = 0; // k
    _jump888:; // Begin body of loop
    _a2_int64_t _289;
    // Computing bound for m
    _289.d0 = _192.d1;
    if (_192.d1 > 0) 
    goto _jump889;
    fail_assertion("non-positive loop bound");
    _jump889:;
    // Computing bound for n
    _289.d1 = _288;
    if (_288 > 0) 
    goto _jump890;
    fail_assertion("non-positive loop bound");
    _jump890:;
    // Computing total size of heap memory to allocate
    int64_t _290 = 1;
    _290 *= _192.d1;
    _290 *= _288;
    _290 *= sizeof(int64_t);
    _289.data = jpl_alloc(_290);
    int64_t _291 = 0; // n
    int64_t _292 = 0; // m
    _jump891:; // Begin body of loop
    int64_t _293 = 0;
    _293 *= _289.d0;
    _293 += _292;
    _293 *= _289.d1;
    _293 += _291;
    _289.data[_293] = _287;
    _291++;
    if (_291 < _288)
    goto _jump891;
    _291 = 0;
    _292++;
    if (_292 < _192.d1)
    goto _jump891;
    // End body of loop
    int64_t _294 = 0;
    _294 *= _285.d0;
    _294 += _288;
    _294 *= _285.d1;
    _294 += _287;
    _285.data[_294] = _289;
    _287++;
    if (_287 < d.d1)
    goto _jump888;
    _287 = 0;
    _288++;
    if (_288 < d.d0)
    goto _jump888;
    // End body of loop
    _a1_int64_t _295;
    // Computing bound for k
    int64_t _296 = 529;
    _295.d0 = _296;
    if (_296 > 0) 
    goto _jump892;
    fail_assertion("non-positive loop bound");
    _jump892:;
    // Computing total size of heap memory to allocate
    int64_t _297 = 1;
    _297 *= _296;
    _297 *= sizeof(int64_t);
    _295.data = jpl_alloc(_297);
    int64_t _298 = 0; // k
    _jump893:; // Begin body of loop
    int64_t _299 = 0;
    _299 *= _295.d0;
    _299 += _298;
    _295.data[_299] = _298;
    _298++;
    if (_298 < _296)
    goto _jump893;
    // End body of loop
    if (d.d1 >= 0)
    goto _jump894;
    fail_assertion("negative array index");
    _jump894:;
    if (d.d1 < _295.d0)
    goto _jump895;
    fail_assertion("index too large");
    _jump895:;
    int64_t _300 = 0;
    _300 *= _295.d0;
    _300 += d.d1;
    int64_t _301 = _295.data[_300];
    if (d.d1 >= 0)
    goto _jump896;
    fail_assertion("negative array index");
    _jump896:;
    if (d.d1 < _285.d0)
    goto _jump897;
    fail_assertion("index too large");
    _jump897:;
    if (_301 >= 0)
    goto _jump898;
    fail_assertion("negative array index");
    _jump898:;
    if (_301 < _285.d1)
    goto _jump899;
    fail_assertion("index too large");
    _jump899:;
    int64_t _302 = 0;
    _302 *= _285.d0;
    _302 += d.d1;
    _302 *= _285.d1;
    _302 += _301;
    _a2_int64_t _303 = _285.data[_302];
    int64_t _304 = -d.d1;
    if (_304 >= 0)
    goto _jump900;
    fail_assertion("negative array index");
    _jump900:;
    if (_304 < _303.d0)
    goto _jump901;
    fail_assertion("index too large");
    _jump901:;
    if (d.d1 >= 0)
    goto _jump902;
    fail_assertion("negative array index");
    _jump902:;
    if (d.d1 < _303.d1)
    goto _jump903;
    fail_assertion("index too large");
    _jump903:;
    int64_t _305 = 0;
    _305 *= _303.d0;
    _305 += _304;
    _305 *= _303.d1;
    _305 += d.d1;
    int64_t _306 = _303.data[_305];
    int64_t _307 = _306 + d.d0;
    _284 = _307;
    _jump885:;
    if (_274 >= 0)
    goto _jump904;
    fail_assertion("negative array index");
    _jump904:;
    if (_274 < _273.d0)
    goto _jump905;
    fail_assertion("index too large");
    _jump905:;
    if (_284 >= 0)
    goto _jump906;
    fail_assertion("negative array index");
    _jump906:;
    if (_284 < _273.d1)
    goto _jump907;
    fail_assertion("index too large");
    _jump907:;
    int64_t _308 = 0;
    _308 *= _273.d0;
    _308 += _274;
    _308 *= _273.d1;
    _308 += _284;
    _a3_int64_t _309 = _273.data[_308];
    double _310 = 52.0;
    bool _311 = _310 == _150;
    int64_t _312 = 643;
    bool _313 = _309.d0 == _312;
    bool _314;
    if (!b)
    goto _jump908;
    if (d.d0 >= 0)
    goto _jump909;
    fail_assertion("negative array index");
    _jump909:;
    if (d.d0 < _309.d0)
    goto _jump910;
    fail_assertion("index too large");
    _jump910:;
    if (_192.d1 >= 0)
    goto _jump911;
    fail_assertion("negative array index");
    _jump911:;
    if (_192.d1 < _309.d1)
    goto _jump912;
    fail_assertion("index too large");
    _jump912:;
    if (_309.d0 >= 0)
    goto _jump913;
    fail_assertion("negative array index");
    _jump913:;
    if (_309.d0 < _309.d2)
    goto _jump914;
    fail_assertion("index too large");
    _jump914:;
    int64_t _315 = 0;
    _315 *= _309.d0;
    _315 += d.d0;
    _315 *= _309.d1;
    _315 += _192.d1;
    _315 *= _309.d2;
    _315 += _309.d0;
    int64_t _316 = _309.data[_315];
    bool _317 = _316 > d.d1;
    bool _318;
    if (!_317)
    goto _jump915;
    bool _319 = true;
    _318 = _319;
    goto _jump916;
    _jump915:;
    _318 = _311;
    _jump916:;
    _314 = _318;
    goto _jump917;
    _jump908:;
    bool _321 = _311 != b;
    bool _320 = _321;
    if (0 != _321)
    goto _jump918;
    _320 = b;
    _jump918:;
    bool _322;
    if (!_320)
    goto _jump919;
    _a2_bool _323;
    // Computing bound for p
    _323.d0 = _192.d1;
    if (_192.d1 > 0) 
    goto _jump920;
    fail_assertion("non-positive loop bound");
    _jump920:;
    // Computing bound for q
    _323.d1 = _192.d0;
    if (_192.d0 > 0) 
    goto _jump921;
    fail_assertion("non-positive loop bound");
    _jump921:;
    // Computing total size of heap memory to allocate
    int64_t _324 = 1;
    _324 *= _192.d1;
    _324 *= _192.d0;
    _324 *= sizeof(bool);
    _323.data = jpl_alloc(_324);
    int64_t _325 = 0; // q
    int64_t _326 = 0; // p
    _jump922:; // Begin body of loop
    int64_t _327 = 0;
    _327 *= _323.d0;
    _327 += _326;
    _327 *= _323.d1;
    _327 += _325;
    _323.data[_327] = b;
    _325++;
    if (_325 < _192.d0)
    goto _jump922;
    _325 = 0;
    _326++;
    if (_326 < _192.d1)
    goto _jump922;
    // End body of loop
    if (d.d0 >= 0)
    goto _jump923;
    fail_assertion("negative array index");
    _jump923:;
    if (d.d0 < _323.d0)
    goto _jump924;
    fail_assertion("index too large");
    _jump924:;
    if (d.d0 >= 0)
    goto _jump925;
    fail_assertion("negative array index");
    _jump925:;
    if (d.d0 < _323.d1)
    goto _jump926;
    fail_assertion("index too large");
    _jump926:;
    int64_t _328 = 0;
    _328 *= _323.d0;
    _328 += d.d0;
    _328 *= _323.d1;
    _328 += d.d0;
    bool _329 = _323.data[_328];
    _322 = _329;
    goto _jump927;
    _jump919:;
    bool _331 = false;
    bool _330 = _331;
    if (0 == _331)
    goto _jump928;
    _330 = _311;
    _jump928:;
    _322 = _330;
    _jump927:;
    _314 = _322;
    _jump917:;
    bool _332 = !_314;
    bool _333 = _313 == _332;
    double _334;
    if (!_333)
    goto _jump929;
    bool _335 = !_311;
    double _336;
    if (!_335)
    goto _jump930;
    double _337;
    // Computing bound for p
    if (_192.d0 > 0) 
    goto _jump931;
    fail_assertion("non-positive loop bound");
    _jump931:;
    _337 = 0;
    int64_t _338 = 0; // p
    _jump932:; // Begin body of loop
    _337 += _150;
    _338++;
    if (_338 < _192.d0)
    goto _jump932;
    // End body of loop
    _336 = _337;
    goto _jump933;
    _jump930:;
    double _339 = 97.0;
    _336 = _339;
    _jump933:;
    double _340 = _150 * _336;
    double _341 = -_340;
    _334 = _341;
    goto _jump934;
    _jump929:;
    double _342 = 14.0;
    _334 = _342;
    _jump934:;
    return _334;
}

e f(int64_t g, double h, _a1__a2_e i) {
    double _0 = 70.0;
    _a2_int64_t _1;
    // Computing bound for j
    int64_t _2 = -g;
    _1.d0 = _2;
    if (_2 > 0) 
    goto _jump1148;
    fail_assertion("non-positive loop bound");
    _jump1148:;
    // Computing bound for k
    _1.d1 = g;
    if (g > 0) 
    goto _jump1149;
    fail_assertion("non-positive loop bound");
    _jump1149:;
    // Computing total size of heap memory to allocate
    int64_t _3 = 1;
    _3 *= _2;
    _3 *= g;
    _3 *= sizeof(int64_t);
    _1.data = jpl_alloc(_3);
    int64_t _4 = 0; // k
    int64_t _5 = 0; // j
    _jump1150:; // Begin body of loop
    bool _6 = true;
    int64_t _7;
    if (!_6)
    goto _jump1151;
    _7 = g;
    goto _jump1152;
    _jump1151:;
    _7 = _5;
    _jump1152:;
    int64_t _8 = 0;
    _8 *= _1.d0;
    _8 += _5;
    _8 *= _1.d1;
    _8 += _4;
    _1.data[_8] = _7;
    _4++;
    if (_4 < g)
    goto _jump1150;
    _4 = 0;
    _5++;
    if (_5 < _2)
    goto _jump1150;
    // End body of loop
    bool _9;
    if (!d)
    goto _jump1153;
    _9 = b;
    goto _jump1154;
    _jump1153:;
    _9 = d;
    _jump1154:;
    int64_t _10;
    if (!_9)
    goto _jump1155;
    int64_t _11 = 9;
    _10 = _11;
    goto _jump1156;
    _jump1155:;
    int64_t _12 = 902;
    int64_t _13 = -_12;
    _10 = _13;
    _jump1156:;
    int64_t _14 = 394;
    int64_t _15 = g + _14;
    if (_10 >= 0)
    goto _jump1157;
    fail_assertion("negative array index");
    _jump1157:;
    if (_10 < _1.d0)
    goto _jump1158;
    fail_assertion("index too large");
    _jump1158:;
    if (_15 >= 0)
    goto _jump1159;
    fail_assertion("negative array index");
    _jump1159:;
    if (_15 < _1.d1)
    goto _jump1160;
    fail_assertion("index too large");
    _jump1160:;
    int64_t _16 = 0;
    _16 *= _1.d0;
    _16 += _10;
    _16 *= _1.d1;
    _16 += _15;
    int64_t _17 = _1.data[_16];
    int64_t _18 = -_17;
    int64_t _19 = 955;
    bool _20 = _19 == g;
    e _21 = { _0, _18, _20 };
    bool _22 = _21.c;
    _a1__a2_e _23;
    if (!_22)
    goto _jump1161;
    bool _25 = true;
    bool _24 = _25;
    if (0 != _25)
    goto _jump1162;
    _24 = b;
    _jump1162:;
    bool _26 = !_24;
    _a3__a1__a2_e _27;
    if (!_26)
    goto _jump1163;
    _a3__a1__a2_e _28;
    // Computing bound for j
    int64_t _29 = 624;
    _28.d0 = _29;
    if (_29 > 0) 
    goto _jump1164;
    fail_assertion("non-positive loop bound");
    _jump1164:;
    // Computing bound for k
    _a1_int64_t _30;
    // Computing bound for j
    _30.d0 = g;
    if (g > 0) 
    goto _jump1165;
    fail_assertion("non-positive loop bound");
    _jump1165:;
    // Computing total size of heap memory to allocate
    int64_t _31 = 1;
    _31 *= g;
    _31 *= sizeof(int64_t);
    _30.data = jpl_alloc(_31);
    int64_t _32 = 0; // j
    _jump1166:; // Begin body of loop
    int64_t _33 = 0;
    _33 *= _30.d0;
    _33 += _32;
    _30.data[_33] = g;
    _32++;
    if (_32 < g)
    goto _jump1166;
    // End body of loop
    int64_t _34 = -g;
    if (_34 >= 0)
    goto _jump1167;
    fail_assertion("negative array index");
    _jump1167:;
    if (_34 < _30.d0)
    goto _jump1168;
    fail_assertion("index too large");
    _jump1168:;
    int64_t _35 = 0;
    _35 *= _30.d0;
    _35 += _34;
    int64_t _36 = _30.data[_35];
    _28.d1 = _36;
    if (_36 > 0) 
    goto _jump1169;
    fail_assertion("non-positive loop bound");
    _jump1169:;
    // Computing bound for l
    int64_t _37 = 867;
    _28.d2 = _37;
    if (_37 > 0) 
    goto _jump1170;
    fail_assertion("non-positive loop bound");
    _jump1170:;
    // Computing total size of heap memory to allocate
    int64_t _38 = 1;
    _38 *= _29;
    _38 *= _36;
    _38 *= _37;
    _38 *= sizeof(_a1__a2_e);
    _28.data = jpl_alloc(_38);
    int64_t _39 = 0; // l
    int64_t _40 = 0; // k
    int64_t _41 = 0; // j
    _jump1171:; // Begin body of loop
    _a1__a2_e _42;
    if (!b)
    goto _jump1172;
    _42 = i;
    goto _jump1173;
    _jump1172:;
    _a1__a1__a2_e _43;
    _43.d0 = 1;
    _43.data = jpl_alloc(sizeof(_a1__a2_e) * 1);
    _43.data[0] = i;
    int64_t _44;
    // Computing bound for m
    if (_39 > 0) 
    goto _jump1174;
    fail_assertion("non-positive loop bound");
    _jump1174:;
    _44 = 0;
    int64_t _45 = 0; // m
    _jump1175:; // Begin body of loop
    _44 += g;
    _45++;
    if (_45 < _39)
    goto _jump1175;
    // End body of loop
    if (_44 >= 0)
    goto _jump1176;
    fail_assertion("negative array index");
    _jump1176:;
    if (_44 < _43.d0)
    goto _jump1177;
    fail_assertion("index too large");
    _jump1177:;
    int64_t _46 = 0;
    _46 *= _43.d0;
    _46 += _44;
    _a1__a2_e _47 = _43.data[_46];
    _42 = _47;
    _jump1173:;
    int64_t _48 = 0;
    _48 *= _28.d0;
    _48 += _41;
    _48 *= _28.d1;
    _48 += _40;
    _48 *= _28.d2;
    _48 += _39;
    _28.data[_48] = _42;
    _39++;
    if (_39 < _37)
    goto _jump1171;
    _39 = 0;
    _40++;
    if (_40 < _36)
    goto _jump1171;
    _40 = 0;
    _41++;
    if (_41 < _29)
    goto _jump1171;
    // End body of loop
    _27 = _28;
    goto _jump1178;
    _jump1163:;
    _a3__a1__a2_e _49;
    // Computing bound for j
    int64_t _50 = 755;
    int64_t _51 = -_50;
    _49.d0 = _51;
    if (_51 > 0) 
    goto _jump1179;
    fail_assertion("non-positive loop bound");
    _jump1179:;
    // Computing bound for k
    int64_t _52;
    // Computing bound for j
    int64_t _53 = 977;
    if (_53 > 0) 
    goto _jump1180;
    fail_assertion("non-positive loop bound");
    _jump1180:;
    // Computing bound for k
    int64_t _54 = 454;
    if (_54 > 0) 
    goto _jump1181;
    fail_assertion("non-positive loop bound");
    _jump1181:;
    // Computing bound for l
    int64_t _55 = -g;
    if (_55 > 0) 
    goto _jump1182;
    fail_assertion("non-positive loop bound");
    _jump1182:;
    _52 = 0;
    int64_t _56 = 0; // l
    int64_t _57 = 0; // k
    int64_t _58 = 0; // j
    _jump1183:; // Begin body of loop
    _52 += _57;
    _56++;
    if (_56 < _55)
    goto _jump1183;
    _56 = 0;
    _57++;
    if (_57 < _54)
    goto _jump1183;
    _57 = 0;
    _58++;
    if (_58 < _53)
    goto _jump1183;
    // End body of loop
    int64_t _59 = -_52;
    _49.d1 = _59;
    if (_59 > 0) 
    goto _jump1184;
    fail_assertion("non-positive loop bound");
    _jump1184:;
    // Computing bound for l
    int64_t _60;
    // Computing bound for j
    int64_t _61;
    if (!b)
    goto _jump1185;
    int64_t _62 = 38;
    _61 = _62;
    goto _jump1186;
    _jump1185:;
    _61 = g;
    _jump1186:;
    if (_61 > 0) 
    goto _jump1187;
    fail_assertion("non-positive loop bound");
    _jump1187:;
    // Computing bound for k
    if (g > 0) 
    goto _jump1188;
    fail_assertion("non-positive loop bound");
    _jump1188:;
    // Computing bound for l
    if (g > 0) 
    goto _jump1189;
    fail_assertion("non-positive loop bound");
    _jump1189:;
    _60 = 0;
    int64_t _63 = 0; // l
    int64_t _64 = 0; // k
    int64_t _65 = 0; // j
    _jump1190:; // Begin body of loop
    int64_t _66 = -_63;
    int64_t _67 = -_66;
    _60 += _67;
    _63++;
    if (_63 < g)
    goto _jump1190;
    _63 = 0;
    _64++;
    if (_64 < g)
    goto _jump1190;
    _64 = 0;
    _65++;
    if (_65 < _61)
    goto _jump1190;
    // End body of loop
    _49.d2 = _60;
    if (_60 > 0) 
    goto _jump1191;
    fail_assertion("non-positive loop bound");
    _jump1191:;
    // Computing total size of heap memory to allocate
    int64_t _68 = 1;
    _68 *= _51;
    _68 *= _59;
    _68 *= _60;
    _68 *= sizeof(_a1__a2_e);
    _49.data = jpl_alloc(_68);
    int64_t _69 = 0; // l
    int64_t _70 = 0; // k
    int64_t _71 = 0; // j
    _jump1192:; // Begin body of loop
    _a1__a2_e _72;
    // Computing bound for m
    _72.d0 = _71;
    if (_71 > 0) 
    goto _jump1193;
    fail_assertion("non-positive loop bound");
    _jump1193:;
    // Computing total size of heap memory to allocate
    int64_t _73 = 1;
    _73 *= _71;
    _73 *= sizeof(_a2_e);
    _72.data = jpl_alloc(_73);
    int64_t _74 = 0; // m
    _jump1194:; // Begin body of loop
    _a2_e _75;
    // Computing bound for n
    int64_t _76;
    // Computing bound for n
    if (_74 > 0) 
    goto _jump1195;
    fail_assertion("non-positive loop bound");
    _jump1195:;
    _76 = 0;
    int64_t _77 = 0; // n
    _jump1196:; // Begin body of loop
    _76 += _77;
    _77++;
    if (_77 < _74)
    goto _jump1196;
    // End body of loop
    _75.d0 = _76;
    if (_76 > 0) 
    goto _jump1197;
    fail_assertion("non-positive loop bound");
    _jump1197:;
    // Computing bound for o
    _75.d1 = _71;
    if (_71 > 0) 
    goto _jump1198;
    fail_assertion("non-positive loop bound");
    _jump1198:;
    // Computing total size of heap memory to allocate
    int64_t _78 = 1;
    _78 *= _76;
    _78 *= _71;
    _78 *= sizeof(e);
    _75.data = jpl_alloc(_78);
    int64_t _79 = 0; // o
    int64_t _80 = 0; // n
    _jump1199:; // Begin body of loop
    double _81 = 5.0;
    e _82 = f(_74, _81, i);
    int64_t _83 = 0;
    _83 *= _75.d0;
    _83 += _80;
    _83 *= _75.d1;
    _83 += _79;
    _75.data[_83] = _82;
    _79++;
    if (_79 < _71)
    goto _jump1199;
    _79 = 0;
    _80++;
    if (_80 < _76)
    goto _jump1199;
    // End body of loop
    int64_t _84 = 0;
    _84 *= _72.d0;
    _84 += _74;
    _72.data[_84] = _75;
    _74++;
    if (_74 < _71)
    goto _jump1194;
    // End body of loop
    int64_t _85 = 0;
    _85 *= _49.d0;
    _85 += _71;
    _85 *= _49.d1;
    _85 += _70;
    _85 *= _49.d2;
    _85 += _69;
    _49.data[_85] = _72;
    _69++;
    if (_69 < _60)
    goto _jump1192;
    _69 = 0;
    _70++;
    if (_70 < _59)
    goto _jump1192;
    _70 = 0;
    _71++;
    if (_71 < _51)
    goto _jump1192;
    // End body of loop
    _27 = _49;
    _jump1178:;
    double _86;
    // Computing bound for j
    if (g > 0) 
    goto _jump1200;
    fail_assertion("non-positive loop bound");
    _jump1200:;
    // Computing bound for k
    int64_t _87 = 429;
    int64_t _88 = -g;
    int64_t _89 = _87 % _88;
    if (_89 > 0) 
    goto _jump1201;
    fail_assertion("non-positive loop bound");
    _jump1201:;
    _86 = 0;
    int64_t _90 = 0; // k
    int64_t _91 = 0; // j
    _jump1202:; // Begin body of loop
    double _92 = 19.0;
    _86 += _92;
    _90++;
    if (_90 < _89)
    goto _jump1202;
    _90 = 0;
    _91++;
    if (_91 < g)
    goto _jump1202;
    // End body of loop
    int64_t _93 = 853;
    bool _94 = false;
    e _95 = { h, _93, _94 };
    double _96 = _95.a;
    double _97 = h / h;
    bool _98 = _96 == _97;
    e _99 = { _86, g, _98 };
    int64_t _100 = _99.b;
    bool _101 = true;
    int64_t _102;
    if (!_101)
    goto _jump1203;
    int64_t _103 = 203;
    _102 = _103;
    goto _jump1204;
    _jump1203:;
    bool _104 = false;
    bool _105;
    if (!_104)
    goto _jump1205;
    _105 = b;
    goto _jump1206;
    _jump1205:;
    bool _106 = false;
    _105 = _106;
    _jump1206:;
    int64_t _107;
    if (!_105)
    goto _jump1207;
    _107 = g;
    goto _jump1208;
    _jump1207:;
    _107 = g;
    _jump1208:;
    e _108 = f(_107, h, i);
    int64_t _109 = _108.b;
    _102 = _109;
    _jump1204:;
    _a2_double _110 = a();
    double _111 = c(_110);
    bool _112 = _111 == h;
    bool _113 = !_112;
    bool _114 = !_113;
    int64_t _115;
    if (!_114)
    goto _jump1209;
    int64_t _116;
    // Computing bound for j
    int64_t _117 = 204;
    if (_117 > 0) 
    goto _jump1210;
    fail_assertion("non-positive loop bound");
    _jump1210:;
    _116 = 0;
    int64_t _118 = 0; // j
    _jump1211:; // Begin body of loop
    double _119 = 94.0;
    e _120 = { _119, _118, d };
    int64_t _121 = _120.b;
    _116 += _121;
    _118++;
    if (_118 < _117)
    goto _jump1211;
    // End body of loop
    bool _122 = !d;
    bool _123 = !_122;
    int64_t _124;
    if (!_123)
    goto _jump1212;
    _124 = g;
    goto _jump1213;
    _jump1212:;
    int64_t _125 = 510;
    _124 = _125;
    _jump1213:;
    int64_t _126 = _116 % _124;
    _115 = _126;
    goto _jump1214;
    _jump1209:;
    int64_t _127;
    if (!b)
    goto _jump1215;
    _127 = g;
    goto _jump1216;
    _jump1215:;
    int64_t _128 = 350;
    _127 = _128;
    _jump1216:;
    int64_t _129 = _127 % g;
    int64_t _130 = g - _129;
    int64_t _131 = -_130;
    _115 = _131;
    _jump1214:;
    if (_100 >= 0)
    goto _jump1217;
    fail_assertion("negative array index");
    _jump1217:;
    if (_100 < _27.d0)
    goto _jump1218;
    fail_assertion("index too large");
    _jump1218:;
    if (_102 >= 0)
    goto _jump1219;
    fail_assertion("negative array index");
    _jump1219:;
    if (_102 < _27.d1)
    goto _jump1220;
    fail_assertion("index too large");
    _jump1220:;
    if (_115 >= 0)
    goto _jump1221;
    fail_assertion("negative array index");
    _jump1221:;
    if (_115 < _27.d2)
    goto _jump1222;
    fail_assertion("index too large");
    _jump1222:;
    int64_t _132 = 0;
    _132 *= _27.d0;
    _132 += _100;
    _132 *= _27.d1;
    _132 += _102;
    _132 *= _27.d2;
    _132 += _115;
    _a1__a2_e _133 = _27.data[_132];
    _23 = _133;
    goto _jump1223;
    _jump1161:;
    _a1_bool _134;
    // Computing bound for j
    int64_t _135;
    // Computing bound for j
    int64_t _136 = 854;
    int64_t _137 = 271;
    int64_t _138 = _136 / _137;
    int64_t _139 = -_138;
    if (_139 > 0) 
    goto _jump1224;
    fail_assertion("non-positive loop bound");
    _jump1224:;
    // Computing bound for k
    int64_t _140;
    // Computing bound for j
    if (g > 0) 
    goto _jump1225;
    fail_assertion("non-positive loop bound");
    _jump1225:;
    // Computing bound for k
    if (g > 0) 
    goto _jump1226;
    fail_assertion("non-positive loop bound");
    _jump1226:;
    // Computing bound for l
    int64_t _141 = 449;
    if (_141 > 0) 
    goto _jump1227;
    fail_assertion("non-positive loop bound");
    _jump1227:;
    _140 = 0;
    int64_t _142 = 0; // l
    int64_t _143 = 0; // k
    int64_t _144 = 0; // j
    _jump1228:; // Begin body of loop
    _140 += _144;
    _142++;
    if (_142 < _141)
    goto _jump1228;
    _142 = 0;
    _143++;
    if (_143 < g)
    goto _jump1228;
    _143 = 0;
    _144++;
    if (_144 < g)
    goto _jump1228;
    // End body of loop
    if (_140 > 0) 
    goto _jump1229;
    fail_assertion("non-positive loop bound");
    _jump1229:;
    _135 = 0;
    int64_t _145 = 0; // k
    int64_t _146 = 0; // j
    _jump1230:; // Begin body of loop
    e _147 = { h, g, b };
    int64_t _148 = _147.b;
    _135 += _148;
    _145++;
    if (_145 < _140)
    goto _jump1230;
    _145 = 0;
    _146++;
    if (_146 < _139)
    goto _jump1230;
    // End body of loop
    _134.d0 = _135;
    if (_135 > 0) 
    goto _jump1231;
    fail_assertion("non-positive loop bound");
    _jump1231:;
    // Computing total size of heap memory to allocate
    int64_t _149 = 1;
    _149 *= _135;
    _149 *= sizeof(bool);
    _134.data = jpl_alloc(_149);
    int64_t _150 = 0; // j
    _jump1232:; // Begin body of loop
    double _151;
    // Computing bound for k
    if (_150 > 0) 
    goto _jump1233;
    fail_assertion("non-positive loop bound");
    _jump1233:;
    _151 = 0;
    int64_t _152 = 0; // k
    _jump1234:; // Begin body of loop
    _151 += h;
    _152++;
    if (_152 < _150)
    goto _jump1234;
    // End body of loop
    double _153 = 34.0;
    double _154 = -_153;
    bool _155 = _151 <= _154;
    int64_t _156 = 0;
    _156 *= _134.d0;
    _156 += _150;
    _134.data[_156] = _155;
    _150++;
    if (_150 < _135)
    goto _jump1232;
    // End body of loop
    bool _157 = true;
    int64_t _158;
    if (!_157)
    goto _jump1235;
    bool _159 = true;
    int64_t _160;
    if (!_159)
    goto _jump1236;
    int64_t _161 = 703;
    _160 = _161;
    goto _jump1237;
    _jump1236:;
    int64_t _162;
    if (!b)
    goto _jump1238;
    int64_t _163 = 182;
    _162 = _163;
    goto _jump1239;
    _jump1238:;
    int64_t _164 = 550;
    _162 = _164;
    _jump1239:;
    _160 = _162;
    _jump1237:;
    _158 = _160;
    goto _jump1240;
    _jump1235:;
    int64_t _165;
    // Computing bound for j
    int64_t _166 = -g;
    int64_t _167 = -_166;
    if (_167 > 0) 
    goto _jump1241;
    fail_assertion("non-positive loop bound");
    _jump1241:;
    // Computing bound for k
    int64_t _168 = 124;
    if (_168 > 0) 
    goto _jump1242;
    fail_assertion("non-positive loop bound");
    _jump1242:;
    // Computing bound for l
    _a2_int64_t _169;
    // Computing bound for j
    _169.d0 = g;
    if (g > 0) 
    goto _jump1243;
    fail_assertion("non-positive loop bound");
    _jump1243:;
    // Computing bound for k
    _169.d1 = g;
    if (g > 0) 
    goto _jump1244;
    fail_assertion("non-positive loop bound");
    _jump1244:;
    // Computing total size of heap memory to allocate
    int64_t _170 = 1;
    _170 *= g;
    _170 *= g;
    _170 *= sizeof(int64_t);
    _169.data = jpl_alloc(_170);
    int64_t _171 = 0; // k
    int64_t _172 = 0; // j
    _jump1245:; // Begin body of loop
    int64_t _173 = 0;
    _173 *= _169.d0;
    _173 += _172;
    _173 *= _169.d1;
    _173 += _171;
    _169.data[_173] = g;
    _171++;
    if (_171 < g)
    goto _jump1245;
    _171 = 0;
    _172++;
    if (_172 < g)
    goto _jump1245;
    // End body of loop
    int64_t _174 = 91;
    int64_t _175 = 736;
    int64_t _176 = -_175;
    if (_174 >= 0)
    goto _jump1246;
    fail_assertion("negative array index");
    _jump1246:;
    if (_174 < _169.d0)
    goto _jump1247;
    fail_assertion("index too large");
    _jump1247:;
    if (_176 >= 0)
    goto _jump1248;
    fail_assertion("negative array index");
    _jump1248:;
    if (_176 < _169.d1)
    goto _jump1249;
    fail_assertion("index too large");
    _jump1249:;
    int64_t _177 = 0;
    _177 *= _169.d0;
    _177 += _174;
    _177 *= _169.d1;
    _177 += _176;
    int64_t _178 = _169.data[_177];
    if (_178 > 0) 
    goto _jump1250;
    fail_assertion("non-positive loop bound");
    _jump1250:;
    _165 = 0;
    int64_t _179 = 0; // l
    int64_t _180 = 0; // k
    int64_t _181 = 0; // j
    _jump1251:; // Begin body of loop
    _165 += _180;
    _179++;
    if (_179 < _178)
    goto _jump1251;
    _179 = 0;
    _180++;
    if (_180 < _168)
    goto _jump1251;
    _180 = 0;
    _181++;
    if (_181 < _167)
    goto _jump1251;
    // End body of loop
    _158 = _165;
    _jump1240:;
    if (_158 >= 0)
    goto _jump1252;
    fail_assertion("negative array index");
    _jump1252:;
    if (_158 < _134.d0)
    goto _jump1253;
    fail_assertion("index too large");
    _jump1253:;
    int64_t _182 = 0;
    _182 *= _134.d0;
    _182 += _158;
    bool _183 = _134.data[_182];
    _a1__a2_e _184;
    if (!_183)
    goto _jump1254;
    _a1__a2_e _185;
    if (!b)
    goto _jump1255;
    _a2_e _186;
    // Computing bound for j
    _186.d0 = g;
    if (g > 0) 
    goto _jump1256;
    fail_assertion("non-positive loop bound");
    _jump1256:;
    // Computing bound for k
    _186.d1 = g;
    if (g > 0) 
    goto _jump1257;
    fail_assertion("non-positive loop bound");
    _jump1257:;
    // Computing total size of heap memory to allocate
    int64_t _187 = 1;
    _187 *= g;
    _187 *= g;
    _187 *= sizeof(e);
    _186.data = jpl_alloc(_187);
    int64_t _188 = 0; // k
    int64_t _189 = 0; // j
    _jump1258:; // Begin body of loop
    bool _190 = true;
    double _191;
    if (!_190)
    goto _jump1259;
    _191 = h;
    goto _jump1260;
    _jump1259:;
    double _192 = 12.0;
    _191 = _192;
    _jump1260:;
    bool _193 = true;
    e _194 = { _191, _189, _193 };
    int64_t _195 = 0;
    _195 *= _186.d0;
    _195 += _189;
    _195 *= _186.d1;
    _195 += _188;
    _186.data[_195] = _194;
    _188++;
    if (_188 < g)
    goto _jump1258;
    _188 = 0;
    _189++;
    if (_189 < g)
    goto _jump1258;
    // End body of loop
    _a1__a2_e _196;
    _196.d0 = 1;
    _196.data = jpl_alloc(sizeof(_a2_e) * 1);
    _196.data[0] = _186;
    _185 = _196;
    goto _jump1261;
    _jump1255:;
    _a3__a1__a1__a2_e _197;
    // Computing bound for j
    int64_t _198 = 671;
    _197.d0 = _198;
    if (_198 > 0) 
    goto _jump1262;
    fail_assertion("non-positive loop bound");
    _jump1262:;
    // Computing bound for k
    _197.d1 = g;
    if (g > 0) 
    goto _jump1263;
    fail_assertion("non-positive loop bound");
    _jump1263:;
    // Computing bound for l
    _197.d2 = g;
    if (g > 0) 
    goto _jump1264;
    fail_assertion("non-positive loop bound");
    _jump1264:;
    // Computing total size of heap memory to allocate
    int64_t _199 = 1;
    _199 *= _198;
    _199 *= g;
    _199 *= g;
    _199 *= sizeof(_a1__a1__a2_e);
    _197.data = jpl_alloc(_199);
    int64_t _200 = 0; // l
    int64_t _201 = 0; // k
    int64_t _202 = 0; // j
    _jump1265:; // Begin body of loop
    _a1__a1__a2_e _203;
    // Computing bound for m
    _203.d0 = g;
    if (g > 0) 
    goto _jump1266;
    fail_assertion("non-positive loop bound");
    _jump1266:;
    // Computing total size of heap memory to allocate
    int64_t _204 = 1;
    _204 *= g;
    _204 *= sizeof(_a1__a2_e);
    _203.data = jpl_alloc(_204);
    int64_t _205 = 0; // m
    _jump1267:; // Begin body of loop
    int64_t _206 = 0;
    _206 *= _203.d0;
    _206 += _205;
    _203.data[_206] = i;
    _205++;
    if (_205 < g)
    goto _jump1267;
    // End body of loop
    int64_t _207 = 0;
    _207 *= _197.d0;
    _207 += _202;
    _207 *= _197.d1;
    _207 += _201;
    _207 *= _197.d2;
    _207 += _200;
    _197.data[_207] = _203;
    _200++;
    if (_200 < g)
    goto _jump1265;
    _200 = 0;
    _201++;
    if (_201 < g)
    goto _jump1265;
    _201 = 0;
    _202++;
    if (_202 < _198)
    goto _jump1265;
    // End body of loop
    int64_t _208 = -g;
    int64_t _209 = 391;
    int64_t _210 = 238;
    int64_t _211 = 667;
    int64_t _212 = g - _211;
    int64_t _213 = _210 % _212;
    if (_208 >= 0)
    goto _jump1268;
    fail_assertion("negative array index");
    _jump1268:;
    if (_208 < _197.d0)
    goto _jump1269;
    fail_assertion("index too large");
    _jump1269:;
    if (_209 >= 0)
    goto _jump1270;
    fail_assertion("negative array index");
    _jump1270:;
    if (_209 < _197.d1)
    goto _jump1271;
    fail_assertion("index too large");
    _jump1271:;
    if (_213 >= 0)
    goto _jump1272;
    fail_assertion("negative array index");
    _jump1272:;
    if (_213 < _197.d2)
    goto _jump1273;
    fail_assertion("index too large");
    _jump1273:;
    int64_t _214 = 0;
    _214 *= _197.d0;
    _214 += _208;
    _214 *= _197.d1;
    _214 += _209;
    _214 *= _197.d2;
    _214 += _213;
    _a1__a1__a2_e _215 = _197.data[_214];
    if (g >= 0)
    goto _jump1274;
    fail_assertion("negative array index");
    _jump1274:;
    if (g < _215.d0)
    goto _jump1275;
    fail_assertion("index too large");
    _jump1275:;
    int64_t _216 = 0;
    _216 *= _215.d0;
    _216 += g;
    _a1__a2_e _217 = _215.data[_216];
    _185 = _217;
    _jump1261:;
    _184 = _185;
    goto _jump1276;
    _jump1254:;
    _a1__a2_e _218;
    // Computing bound for j
    bool _219 = true;
    int64_t _220;
    if (!_219)
    goto _jump1277;
    _220 = g;
    goto _jump1278;
    _jump1277:;
    int64_t _221 = 756;
    int64_t _222 = -_221;
    _220 = _222;
    _jump1278:;
    int64_t _223 = -_220;
    _218.d0 = _223;
    if (_223 > 0) 
    goto _jump1279;
    fail_assertion("non-positive loop bound");
    _jump1279:;
    // Computing total size of heap memory to allocate
    int64_t _224 = 1;
    _224 *= _223;
    _224 *= sizeof(_a2_e);
    _218.data = jpl_alloc(_224);
    int64_t _225 = 0; // j
    _jump1280:; // Begin body of loop
    _a2__a2_e _226;
    // Computing bound for k
    int64_t _227 = -g;
    _226.d0 = _227;
    if (_227 > 0) 
    goto _jump1281;
    fail_assertion("non-positive loop bound");
    _jump1281:;
    // Computing bound for l
    int64_t _228 = 933;
    _226.d1 = _228;
    if (_228 > 0) 
    goto _jump1282;
    fail_assertion("non-positive loop bound");
    _jump1282:;
    // Computing total size of heap memory to allocate
    int64_t _229 = 1;
    _229 *= _227;
    _229 *= _228;
    _229 *= sizeof(_a2_e);
    _226.data = jpl_alloc(_229);
    int64_t _230 = 0; // l
    int64_t _231 = 0; // k
    _jump1283:; // Begin body of loop
    _a2_e _232;
    if (!b)
    goto _jump1284;
    int64_t _233 = 133;
    if (_233 >= 0)
    goto _jump1285;
    fail_assertion("negative array index");
    _jump1285:;
    if (_233 < i.d0)
    goto _jump1286;
    fail_assertion("index too large");
    _jump1286:;
    int64_t _234 = 0;
    _234 *= i.d0;
    _234 += _233;
    _a2_e _235 = i.data[_234];
    _232 = _235;
    goto _jump1287;
    _jump1284:;
    if (_230 >= 0)
    goto _jump1288;
    fail_assertion("negative array index");
    _jump1288:;
    if (_230 < i.d0)
    goto _jump1289;
    fail_assertion("index too large");
    _jump1289:;
    int64_t _236 = 0;
    _236 *= i.d0;
    _236 += _230;
    _a2_e _237 = i.data[_236];
    _232 = _237;
    _jump1287:;
    int64_t _238 = 0;
    _238 *= _226.d0;
    _238 += _231;
    _238 *= _226.d1;
    _238 += _230;
    _226.data[_238] = _232;
    _230++;
    if (_230 < _228)
    goto _jump1283;
    _230 = 0;
    _231++;
    if (_231 < _227)
    goto _jump1283;
    // End body of loop
    int64_t _239;
    // Computing bound for k
    int64_t _240;
    if (!d)
    goto _jump1290;
    int64_t _241 = 476;
    _240 = _241;
    goto _jump1291;
    _jump1290:;
    _240 = _225;
    _jump1291:;
    if (_240 > 0) 
    goto _jump1292;
    fail_assertion("non-positive loop bound");
    _jump1292:;
    // Computing bound for l
    if (_225 > 0) 
    goto _jump1293;
    fail_assertion("non-positive loop bound");
    _jump1293:;
    _239 = 0;
    int64_t _242 = 0; // l
    int64_t _243 = 0; // k
    _jump1294:; // Begin body of loop
    int64_t _244 = _243 / _242;
    _239 += _244;
    _242++;
    if (_242 < _225)
    goto _jump1294;
    _242 = 0;
    _243++;
    if (_243 < _240)
    goto _jump1294;
    // End body of loop
    int64_t _245 = _239 % _225;
    bool _246 = true;
    _a2_int64_t _247;
    if (!_246)
    goto _jump1295;
    _a2_int64_t _248;
    // Computing bound for k
    _248.d0 = _225;
    if (_225 > 0) 
    goto _jump1296;
    fail_assertion("non-positive loop bound");
    _jump1296:;
    // Computing bound for l
    _248.d1 = g;
    if (g > 0) 
    goto _jump1297;
    fail_assertion("non-positive loop bound");
    _jump1297:;
    // Computing total size of heap memory to allocate
    int64_t _249 = 1;
    _249 *= _225;
    _249 *= g;
    _249 *= sizeof(int64_t);
    _248.data = jpl_alloc(_249);
    int64_t _250 = 0; // l
    int64_t _251 = 0; // k
    _jump1298:; // Begin body of loop
    int64_t _252 = 0;
    _252 *= _248.d0;
    _252 += _251;
    _252 *= _248.d1;
    _252 += _250;
    _248.data[_252] = _250;
    _250++;
    if (_250 < g)
    goto _jump1298;
    _250 = 0;
    _251++;
    if (_251 < _225)
    goto _jump1298;
    // End body of loop
    _247 = _248;
    goto _jump1299;
    _jump1295:;
    _a2_int64_t _253;
    // Computing bound for k
    int64_t _254 = 281;
    _253.d0 = _254;
    if (_254 > 0) 
    goto _jump1300;
    fail_assertion("non-positive loop bound");
    _jump1300:;
    // Computing bound for l
    _253.d1 = g;
    if (g > 0) 
    goto _jump1301;
    fail_assertion("non-positive loop bound");
    _jump1301:;
    // Computing total size of heap memory to allocate
    int64_t _255 = 1;
    _255 *= _254;
    _255 *= g;
    _255 *= sizeof(int64_t);
    _253.data = jpl_alloc(_255);
    int64_t _256 = 0; // l
    int64_t _257 = 0; // k
    _jump1302:; // Begin body of loop
    int64_t _258 = 0;
    _258 *= _253.d0;
    _258 += _257;
    _258 *= _253.d1;
    _258 += _256;
    _253.data[_258] = _225;
    _256++;
    if (_256 < g)
    goto _jump1302;
    _256 = 0;
    _257++;
    if (_257 < _254)
    goto _jump1302;
    // End body of loop
    _247 = _253;
    _jump1299:;
    int64_t _259;
    // Computing bound for k
    int64_t _260 = -g;
    if (_260 > 0) 
    goto _jump1303;
    fail_assertion("non-positive loop bound");
    _jump1303:;
    _259 = 0;
    int64_t _261 = 0; // k
    _jump1304:; // Begin body of loop
    int64_t _262 = 303;
    int64_t _263 = -_262;
    _259 += _263;
    _261++;
    if (_261 < _260)
    goto _jump1304;
    // End body of loop
    int64_t _264 = -g;
    if (_259 >= 0)
    goto _jump1305;
    fail_assertion("negative array index");
    _jump1305:;
    if (_259 < _247.d0)
    goto _jump1306;
    fail_assertion("index too large");
    _jump1306:;
    if (_264 >= 0)
    goto _jump1307;
    fail_assertion("negative array index");
    _jump1307:;
    if (_264 < _247.d1)
    goto _jump1308;
    fail_assertion("index too large");
    _jump1308:;
    int64_t _265 = 0;
    _265 *= _247.d0;
    _265 += _259;
    _265 *= _247.d1;
    _265 += _264;
    int64_t _266 = _247.data[_265];
    if (_245 >= 0)
    goto _jump1309;
    fail_assertion("negative array index");
    _jump1309:;
    if (_245 < _226.d0)
    goto _jump1310;
    fail_assertion("index too large");
    _jump1310:;
    if (_266 >= 0)
    goto _jump1311;
    fail_assertion("negative array index");
    _jump1311:;
    if (_266 < _226.d1)
    goto _jump1312;
    fail_assertion("index too large");
    _jump1312:;
    int64_t _267 = 0;
    _267 *= _226.d0;
    _267 += _245;
    _267 *= _226.d1;
    _267 += _266;
    _a2_e _268 = _226.data[_267];
    int64_t _269 = 0;
    _269 *= _218.d0;
    _269 += _225;
    _218.data[_269] = _268;
    _225++;
    if (_225 < _223)
    goto _jump1280;
    // End body of loop
    _184 = _218;
    _jump1276:;
    _23 = _184;
    _jump1223:;
    if (0 != d)
    goto _jump1313;
    fail_assertion("l");
    _jump1313:;
    if (_23.d0 >= 0)
    goto _jump1314;
    fail_assertion("negative array index");
    _jump1314:;
    if (_23.d0 < _23.d0)
    goto _jump1315;
    fail_assertion("index too large");
    _jump1315:;
    int64_t _270 = 0;
    _270 *= _23.d0;
    _270 += _23.d0;
    _a2_e _271 = _23.data[_270];
    bool _272 = !d;
    bool _273 = !_272;
    if (0 != _273)
    goto _jump1316;
    fail_assertion("o");
    _jump1316:;
    int64_t _274;
    // Computing bound for o
    if (g > 0) 
    goto _jump1317;
    fail_assertion("non-positive loop bound");
    _jump1317:;
    // Computing bound for p
    if (g > 0) 
    goto _jump1318;
    fail_assertion("non-positive loop bound");
    _jump1318:;
    // Computing bound for q
    if (g > 0) 
    goto _jump1319;
    fail_assertion("non-positive loop bound");
    _jump1319:;
    _274 = 0;
    int64_t _275 = 0; // q
    int64_t _276 = 0; // p
    int64_t _277 = 0; // o
    _jump1320:; // Begin body of loop
    _274 += _271.d1;
    _275++;
    if (_275 < g)
    goto _jump1320;
    _275 = 0;
    _276++;
    if (_276 < g)
    goto _jump1320;
    _276 = 0;
    _277++;
    if (_277 < g)
    goto _jump1320;
    // End body of loop
    int64_t _278 = -_274;
    e _279 = { h, _23.d0, b };
    bool _280 = _279.c;
    bool _281 = b;
    if (0 == b)
    goto _jump1321;
    _281 = b;
    _jump1321:;
    bool _282 = _280 != _281;
    int64_t _283;
    if (!_282)
    goto _jump1322;
    _283 = _271.d1;
    goto _jump1323;
    _jump1322:;
    _a2_double _284 = a();
    int64_t _285 = 200;
    if (_285 >= 0)
    goto _jump1324;
    fail_assertion("negative array index");
    _jump1324:;
    if (_285 < _284.d0)
    goto _jump1325;
    fail_assertion("index too large");
    _jump1325:;
    if (_271.d0 >= 0)
    goto _jump1326;
    fail_assertion("negative array index");
    _jump1326:;
    if (_271.d0 < _284.d1)
    goto _jump1327;
    fail_assertion("index too large");
    _jump1327:;
    int64_t _286 = 0;
    _286 *= _284.d0;
    _286 += _285;
    _286 *= _284.d1;
    _286 += _271.d0;
    double _287 = _284.data[_286];
    int64_t _288 = -_23.d0;
    bool _289 = false;
    bool _290 = !_289;
    e _291 = { _287, _288, _290 };
    int64_t _292 = _291.b;
    _283 = _292;
    _jump1323:;
    bool _293 = _278 != _283;
    double _294 = 43.0;
    double _295;
    // Computing bound for o
    int64_t _296 = _271.d1 / g;
    if (_296 > 0) 
    goto _jump1328;
    fail_assertion("non-positive loop bound");
    _jump1328:;
    // Computing bound for p
    double _298 = 44.0;
    bool _299 = h == _298;
    bool _297 = _299;
    if (0 != _299)
    goto _jump1329;
    _297 = b;
    _jump1329:;
    int64_t _300;
    if (!_297)
    goto _jump1330;
    int64_t _301 = 200;
    _300 = _301;
    goto _jump1331;
    _jump1330:;
    int64_t _302 = 754;
    _300 = _302;
    _jump1331:;
    if (_300 > 0) 
    goto _jump1332;
    fail_assertion("non-positive loop bound");
    _jump1332:;
    // Computing bound for q
    _a3_int64_t _303;
    // Computing bound for o
    int64_t _304 = _271.d1 - _23.d0;
    _303.d0 = _304;
    if (_304 > 0) 
    goto _jump1333;
    fail_assertion("non-positive loop bound");
    _jump1333:;
    // Computing bound for p
    int64_t _305;
    // Computing bound for o
    if (_23.d0 > 0) 
    goto _jump1334;
    fail_assertion("non-positive loop bound");
    _jump1334:;
    // Computing bound for p
    if (_271.d0 > 0) 
    goto _jump1335;
    fail_assertion("non-positive loop bound");
    _jump1335:;
    _305 = 0;
    int64_t _306 = 0; // p
    int64_t _307 = 0; // o
    _jump1336:; // Begin body of loop
    _305 += _23.d0;
    _306++;
    if (_306 < _271.d0)
    goto _jump1336;
    _306 = 0;
    _307++;
    if (_307 < _23.d0)
    goto _jump1336;
    // End body of loop
    _303.d1 = _305;
    if (_305 > 0) 
    goto _jump1337;
    fail_assertion("non-positive loop bound");
    _jump1337:;
    // Computing bound for q
    _303.d2 = _271.d0;
    if (_271.d0 > 0) 
    goto _jump1338;
    fail_assertion("non-positive loop bound");
    _jump1338:;
    // Computing total size of heap memory to allocate
    int64_t _308 = 1;
    _308 *= _304;
    _308 *= _305;
    _308 *= _271.d0;
    _308 *= sizeof(int64_t);
    _303.data = jpl_alloc(_308);
    int64_t _309 = 0; // q
    int64_t _310 = 0; // p
    int64_t _311 = 0; // o
    _jump1339:; // Begin body of loop
    int64_t _312 = _311 - g;
    int64_t _313 = 0;
    _313 *= _303.d0;
    _313 += _311;
    _313 *= _303.d1;
    _313 += _310;
    _313 *= _303.d2;
    _313 += _309;
    _303.data[_313] = _312;
    _309++;
    if (_309 < _271.d0)
    goto _jump1339;
    _309 = 0;
    _310++;
    if (_310 < _305)
    goto _jump1339;
    _310 = 0;
    _311++;
    if (_311 < _304)
    goto _jump1339;
    // End body of loop
    int64_t _314;
    if (!b)
    goto _jump1340;
    _314 = _271.d1;
    goto _jump1341;
    _jump1340:;
    _314 = _23.d0;
    _jump1341:;
    int64_t _315 = 691;
    if (_314 >= 0)
    goto _jump1342;
    fail_assertion("negative array index");
    _jump1342:;
    if (_314 < _303.d0)
    goto _jump1343;
    fail_assertion("index too large");
    _jump1343:;
    if (g >= 0)
    goto _jump1344;
    fail_assertion("negative array index");
    _jump1344:;
    if (g < _303.d1)
    goto _jump1345;
    fail_assertion("index too large");
    _jump1345:;
    if (_315 >= 0)
    goto _jump1346;
    fail_assertion("negative array index");
    _jump1346:;
    if (_315 < _303.d2)
    goto _jump1347;
    fail_assertion("index too large");
    _jump1347:;
    int64_t _316 = 0;
    _316 *= _303.d0;
    _316 += _314;
    _316 *= _303.d1;
    _316 += g;
    _316 *= _303.d2;
    _316 += _315;
    int64_t _317 = _303.data[_316];
    if (_317 > 0) 
    goto _jump1348;
    fail_assertion("non-positive loop bound");
    _jump1348:;
    _295 = 0;
    int64_t _318 = 0; // q
    int64_t _319 = 0; // p
    int64_t _320 = 0; // o
    _jump1349:; // Begin body of loop
    _a2_double _321 = a();
    double _322 = c(_321);
    _a2_double _323 = a();
    if (_318 >= 0)
    goto _jump1350;
    fail_assertion("negative array index");
    _jump1350:;
    if (_318 < _323.d0)
    goto _jump1351;
    fail_assertion("index too large");
    _jump1351:;
    if (_271.d1 >= 0)
    goto _jump1352;
    fail_assertion("negative array index");
    _jump1352:;
    if (_271.d1 < _323.d1)
    goto _jump1353;
    fail_assertion("index too large");
    _jump1353:;
    int64_t _324 = 0;
    _324 *= _323.d0;
    _324 += _318;
    _324 *= _323.d1;
    _324 += _271.d1;
    double _325 = _323.data[_324];
    double _326 = 53.0;
    _a1_double _327;
    _327.d0 = 3;
    _327.data = jpl_alloc(sizeof(double) * 3);
    _327.data[0] = _322;
    _327.data[1] = _325;
    _327.data[2] = _326;
    int64_t _328 = 567;
    if (_328 >= 0)
    goto _jump1354;
    fail_assertion("negative array index");
    _jump1354:;
    if (_328 < _327.d0)
    goto _jump1355;
    fail_assertion("index too large");
    _jump1355:;
    int64_t _329 = 0;
    _329 *= _327.d0;
    _329 += _328;
    double _330 = _327.data[_329];
    _295 += _330;
    _318++;
    if (_318 < _317)
    goto _jump1349;
    _318 = 0;
    _319++;
    if (_319 < _300)
    goto _jump1349;
    _319 = 0;
    _320++;
    if (_320 < _296)
    goto _jump1349;
    // End body of loop
    bool _331 = _294 == _295;
    bool _332 = _293 != _331;
    _a3_int64_t _333;
    if (!_332)
    goto _jump1356;
    _a2__a3_int64_t _334;
    // Computing bound for o
    _334.d0 = _271.d1;
    if (_271.d1 > 0) 
    goto _jump1357;
    fail_assertion("non-positive loop bound");
    _jump1357:;
    // Computing bound for p
    bool _335 = d;
    if (0 != d)
    goto _jump1358;
    bool _336 = false;
    _335 = _336;
    _jump1358:;
    int64_t _337;
    if (!_335)
    goto _jump1359;
    int64_t _338 = -_23.d0;
    _337 = _338;
    goto _jump1360;
    _jump1359:;
    double _339 = 9.0;
    e _340 = f(_271.d1, _339, i);
    int64_t _341 = _340.b;
    _337 = _341;
    _jump1360:;
    int64_t _342 = -_337;
    _334.d1 = _342;
    if (_342 > 0) 
    goto _jump1361;
    fail_assertion("non-positive loop bound");
    _jump1361:;
    // Computing total size of heap memory to allocate
    int64_t _343 = 1;
    _343 *= _271.d1;
    _343 *= _342;
    _343 *= sizeof(_a3_int64_t);
    _334.data = jpl_alloc(_343);
    int64_t _344 = 0; // p
    int64_t _345 = 0; // o
    _jump1362:; // Begin body of loop
    _a3_int64_t _346;
    if (!b)
    goto _jump1363;
    _a2__a3_int64_t _347;
    // Computing bound for q
    _347.d0 = _344;
    if (_344 > 0) 
    goto _jump1364;
    fail_assertion("non-positive loop bound");
    _jump1364:;
    // Computing bound for r
    _347.d1 = _344;
    if (_344 > 0) 
    goto _jump1365;
    fail_assertion("non-positive loop bound");
    _jump1365:;
    // Computing total size of heap memory to allocate
    int64_t _348 = 1;
    _348 *= _344;
    _348 *= _344;
    _348 *= sizeof(_a3_int64_t);
    _347.data = jpl_alloc(_348);
    int64_t _349 = 0; // r
    int64_t _350 = 0; // q
    _jump1366:; // Begin body of loop
    _a3_int64_t _351;
    // Computing bound for s
    _351.d0 = _23.d0;
    if (_23.d0 > 0) 
    goto _jump1367;
    fail_assertion("non-positive loop bound");
    _jump1367:;
    // Computing bound for t
    _351.d1 = g;
    if (g > 0) 
    goto _jump1368;
    fail_assertion("non-positive loop bound");
    _jump1368:;
    // Computing bound for u
    _351.d2 = _271.d0;
    if (_271.d0 > 0) 
    goto _jump1369;
    fail_assertion("non-positive loop bound");
    _jump1369:;
    // Computing total size of heap memory to allocate
    int64_t _352 = 1;
    _352 *= _23.d0;
    _352 *= g;
    _352 *= _271.d0;
    _352 *= sizeof(int64_t);
    _351.data = jpl_alloc(_352);
    int64_t _353 = 0; // u
    int64_t _354 = 0; // t
    int64_t _355 = 0; // s
    _jump1370:; // Begin body of loop
    int64_t _356 = 0;
    _356 *= _351.d0;
    _356 += _355;
    _356 *= _351.d1;
    _356 += _354;
    _356 *= _351.d2;
    _356 += _353;
    _351.data[_356] = _354;
    _353++;
    if (_353 < _271.d0)
    goto _jump1370;
    _353 = 0;
    _354++;
    if (_354 < g)
    goto _jump1370;
    _354 = 0;
    _355++;
    if (_355 < _23.d0)
    goto _jump1370;
    // End body of loop
    int64_t _357 = 0;
    _357 *= _347.d0;
    _357 += _350;
    _357 *= _347.d1;
    _357 += _349;
    _347.data[_357] = _351;
    _349++;
    if (_349 < _344)
    goto _jump1366;
    _349 = 0;
    _350++;
    if (_350 < _344)
    goto _jump1366;
    // End body of loop
    int64_t _358;
    // Computing bound for q
    int64_t _359 = 777;
    int64_t _360 = g - _359;
    if (_360 > 0) 
    goto _jump1371;
    fail_assertion("non-positive loop bound");
    _jump1371:;
    // Computing bound for r
    int64_t _361;
    // Computing bound for q
    if (_345 > 0) 
    goto _jump1372;
    fail_assertion("non-positive loop bound");
    _jump1372:;
    _361 = 0;
    int64_t _362 = 0; // q
    _jump1373:; // Begin body of loop
    _361 += _23.d0;
    _362++;
    if (_362 < _345)
    goto _jump1373;
    // End body of loop
    if (_361 > 0) 
    goto _jump1374;
    fail_assertion("non-positive loop bound");
    _jump1374:;
    _358 = 0;
    int64_t _363 = 0; // r
    int64_t _364 = 0; // q
    _jump1375:; // Begin body of loop
    _358 += _363;
    _363++;
    if (_363 < _361)
    goto _jump1375;
    _363 = 0;
    _364++;
    if (_364 < _360)
    goto _jump1375;
    // End body of loop
    if (_358 >= 0)
    goto _jump1376;
    fail_assertion("negative array index");
    _jump1376:;
    if (_358 < _347.d0)
    goto _jump1377;
    fail_assertion("index too large");
    _jump1377:;
    if (_271.d1 >= 0)
    goto _jump1378;
    fail_assertion("negative array index");
    _jump1378:;
    if (_271.d1 < _347.d1)
    goto _jump1379;
    fail_assertion("index too large");
    _jump1379:;
    int64_t _365 = 0;
    _365 *= _347.d0;
    _365 += _358;
    _365 *= _347.d1;
    _365 += _271.d1;
    _a3_int64_t _366 = _347.data[_365];
    _346 = _366;
    goto _jump1380;
    _jump1363:;
    _a1__a3_int64_t _367;
    // Computing bound for q
    int64_t _368 = -_344;
    _367.d0 = _368;
    if (_368 > 0) 
    goto _jump1381;
    fail_assertion("non-positive loop bound");
    _jump1381:;
    // Computing total size of heap memory to allocate
    int64_t _369 = 1;
    _369 *= _368;
    _369 *= sizeof(_a3_int64_t);
    _367.data = jpl_alloc(_369);
    int64_t _370 = 0; // q
    _jump1382:; // Begin body of loop
    _a3_int64_t _371;
    // Computing bound for r
    _371.d0 = _271.d1;
    if (_271.d1 > 0) 
    goto _jump1383;
    fail_assertion("non-positive loop bound");
    _jump1383:;
    // Computing bound for s
    _371.d1 = _344;
    if (_344 > 0) 
    goto _jump1384;
    fail_assertion("non-positive loop bound");
    _jump1384:;
    // Computing bound for t
    _371.d2 = _271.d1;
    if (_271.d1 > 0) 
    goto _jump1385;
    fail_assertion("non-positive loop bound");
    _jump1385:;
    // Computing total size of heap memory to allocate
    int64_t _372 = 1;
    _372 *= _271.d1;
    _372 *= _344;
    _372 *= _271.d1;
    _372 *= sizeof(int64_t);
    _371.data = jpl_alloc(_372);
    int64_t _373 = 0; // t
    int64_t _374 = 0; // s
    int64_t _375 = 0; // r
    _jump1386:; // Begin body of loop
    int64_t _376 = 0;
    _376 *= _371.d0;
    _376 += _375;
    _376 *= _371.d1;
    _376 += _374;
    _376 *= _371.d2;
    _376 += _373;
    _371.data[_376] = _345;
    _373++;
    if (_373 < _271.d1)
    goto _jump1386;
    _373 = 0;
    _374++;
    if (_374 < _344)
    goto _jump1386;
    _374 = 0;
    _375++;
    if (_375 < _271.d1)
    goto _jump1386;
    // End body of loop
    int64_t _377 = 0;
    _377 *= _367.d0;
    _377 += _370;
    _367.data[_377] = _371;
    _370++;
    if (_370 < _368)
    goto _jump1382;
    // End body of loop
    _a1_int64_t _378;
    _378.d0 = 3;
    _378.data = jpl_alloc(sizeof(int64_t) * 3);
    _378.data[0] = _345;
    _378.data[1] = _271.d1;
    _378.data[2] = g;
    int64_t _379 = -_345;
    if (_379 >= 0)
    goto _jump1387;
    fail_assertion("negative array index");
    _jump1387:;
    if (_379 < _378.d0)
    goto _jump1388;
    fail_assertion("index too large");
    _jump1388:;
    int64_t _380 = 0;
    _380 *= _378.d0;
    _380 += _379;
    int64_t _381 = _378.data[_380];
    if (_381 >= 0)
    goto _jump1389;
    fail_assertion("negative array index");
    _jump1389:;
    if (_381 < _367.d0)
    goto _jump1390;
    fail_assertion("index too large");
    _jump1390:;
    int64_t _382 = 0;
    _382 *= _367.d0;
    _382 += _381;
    _a3_int64_t _383 = _367.data[_382];
    _346 = _383;
    _jump1380:;
    int64_t _384 = 0;
    _384 *= _334.d0;
    _384 += _345;
    _384 *= _334.d1;
    _384 += _344;
    _334.data[_384] = _346;
    _344++;
    if (_344 < _342)
    goto _jump1362;
    _344 = 0;
    _345++;
    if (_345 < _271.d1)
    goto _jump1362;
    // End body of loop
    int64_t _385;
    // Computing bound for o
    _a1_double _386;
    _386.d0 = 1;
    _386.data = jpl_alloc(sizeof(double) * 1);
    _386.data[0] = h;
    int64_t _387 = 257;
    int64_t _388 = -_387;
    if (_388 >= 0)
    goto _jump1391;
    fail_assertion("negative array index");
    _jump1391:;
    if (_388 < _386.d0)
    goto _jump1392;
    fail_assertion("index too large");
    _jump1392:;
    int64_t _389 = 0;
    _389 *= _386.d0;
    _389 += _388;
    double _390 = _386.data[_389];
    int64_t _391;
    // Computing bound for o
    if (_271.d0 > 0) 
    goto _jump1393;
    fail_assertion("non-positive loop bound");
    _jump1393:;
    _391 = 0;
    int64_t _392 = 0; // o
    _jump1394:; // Begin body of loop
    int64_t _393 = 929;
    int64_t _394 = _392 - _393;
    _391 += _394;
    _392++;
    if (_392 < _271.d0)
    goto _jump1394;
    // End body of loop
    bool _395 = b;
    if (0 == b)
    goto _jump1395;
    _395 = b;
    _jump1395:;
    bool _396 = !_395;
    e _397 = { _390, _391, _396 };
    int64_t _398 = _397.b;
    if (_398 > 0) 
    goto _jump1396;
    fail_assertion("non-positive loop bound");
    _jump1396:;
    _385 = 0;
    int64_t _399 = 0; // o
    _jump1397:; // Begin body of loop
    _385 += _23.d0;
    _399++;
    if (_399 < _398)
    goto _jump1397;
    // End body of loop
    _a2_double _400 = a();
    double _401 = c(_400);
    int64_t _402 = _271.d0 - _23.d0;
    bool _403 = _402 == _23.d0;
    e _404 = { _401, g, _403 };
    int64_t _405 = _404.b;
    if (_385 >= 0)
    goto _jump1398;
    fail_assertion("negative array index");
    _jump1398:;
    if (_385 < _334.d0)
    goto _jump1399;
    fail_assertion("index too large");
    _jump1399:;
    if (_405 >= 0)
    goto _jump1400;
    fail_assertion("negative array index");
    _jump1400:;
    if (_405 < _334.d1)
    goto _jump1401;
    fail_assertion("index too large");
    _jump1401:;
    int64_t _406 = 0;
    _406 *= _334.d0;
    _406 += _385;
    _406 *= _334.d1;
    _406 += _405;
    _a3_int64_t _407 = _334.data[_406];
    _333 = _407;
    goto _jump1402;
    _jump1356:;
    double _408;
    // Computing bound for o
    if (_271.d0 > 0) 
    goto _jump1403;
    fail_assertion("non-positive loop bound");
    _jump1403:;
    _408 = 0;
    int64_t _409 = 0; // o
    _jump1404:; // Begin body of loop
    double _410;
    // Computing bound for p
    int64_t _411 = 86;
    int64_t _412 = -_411;
    if (_412 > 0) 
    goto _jump1405;
    fail_assertion("non-positive loop bound");
    _jump1405:;
    // Computing bound for q
    if (g > 0) 
    goto _jump1406;
    fail_assertion("non-positive loop bound");
    _jump1406:;
    // Computing bound for r
    if (_271.d1 > 0) 
    goto _jump1407;
    fail_assertion("non-positive loop bound");
    _jump1407:;
    _410 = 0;
    int64_t _413 = 0; // r
    int64_t _414 = 0; // q
    int64_t _415 = 0; // p
    _jump1408:; // Begin body of loop
    double _416;
    // Computing bound for s
    int64_t _417 = 774;
    if (_417 > 0) 
    goto _jump1409;
    fail_assertion("non-positive loop bound");
    _jump1409:;
    // Computing bound for t
    if (g > 0) 
    goto _jump1410;
    fail_assertion("non-positive loop bound");
    _jump1410:;
    _416 = 0;
    int64_t _418 = 0; // t
    int64_t _419 = 0; // s
    _jump1411:; // Begin body of loop
    double _420 = 3.0;
    _416 += _420;
    _418++;
    if (_418 < g)
    goto _jump1411;
    _418 = 0;
    _419++;
    if (_419 < _417)
    goto _jump1411;
    // End body of loop
    _410 += _416;
    _413++;
    if (_413 < _271.d1)
    goto _jump1408;
    _413 = 0;
    _414++;
    if (_414 < g)
    goto _jump1408;
    _414 = 0;
    _415++;
    if (_415 < _412)
    goto _jump1408;
    // End body of loop
    _408 += _410;
    _409++;
    if (_409 < _271.d0)
    goto _jump1404;
    // End body of loop
    int64_t _421 = 898;
    int64_t _422 = 484;
    int64_t _423 = _421 % _422;
    int64_t _424 = 584;
    int64_t _425 = _423 / _424;
    int64_t _426 = 307;
    bool _427 = _425 <= _426;
    double _428;
    if (!_427)
    goto _jump1412;
    _a2_double _429 = a();
    double _430 = c(_429);
    double _431 = 47.0;
    double _432 = h * _431;
    bool _433 = _430 != _432;
    double _434;
    if (!_433)
    goto _jump1413;
    _434 = h;
    goto _jump1414;
    _jump1413:;
    _a2_double _435 = a();
    double _436 = c(_435);
    _434 = _436;
    _jump1414:;
    _428 = _434;
    goto _jump1415;
    _jump1412:;
    _a2_double _437;
    if (!b)
    goto _jump1416;
    _a2_double _438 = a();
    _437 = _438;
    goto _jump1417;
    _jump1416:;
    _a2_double _439 = a();
    _437 = _439;
    _jump1417:;
    double _440 = c(_437);
    _428 = _440;
    _jump1415:;
    bool _441 = _408 < _428;
    _a3_int64_t _442;
    if (!_441)
    goto _jump1418;
    _a3_int64_t _443;
    // Computing bound for o
    _443.d0 = _23.d0;
    if (_23.d0 > 0) 
    goto _jump1419;
    fail_assertion("non-positive loop bound");
    _jump1419:;
    // Computing bound for p
    _443.d1 = _271.d0;
    if (_271.d0 > 0) 
    goto _jump1420;
    fail_assertion("non-positive loop bound");
    _jump1420:;
    // Computing bound for q
    _443.d2 = g;
    if (g > 0) 
    goto _jump1421;
    fail_assertion("non-positive loop bound");
    _jump1421:;
    // Computing total size of heap memory to allocate
    int64_t _444 = 1;
    _444 *= _23.d0;
    _444 *= _271.d0;
    _444 *= g;
    _444 *= sizeof(int64_t);
    _443.data = jpl_alloc(_444);
    int64_t _445 = 0; // q
    int64_t _446 = 0; // p
    int64_t _447 = 0; // o
    _jump1422:; // Begin body of loop
    int64_t _448 = 0;
    _448 *= _443.d0;
    _448 += _447;
    _448 *= _443.d1;
    _448 += _446;
    _448 *= _443.d2;
    _448 += _445;
    _443.data[_448] = g;
    _445++;
    if (_445 < g)
    goto _jump1422;
    _445 = 0;
    _446++;
    if (_446 < _271.d0)
    goto _jump1422;
    _446 = 0;
    _447++;
    if (_447 < _23.d0)
    goto _jump1422;
    // End body of loop
    _442 = _443;
    goto _jump1423;
    _jump1418:;
    double _449;
    // Computing bound for o
    if (g > 0) 
    goto _jump1424;
    fail_assertion("non-positive loop bound");
    _jump1424:;
    _449 = 0;
    int64_t _450 = 0; // o
    _jump1425:; // Begin body of loop
    double _451 = 82.0;
    double _452 = 21.0;
    double _453 = -_452;
    double _454 = _451 / _453;
    _449 += _454;
    _450++;
    if (_450 < g)
    goto _jump1425;
    // End body of loop
    double _455;
    if (!d)
    goto _jump1426;
    _455 = h;
    goto _jump1427;
    _jump1426:;
    _455 = h;
    _jump1427:;
    bool _456 = _449 <= _455;
    _a3_int64_t _457;
    if (!_456)
    goto _jump1428;
    _a3_int64_t _458;
    // Computing bound for o
    int64_t _459;
    // Computing bound for o
    int64_t _460;
    // Computing bound for o
    int64_t _461 = 588;
    if (_461 > 0) 
    goto _jump1429;
    fail_assertion("non-positive loop bound");
    _jump1429:;
    // Computing bound for p
    if (_23.d0 > 0) 
    goto _jump1430;
    fail_assertion("non-positive loop bound");
    _jump1430:;
    // Computing bound for q
    if (g > 0) 
    goto _jump1431;
    fail_assertion("non-positive loop bound");
    _jump1431:;
    _460 = 0;
    int64_t _462 = 0; // q
    int64_t _463 = 0; // p
    int64_t _464 = 0; // o
    _jump1432:; // Begin body of loop
    int64_t _465 = 660;
    _460 += _465;
    _462++;
    if (_462 < g)
    goto _jump1432;
    _462 = 0;
    _463++;
    if (_463 < _23.d0)
    goto _jump1432;
    _463 = 0;
    _464++;
    if (_464 < _461)
    goto _jump1432;
    // End body of loop
    if (_460 > 0) 
    goto _jump1433;
    fail_assertion("non-positive loop bound");
    _jump1433:;
    // Computing bound for p
    int64_t _466;
    // Computing bound for o
    if (_271.d1 > 0) 
    goto _jump1434;
    fail_assertion("non-positive loop bound");
    _jump1434:;
    _466 = 0;
    int64_t _467 = 0; // o
    _jump1435:; // Begin body of loop
    _466 += _271.d0;
    _467++;
    if (_467 < _271.d1)
    goto _jump1435;
    // End body of loop
    if (_466 > 0) 
    goto _jump1436;
    fail_assertion("non-positive loop bound");
    _jump1436:;
    // Computing bound for q
    if (_271.d0 > 0) 
    goto _jump1437;
    fail_assertion("non-positive loop bound");
    _jump1437:;
    _459 = 0;
    int64_t _468 = 0; // q
    int64_t _469 = 0; // p
    int64_t _470 = 0; // o
    _jump1438:; // Begin body of loop
    int64_t _471 = -_271.d1;
    _459 += _471;
    _468++;
    if (_468 < _271.d0)
    goto _jump1438;
    _468 = 0;
    _469++;
    if (_469 < _466)
    goto _jump1438;
    _469 = 0;
    _470++;
    if (_470 < _460)
    goto _jump1438;
    // End body of loop
    int64_t _472 = -_459;
    _458.d0 = _472;
    if (_472 > 0) 
    goto _jump1439;
    fail_assertion("non-positive loop bound");
    _jump1439:;
    // Computing bound for p
    _458.d1 = _23.d0;
    if (_23.d0 > 0) 
    goto _jump1440;
    fail_assertion("non-positive loop bound");
    _jump1440:;
    // Computing bound for q
    int64_t _473;
    // Computing bound for o
    int64_t _474 = 958;
    if (_474 > 0) 
    goto _jump1441;
    fail_assertion("non-positive loop bound");
    _jump1441:;
    _473 = 0;
    int64_t _475 = 0; // o
    _jump1442:; // Begin body of loop
    int64_t _476;
    // Computing bound for p
    if (_271.d1 > 0) 
    goto _jump1443;
    fail_assertion("non-positive loop bound");
    _jump1443:;
    // Computing bound for q
    if (_23.d0 > 0) 
    goto _jump1444;
    fail_assertion("non-positive loop bound");
    _jump1444:;
    // Computing bound for r
    if (g > 0) 
    goto _jump1445;
    fail_assertion("non-positive loop bound");
    _jump1445:;
    _476 = 0;
    int64_t _477 = 0; // r
    int64_t _478 = 0; // q
    int64_t _479 = 0; // p
    _jump1446:; // Begin body of loop
    int64_t _480 = 418;
    _476 += _480;
    _477++;
    if (_477 < g)
    goto _jump1446;
    _477 = 0;
    _478++;
    if (_478 < _23.d0)
    goto _jump1446;
    _478 = 0;
    _479++;
    if (_479 < _271.d1)
    goto _jump1446;
    // End body of loop
    _473 += _476;
    _475++;
    if (_475 < _474)
    goto _jump1442;
    // End body of loop
    int64_t _481 = _473 / _23.d0;
    _458.d2 = _481;
    if (_481 > 0) 
    goto _jump1447;
    fail_assertion("non-positive loop bound");
    _jump1447:;
    // Computing total size of heap memory to allocate
    int64_t _482 = 1;
    _482 *= _472;
    _482 *= _23.d0;
    _482 *= _481;
    _482 *= sizeof(int64_t);
    _458.data = jpl_alloc(_482);
    int64_t _483 = 0; // q
    int64_t _484 = 0; // p
    int64_t _485 = 0; // o
    _jump1448:; // Begin body of loop
    int64_t _486 = 0;
    _486 *= _458.d0;
    _486 += _485;
    _486 *= _458.d1;
    _486 += _484;
    _486 *= _458.d2;
    _486 += _483;
    _458.data[_486] = _271.d1;
    _483++;
    if (_483 < _481)
    goto _jump1448;
    _483 = 0;
    _484++;
    if (_484 < _23.d0)
    goto _jump1448;
    _484 = 0;
    _485++;
    if (_485 < _472)
    goto _jump1448;
    // End body of loop
    _457 = _458;
    goto _jump1449;
    _jump1428:;
    _a3_int64_t _487;
    // Computing bound for o
    _487.d0 = _271.d1;
    if (_271.d1 > 0) 
    goto _jump1450;
    fail_assertion("non-positive loop bound");
    _jump1450:;
    // Computing bound for p
    int64_t _488;
    // Computing bound for o
    if (_23.d0 > 0) 
    goto _jump1451;
    fail_assertion("non-positive loop bound");
    _jump1451:;
    // Computing bound for p
    if (_271.d0 > 0) 
    goto _jump1452;
    fail_assertion("non-positive loop bound");
    _jump1452:;
    // Computing bound for q
    if (_271.d0 > 0) 
    goto _jump1453;
    fail_assertion("non-positive loop bound");
    _jump1453:;
    _488 = 0;
    int64_t _489 = 0; // q
    int64_t _490 = 0; // p
    int64_t _491 = 0; // o
    _jump1454:; // Begin body of loop
    int64_t _492;
    // Computing bound for r
    int64_t _493 = _490 % g;
    if (_493 > 0) 
    goto _jump1455;
    fail_assertion("non-positive loop bound");
    _jump1455:;
    // Computing bound for s
    if (_271.d0 > 0) 
    goto _jump1456;
    fail_assertion("non-positive loop bound");
    _jump1456:;
    _492 = 0;
    int64_t _494 = 0; // s
    int64_t _495 = 0; // r
    _jump1457:; // Begin body of loop
    _492 += _494;
    _494++;
    if (_494 < _271.d0)
    goto _jump1457;
    _494 = 0;
    _495++;
    if (_495 < _493)
    goto _jump1457;
    // End body of loop
    _488 += _492;
    _489++;
    if (_489 < _271.d0)
    goto _jump1454;
    _489 = 0;
    _490++;
    if (_490 < _271.d0)
    goto _jump1454;
    _490 = 0;
    _491++;
    if (_491 < _23.d0)
    goto _jump1454;
    // End body of loop
    _487.d1 = _488;
    if (_488 > 0) 
    goto _jump1458;
    fail_assertion("non-positive loop bound");
    _jump1458:;
    // Computing bound for q
    int64_t _496 = 827;
    _487.d2 = _496;
    if (_496 > 0) 
    goto _jump1459;
    fail_assertion("non-positive loop bound");
    _jump1459:;
    // Computing total size of heap memory to allocate
    int64_t _497 = 1;
    _497 *= _271.d1;
    _497 *= _488;
    _497 *= _496;
    _497 *= sizeof(int64_t);
    _487.data = jpl_alloc(_497);
    int64_t _498 = 0; // q
    int64_t _499 = 0; // p
    int64_t _500 = 0; // o
    _jump1460:; // Begin body of loop
    int64_t _501 = 0;
    _501 *= _487.d0;
    _501 += _500;
    _501 *= _487.d1;
    _501 += _499;
    _501 *= _487.d2;
    _501 += _498;
    _487.data[_501] = _500;
    _498++;
    if (_498 < _496)
    goto _jump1460;
    _498 = 0;
    _499++;
    if (_499 < _488)
    goto _jump1460;
    _499 = 0;
    _500++;
    if (_500 < _271.d1)
    goto _jump1460;
    // End body of loop
    _457 = _487;
    _jump1449:;
    _442 = _457;
    _jump1423:;
    _333 = _442;
    _jump1402:;
    double _502 = 28.0;
    e _503 = f(_271.d1, _502, _23);
    return _503;
}

void jpl_main(struct args args) {
    int64_t _3 = 155;
    int64_t _4 = 663;
    int64_t _5 = _3 / _4;
    int64_t _6;
    // Computing bound for b
    int64_t _7 = 842;
    if (_7 > 0) 
    goto _jump686;
    fail_assertion("non-positive loop bound");
    _jump686:;
    _6 = 0;
    int64_t _8 = 0; // b
    _jump687:; // Begin body of loop
    int64_t _9 = 465;
    _6 += _9;
    _8++;
    if (_8 < _7)
    goto _jump687;
    // End body of loop
    bool _10 = _5 == _6;
    bool _2 = _10;
    if (0 == _10)
    goto _jump688;
    int64_t _11 = 983;
    bool _12 = true;
    int64_t _13;
    if (!_12)
    goto _jump689;
    int64_t _14 = 420;
    _13 = _14;
    goto _jump690;
    _jump689:;
    int64_t _15 = 248;
    _13 = _15;
    _jump690:;
    bool _16 = _11 > _13;
    _2 = _16;
    _jump688:;
    bool _17;
    if (!_2)
    goto _jump691;
    bool _18 = true;
    bool _19 = !_18;
    bool _20;
    if (!_19)
    goto _jump692;
    bool _21 = false;
    _20 = _21;
    goto _jump693;
    _jump692:;
    bool _23 = false;
    bool _22 = _23;
    if (0 != _23)
    goto _jump694;
    bool _24 = true;
    _22 = _24;
    _jump694:;
    _20 = _22;
    _jump693:;
    _17 = _20;
    goto _jump695;
    _jump691:;
    int64_t _25 = 618;
    int64_t _26 = 527;
    int64_t _27 = -_26;
    int64_t _28 = 775;
    int64_t _29 = 185;
    int64_t _30 = _28 - _29;
    int64_t _31 = _27 / _30;
    bool _32 = _25 <= _31;
    _17 = _32;
    _jump695:;
    bool _1 = _17;
    if (0 != _17)
    goto _jump696;
    bool _33 = true;
    bool _34 = !_33;
    bool _35;
    if (!_34)
    goto _jump697;
    bool _36 = false;
    bool _37 = !_36;
    bool _38 = !_37;
    _35 = _38;
    goto _jump698;
    _jump697:;
    _a1_bool _39;
    // Computing bound for b
    int64_t _40 = 384;
    _39.d0 = _40;
    if (_40 > 0) 
    goto _jump699;
    fail_assertion("non-positive loop bound");
    _jump699:;
    // Computing total size of heap memory to allocate
    int64_t _41 = 1;
    _41 *= _40;
    _41 *= sizeof(bool);
    _39.data = jpl_alloc(_41);
    int64_t _42 = 0; // b
    _jump700:; // Begin body of loop
    bool _43 = true;
    int64_t _44 = 0;
    _44 *= _39.d0;
    _44 += _42;
    _39.data[_44] = _43;
    _42++;
    if (_42 < _40)
    goto _jump700;
    // End body of loop
    int64_t _45 = 738;
    if (_45 >= 0)
    goto _jump701;
    fail_assertion("negative array index");
    _jump701:;
    if (_45 < _39.d0)
    goto _jump702;
    fail_assertion("index too large");
    _jump702:;
    int64_t _46 = 0;
    _46 *= _39.d0;
    _46 += _45;
    bool _47 = _39.data[_46];
    _35 = _47;
    _jump698:;
    _1 = _35;
    _jump696:;
    int64_t _48 = 567;
    int64_t _49 = 845;
    bool _50 = _48 == _49;
    bool _51 = !_50;
    bool _52;
    if (!_51)
    goto _jump703;
    double _53 = 72.0;
    double _54 = -_53;
    double _55 = 58.0;
    bool _56 = _54 > _55;
    bool _57 = !_56;
    _52 = _57;
    goto _jump704;
    _jump703:;
    int64_t _58 = 994;
    int64_t _59 = -_58;
    int64_t _60 = 643;
    int64_t _61 = _59 * _60;
    int64_t _62;
    // Computing bound for b
    int64_t _63 = 254;
    int64_t _64 = -_63;
    if (_64 > 0) 
    goto _jump705;
    fail_assertion("non-positive loop bound");
    _jump705:;
    _62 = 0;
    int64_t _65 = 0; // b
    _jump706:; // Begin body of loop
    int64_t _66 = 138;
    int64_t _67 = -_66;
    _62 += _67;
    _65++;
    if (_65 < _64)
    goto _jump706;
    // End body of loop
    bool _68 = _61 == _62;
    bool _69;
    if (!_68)
    goto _jump707;
    bool _71 = true;
    bool _70 = _71;
    if (0 == _71)
    goto _jump708;
    bool _72 = false;
    _70 = _72;
    _jump708:;
    bool _73 = !_70;
    bool _74 = !_73;
    _69 = _74;
    goto _jump709;
    _jump707:;
    double _76 = 53.0;
    double _77 = -_76;
    double _78 = 84.0;
    bool _79 = _77 != _78;
    bool _75 = _79;
    if (0 != _79)
    goto _jump710;
    bool _80 = false;
    _75 = _80;
    _jump710:;
    _69 = _75;
    _jump709:;
    _52 = _69;
    _jump704:;
    bool _81 = _1 != _52;
    bool _0 = _81;
    if (0 == _81)
    goto _jump711;
    bool _82 = false;
    _0 = _82;
    _jump711:;
    _a3__a3__a2_rgba _83;
    // Computing bound for d
    int64_t _84;
    // Computing bound for d
    int64_t _85 = 89;
    int64_t _86 = -_85;
    if (_86 > 0) 
    goto _jump935;
    fail_assertion("non-positive loop bound");
    _jump935:;
    // Computing bound for e
    int64_t _87 = 853;
    int64_t _88 = -_87;
    int64_t _89 = -_88;
    if (_89 > 0) 
    goto _jump936;
    fail_assertion("non-positive loop bound");
    _jump936:;
    _84 = 0;
    int64_t _90 = 0; // e
    int64_t _91 = 0; // d
    _jump937:; // Begin body of loop
    _a1_int64_t _92;
    // Computing bound for f
    _92.d0 = _90;
    if (_90 > 0) 
    goto _jump938;
    fail_assertion("non-positive loop bound");
    _jump938:;
    // Computing total size of heap memory to allocate
    int64_t _93 = 1;
    _93 *= _90;
    _93 *= sizeof(int64_t);
    _92.data = jpl_alloc(_93);
    int64_t _94 = 0; // f
    _jump939:; // Begin body of loop
    int64_t _95 = 0;
    _95 *= _92.d0;
    _95 += _94;
    _92.data[_95] = _94;
    _94++;
    if (_94 < _90)
    goto _jump939;
    // End body of loop
    if (_90 >= 0)
    goto _jump940;
    fail_assertion("negative array index");
    _jump940:;
    if (_90 < _92.d0)
    goto _jump941;
    fail_assertion("index too large");
    _jump941:;
    int64_t _96 = 0;
    _96 *= _92.d0;
    _96 += _90;
    int64_t _97 = _92.data[_96];
    _84 += _97;
    _90++;
    if (_90 < _89)
    goto _jump937;
    _90 = 0;
    _91++;
    if (_91 < _86)
    goto _jump937;
    // End body of loop
    int64_t _98 = 116;
    int64_t _99 = _84 % _98;
    _83.d0 = _99;
    if (_99 > 0) 
    goto _jump942;
    fail_assertion("non-positive loop bound");
    _jump942:;
    // Computing bound for e
    bool _100 = true;
    _a1_int64_t _101;
    if (!_100)
    goto _jump943;
    _a1_int64_t _102;
    // Computing bound for d
    int64_t _103 = 160;
    int64_t _104 = 482;
    int64_t _105 = _103 + _104;
    _102.d0 = _105;
    if (_105 > 0) 
    goto _jump944;
    fail_assertion("non-positive loop bound");
    _jump944:;
    // Computing total size of heap memory to allocate
    int64_t _106 = 1;
    _106 *= _105;
    _106 *= sizeof(int64_t);
    _102.data = jpl_alloc(_106);
    int64_t _107 = 0; // d
    _jump945:; // Begin body of loop
    int64_t _108 = 469;
    int64_t _109 = 0;
    _109 *= _102.d0;
    _109 += _107;
    _102.data[_109] = _108;
    _107++;
    if (_107 < _105)
    goto _jump945;
    // End body of loop
    _101 = _102;
    goto _jump946;
    _jump943:;
    int64_t _110 = 786;
    int64_t _111 = 209;
    _a1_int64_t _112;
    _112.d0 = 2;
    _112.data = jpl_alloc(sizeof(int64_t) * 2);
    _112.data[0] = _110;
    _112.data[1] = _111;
    _101 = _112;
    _jump946:;
    _a1_int64_t _113;
    // Computing bound for d
    int64_t _114 = 652;
    _113.d0 = _114;
    if (_114 > 0) 
    goto _jump947;
    fail_assertion("non-positive loop bound");
    _jump947:;
    // Computing total size of heap memory to allocate
    int64_t _115 = 1;
    _115 *= _114;
    _115 *= sizeof(int64_t);
    _113.data = jpl_alloc(_115);
    int64_t _116 = 0; // d
    _jump948:; // Begin body of loop
    int64_t _117 = 0;
    _117 *= _113.d0;
    _117 += _116;
    _113.data[_117] = _116;
    _116++;
    if (_116 < _114)
    goto _jump948;
    // End body of loop
    int64_t _118;
    // Computing bound for d
    int64_t _119 = 729;
    int64_t _120 = -_119;
    if (_120 > 0) 
    goto _jump949;
    fail_assertion("non-positive loop bound");
    _jump949:;
    _118 = 0;
    int64_t _121 = 0; // d
    _jump950:; // Begin body of loop
    int64_t _122 = 444;
    _118 += _122;
    _121++;
    if (_121 < _120)
    goto _jump950;
    // End body of loop
    if (_118 >= 0)
    goto _jump951;
    fail_assertion("negative array index");
    _jump951:;
    if (_118 < _113.d0)
    goto _jump952;
    fail_assertion("index too large");
    _jump952:;
    int64_t _123 = 0;
    _123 *= _113.d0;
    _123 += _118;
    int64_t _124 = _113.data[_123];
    if (_124 >= 0)
    goto _jump953;
    fail_assertion("negative array index");
    _jump953:;
    if (_124 < _101.d0)
    goto _jump954;
    fail_assertion("index too large");
    _jump954:;
    int64_t _125 = 0;
    _125 *= _101.d0;
    _125 += _124;
    int64_t _126 = _101.data[_125];
    _83.d1 = _126;
    if (_126 > 0) 
    goto _jump955;
    fail_assertion("non-positive loop bound");
    _jump955:;
    // Computing bound for f
    _a1_int64_t _127;
    if (!_0)
    goto _jump956;
    int64_t _128;
    // Computing bound for d
    int64_t _129 = 121;
    if (_129 > 0) 
    goto _jump957;
    fail_assertion("non-positive loop bound");
    _jump957:;
    _128 = 0;
    int64_t _130 = 0; // d
    _jump958:; // Begin body of loop
    _128 += _130;
    _130++;
    if (_130 < _129)
    goto _jump958;
    // End body of loop
    _a1_int64_t _131;
    _131.d0 = 1;
    _131.data = jpl_alloc(sizeof(int64_t) * 1);
    _131.data[0] = _128;
    _127 = _131;
    goto _jump959;
    _jump956:;
    _a1_int64_t _132;
    if (!_0)
    goto _jump960;
    int64_t _133 = 752;
    int64_t _134 = 981;
    _a1_int64_t _135;
    _135.d0 = 2;
    _135.data = jpl_alloc(sizeof(int64_t) * 2);
    _135.data[0] = _133;
    _135.data[1] = _134;
    _132 = _135;
    goto _jump961;
    _jump960:;
    int64_t _136 = 498;
    int64_t _137 = 498;
    _a1_int64_t _138;
    _138.d0 = 2;
    _138.data = jpl_alloc(sizeof(int64_t) * 2);
    _138.data[0] = _136;
    _138.data[1] = _137;
    _132 = _138;
    _jump961:;
    _127 = _132;
    _jump959:;
    int64_t _139;
    // Computing bound for d
    int64_t _140 = 928;
    if (_140 > 0) 
    goto _jump962;
    fail_assertion("non-positive loop bound");
    _jump962:;
    _139 = 0;
    int64_t _141 = 0; // d
    _jump963:; // Begin body of loop
    _139 += _141;
    _141++;
    if (_141 < _140)
    goto _jump963;
    // End body of loop
    int64_t _142 = -_139;
    if (_142 >= 0)
    goto _jump964;
    fail_assertion("negative array index");
    _jump964:;
    if (_142 < _127.d0)
    goto _jump965;
    fail_assertion("index too large");
    _jump965:;
    int64_t _143 = 0;
    _143 *= _127.d0;
    _143 += _142;
    int64_t _144 = _127.data[_143];
    _83.d2 = _144;
    if (_144 > 0) 
    goto _jump966;
    fail_assertion("non-positive loop bound");
    _jump966:;
    // Computing total size of heap memory to allocate
    int64_t _145 = 1;
    _145 *= _99;
    _145 *= _126;
    _145 *= _144;
    _145 *= sizeof(_a3__a2_rgba);
    _83.data = jpl_alloc(_145);
    int64_t _146 = 0; // f
    int64_t _147 = 0; // e
    int64_t _148 = 0; // d
    _jump967:; // Begin body of loop
    _a3__a2_rgba _149;
    // Computing bound for g
    _149.d0 = _148;
    if (_148 > 0) 
    goto _jump968;
    fail_assertion("non-positive loop bound");
    _jump968:;
    // Computing bound for h
    int64_t _150;
    // Computing bound for g
    if (_148 > 0) 
    goto _jump969;
    fail_assertion("non-positive loop bound");
    _jump969:;
    // Computing bound for h
    if (_146 > 0) 
    goto _jump970;
    fail_assertion("non-positive loop bound");
    _jump970:;
    // Computing bound for i
    _a2_int64_t _151;
    // Computing bound for g
    int64_t _152 = 461;
    _151.d0 = _152;
    if (_152 > 0) 
    goto _jump971;
    fail_assertion("non-positive loop bound");
    _jump971:;
    // Computing bound for h
    int64_t _153 = 23;
    _151.d1 = _153;
    if (_153 > 0) 
    goto _jump972;
    fail_assertion("non-positive loop bound");
    _jump972:;
    // Computing total size of heap memory to allocate
    int64_t _154 = 1;
    _154 *= _152;
    _154 *= _153;
    _154 *= sizeof(int64_t);
    _151.data = jpl_alloc(_154);
    int64_t _155 = 0; // h
    int64_t _156 = 0; // g
    _jump973:; // Begin body of loop
    int64_t _157 = 0;
    _157 *= _151.d0;
    _157 += _156;
    _157 *= _151.d1;
    _157 += _155;
    _151.data[_157] = _148;
    _155++;
    if (_155 < _153)
    goto _jump973;
    _155 = 0;
    _156++;
    if (_156 < _152)
    goto _jump973;
    // End body of loop
    int64_t _158 = -_148;
    int64_t _159 = 979;
    int64_t _160 = _159 % _147;
    if (_158 >= 0)
    goto _jump974;
    fail_assertion("negative array index");
    _jump974:;
    if (_158 < _151.d0)
    goto _jump975;
    fail_assertion("index too large");
    _jump975:;
    if (_160 >= 0)
    goto _jump976;
    fail_assertion("negative array index");
    _jump976:;
    if (_160 < _151.d1)
    goto _jump977;
    fail_assertion("index too large");
    _jump977:;
    int64_t _161 = 0;
    _161 *= _151.d0;
    _161 += _158;
    _161 *= _151.d1;
    _161 += _160;
    int64_t _162 = _151.data[_161];
    if (_162 > 0) 
    goto _jump978;
    fail_assertion("non-positive loop bound");
    _jump978:;
    _150 = 0;
    int64_t _163 = 0; // i
    int64_t _164 = 0; // h
    int64_t _165 = 0; // g
    _jump979:; // Begin body of loop
    _150 += _148;
    _163++;
    if (_163 < _162)
    goto _jump979;
    _163 = 0;
    _164++;
    if (_164 < _146)
    goto _jump979;
    _164 = 0;
    _165++;
    if (_165 < _148)
    goto _jump979;
    // End body of loop
    _149.d1 = _150;
    if (_150 > 0) 
    goto _jump980;
    fail_assertion("non-positive loop bound");
    _jump980:;
    // Computing bound for i
    int64_t _166 = 733;
    _149.d2 = _166;
    if (_166 > 0) 
    goto _jump981;
    fail_assertion("non-positive loop bound");
    _jump981:;
    // Computing total size of heap memory to allocate
    int64_t _167 = 1;
    _167 *= _148;
    _167 *= _150;
    _167 *= _166;
    _167 *= sizeof(_a2_rgba);
    _149.data = jpl_alloc(_167);
    int64_t _168 = 0; // i
    int64_t _169 = 0; // h
    int64_t _170 = 0; // g
    _jump982:; // Begin body of loop
    _a2_rgba _171;
    // Computing bound for j
    _171.d0 = _170;
    if (_170 > 0) 
    goto _jump983;
    fail_assertion("non-positive loop bound");
    _jump983:;
    // Computing bound for k
    bool _172 = true;
    bool _173 = !_172;
    int64_t _174;
    if (!_173)
    goto _jump984;
    int64_t _175 = 558;
    _174 = _175;
    goto _jump985;
    _jump984:;
    int64_t _176 = _168 % _168;
    _174 = _176;
    _jump985:;
    _171.d1 = _174;
    if (_174 > 0) 
    goto _jump986;
    fail_assertion("non-positive loop bound");
    _jump986:;
    // Computing total size of heap memory to allocate
    int64_t _177 = 1;
    _177 *= _170;
    _177 *= _174;
    _177 *= sizeof(rgba);
    _171.data = jpl_alloc(_177);
    int64_t _178 = 0; // k
    int64_t _179 = 0; // j
    _jump987:; // Begin body of loop
    _a2_double _180 = a();
    double _181 = c(_180);
    double _182;
    // Computing bound for l
    if (_169 > 0) 
    goto _jump988;
    fail_assertion("non-positive loop bound");
    _jump988:;
    _182 = 0;
    int64_t _183 = 0; // l
    _jump989:; // Begin body of loop
    double _184 = 61.0;
    _182 += _184;
    _183++;
    if (_183 < _169)
    goto _jump989;
    // End body of loop
    double _185 = 75.0;
    double _186;
    // Computing bound for l
    if (_168 > 0) 
    goto _jump990;
    fail_assertion("non-positive loop bound");
    _jump990:;
    // Computing bound for m
    if (_148 > 0) 
    goto _jump991;
    fail_assertion("non-positive loop bound");
    _jump991:;
    _186 = 0;
    int64_t _187 = 0; // m
    int64_t _188 = 0; // l
    _jump992:; // Begin body of loop
    double _189 = 77.0;
    _186 += _189;
    _187++;
    if (_187 < _148)
    goto _jump992;
    _187 = 0;
    _188++;
    if (_188 < _168)
    goto _jump992;
    // End body of loop
    rgba _190 = { _181, _182, _185, _186 };
    int64_t _191 = 0;
    _191 *= _171.d0;
    _191 += _179;
    _191 *= _171.d1;
    _191 += _178;
    _171.data[_191] = _190;
    _178++;
    if (_178 < _174)
    goto _jump987;
    _178 = 0;
    _179++;
    if (_179 < _170)
    goto _jump987;
    // End body of loop
    int64_t _192 = 0;
    _192 *= _149.d0;
    _192 += _170;
    _192 *= _149.d1;
    _192 += _169;
    _192 *= _149.d2;
    _192 += _168;
    _149.data[_192] = _171;
    _168++;
    if (_168 < _166)
    goto _jump982;
    _168 = 0;
    _169++;
    if (_169 < _150)
    goto _jump982;
    _169 = 0;
    _170++;
    if (_170 < _148)
    goto _jump982;
    // End body of loop
    int64_t _193 = 0;
    _193 *= _83.d0;
    _193 += _148;
    _193 *= _83.d1;
    _193 += _147;
    _193 *= _83.d2;
    _193 += _146;
    _83.data[_193] = _149;
    _146++;
    if (_146 < _144)
    goto _jump967;
    _146 = 0;
    _147++;
    if (_147 < _126)
    goto _jump967;
    _147 = 0;
    _148++;
    if (_148 < _99)
    goto _jump967;
    // End body of loop
    int64_t _194;
    if (!_0)
    goto _jump993;
    int64_t _195 = 60;
    int64_t _196 = -_195;
    _194 = _196;
    goto _jump994;
    _jump993:;
    bool _197 = true;
    int64_t _198;
    if (!_197)
    goto _jump995;
    int64_t _199 = 56;
    int64_t _200 = -_199;
    int64_t _201 = 770;
    int64_t _202 = -_201;
    int64_t _203 = _200 - _202;
    _198 = _203;
    goto _jump996;
    _jump995:;
    int64_t _204 = 638;
    _198 = _204;
    _jump996:;
    _194 = _198;
    _jump994:;
    int64_t _205 = -_194;
    _a2_int64_t _206;
    // Computing bound for d
    int64_t _207;
    // Computing bound for d
    int64_t _208 = 240;
    if (_208 > 0) 
    goto _jump997;
    fail_assertion("non-positive loop bound");
    _jump997:;
    // Computing bound for e
    int64_t _209 = 340;
    int64_t _210 = -_209;
    if (_210 > 0) 
    goto _jump998;
    fail_assertion("non-positive loop bound");
    _jump998:;
    // Computing bound for f
    int64_t _211 = 431;
    if (_211 > 0) 
    goto _jump999;
    fail_assertion("non-positive loop bound");
    _jump999:;
    _207 = 0;
    int64_t _212 = 0; // f
    int64_t _213 = 0; // e
    int64_t _214 = 0; // d
    _jump1000:; // Begin body of loop
    int64_t _215 = _213 - _212;
    _207 += _215;
    _212++;
    if (_212 < _211)
    goto _jump1000;
    _212 = 0;
    _213++;
    if (_213 < _210)
    goto _jump1000;
    _213 = 0;
    _214++;
    if (_214 < _208)
    goto _jump1000;
    // End body of loop
    int64_t _216 = 9;
    int64_t _217 = -_216;
    int64_t _218 = _207 % _217;
    _206.d0 = _218;
    if (_218 > 0) 
    goto _jump1001;
    fail_assertion("non-positive loop bound");
    _jump1001:;
    // Computing bound for e
    int64_t _219 = 827;
    int64_t _220 = 698;
    int64_t _221 = -_220;
    int64_t _222 = _219 % _221;
    int64_t _223 = 789;
    int64_t _224 = _222 % _223;
    _206.d1 = _224;
    if (_224 > 0) 
    goto _jump1002;
    fail_assertion("non-positive loop bound");
    _jump1002:;
    // Computing total size of heap memory to allocate
    int64_t _225 = 1;
    _225 *= _218;
    _225 *= _224;
    _225 *= sizeof(int64_t);
    _206.data = jpl_alloc(_225);
    int64_t _226 = 0; // e
    int64_t _227 = 0; // d
    _jump1003:; // Begin body of loop
    int64_t _228 = 291;
    int64_t _229 = 0;
    _229 *= _206.d0;
    _229 += _227;
    _229 *= _206.d1;
    _229 += _226;
    _206.data[_229] = _228;
    _226++;
    if (_226 < _224)
    goto _jump1003;
    _226 = 0;
    _227++;
    if (_227 < _218)
    goto _jump1003;
    // End body of loop
    int64_t _230 = 997;
    int64_t _231 = 170;
    if (_230 >= 0)
    goto _jump1004;
    fail_assertion("negative array index");
    _jump1004:;
    if (_230 < _206.d0)
    goto _jump1005;
    fail_assertion("index too large");
    _jump1005:;
    if (_231 >= 0)
    goto _jump1006;
    fail_assertion("negative array index");
    _jump1006:;
    if (_231 < _206.d1)
    goto _jump1007;
    fail_assertion("index too large");
    _jump1007:;
    int64_t _232 = 0;
    _232 *= _206.d0;
    _232 += _230;
    _232 *= _206.d1;
    _232 += _231;
    int64_t _233 = _206.data[_232];
    bool _234 = false;
    _a2_int64_t _235;
    if (!_234)
    goto _jump1008;
    _a2_int64_t _236;
    // Computing bound for d
    int64_t _237;
    // Computing bound for d
    int64_t _238 = 250;
    if (_238 > 0) 
    goto _jump1009;
    fail_assertion("non-positive loop bound");
    _jump1009:;
    _237 = 0;
    int64_t _239 = 0; // d
    _jump1010:; // Begin body of loop
    int64_t _240 = 982;
    _237 += _240;
    _239++;
    if (_239 < _238)
    goto _jump1010;
    // End body of loop
    _236.d0 = _237;
    if (_237 > 0) 
    goto _jump1011;
    fail_assertion("non-positive loop bound");
    _jump1011:;
    // Computing bound for e
    int64_t _241 = 281;
    _236.d1 = _241;
    if (_241 > 0) 
    goto _jump1012;
    fail_assertion("non-positive loop bound");
    _jump1012:;
    // Computing total size of heap memory to allocate
    int64_t _242 = 1;
    _242 *= _237;
    _242 *= _241;
    _242 *= sizeof(int64_t);
    _236.data = jpl_alloc(_242);
    int64_t _243 = 0; // e
    int64_t _244 = 0; // d
    _jump1013:; // Begin body of loop
    int64_t _245 = 0;
    _245 *= _236.d0;
    _245 += _244;
    _245 *= _236.d1;
    _245 += _243;
    _236.data[_245] = _244;
    _243++;
    if (_243 < _241)
    goto _jump1013;
    _243 = 0;
    _244++;
    if (_244 < _237)
    goto _jump1013;
    // End body of loop
    _235 = _236;
    goto _jump1014;
    _jump1008:;
    _a2_int64_t _246;
    // Computing bound for d
    int64_t _247 = 817;
    _246.d0 = _247;
    if (_247 > 0) 
    goto _jump1015;
    fail_assertion("non-positive loop bound");
    _jump1015:;
    // Computing bound for e
    int64_t _248;
    // Computing bound for d
    int64_t _249 = 342;
    if (_249 > 0) 
    goto _jump1016;
    fail_assertion("non-positive loop bound");
    _jump1016:;
    _248 = 0;
    int64_t _250 = 0; // d
    _jump1017:; // Begin body of loop
    int64_t _251 = 209;
    _248 += _251;
    _250++;
    if (_250 < _249)
    goto _jump1017;
    // End body of loop
    int64_t _252 = -_248;
    _246.d1 = _252;
    if (_252 > 0) 
    goto _jump1018;
    fail_assertion("non-positive loop bound");
    _jump1018:;
    // Computing total size of heap memory to allocate
    int64_t _253 = 1;
    _253 *= _247;
    _253 *= _252;
    _253 *= sizeof(int64_t);
    _246.data = jpl_alloc(_253);
    int64_t _254 = 0; // e
    int64_t _255 = 0; // d
    _jump1019:; // Begin body of loop
    int64_t _256;
    if (!_0)
    goto _jump1020;
    int64_t _257;
    // Computing bound for f
    if (_254 > 0) 
    goto _jump1021;
    fail_assertion("non-positive loop bound");
    _jump1021:;
    // Computing bound for g
    int64_t _258 = 898;
    if (_258 > 0) 
    goto _jump1022;
    fail_assertion("non-positive loop bound");
    _jump1022:;
    // Computing bound for h
    if (_254 > 0) 
    goto _jump1023;
    fail_assertion("non-positive loop bound");
    _jump1023:;
    _257 = 0;
    int64_t _259 = 0; // h
    int64_t _260 = 0; // g
    int64_t _261 = 0; // f
    _jump1024:; // Begin body of loop
    _257 += _259;
    _259++;
    if (_259 < _254)
    goto _jump1024;
    _259 = 0;
    _260++;
    if (_260 < _258)
    goto _jump1024;
    _260 = 0;
    _261++;
    if (_261 < _254)
    goto _jump1024;
    // End body of loop
    _256 = _257;
    goto _jump1025;
    _jump1020:;
    _256 = _254;
    _jump1025:;
    int64_t _262 = 0;
    _262 *= _246.d0;
    _262 += _255;
    _262 *= _246.d1;
    _262 += _254;
    _246.data[_262] = _256;
    _254++;
    if (_254 < _252)
    goto _jump1019;
    _254 = 0;
    _255++;
    if (_255 < _247)
    goto _jump1019;
    // End body of loop
    _235 = _246;
    _jump1014:;
    int64_t _263;
    if (!_0)
    goto _jump1026;
    int64_t _264;
    // Computing bound for d
    int64_t _265 = 42;
    int64_t _266 = -_265;
    if (_266 > 0) 
    goto _jump1027;
    fail_assertion("non-positive loop bound");
    _jump1027:;
    // Computing bound for e
    bool _267 = false;
    bool _268;
    if (!_267)
    goto _jump1028;
    _268 = _0;
    goto _jump1029;
    _jump1028:;
    _268 = _0;
    _jump1029:;
    int64_t _269;
    if (!_268)
    goto _jump1030;
    int64_t _270 = 369;
    _269 = _270;
    goto _jump1031;
    _jump1030:;
    int64_t _271;
    if (!_0)
    goto _jump1032;
    int64_t _272 = 569;
    _271 = _272;
    goto _jump1033;
    _jump1032:;
    int64_t _273 = 347;
    _271 = _273;
    _jump1033:;
    _269 = _271;
    _jump1031:;
    if (_269 > 0) 
    goto _jump1034;
    fail_assertion("non-positive loop bound");
    _jump1034:;
    _264 = 0;
    int64_t _274 = 0; // e
    int64_t _275 = 0; // d
    _jump1035:; // Begin body of loop
    bool _276 = true;
    int64_t _277;
    if (!_276)
    goto _jump1036;
    int64_t _278 = _275 / _274;
    _277 = _278;
    goto _jump1037;
    _jump1036:;
    _277 = _274;
    _jump1037:;
    _264 += _277;
    _274++;
    if (_274 < _269)
    goto _jump1035;
    _274 = 0;
    _275++;
    if (_275 < _266)
    goto _jump1035;
    // End body of loop
    _263 = _264;
    goto _jump1038;
    _jump1026:;
    int64_t _279 = 169;
    _263 = _279;
    _jump1038:;
    int64_t _280 = 685;
    if (_263 >= 0)
    goto _jump1039;
    fail_assertion("negative array index");
    _jump1039:;
    if (_263 < _235.d0)
    goto _jump1040;
    fail_assertion("index too large");
    _jump1040:;
    if (_280 >= 0)
    goto _jump1041;
    fail_assertion("negative array index");
    _jump1041:;
    if (_280 < _235.d1)
    goto _jump1042;
    fail_assertion("index too large");
    _jump1042:;
    int64_t _281 = 0;
    _281 *= _235.d0;
    _281 += _263;
    _281 *= _235.d1;
    _281 += _280;
    int64_t _282 = _235.data[_281];
    if (_205 >= 0)
    goto _jump1043;
    fail_assertion("negative array index");
    _jump1043:;
    if (_205 < _83.d0)
    goto _jump1044;
    fail_assertion("index too large");
    _jump1044:;
    if (_233 >= 0)
    goto _jump1045;
    fail_assertion("negative array index");
    _jump1045:;
    if (_233 < _83.d1)
    goto _jump1046;
    fail_assertion("index too large");
    _jump1046:;
    if (_282 >= 0)
    goto _jump1047;
    fail_assertion("negative array index");
    _jump1047:;
    if (_282 < _83.d2)
    goto _jump1048;
    fail_assertion("index too large");
    _jump1048:;
    int64_t _283 = 0;
    _283 *= _83.d0;
    _283 += _205;
    _283 *= _83.d1;
    _283 += _233;
    _283 *= _83.d2;
    _283 += _282;
    _a3__a2_rgba _284 = _83.data[_283];
    int64_t _285 = 934;
    int64_t _286;
    // Computing bound for d
    int64_t _287;
    // Computing bound for d
    int64_t _288;
    if (!_0)
    goto _jump1049;
    int64_t _289 = 112;
    _288 = _289;
    goto _jump1050;
    _jump1049:;
    int64_t _290 = 845;
    _288 = _290;
    _jump1050:;
    if (_288 > 0) 
    goto _jump1051;
    fail_assertion("non-positive loop bound");
    _jump1051:;
    _287 = 0;
    int64_t _291 = 0; // d
    _jump1052:; // Begin body of loop
    int64_t _292 = 673;
    _287 += _292;
    _291++;
    if (_291 < _288)
    goto _jump1052;
    // End body of loop
    if (_287 > 0) 
    goto _jump1053;
    fail_assertion("non-positive loop bound");
    _jump1053:;
    _286 = 0;
    int64_t _293 = 0; // d
    _jump1054:; // Begin body of loop
    int64_t _294 = 877;
    int64_t _295 = -_294;
    int64_t _296 = -_295;
    _286 += _296;
    _293++;
    if (_293 < _287)
    goto _jump1054;
    // End body of loop
    int64_t _297 = -_286;
    int64_t _298 = -_297;
    int64_t _299 = 761;
    int64_t _300 = _298 * _299;
    int64_t _301 = 997;
    if (_285 >= 0)
    goto _jump1055;
    fail_assertion("negative array index");
    _jump1055:;
    if (_285 < _284.d0)
    goto _jump1056;
    fail_assertion("index too large");
    _jump1056:;
    if (_300 >= 0)
    goto _jump1057;
    fail_assertion("negative array index");
    _jump1057:;
    if (_300 < _284.d1)
    goto _jump1058;
    fail_assertion("index too large");
    _jump1058:;
    if (_301 >= 0)
    goto _jump1059;
    fail_assertion("negative array index");
    _jump1059:;
    if (_301 < _284.d2)
    goto _jump1060;
    fail_assertion("index too large");
    _jump1060:;
    int64_t _302 = 0;
    _302 *= _284.d0;
    _302 += _285;
    _302 *= _284.d1;
    _302 += _300;
    _302 *= _284.d2;
    _302 += _301;
    _a2_rgba _303 = _284.data[_302];
    write_image(_303, "d.png");
    show("(BoolType)", &_0);
    int64_t _304;
    // Computing bound for d
    bool _305 = false;
    int64_t _306;
    if (!_305)
    goto _jump1061;
    int64_t _307 = 810;
    _306 = _307;
    goto _jump1062;
    _jump1061:;
    int64_t _308 = 176;
    _306 = _308;
    _jump1062:;
    if (_306 > 0) 
    goto _jump1063;
    fail_assertion("non-positive loop bound");
    _jump1063:;
    // Computing bound for e
    int64_t _309 = 684;
    if (_309 > 0) 
    goto _jump1064;
    fail_assertion("non-positive loop bound");
    _jump1064:;
    _304 = 0;
    int64_t _310 = 0; // e
    int64_t _311 = 0; // d
    _jump1065:; // Begin body of loop
    _304 += _311;
    _310++;
    if (_310 < _309)
    goto _jump1065;
    _310 = 0;
    _311++;
    if (_311 < _306)
    goto _jump1065;
    // End body of loop
    int64_t _312 = -_304;
    int64_t _313 = 86;
    bool _314 = _312 == _313;
    int64_t _315 = 360;
    int64_t _316;
    // Computing bound for d
    int64_t _317 = 806;
    int64_t _318 = -_317;
    bool _319 = false;
    int64_t _320;
    if (!_319)
    goto _jump1066;
    int64_t _321 = 777;
    int64_t _322 = 843;
    int64_t _323 = _321 / _322;
    _320 = _323;
    goto _jump1067;
    _jump1066:;
    int64_t _324 = 77;
    int64_t _325 = -_324;
    _320 = _325;
    _jump1067:;
    int64_t _326 = _318 % _320;
    if (_326 > 0) 
    goto _jump1068;
    fail_assertion("non-positive loop bound");
    _jump1068:;
    // Computing bound for e
    int64_t _327 = 314;
    if (_327 > 0) 
    goto _jump1069;
    fail_assertion("non-positive loop bound");
    _jump1069:;
    _316 = 0;
    int64_t _328 = 0; // e
    int64_t _329 = 0; // d
    _jump1070:; // Begin body of loop
    int64_t _330 = 269;
    _316 += _330;
    _328++;
    if (_328 < _327)
    goto _jump1070;
    _328 = 0;
    _329++;
    if (_329 < _326)
    goto _jump1070;
    // End body of loop
    bool _331 = _315 <= _316;
    bool _332 = _314 != _331;
    bool _333 = !_332;
    double _334;
    // Computing bound for f
    _a2_double _335 = a();
    double _336 = c(_335);
    bool _337 = false;
    int64_t _338;
    if (!_337)
    goto _jump1071;
    int64_t _339 = 453;
    _338 = _339;
    goto _jump1072;
    _jump1071:;
    int64_t _340 = 355;
    _338 = _340;
    _jump1072:;
    bool _341 = _333;
    if (0 != _333)
    goto _jump1073;
    bool _342 = true;
    _341 = _342;
    _jump1073:;
    bool _343 = !_341;
    e _344 = { _336, _338, _343 };
    double _345 = _344.a;
    int64_t _346;
    // Computing bound for f
    int64_t _347 = 790;
    if (_347 > 0) 
    goto _jump1074;
    fail_assertion("non-positive loop bound");
    _jump1074:;
    // Computing bound for g
    int64_t _348 = 21;
    int64_t _349 = -_348;
    int64_t _350 = 948;
    int64_t _351 = _349 - _350;
    if (_351 > 0) 
    goto _jump1075;
    fail_assertion("non-positive loop bound");
    _jump1075:;
    _346 = 0;
    int64_t _352 = 0; // g
    int64_t _353 = 0; // f
    _jump1076:; // Begin body of loop
    _346 += _352;
    _352++;
    if (_352 < _351)
    goto _jump1076;
    _352 = 0;
    _353++;
    if (_353 < _347)
    goto _jump1076;
    // End body of loop
    int64_t _354 = 863;
    int64_t _355 = -_354;
    int64_t _356 = 304;
    bool _357 = _355 <= _356;
    e _358 = { _345, _346, _357 };
    int64_t _359 = _358.b;
    if (_359 > 0) 
    goto _jump1077;
    fail_assertion("non-positive loop bound");
    _jump1077:;
    // Computing bound for g
    double _360;
    // Computing bound for f
    int64_t _361 = 710;
    int64_t _362 = -_361;
    if (_362 > 0) 
    goto _jump1078;
    fail_assertion("non-positive loop bound");
    _jump1078:;
    _360 = 0;
    int64_t _363 = 0; // f
    _jump1079:; // Begin body of loop
    double _364;
    // Computing bound for g
    if (_363 > 0) 
    goto _jump1080;
    fail_assertion("non-positive loop bound");
    _jump1080:;
    // Computing bound for h
    if (_363 > 0) 
    goto _jump1081;
    fail_assertion("non-positive loop bound");
    _jump1081:;
    _364 = 0;
    int64_t _365 = 0; // h
    int64_t _366 = 0; // g
    _jump1082:; // Begin body of loop
    double _367 = 8.0;
    double _368 = -_367;
    _364 += _368;
    _365++;
    if (_365 < _363)
    goto _jump1082;
    _365 = 0;
    _366++;
    if (_366 < _363)
    goto _jump1082;
    // End body of loop
    _360 += _364;
    _363++;
    if (_363 < _362)
    goto _jump1079;
    // End body of loop
    _a2_double _369 = a();
    double _370 = c(_369);
    int64_t _371 = 942;
    bool _372 = _333 != _0;
    e _373 = { _370, _371, _372 };
    int64_t _374 = _373.b;
    bool _375 = _333;
    if (0 == _333)
    goto _jump1083;
    bool _376;
    if (!_0)
    goto _jump1084;
    _376 = _333;
    goto _jump1085;
    _jump1084:;
    _376 = _333;
    _jump1085:;
    _375 = _376;
    _jump1083:;
    bool _377 = !_375;
    e _378 = { _360, _374, _377 };
    int64_t _379 = _378.b;
    int64_t _380 = -_379;
    if (_380 > 0) 
    goto _jump1086;
    fail_assertion("non-positive loop bound");
    _jump1086:;
    // Computing bound for h
    _a3_int64_t _381;
    // Computing bound for f
    int64_t _382;
    // Computing bound for f
    int64_t _383;
    if (!_333)
    goto _jump1087;
    int64_t _384 = 836;
    _383 = _384;
    goto _jump1088;
    _jump1087:;
    int64_t _385 = 405;
    _383 = _385;
    _jump1088:;
    if (_383 > 0) 
    goto _jump1089;
    fail_assertion("non-positive loop bound");
    _jump1089:;
    _382 = 0;
    int64_t _386 = 0; // f
    _jump1090:; // Begin body of loop
    int64_t _387;
    // Computing bound for g
    if (_386 > 0) 
    goto _jump1091;
    fail_assertion("non-positive loop bound");
    _jump1091:;
    _387 = 0;
    int64_t _388 = 0; // g
    _jump1092:; // Begin body of loop
    _387 += _388;
    _388++;
    if (_388 < _386)
    goto _jump1092;
    // End body of loop
    _382 += _387;
    _386++;
    if (_386 < _383)
    goto _jump1090;
    // End body of loop
    int64_t _389 = -_382;
    _381.d0 = _389;
    if (_389 > 0) 
    goto _jump1093;
    fail_assertion("non-positive loop bound");
    _jump1093:;
    // Computing bound for g
    int64_t _390 = 464;
    int64_t _391 = -_390;
    int64_t _392 = -_391;
    int64_t _393;
    // Computing bound for f
    int64_t _394 = 855;
    if (_394 > 0) 
    goto _jump1094;
    fail_assertion("non-positive loop bound");
    _jump1094:;
    _393 = 0;
    int64_t _395 = 0; // f
    _jump1095:; // Begin body of loop
    int64_t _396 = 5;
    _393 += _396;
    _395++;
    if (_395 < _394)
    goto _jump1095;
    // End body of loop
    int64_t _397 = _392 * _393;
    _381.d1 = _397;
    if (_397 > 0) 
    goto _jump1096;
    fail_assertion("non-positive loop bound");
    _jump1096:;
    // Computing bound for h
    int64_t _398 = 365;
    _381.d2 = _398;
    if (_398 > 0) 
    goto _jump1097;
    fail_assertion("non-positive loop bound");
    _jump1097:;
    // Computing total size of heap memory to allocate
    int64_t _399 = 1;
    _399 *= _389;
    _399 *= _397;
    _399 *= _398;
    _399 *= sizeof(int64_t);
    _381.data = jpl_alloc(_399);
    int64_t _400 = 0; // h
    int64_t _401 = 0; // g
    int64_t _402 = 0; // f
    _jump1098:; // Begin body of loop
    int64_t _403 = 0;
    _403 *= _381.d0;
    _403 += _402;
    _403 *= _381.d1;
    _403 += _401;
    _403 *= _381.d2;
    _403 += _400;
    _381.data[_403] = _401;
    _400++;
    if (_400 < _398)
    goto _jump1098;
    _400 = 0;
    _401++;
    if (_401 < _397)
    goto _jump1098;
    _401 = 0;
    _402++;
    if (_402 < _389)
    goto _jump1098;
    // End body of loop
    int64_t _404;
    // Computing bound for f
    int64_t _405 = 848;
    int64_t _406 = -_405;
    int64_t _407 = 235;
    int64_t _408 = _406 / _407;
    if (_408 > 0) 
    goto _jump1099;
    fail_assertion("non-positive loop bound");
    _jump1099:;
    // Computing bound for g
    int64_t _409;
    // Computing bound for f
    int64_t _410 = 721;
    int64_t _411 = -_410;
    if (_411 > 0) 
    goto _jump1100;
    fail_assertion("non-positive loop bound");
    _jump1100:;
    // Computing bound for g
    int64_t _412;
    if (!_0)
    goto _jump1101;
    int64_t _413 = 366;
    _412 = _413;
    goto _jump1102;
    _jump1101:;
    int64_t _414 = 326;
    _412 = _414;
    _jump1102:;
    if (_412 > 0) 
    goto _jump1103;
    fail_assertion("non-positive loop bound");
    _jump1103:;
    // Computing bound for h
    int64_t _415 = 635;
    if (_415 > 0) 
    goto _jump1104;
    fail_assertion("non-positive loop bound");
    _jump1104:;
    _409 = 0;
    int64_t _416 = 0; // h
    int64_t _417 = 0; // g
    int64_t _418 = 0; // f
    _jump1105:; // Begin body of loop
    int64_t _419 = 342;
    int64_t _420 = -_419;
    _409 += _420;
    _416++;
    if (_416 < _415)
    goto _jump1105;
    _416 = 0;
    _417++;
    if (_417 < _412)
    goto _jump1105;
    _417 = 0;
    _418++;
    if (_418 < _411)
    goto _jump1105;
    // End body of loop
    if (_409 > 0) 
    goto _jump1106;
    fail_assertion("non-positive loop bound");
    _jump1106:;
    // Computing bound for h
    int64_t _421 = 71;
    int64_t _422 = 418;
    int64_t _423 = _421 % _422;
    if (_423 > 0) 
    goto _jump1107;
    fail_assertion("non-positive loop bound");
    _jump1107:;
    _404 = 0;
    int64_t _424 = 0; // h
    int64_t _425 = 0; // g
    int64_t _426 = 0; // f
    _jump1108:; // Begin body of loop
    _404 += _426;
    _424++;
    if (_424 < _423)
    goto _jump1108;
    _424 = 0;
    _425++;
    if (_425 < _409)
    goto _jump1108;
    _425 = 0;
    _426++;
    if (_426 < _408)
    goto _jump1108;
    // End body of loop
    _a2_int64_t _427;
    // Computing bound for f
    int64_t _428;
    if (!_333)
    goto _jump1109;
    int64_t _429 = 249;
    _428 = _429;
    goto _jump1110;
    _jump1109:;
    int64_t _430 = 457;
    _428 = _430;
    _jump1110:;
    _427.d0 = _428;
    if (_428 > 0) 
    goto _jump1111;
    fail_assertion("non-positive loop bound");
    _jump1111:;
    // Computing bound for g
    int64_t _431 = 478;
    int64_t _432 = 802;
    int64_t _433 = _431 % _432;
    _427.d1 = _433;
    if (_433 > 0) 
    goto _jump1112;
    fail_assertion("non-positive loop bound");
    _jump1112:;
    // Computing total size of heap memory to allocate
    int64_t _434 = 1;
    _434 *= _428;
    _434 *= _433;
    _434 *= sizeof(int64_t);
    _427.data = jpl_alloc(_434);
    int64_t _435 = 0; // g
    int64_t _436 = 0; // f
    _jump1113:; // Begin body of loop
    int64_t _437 = 0;
    _437 *= _427.d0;
    _437 += _436;
    _437 *= _427.d1;
    _437 += _435;
    _427.data[_437] = _435;
    _435++;
    if (_435 < _433)
    goto _jump1113;
    _435 = 0;
    _436++;
    if (_436 < _428)
    goto _jump1113;
    // End body of loop
    int64_t _438;
    // Computing bound for f
    int64_t _439;
    if (!_0)
    goto _jump1114;
    int64_t _440 = 701;
    _439 = _440;
    goto _jump1115;
    _jump1114:;
    int64_t _441 = 804;
    _439 = _441;
    _jump1115:;
    if (_439 > 0) 
    goto _jump1116;
    fail_assertion("non-positive loop bound");
    _jump1116:;
    _438 = 0;
    int64_t _442 = 0; // f
    _jump1117:; // Begin body of loop
    int64_t _443;
    // Computing bound for g
    if (_442 > 0) 
    goto _jump1118;
    fail_assertion("non-positive loop bound");
    _jump1118:;
    _443 = 0;
    int64_t _444 = 0; // g
    _jump1119:; // Begin body of loop
    _443 += _442;
    _444++;
    if (_444 < _442)
    goto _jump1119;
    // End body of loop
    _438 += _443;
    _442++;
    if (_442 < _439)
    goto _jump1117;
    // End body of loop
    int64_t _445;
    // Computing bound for f
    int64_t _446 = 189;
    if (_446 > 0) 
    goto _jump1120;
    fail_assertion("non-positive loop bound");
    _jump1120:;
    // Computing bound for g
    int64_t _447 = 144;
    if (_447 > 0) 
    goto _jump1121;
    fail_assertion("non-positive loop bound");
    _jump1121:;
    _445 = 0;
    int64_t _448 = 0; // g
    int64_t _449 = 0; // f
    _jump1122:; // Begin body of loop
    _445 += _449;
    _448++;
    if (_448 < _447)
    goto _jump1122;
    _448 = 0;
    _449++;
    if (_449 < _446)
    goto _jump1122;
    // End body of loop
    int64_t _450 = -_445;
    if (_438 >= 0)
    goto _jump1123;
    fail_assertion("negative array index");
    _jump1123:;
    if (_438 < _427.d0)
    goto _jump1124;
    fail_assertion("index too large");
    _jump1124:;
    if (_450 >= 0)
    goto _jump1125;
    fail_assertion("negative array index");
    _jump1125:;
    if (_450 < _427.d1)
    goto _jump1126;
    fail_assertion("index too large");
    _jump1126:;
    int64_t _451 = 0;
    _451 *= _427.d0;
    _451 += _438;
    _451 *= _427.d1;
    _451 += _450;
    int64_t _452 = _427.data[_451];
    int64_t _453 = _404 - _452;
    int64_t _454 = 945;
    _a1_int64_t _455;
    // Computing bound for f
    int64_t _456;
    // Computing bound for f
    int64_t _457 = 972;
    if (_457 > 0) 
    goto _jump1127;
    fail_assertion("non-positive loop bound");
    _jump1127:;
    // Computing bound for g
    int64_t _458 = 858;
    if (_458 > 0) 
    goto _jump1128;
    fail_assertion("non-positive loop bound");
    _jump1128:;
    // Computing bound for h
    int64_t _459 = 490;
    if (_459 > 0) 
    goto _jump1129;
    fail_assertion("non-positive loop bound");
    _jump1129:;
    _456 = 0;
    int64_t _460 = 0; // h
    int64_t _461 = 0; // g
    int64_t _462 = 0; // f
    _jump1130:; // Begin body of loop
    int64_t _463 = 380;
    _456 += _463;
    _460++;
    if (_460 < _459)
    goto _jump1130;
    _460 = 0;
    _461++;
    if (_461 < _458)
    goto _jump1130;
    _461 = 0;
    _462++;
    if (_462 < _457)
    goto _jump1130;
    // End body of loop
    int64_t _464 = -_456;
    _455.d0 = _464;
    if (_464 > 0) 
    goto _jump1131;
    fail_assertion("non-positive loop bound");
    _jump1131:;
    // Computing total size of heap memory to allocate
    int64_t _465 = 1;
    _465 *= _464;
    _465 *= sizeof(int64_t);
    _455.data = jpl_alloc(_465);
    int64_t _466 = 0; // f
    _jump1132:; // Begin body of loop
    int64_t _467 = 251;
    int64_t _468 = 0;
    _468 *= _455.d0;
    _468 += _466;
    _455.data[_468] = _467;
    _466++;
    if (_466 < _464)
    goto _jump1132;
    // End body of loop
    int64_t _469 = 81;
    int64_t _470 = -_469;
    int64_t _471 = -_470;
    if (_471 >= 0)
    goto _jump1133;
    fail_assertion("negative array index");
    _jump1133:;
    if (_471 < _455.d0)
    goto _jump1134;
    fail_assertion("index too large");
    _jump1134:;
    int64_t _472 = 0;
    _472 *= _455.d0;
    _472 += _471;
    int64_t _473 = _455.data[_472];
    if (_453 >= 0)
    goto _jump1135;
    fail_assertion("negative array index");
    _jump1135:;
    if (_453 < _381.d0)
    goto _jump1136;
    fail_assertion("index too large");
    _jump1136:;
    if (_454 >= 0)
    goto _jump1137;
    fail_assertion("negative array index");
    _jump1137:;
    if (_454 < _381.d1)
    goto _jump1138;
    fail_assertion("index too large");
    _jump1138:;
    if (_473 >= 0)
    goto _jump1139;
    fail_assertion("negative array index");
    _jump1139:;
    if (_473 < _381.d2)
    goto _jump1140;
    fail_assertion("index too large");
    _jump1140:;
    int64_t _474 = 0;
    _474 *= _381.d0;
    _474 += _453;
    _474 *= _381.d1;
    _474 += _454;
    _474 *= _381.d2;
    _474 += _473;
    int64_t _475 = _381.data[_474];
    double _476 = 66.0;
    int64_t _477 = 781;
    int64_t _478;
    // Computing bound for f
    int64_t _479 = 87;
    if (_479 > 0) 
    goto _jump1141;
    fail_assertion("non-positive loop bound");
    _jump1141:;
    // Computing bound for g
    int64_t _480 = 988;
    int64_t _481 = -_480;
    if (_481 > 0) 
    goto _jump1142;
    fail_assertion("non-positive loop bound");
    _jump1142:;
    _478 = 0;
    int64_t _482 = 0; // g
    int64_t _483 = 0; // f
    _jump1143:; // Begin body of loop
    int64_t _484 = 640;
    int64_t _485 = 412;
    int64_t _486 = _484 - _485;
    _478 += _486;
    _482++;
    if (_482 < _481)
    goto _jump1143;
    _482 = 0;
    _483++;
    if (_483 < _479)
    goto _jump1143;
    // End body of loop
    int64_t _487 = _477 * _478;
    int64_t _488 = 153;
    int64_t _489;
    // Computing bound for f
    int64_t _490 = 297;
    if (_490 > 0) 
    goto _jump1144;
    fail_assertion("non-positive loop bound");
    _jump1144:;
    _489 = 0;
    int64_t _491 = 0; // f
    _jump1145:; // Begin body of loop
    int64_t _492 = 477;
    int64_t _493 = -_492;
    _489 += _493;
    _491++;
    if (_491 < _490)
    goto _jump1145;
    // End body of loop
    bool _494 = _488 == _489;
    e _495 = { _476, _487, _494 };
    int64_t _496 = _495.b;
    int64_t _497 = _475 % _496;
    if (_497 > 0) 
    goto _jump1146;
    fail_assertion("non-positive loop bound");
    _jump1146:;
    _334 = 0;
    int64_t _498 = 0; // h
    int64_t _499 = 0; // g
    int64_t _500 = 0; // f
    _jump1147:; // Begin body of loop
    double _501 = 91.0;
    _a2_double _502 = a();
    double _503 = c(_502);
    double _504 = 65.0;
    double _505 = 26.0;
    double _506 = 41.0;
    rgba _507 = { _503, _504, _505, _506 };
    double _508 = _507.r;
    double _509 = -_508;
    double _510 = -_509;
    double _511 = _501 - _510;
    _334 += _511;
    _498++;
    if (_498 < _497)
    goto _jump1147;
    _498 = 0;
    _499++;
    if (_499 < _380)
    goto _jump1147;
    _499 = 0;
    _500++;
    if (_500 < _359)
    goto _jump1147;
    // End body of loop
    show("(FloatType)", &_334);
    double _512 = 15.0;
    show("(FloatType)", &_512);
    _a3__a2__a2_double _513;
    if (!_0)
    goto _jump1461;
    bool _514 = true;
    double _515;
    if (!_514)
    goto _jump1462;
    double _516 = 69.0;
    _515 = _516;
    goto _jump1463;
    _jump1462:;
    double _517 = 47.0;
    _515 = _517;
    _jump1463:;
    int64_t _518 = 919;
    e _519 = { _515, _518, _0 };
    bool _520 = _519.c;
    _a3__a2__a2_double _521;
    if (!_520)
    goto _jump1464;
    bool _522 = !_0;
    bool _523;
    if (!_522)
    goto _jump1465;
    int64_t _524 = 417;
    int64_t _525 = 978;
    bool _526 = _524 <= _525;
    bool _527;
    if (!_526)
    goto _jump1466;
    _527 = _333;
    goto _jump1467;
    _jump1466:;
    bool _528 = true;
    _527 = _528;
    _jump1467:;
    _523 = _527;
    goto _jump1468;
    _jump1465:;
    _a1_bool _530;
    // Computing bound for g
    int64_t _531 = 737;
    _530.d0 = _531;
    if (_531 > 0) 
    goto _jump1469;
    fail_assertion("non-positive loop bound");
    _jump1469:;
    // Computing total size of heap memory to allocate
    int64_t _532 = 1;
    _532 *= _531;
    _532 *= sizeof(bool);
    _530.data = jpl_alloc(_532);
    int64_t _533 = 0; // g
    _jump1470:; // Begin body of loop
    int64_t _534 = 0;
    _534 *= _530.d0;
    _534 += _533;
    _530.data[_534] = _0;
    _533++;
    if (_533 < _531)
    goto _jump1470;
    // End body of loop
    int64_t _535 = 220;
    if (_535 >= 0)
    goto _jump1471;
    fail_assertion("negative array index");
    _jump1471:;
    if (_535 < _530.d0)
    goto _jump1472;
    fail_assertion("index too large");
    _jump1472:;
    int64_t _536 = 0;
    _536 *= _530.d0;
    _536 += _535;
    bool _537 = _530.data[_536];
    bool _529 = _537;
    if (0 != _537)
    goto _jump1473;
    _529 = _333;
    _jump1473:;
    _523 = _529;
    _jump1468:;
    _a3__a2__a2_double _538;
    if (!_523)
    goto _jump1474;
    _a3__a2__a2_double _539;
    // Computing bound for g
    double _540 = 59.0;
    double _541 = 24.0;
    double _542 = _540 - _541;
    int64_t _543 = 199;
    int64_t _544 = -_543;
    e _545 = { _542, _544, _0 };
    int64_t _546 = _545.b;
    _539.d0 = _546;
    if (_546 > 0) 
    goto _jump1475;
    fail_assertion("non-positive loop bound");
    _jump1475:;
    // Computing bound for h
    double _547 = 78.0;
    int64_t _548 = 792;
    bool _549 = true;
    e _550 = { _547, _548, _549 };
    int64_t _551 = _550.b;
    _539.d1 = _551;
    if (_551 > 0) 
    goto _jump1476;
    fail_assertion("non-positive loop bound");
    _jump1476:;
    // Computing bound for i
    int64_t _552 = 533;
    int64_t _553 = 584;
    int64_t _554 = -_553;
    int64_t _555 = -_554;
    int64_t _556 = _552 - _555;
    _539.d2 = _556;
    if (_556 > 0) 
    goto _jump1477;
    fail_assertion("non-positive loop bound");
    _jump1477:;
    // Computing total size of heap memory to allocate
    int64_t _557 = 1;
    _557 *= _546;
    _557 *= _551;
    _557 *= _556;
    _557 *= sizeof(_a2__a2_double);
    _539.data = jpl_alloc(_557);
    int64_t _558 = 0; // i
    int64_t _559 = 0; // h
    int64_t _560 = 0; // g
    _jump1478:; // Begin body of loop
    _a2__a2_double _561;
    // Computing bound for j
    int64_t _562 = 525;
    int64_t _563 = -_562;
    int64_t _564 = _563 * _558;
    _561.d0 = _564;
    if (_564 > 0) 
    goto _jump1479;
    fail_assertion("non-positive loop bound");
    _jump1479:;
    // Computing bound for k
    _561.d1 = _558;
    if (_558 > 0) 
    goto _jump1480;
    fail_assertion("non-positive loop bound");
    _jump1480:;
    // Computing total size of heap memory to allocate
    int64_t _565 = 1;
    _565 *= _564;
    _565 *= _558;
    _565 *= sizeof(_a2_double);
    _561.data = jpl_alloc(_565);
    int64_t _566 = 0; // k
    int64_t _567 = 0; // j
    _jump1481:; // Begin body of loop
    _a2_double _568 = a();
    int64_t _569 = 0;
    _569 *= _561.d0;
    _569 += _567;
    _569 *= _561.d1;
    _569 += _566;
    _561.data[_569] = _568;
    _566++;
    if (_566 < _558)
    goto _jump1481;
    _566 = 0;
    _567++;
    if (_567 < _564)
    goto _jump1481;
    // End body of loop
    int64_t _570 = 0;
    _570 *= _539.d0;
    _570 += _560;
    _570 *= _539.d1;
    _570 += _559;
    _570 *= _539.d2;
    _570 += _558;
    _539.data[_570] = _561;
    _558++;
    if (_558 < _556)
    goto _jump1478;
    _558 = 0;
    _559++;
    if (_559 < _551)
    goto _jump1478;
    _559 = 0;
    _560++;
    if (_560 < _546)
    goto _jump1478;
    // End body of loop
    _538 = _539;
    goto _jump1482;
    _jump1474:;
    _a3__a3__a2__a2_double _571;
    // Computing bound for g
    int64_t _572 = 722;
    _571.d0 = _572;
    if (_572 > 0) 
    goto _jump1483;
    fail_assertion("non-positive loop bound");
    _jump1483:;
    // Computing bound for h
    double _573 = 13.0;
    int64_t _574 = 11;
    e _575 = { _573, _574, _333 };
    int64_t _576 = _575.b;
    _571.d1 = _576;
    if (_576 > 0) 
    goto _jump1484;
    fail_assertion("non-positive loop bound");
    _jump1484:;
    // Computing bound for i
    int64_t _577 = 922;
    int64_t _578 = -_577;
    int64_t _579 = -_578;
    _571.d2 = _579;
    if (_579 > 0) 
    goto _jump1485;
    fail_assertion("non-positive loop bound");
    _jump1485:;
    // Computing total size of heap memory to allocate
    int64_t _580 = 1;
    _580 *= _572;
    _580 *= _576;
    _580 *= _579;
    _580 *= sizeof(_a3__a2__a2_double);
    _571.data = jpl_alloc(_580);
    int64_t _581 = 0; // i
    int64_t _582 = 0; // h
    int64_t _583 = 0; // g
    _jump1486:; // Begin body of loop
    _a3__a2__a2_double _584;
    // Computing bound for j
    int64_t _585 = -_581;
    _584.d0 = _585;
    if (_585 > 0) 
    goto _jump1487;
    fail_assertion("non-positive loop bound");
    _jump1487:;
    // Computing bound for k
    int64_t _586 = _581 + _582;
    _584.d1 = _586;
    if (_586 > 0) 
    goto _jump1488;
    fail_assertion("non-positive loop bound");
    _jump1488:;
    // Computing bound for l
    int64_t _587;
    // Computing bound for j
    if (_582 > 0) 
    goto _jump1489;
    fail_assertion("non-positive loop bound");
    _jump1489:;
    // Computing bound for k
    int64_t _588 = 388;
    if (_588 > 0) 
    goto _jump1490;
    fail_assertion("non-positive loop bound");
    _jump1490:;
    // Computing bound for l
    if (_582 > 0) 
    goto _jump1491;
    fail_assertion("non-positive loop bound");
    _jump1491:;
    _587 = 0;
    int64_t _589 = 0; // l
    int64_t _590 = 0; // k
    int64_t _591 = 0; // j
    _jump1492:; // Begin body of loop
    _587 += _582;
    _589++;
    if (_589 < _582)
    goto _jump1492;
    _589 = 0;
    _590++;
    if (_590 < _588)
    goto _jump1492;
    _590 = 0;
    _591++;
    if (_591 < _582)
    goto _jump1492;
    // End body of loop
    _584.d2 = _587;
    if (_587 > 0) 
    goto _jump1493;
    fail_assertion("non-positive loop bound");
    _jump1493:;
    // Computing total size of heap memory to allocate
    int64_t _592 = 1;
    _592 *= _585;
    _592 *= _586;
    _592 *= _587;
    _592 *= sizeof(_a2__a2_double);
    _584.data = jpl_alloc(_592);
    int64_t _593 = 0; // l
    int64_t _594 = 0; // k
    int64_t _595 = 0; // j
    _jump1494:; // Begin body of loop
    _a2__a2_double _596;
    // Computing bound for m
    _596.d0 = _582;
    if (_582 > 0) 
    goto _jump1495;
    fail_assertion("non-positive loop bound");
    _jump1495:;
    // Computing bound for n
    _596.d1 = _593;
    if (_593 > 0) 
    goto _jump1496;
    fail_assertion("non-positive loop bound");
    _jump1496:;
    // Computing total size of heap memory to allocate
    int64_t _597 = 1;
    _597 *= _582;
    _597 *= _593;
    _597 *= sizeof(_a2_double);
    _596.data = jpl_alloc(_597);
    int64_t _598 = 0; // n
    int64_t _599 = 0; // m
    _jump1497:; // Begin body of loop
    _a2_double _600 = a();
    int64_t _601 = 0;
    _601 *= _596.d0;
    _601 += _599;
    _601 *= _596.d1;
    _601 += _598;
    _596.data[_601] = _600;
    _598++;
    if (_598 < _593)
    goto _jump1497;
    _598 = 0;
    _599++;
    if (_599 < _582)
    goto _jump1497;
    // End body of loop
    int64_t _602 = 0;
    _602 *= _584.d0;
    _602 += _595;
    _602 *= _584.d1;
    _602 += _594;
    _602 *= _584.d2;
    _602 += _593;
    _584.data[_602] = _596;
    _593++;
    if (_593 < _587)
    goto _jump1494;
    _593 = 0;
    _594++;
    if (_594 < _586)
    goto _jump1494;
    _594 = 0;
    _595++;
    if (_595 < _585)
    goto _jump1494;
    // End body of loop
    int64_t _603 = 0;
    _603 *= _571.d0;
    _603 += _583;
    _603 *= _571.d1;
    _603 += _582;
    _603 *= _571.d2;
    _603 += _581;
    _571.data[_603] = _584;
    _581++;
    if (_581 < _579)
    goto _jump1486;
    _581 = 0;
    _582++;
    if (_582 < _576)
    goto _jump1486;
    _582 = 0;
    _583++;
    if (_583 < _572)
    goto _jump1486;
    // End body of loop
    bool _605 = false;
    bool _604 = _605;
    if (0 != _605)
    goto _jump1498;
    bool _606 = false;
    _604 = _606;
    _jump1498:;
    int64_t _607;
    if (!_604)
    goto _jump1499;
    int64_t _608 = 181;
    int64_t _609 = -_608;
    _607 = _609;
    goto _jump1500;
    _jump1499:;
    int64_t _610 = 277;
    int64_t _611 = -_610;
    int64_t _612 = -_611;
    _607 = _612;
    _jump1500:;
    int64_t _613;
    if (!_333)
    goto _jump1501;
    int64_t _614 = 262;
    _613 = _614;
    goto _jump1502;
    _jump1501:;
    int64_t _615 = 825;
    _613 = _615;
    _jump1502:;
    int64_t _616 = 716;
    int64_t _617 = -_616;
    int64_t _618;
    if (!_0)
    goto _jump1503;
    int64_t _619 = 869;
    _618 = _619;
    goto _jump1504;
    _jump1503:;
    int64_t _620 = 372;
    _618 = _620;
    _jump1504:;
    int64_t _621 = _617 % _618;
    int64_t _622;
    // Computing bound for g
    int64_t _623 = 786;
    int64_t _624 = 316;
    int64_t _625 = _623 / _624;
    if (_625 > 0) 
    goto _jump1505;
    fail_assertion("non-positive loop bound");
    _jump1505:;
    // Computing bound for h
    int64_t _626 = 579;
    if (_626 > 0) 
    goto _jump1506;
    fail_assertion("non-positive loop bound");
    _jump1506:;
    _622 = 0;
    int64_t _627 = 0; // h
    int64_t _628 = 0; // g
    _jump1507:; // Begin body of loop
    _622 += _627;
    _627++;
    if (_627 < _626)
    goto _jump1507;
    _627 = 0;
    _628++;
    if (_628 < _625)
    goto _jump1507;
    // End body of loop
    int64_t _629 = _621 - _622;
    if (_607 >= 0)
    goto _jump1508;
    fail_assertion("negative array index");
    _jump1508:;
    if (_607 < _571.d0)
    goto _jump1509;
    fail_assertion("index too large");
    _jump1509:;
    if (_613 >= 0)
    goto _jump1510;
    fail_assertion("negative array index");
    _jump1510:;
    if (_613 < _571.d1)
    goto _jump1511;
    fail_assertion("index too large");
    _jump1511:;
    if (_629 >= 0)
    goto _jump1512;
    fail_assertion("negative array index");
    _jump1512:;
    if (_629 < _571.d2)
    goto _jump1513;
    fail_assertion("index too large");
    _jump1513:;
    int64_t _630 = 0;
    _630 *= _571.d0;
    _630 += _607;
    _630 *= _571.d1;
    _630 += _613;
    _630 *= _571.d2;
    _630 += _629;
    _a3__a2__a2_double _631 = _571.data[_630];
    _538 = _631;
    _jump1482:;
    _521 = _538;
    goto _jump1514;
    _jump1464:;
    _a3__a2__a2_double _632;
    // Computing bound for g
    int64_t _633;
    // Computing bound for g
    bool _634 = _0;
    if (0 == _0)
    goto _jump1515;
    _634 = _333;
    _jump1515:;
    int64_t _635;
    if (!_634)
    goto _jump1516;
    int64_t _636 = 970;
    int64_t _637 = -_636;
    _635 = _637;
    goto _jump1517;
    _jump1516:;
    int64_t _638 = 251;
    _635 = _638;
    _jump1517:;
    if (_635 > 0) 
    goto _jump1518;
    fail_assertion("non-positive loop bound");
    _jump1518:;
    // Computing bound for h
    int64_t _639 = 382;
    int64_t _640 = -_639;
    if (_640 > 0) 
    goto _jump1519;
    fail_assertion("non-positive loop bound");
    _jump1519:;
    _633 = 0;
    int64_t _641 = 0; // h
    int64_t _642 = 0; // g
    _jump1520:; // Begin body of loop
    int64_t _643 = -_642;
    int64_t _644 = -_643;
    _633 += _644;
    _641++;
    if (_641 < _640)
    goto _jump1520;
    _641 = 0;
    _642++;
    if (_642 < _635)
    goto _jump1520;
    // End body of loop
    int64_t _645 = 162;
    int64_t _646 = -_645;
    int64_t _647 = _633 / _646;
    _632.d0 = _647;
    if (_647 > 0) 
    goto _jump1521;
    fail_assertion("non-positive loop bound");
    _jump1521:;
    // Computing bound for h
    int64_t _648 = 986;
    _632.d1 = _648;
    if (_648 > 0) 
    goto _jump1522;
    fail_assertion("non-positive loop bound");
    _jump1522:;
    // Computing bound for i
    int64_t _649 = 214;
    bool _650 = _0;
    if (0 == _0)
    goto _jump1523;
    bool _651 = false;
    _650 = _651;
    _jump1523:;
    int64_t _652;
    if (!_650)
    goto _jump1524;
    int64_t _653;
    if (!_0)
    goto _jump1525;
    int64_t _654 = 161;
    _653 = _654;
    goto _jump1526;
    _jump1525:;
    int64_t _655 = 215;
    _653 = _655;
    _jump1526:;
    int64_t _656 = -_653;
    _652 = _656;
    goto _jump1527;
    _jump1524:;
    int64_t _657 = 444;
    _652 = _657;
    _jump1527:;
    int64_t _658 = _649 / _652;
    _632.d2 = _658;
    if (_658 > 0) 
    goto _jump1528;
    fail_assertion("non-positive loop bound");
    _jump1528:;
    // Computing total size of heap memory to allocate
    int64_t _659 = 1;
    _659 *= _647;
    _659 *= _648;
    _659 *= _658;
    _659 *= sizeof(_a2__a2_double);
    _632.data = jpl_alloc(_659);
    int64_t _660 = 0; // i
    int64_t _661 = 0; // h
    int64_t _662 = 0; // g
    _jump1529:; // Begin body of loop
    int64_t _664 = 377;
    bool _665 = _660 >= _664;
    bool _663 = _665;
    if (0 != _665)
    goto _jump1530;
    bool _667 = true;
    bool _666 = _667;
    if (0 == _667)
    goto _jump1531;
    bool _668 = _661 != _660;
    _666 = _668;
    _jump1531:;
    _663 = _666;
    _jump1530:;
    _a2__a2_double _669;
    if (!_663)
    goto _jump1532;
    bool _670;
    if (!_0)
    goto _jump1533;
    bool _671;
    if (!_0)
    goto _jump1534;
    bool _672 = true;
    _671 = _672;
    goto _jump1535;
    _jump1534:;
    _671 = _0;
    _jump1535:;
    _670 = _671;
    goto _jump1536;
    _jump1533:;
    bool _673 = true;
    bool _674 = _0 != _673;
    _670 = _674;
    _jump1536:;
    _a2__a2_double _675;
    if (!_670)
    goto _jump1537;
    _a2__a2_double _676;
    // Computing bound for j
    _676.d0 = _660;
    if (_660 > 0) 
    goto _jump1538;
    fail_assertion("non-positive loop bound");
    _jump1538:;
    // Computing bound for k
    _676.d1 = _660;
    if (_660 > 0) 
    goto _jump1539;
    fail_assertion("non-positive loop bound");
    _jump1539:;
    // Computing total size of heap memory to allocate
    int64_t _677 = 1;
    _677 *= _660;
    _677 *= _660;
    _677 *= sizeof(_a2_double);
    _676.data = jpl_alloc(_677);
    int64_t _678 = 0; // k
    int64_t _679 = 0; // j
    _jump1540:; // Begin body of loop
    _a2_double _680;
    // Computing bound for l
    _680.d0 = _678;
    if (_678 > 0) 
    goto _jump1541;
    fail_assertion("non-positive loop bound");
    _jump1541:;
    // Computing bound for m
    _680.d1 = _660;
    if (_660 > 0) 
    goto _jump1542;
    fail_assertion("non-positive loop bound");
    _jump1542:;
    // Computing total size of heap memory to allocate
    int64_t _681 = 1;
    _681 *= _678;
    _681 *= _660;
    _681 *= sizeof(double);
    _680.data = jpl_alloc(_681);
    int64_t _682 = 0; // m
    int64_t _683 = 0; // l
    _jump1543:; // Begin body of loop
    double _684 = 67.0;
    int64_t _685 = 0;
    _685 *= _680.d0;
    _685 += _683;
    _685 *= _680.d1;
    _685 += _682;
    _680.data[_685] = _684;
    _682++;
    if (_682 < _660)
    goto _jump1543;
    _682 = 0;
    _683++;
    if (_683 < _678)
    goto _jump1543;
    // End body of loop
    int64_t _686 = 0;
    _686 *= _676.d0;
    _686 += _679;
    _686 *= _676.d1;
    _686 += _678;
    _676.data[_686] = _680;
    _678++;
    if (_678 < _660)
    goto _jump1540;
    _678 = 0;
    _679++;
    if (_679 < _660)
    goto _jump1540;
    // End body of loop
    _675 = _676;
    goto _jump1544;
    _jump1537:;
    _a2__a2_double _687;
    // Computing bound for j
    _687.d0 = _660;
    if (_660 > 0) 
    goto _jump1545;
    fail_assertion("non-positive loop bound");
    _jump1545:;
    // Computing bound for k
    int64_t _688;
    // Computing bound for j
    if (_660 > 0) 
    goto _jump1546;
    fail_assertion("non-positive loop bound");
    _jump1546:;
    // Computing bound for k
    if (_662 > 0) 
    goto _jump1547;
    fail_assertion("non-positive loop bound");
    _jump1547:;
    // Computing bound for l
    if (_660 > 0) 
    goto _jump1548;
    fail_assertion("non-positive loop bound");
    _jump1548:;
    _688 = 0;
    int64_t _689 = 0; // l
    int64_t _690 = 0; // k
    int64_t _691 = 0; // j
    _jump1549:; // Begin body of loop
    _688 += _691;
    _689++;
    if (_689 < _660)
    goto _jump1549;
    _689 = 0;
    _690++;
    if (_690 < _662)
    goto _jump1549;
    _690 = 0;
    _691++;
    if (_691 < _660)
    goto _jump1549;
    // End body of loop
    _687.d1 = _688;
    if (_688 > 0) 
    goto _jump1550;
    fail_assertion("non-positive loop bound");
    _jump1550:;
    // Computing total size of heap memory to allocate
    int64_t _692 = 1;
    _692 *= _660;
    _692 *= _688;
    _692 *= sizeof(_a2_double);
    _687.data = jpl_alloc(_692);
    int64_t _693 = 0; // k
    int64_t _694 = 0; // j
    _jump1551:; // Begin body of loop
    _a2_double _695;
    if (!_0)
    goto _jump1552;
    _a2_double _696 = a();
    _695 = _696;
    goto _jump1553;
    _jump1552:;
    _a2_double _697 = a();
    _695 = _697;
    _jump1553:;
    int64_t _698 = 0;
    _698 *= _687.d0;
    _698 += _694;
    _698 *= _687.d1;
    _698 += _693;
    _687.data[_698] = _695;
    _693++;
    if (_693 < _688)
    goto _jump1551;
    _693 = 0;
    _694++;
    if (_694 < _660)
    goto _jump1551;
    // End body of loop
    _675 = _687;
    _jump1544:;
    _669 = _675;
    goto _jump1554;
    _jump1532:;
    _a2__a2_double _699;
    // Computing bound for j
    _699.d0 = _660;
    if (_660 > 0) 
    goto _jump1555;
    fail_assertion("non-positive loop bound");
    _jump1555:;
    // Computing bound for k
    int64_t _700 = 349;
    _699.d1 = _700;
    if (_700 > 0) 
    goto _jump1556;
    fail_assertion("non-positive loop bound");
    _jump1556:;
    // Computing total size of heap memory to allocate
    int64_t _701 = 1;
    _701 *= _660;
    _701 *= _700;
    _701 *= sizeof(_a2_double);
    _699.data = jpl_alloc(_701);
    int64_t _702 = 0; // k
    int64_t _703 = 0; // j
    _jump1557:; // Begin body of loop
    _a2_double _704 = a();
    int64_t _705 = 0;
    _705 *= _699.d0;
    _705 += _703;
    _705 *= _699.d1;
    _705 += _702;
    _699.data[_705] = _704;
    _702++;
    if (_702 < _700)
    goto _jump1557;
    _702 = 0;
    _703++;
    if (_703 < _660)
    goto _jump1557;
    // End body of loop
    _669 = _699;
    _jump1554:;
    int64_t _706 = 0;
    _706 *= _632.d0;
    _706 += _662;
    _706 *= _632.d1;
    _706 += _661;
    _706 *= _632.d2;
    _706 += _660;
    _632.data[_706] = _669;
    _660++;
    if (_660 < _658)
    goto _jump1529;
    _660 = 0;
    _661++;
    if (_661 < _648)
    goto _jump1529;
    _661 = 0;
    _662++;
    if (_662 < _647)
    goto _jump1529;
    // End body of loop
    _521 = _632;
    _jump1514:;
    _513 = _521;
    goto _jump1558;
    _jump1461:;
    _a3__a3__a2__a2_double _707;
    // Computing bound for g
    _a2__a3_int64_t _708;
    // Computing bound for g
    int64_t _709 = 901;
    _708.d0 = _709;
    if (_709 > 0) 
    goto _jump1559;
    fail_assertion("non-positive loop bound");
    _jump1559:;
    // Computing bound for h
    int64_t _710 = 552;
    int64_t _711 = 271;
    int64_t _712 = _710 * _711;
    _708.d1 = _712;
    if (_712 > 0) 
    goto _jump1560;
    fail_assertion("non-positive loop bound");
    _jump1560:;
    // Computing total size of heap memory to allocate
    int64_t _713 = 1;
    _713 *= _709;
    _713 *= _712;
    _713 *= sizeof(_a3_int64_t);
    _708.data = jpl_alloc(_713);
    int64_t _714 = 0; // h
    int64_t _715 = 0; // g
    _jump1561:; // Begin body of loop
    _a3_int64_t _716;
    // Computing bound for i
    _716.d0 = _715;
    if (_715 > 0) 
    goto _jump1562;
    fail_assertion("non-positive loop bound");
    _jump1562:;
    // Computing bound for j
    int64_t _717 = 342;
    _716.d1 = _717;
    if (_717 > 0) 
    goto _jump1563;
    fail_assertion("non-positive loop bound");
    _jump1563:;
    // Computing bound for k
    _716.d2 = _715;
    if (_715 > 0) 
    goto _jump1564;
    fail_assertion("non-positive loop bound");
    _jump1564:;
    // Computing total size of heap memory to allocate
    int64_t _718 = 1;
    _718 *= _715;
    _718 *= _717;
    _718 *= _715;
    _718 *= sizeof(int64_t);
    _716.data = jpl_alloc(_718);
    int64_t _719 = 0; // k
    int64_t _720 = 0; // j
    int64_t _721 = 0; // i
    _jump1565:; // Begin body of loop
    int64_t _722 = 0;
    _722 *= _716.d0;
    _722 += _721;
    _722 *= _716.d1;
    _722 += _720;
    _722 *= _716.d2;
    _722 += _719;
    _716.data[_722] = _721;
    _719++;
    if (_719 < _715)
    goto _jump1565;
    _719 = 0;
    _720++;
    if (_720 < _717)
    goto _jump1565;
    _720 = 0;
    _721++;
    if (_721 < _715)
    goto _jump1565;
    // End body of loop
    int64_t _723 = 0;
    _723 *= _708.d0;
    _723 += _715;
    _723 *= _708.d1;
    _723 += _714;
    _708.data[_723] = _716;
    _714++;
    if (_714 < _712)
    goto _jump1561;
    _714 = 0;
    _715++;
    if (_715 < _709)
    goto _jump1561;
    // End body of loop
    bool _724 = false;
    int64_t _725;
    if (!_724)
    goto _jump1566;
    int64_t _726 = 591;
    int64_t _727 = -_726;
    _725 = _727;
    goto _jump1567;
    _jump1566:;
    int64_t _728 = 75;
    _725 = _728;
    _jump1567:;
    int64_t _729 = 703;
    if (_725 >= 0)
    goto _jump1568;
    fail_assertion("negative array index");
    _jump1568:;
    if (_725 < _708.d0)
    goto _jump1569;
    fail_assertion("index too large");
    _jump1569:;
    if (_729 >= 0)
    goto _jump1570;
    fail_assertion("negative array index");
    _jump1570:;
    if (_729 < _708.d1)
    goto _jump1571;
    fail_assertion("index too large");
    _jump1571:;
    int64_t _730 = 0;
    _730 *= _708.d0;
    _730 += _725;
    _730 *= _708.d1;
    _730 += _729;
    _a3_int64_t _731 = _708.data[_730];
    int64_t _732 = 293;
    int64_t _733;
    // Computing bound for g
    int64_t _734 = 963;
    if (_734 > 0) 
    goto _jump1572;
    fail_assertion("non-positive loop bound");
    _jump1572:;
    // Computing bound for h
    int64_t _735;
    // Computing bound for g
    int64_t _736 = 327;
    if (_736 > 0) 
    goto _jump1573;
    fail_assertion("non-positive loop bound");
    _jump1573:;
    _735 = 0;
    int64_t _737 = 0; // g
    _jump1574:; // Begin body of loop
    _735 += _737;
    _737++;
    if (_737 < _736)
    goto _jump1574;
    // End body of loop
    if (_735 > 0) 
    goto _jump1575;
    fail_assertion("non-positive loop bound");
    _jump1575:;
    // Computing bound for i
    int64_t _738 = 955;
    if (_738 > 0) 
    goto _jump1576;
    fail_assertion("non-positive loop bound");
    _jump1576:;
    _733 = 0;
    int64_t _739 = 0; // i
    int64_t _740 = 0; // h
    int64_t _741 = 0; // g
    _jump1577:; // Begin body of loop
    int64_t _742 = 334;
    _733 += _742;
    _739++;
    if (_739 < _738)
    goto _jump1577;
    _739 = 0;
    _740++;
    if (_740 < _735)
    goto _jump1577;
    _740 = 0;
    _741++;
    if (_741 < _734)
    goto _jump1577;
    // End body of loop
    int64_t _743 = 456;
    if (_732 >= 0)
    goto _jump1578;
    fail_assertion("negative array index");
    _jump1578:;
    if (_732 < _731.d0)
    goto _jump1579;
    fail_assertion("index too large");
    _jump1579:;
    if (_733 >= 0)
    goto _jump1580;
    fail_assertion("negative array index");
    _jump1580:;
    if (_733 < _731.d1)
    goto _jump1581;
    fail_assertion("index too large");
    _jump1581:;
    if (_743 >= 0)
    goto _jump1582;
    fail_assertion("negative array index");
    _jump1582:;
    if (_743 < _731.d2)
    goto _jump1583;
    fail_assertion("index too large");
    _jump1583:;
    int64_t _744 = 0;
    _744 *= _731.d0;
    _744 += _732;
    _744 *= _731.d1;
    _744 += _733;
    _744 *= _731.d2;
    _744 += _743;
    int64_t _745 = _731.data[_744];
    _707.d0 = _745;
    if (_745 > 0) 
    goto _jump1584;
    fail_assertion("non-positive loop bound");
    _jump1584:;
    // Computing bound for h
    bool _746 = _0;
    if (0 == _0)
    goto _jump1585;
    _746 = _0;
    _jump1585:;
    bool _747;
    if (!_746)
    goto _jump1586;
    bool _748 = true;
    _747 = _748;
    goto _jump1587;
    _jump1586:;
    _747 = _333;
    _jump1587:;
    bool _749;
    if (!_747)
    goto _jump1588;
    double _750 = 44.0;
    double _751 = 71.0;
    double _752 = 76.0;
    double _753 = fmod(_751, _752);
    bool _754 = _750 >= _753;
    _749 = _754;
    goto _jump1589;
    _jump1588:;
    _749 = _0;
    _jump1589:;
    int64_t _755;
    if (!_749)
    goto _jump1590;
    bool _756;
    if (!_333)
    goto _jump1591;
    _756 = _333;
    goto _jump1592;
    _jump1591:;
    _756 = _333;
    _jump1592:;
    int64_t _757;
    if (!_756)
    goto _jump1593;
    int64_t _758 = 800;
    _757 = _758;
    goto _jump1594;
    _jump1593:;
    int64_t _759;
    if (!_0)
    goto _jump1595;
    int64_t _760 = 899;
    _759 = _760;
    goto _jump1596;
    _jump1595:;
    int64_t _761 = 714;
    _759 = _761;
    _jump1596:;
    int64_t _762 = 947;
    int64_t _763 = _759 % _762;
    _757 = _763;
    _jump1594:;
    _755 = _757;
    goto _jump1597;
    _jump1590:;
    int64_t _764;
    // Computing bound for g
    int64_t _765 = 884;
    if (_765 > 0) 
    goto _jump1598;
    fail_assertion("non-positive loop bound");
    _jump1598:;
    _764 = 0;
    int64_t _766 = 0; // g
    _jump1599:; // Begin body of loop
    int64_t _767 = -_766;
    _764 += _767;
    _766++;
    if (_766 < _765)
    goto _jump1599;
    // End body of loop
    _755 = _764;
    _jump1597:;
    _707.d1 = _755;
    if (_755 > 0) 
    goto _jump1600;
    fail_assertion("non-positive loop bound");
    _jump1600:;
    // Computing bound for i
    _a2_double _768 = a();
    double _769 = c(_768);
    double _770 = -_769;
    bool _771 = true;
    int64_t _772;
    if (!_771)
    goto _jump1601;
    int64_t _773 = 810;
    _772 = _773;
    goto _jump1602;
    _jump1601:;
    int64_t _774 = 273;
    _772 = _774;
    _jump1602:;
    e _775 = { _770, _772, _333 };
    int64_t _776 = _775.b;
    _707.d2 = _776;
    if (_776 > 0) 
    goto _jump1603;
    fail_assertion("non-positive loop bound");
    _jump1603:;
    // Computing total size of heap memory to allocate
    int64_t _777 = 1;
    _777 *= _745;
    _777 *= _755;
    _777 *= _776;
    _777 *= sizeof(_a3__a2__a2_double);
    _707.data = jpl_alloc(_777);
    int64_t _778 = 0; // i
    int64_t _779 = 0; // h
    int64_t _780 = 0; // g
    _jump1604:; // Begin body of loop
    _a3__a2__a2_double _781;
    // Computing bound for j
    _a2_double _782 = a();
    double _783 = c(_782);
    e _784 = { _783, _780, _333 };
    int64_t _785 = _784.b;
    _781.d0 = _785;
    if (_785 > 0) 
    goto _jump1605;
    fail_assertion("non-positive loop bound");
    _jump1605:;
    // Computing bound for k
    _a2_int64_t _786;
    // Computing bound for j
    int64_t _787 = 236;
    _786.d0 = _787;
    if (_787 > 0) 
    goto _jump1606;
    fail_assertion("non-positive loop bound");
    _jump1606:;
    // Computing bound for k
    bool _788 = true;
    int64_t _789;
    if (!_788)
    goto _jump1607;
    _789 = _780;
    goto _jump1608;
    _jump1607:;
    _789 = _779;
    _jump1608:;
    _786.d1 = _789;
    if (_789 > 0) 
    goto _jump1609;
    fail_assertion("non-positive loop bound");
    _jump1609:;
    // Computing total size of heap memory to allocate
    int64_t _790 = 1;
    _790 *= _787;
    _790 *= _789;
    _790 *= sizeof(int64_t);
    _786.data = jpl_alloc(_790);
    int64_t _791 = 0; // k
    int64_t _792 = 0; // j
    _jump1610:; // Begin body of loop
    int64_t _793 = 398;
    int64_t _794 = _779 + _793;
    int64_t _795 = 0;
    _795 *= _786.d0;
    _795 += _792;
    _795 *= _786.d1;
    _795 += _791;
    _786.data[_795] = _794;
    _791++;
    if (_791 < _789)
    goto _jump1610;
    _791 = 0;
    _792++;
    if (_792 < _787)
    goto _jump1610;
    // End body of loop
    int64_t _796 = -_778;
    int64_t _797 = _779 - _796;
    int64_t _798;
    if (!_333)
    goto _jump1611;
    int64_t _799 = 877;
    _798 = _799;
    goto _jump1612;
    _jump1611:;
    int64_t _800 = 728;
    int64_t _801 = -_800;
    _798 = _801;
    _jump1612:;
    if (_797 >= 0)
    goto _jump1613;
    fail_assertion("negative array index");
    _jump1613:;
    if (_797 < _786.d0)
    goto _jump1614;
    fail_assertion("index too large");
    _jump1614:;
    if (_798 >= 0)
    goto _jump1615;
    fail_assertion("negative array index");
    _jump1615:;
    if (_798 < _786.d1)
    goto _jump1616;
    fail_assertion("index too large");
    _jump1616:;
    int64_t _802 = 0;
    _802 *= _786.d0;
    _802 += _797;
    _802 *= _786.d1;
    _802 += _798;
    int64_t _803 = _786.data[_802];
    _781.d1 = _803;
    if (_803 > 0) 
    goto _jump1617;
    fail_assertion("non-positive loop bound");
    _jump1617:;
    // Computing bound for l
    int64_t _804 = 603;
    _781.d2 = _804;
    if (_804 > 0) 
    goto _jump1618;
    fail_assertion("non-positive loop bound");
    _jump1618:;
    // Computing total size of heap memory to allocate
    int64_t _805 = 1;
    _805 *= _785;
    _805 *= _803;
    _805 *= _804;
    _805 *= sizeof(_a2__a2_double);
    _781.data = jpl_alloc(_805);
    int64_t _806 = 0; // l
    int64_t _807 = 0; // k
    int64_t _808 = 0; // j
    _jump1619:; // Begin body of loop
    _a2__a2_double _809;
    // Computing bound for m
    _809.d0 = _808;
    if (_808 > 0) 
    goto _jump1620;
    fail_assertion("non-positive loop bound");
    _jump1620:;
    // Computing bound for n
    _809.d1 = _808;
    if (_808 > 0) 
    goto _jump1621;
    fail_assertion("non-positive loop bound");
    _jump1621:;
    // Computing total size of heap memory to allocate
    int64_t _810 = 1;
    _810 *= _808;
    _810 *= _808;
    _810 *= sizeof(_a2_double);
    _809.data = jpl_alloc(_810);
    int64_t _811 = 0; // n
    int64_t _812 = 0; // m
    _jump1622:; // Begin body of loop
    _a2_double _813 = a();
    int64_t _814 = 0;
    _814 *= _809.d0;
    _814 += _812;
    _814 *= _809.d1;
    _814 += _811;
    _809.data[_814] = _813;
    _811++;
    if (_811 < _808)
    goto _jump1622;
    _811 = 0;
    _812++;
    if (_812 < _808)
    goto _jump1622;
    // End body of loop
    int64_t _815 = 0;
    _815 *= _781.d0;
    _815 += _808;
    _815 *= _781.d1;
    _815 += _807;
    _815 *= _781.d2;
    _815 += _806;
    _781.data[_815] = _809;
    _806++;
    if (_806 < _804)
    goto _jump1619;
    _806 = 0;
    _807++;
    if (_807 < _803)
    goto _jump1619;
    _807 = 0;
    _808++;
    if (_808 < _785)
    goto _jump1619;
    // End body of loop
    int64_t _816 = 0;
    _816 *= _707.d0;
    _816 += _780;
    _816 *= _707.d1;
    _816 += _779;
    _816 *= _707.d2;
    _816 += _778;
    _707.data[_816] = _781;
    _778++;
    if (_778 < _776)
    goto _jump1604;
    _778 = 0;
    _779++;
    if (_779 < _755)
    goto _jump1604;
    _779 = 0;
    _780++;
    if (_780 < _745)
    goto _jump1604;
    // End body of loop
    _a3__a2_int64_t _817;
    // Computing bound for g
    int64_t _818 = 434;
    _817.d0 = _818;
    if (_818 > 0) 
    goto _jump1623;
    fail_assertion("non-positive loop bound");
    _jump1623:;
    // Computing bound for h
    int64_t _819 = 994;
    _817.d1 = _819;
    if (_819 > 0) 
    goto _jump1624;
    fail_assertion("non-positive loop bound");
    _jump1624:;
    // Computing bound for i
    int64_t _820 = 154;
    _817.d2 = _820;
    if (_820 > 0) 
    goto _jump1625;
    fail_assertion("non-positive loop bound");
    _jump1625:;
    // Computing total size of heap memory to allocate
    int64_t _821 = 1;
    _821 *= _818;
    _821 *= _819;
    _821 *= _820;
    _821 *= sizeof(_a2_int64_t);
    _817.data = jpl_alloc(_821);
    int64_t _822 = 0; // i
    int64_t _823 = 0; // h
    int64_t _824 = 0; // g
    _jump1626:; // Begin body of loop
    _a2_int64_t _825;
    if (!_0)
    goto _jump1627;
    _a2_int64_t _826;
    // Computing bound for j
    _826.d0 = _822;
    if (_822 > 0) 
    goto _jump1628;
    fail_assertion("non-positive loop bound");
    _jump1628:;
    // Computing bound for k
    int64_t _827 = 958;
    _826.d1 = _827;
    if (_827 > 0) 
    goto _jump1629;
    fail_assertion("non-positive loop bound");
    _jump1629:;
    // Computing total size of heap memory to allocate
    int64_t _828 = 1;
    _828 *= _822;
    _828 *= _827;
    _828 *= sizeof(int64_t);
    _826.data = jpl_alloc(_828);
    int64_t _829 = 0; // k
    int64_t _830 = 0; // j
    _jump1630:; // Begin body of loop
    int64_t _831 = 0;
    _831 *= _826.d0;
    _831 += _830;
    _831 *= _826.d1;
    _831 += _829;
    _826.data[_831] = _829;
    _829++;
    if (_829 < _827)
    goto _jump1630;
    _829 = 0;
    _830++;
    if (_830 < _822)
    goto _jump1630;
    // End body of loop
    _825 = _826;
    goto _jump1631;
    _jump1627:;
    _a2_int64_t _832;
    // Computing bound for j
    _832.d0 = _824;
    if (_824 > 0) 
    goto _jump1632;
    fail_assertion("non-positive loop bound");
    _jump1632:;
    // Computing bound for k
    _832.d1 = _823;
    if (_823 > 0) 
    goto _jump1633;
    fail_assertion("non-positive loop bound");
    _jump1633:;
    // Computing total size of heap memory to allocate
    int64_t _833 = 1;
    _833 *= _824;
    _833 *= _823;
    _833 *= sizeof(int64_t);
    _832.data = jpl_alloc(_833);
    int64_t _834 = 0; // k
    int64_t _835 = 0; // j
    _jump1634:; // Begin body of loop
    int64_t _836 = 0;
    _836 *= _832.d0;
    _836 += _835;
    _836 *= _832.d1;
    _836 += _834;
    _832.data[_836] = _834;
    _834++;
    if (_834 < _823)
    goto _jump1634;
    _834 = 0;
    _835++;
    if (_835 < _824)
    goto _jump1634;
    // End body of loop
    _825 = _832;
    _jump1631:;
    int64_t _837 = 0;
    _837 *= _817.d0;
    _837 += _824;
    _837 *= _817.d1;
    _837 += _823;
    _837 *= _817.d2;
    _837 += _822;
    _817.data[_837] = _825;
    _822++;
    if (_822 < _820)
    goto _jump1626;
    _822 = 0;
    _823++;
    if (_823 < _819)
    goto _jump1626;
    _823 = 0;
    _824++;
    if (_824 < _818)
    goto _jump1626;
    // End body of loop
    int64_t _838;
    // Computing bound for g
    int64_t _839 = 333;
    int64_t _840 = -_839;
    if (_840 > 0) 
    goto _jump1635;
    fail_assertion("non-positive loop bound");
    _jump1635:;
    // Computing bound for h
    bool _841 = !_0;
    int64_t _842;
    if (!_841)
    goto _jump1636;
    int64_t _843 = 270;
    _842 = _843;
    goto _jump1637;
    _jump1636:;
    int64_t _844 = 866;
    _842 = _844;
    _jump1637:;
    if (_842 > 0) 
    goto _jump1638;
    fail_assertion("non-positive loop bound");
    _jump1638:;
    _838 = 0;
    int64_t _845 = 0; // h
    int64_t _846 = 0; // g
    _jump1639:; // Begin body of loop
    bool _847 = false;
    bool _848;
    if (!_847)
    goto _jump1640;
    bool _849 = true;
    _848 = _849;
    goto _jump1641;
    _jump1640:;
    bool _850 = true;
    _848 = _850;
    _jump1641:;
    int64_t _851;
    if (!_848)
    goto _jump1642;
    _851 = _846;
    goto _jump1643;
    _jump1642:;
    int64_t _852 = _845 - _845;
    _851 = _852;
    _jump1643:;
    _838 += _851;
    _845++;
    if (_845 < _842)
    goto _jump1639;
    _845 = 0;
    _846++;
    if (_846 < _840)
    goto _jump1639;
    // End body of loop
    int64_t _853 = 116;
    double _854 = 64.0;
    double _855 = 89.0;
    double _856 = _854 + _855;
    int64_t _857 = 52;
    e _858 = { _856, _857, _0 };
    int64_t _859 = _858.b;
    if (_838 >= 0)
    goto _jump1644;
    fail_assertion("negative array index");
    _jump1644:;
    if (_838 < _817.d0)
    goto _jump1645;
    fail_assertion("index too large");
    _jump1645:;
    if (_853 >= 0)
    goto _jump1646;
    fail_assertion("negative array index");
    _jump1646:;
    if (_853 < _817.d1)
    goto _jump1647;
    fail_assertion("index too large");
    _jump1647:;
    if (_859 >= 0)
    goto _jump1648;
    fail_assertion("negative array index");
    _jump1648:;
    if (_859 < _817.d2)
    goto _jump1649;
    fail_assertion("index too large");
    _jump1649:;
    int64_t _860 = 0;
    _860 *= _817.d0;
    _860 += _838;
    _860 *= _817.d1;
    _860 += _853;
    _860 *= _817.d2;
    _860 += _859;
    _a2_int64_t _861 = _817.data[_860];
    int64_t _862 = 733;
    int64_t _863 = -_862;
    int64_t _864 = 658;
    if (_863 >= 0)
    goto _jump1650;
    fail_assertion("negative array index");
    _jump1650:;
    if (_863 < _861.d0)
    goto _jump1651;
    fail_assertion("index too large");
    _jump1651:;
    if (_864 >= 0)
    goto _jump1652;
    fail_assertion("negative array index");
    _jump1652:;
    if (_864 < _861.d1)
    goto _jump1653;
    fail_assertion("index too large");
    _jump1653:;
    int64_t _865 = 0;
    _865 *= _861.d0;
    _865 += _863;
    _865 *= _861.d1;
    _865 += _864;
    int64_t _866 = _861.data[_865];
    _a1_int64_t _867;
    // Computing bound for g
    int64_t _868 = 717;
    _867.d0 = _868;
    if (_868 > 0) 
    goto _jump1654;
    fail_assertion("non-positive loop bound");
    _jump1654:;
    // Computing total size of heap memory to allocate
    int64_t _869 = 1;
    _869 *= _868;
    _869 *= sizeof(int64_t);
    _867.data = jpl_alloc(_869);
    int64_t _870 = 0; // g
    _jump1655:; // Begin body of loop
    int64_t _871 = 0;
    _871 *= _867.d0;
    _871 += _870;
    _867.data[_871] = _870;
    _870++;
    if (_870 < _868)
    goto _jump1655;
    // End body of loop
    int64_t _872 = 571;
    if (_872 >= 0)
    goto _jump1656;
    fail_assertion("negative array index");
    _jump1656:;
    if (_872 < _867.d0)
    goto _jump1657;
    fail_assertion("index too large");
    _jump1657:;
    int64_t _873 = 0;
    _873 *= _867.d0;
    _873 += _872;
    int64_t _874 = _867.data[_873];
    bool _875 = false;
    bool _876 = _333 != _875;
    int64_t _877;
    if (!_876)
    goto _jump1658;
    int64_t _878;
    // Computing bound for g
    int64_t _879 = 8;
    if (_879 > 0) 
    goto _jump1659;
    fail_assertion("non-positive loop bound");
    _jump1659:;
    _878 = 0;
    int64_t _880 = 0; // g
    _jump1660:; // Begin body of loop
    int64_t _881 = 398;
    _878 += _881;
    _880++;
    if (_880 < _879)
    goto _jump1660;
    // End body of loop
    _877 = _878;
    goto _jump1661;
    _jump1658:;
    int64_t _882;
    // Computing bound for g
    int64_t _883 = 810;
    if (_883 > 0) 
    goto _jump1662;
    fail_assertion("non-positive loop bound");
    _jump1662:;
    _882 = 0;
    int64_t _884 = 0; // g
    _jump1663:; // Begin body of loop
    int64_t _885 = 846;
    _882 += _885;
    _884++;
    if (_884 < _883)
    goto _jump1663;
    // End body of loop
    _877 = _882;
    _jump1661:;
    bool _886 = _333;
    if (0 == _333)
    goto _jump1664;
    _886 = _333;
    _jump1664:;
    int64_t _887;
    if (!_886)
    goto _jump1665;
    int64_t _888 = 625;
    _887 = _888;
    goto _jump1666;
    _jump1665:;
    int64_t _889 = 588;
    _887 = _889;
    _jump1666:;
    bool _890 = _877 < _887;
    int64_t _891;
    if (!_890)
    goto _jump1667;
    double _892 = 17.0;
    int64_t _893 = 435;
    e _894 = { _892, _893, _333 };
    int64_t _895 = _894.b;
    _891 = _895;
    goto _jump1668;
    _jump1667:;
    double _896 = 74.0;
    int64_t _897 = 833;
    bool _898 = false;
    e _899 = { _896, _897, _898 };
    int64_t _900 = _899.b;
    _891 = _900;
    _jump1668:;
    int64_t _901 = _874 - _891;
    _a3_int64_t _902;
    // Computing bound for g
    int64_t _903 = 555;
    _902.d0 = _903;
    if (_903 > 0) 
    goto _jump1669;
    fail_assertion("non-positive loop bound");
    _jump1669:;
    // Computing bound for h
    int64_t _904 = 85;
    int64_t _905 = 906;
    int64_t _906 = _904 % _905;
    int64_t _907 = 217;
    int64_t _908 = _906 * _907;
    int64_t _909 = -_908;
    _902.d1 = _909;
    if (_909 > 0) 
    goto _jump1670;
    fail_assertion("non-positive loop bound");
    _jump1670:;
    // Computing bound for i
    int64_t _910;
    // Computing bound for g
    int64_t _911 = 657;
    int64_t _912 = 299;
    int64_t _913 = _911 * _912;
    if (_913 > 0) 
    goto _jump1671;
    fail_assertion("non-positive loop bound");
    _jump1671:;
    _910 = 0;
    int64_t _914 = 0; // g
    _jump1672:; // Begin body of loop
    int64_t _915;
    if (!_0)
    goto _jump1673;
    _915 = _914;
    goto _jump1674;
    _jump1673:;
    _915 = _914;
    _jump1674:;
    _910 += _915;
    _914++;
    if (_914 < _913)
    goto _jump1672;
    // End body of loop
    int64_t _916 = 768;
    int64_t _917 = _910 + _916;
    _902.d2 = _917;
    if (_917 > 0) 
    goto _jump1675;
    fail_assertion("non-positive loop bound");
    _jump1675:;
    // Computing total size of heap memory to allocate
    int64_t _918 = 1;
    _918 *= _903;
    _918 *= _909;
    _918 *= _917;
    _918 *= sizeof(int64_t);
    _902.data = jpl_alloc(_918);
    int64_t _919 = 0; // i
    int64_t _920 = 0; // h
    int64_t _921 = 0; // g
    _jump1676:; // Begin body of loop
    bool _922 = false;
    bool _923;
    if (!_922)
    goto _jump1677;
    _923 = _0;
    goto _jump1678;
    _jump1677:;
    bool _924 = false;
    _923 = _924;
    _jump1678:;
    _a1_int64_t _925;
    if (!_923)
    goto _jump1679;
    _a1_int64_t _926;
    // Computing bound for j
    _926.d0 = _921;
    if (_921 > 0) 
    goto _jump1680;
    fail_assertion("non-positive loop bound");
    _jump1680:;
    // Computing total size of heap memory to allocate
    int64_t _927 = 1;
    _927 *= _921;
    _927 *= sizeof(int64_t);
    _926.data = jpl_alloc(_927);
    int64_t _928 = 0; // j
    _jump1681:; // Begin body of loop
    int64_t _929 = 0;
    _929 *= _926.d0;
    _929 += _928;
    _926.data[_929] = _921;
    _928++;
    if (_928 < _921)
    goto _jump1681;
    // End body of loop
    _925 = _926;
    goto _jump1682;
    _jump1679:;
    _a1_int64_t _930;
    // Computing bound for j
    _930.d0 = _921;
    if (_921 > 0) 
    goto _jump1683;
    fail_assertion("non-positive loop bound");
    _jump1683:;
    // Computing total size of heap memory to allocate
    int64_t _931 = 1;
    _931 *= _921;
    _931 *= sizeof(int64_t);
    _930.data = jpl_alloc(_931);
    int64_t _932 = 0; // j
    _jump1684:; // Begin body of loop
    int64_t _933 = 0;
    _933 *= _930.d0;
    _933 += _932;
    _930.data[_933] = _919;
    _932++;
    if (_932 < _921)
    goto _jump1684;
    // End body of loop
    _925 = _930;
    _jump1682:;
    int64_t _934 = _921 + _919;
    if (_934 >= 0)
    goto _jump1685;
    fail_assertion("negative array index");
    _jump1685:;
    if (_934 < _925.d0)
    goto _jump1686;
    fail_assertion("index too large");
    _jump1686:;
    int64_t _935 = 0;
    _935 *= _925.d0;
    _935 += _934;
    int64_t _936 = _925.data[_935];
    int64_t _937 = 0;
    _937 *= _902.d0;
    _937 += _921;
    _937 *= _902.d1;
    _937 += _920;
    _937 *= _902.d2;
    _937 += _919;
    _902.data[_937] = _936;
    _919++;
    if (_919 < _917)
    goto _jump1676;
    _919 = 0;
    _920++;
    if (_920 < _909)
    goto _jump1676;
    _920 = 0;
    _921++;
    if (_921 < _903)
    goto _jump1676;
    // End body of loop
    int64_t _938 = 577;
    int64_t _939;
    // Computing bound for g
    int64_t _940 = 606;
    if (_940 > 0) 
    goto _jump1687;
    fail_assertion("non-positive loop bound");
    _jump1687:;
    // Computing bound for h
    int64_t _941;
    // Computing bound for g
    int64_t _942 = 184;
    int64_t _943 = -_942;
    if (_943 > 0) 
    goto _jump1688;
    fail_assertion("non-positive loop bound");
    _jump1688:;
    // Computing bound for h
    int64_t _944;
    // Computing bound for g
    int64_t _945 = 255;
    int64_t _946 = -_945;
    if (_946 > 0) 
    goto _jump1689;
    fail_assertion("non-positive loop bound");
    _jump1689:;
    // Computing bound for h
    int64_t _947 = 75;
    int64_t _948 = 588;
    int64_t _949 = _947 - _948;
    if (_949 > 0) 
    goto _jump1690;
    fail_assertion("non-positive loop bound");
    _jump1690:;
    _944 = 0;
    int64_t _950 = 0; // h
    int64_t _951 = 0; // g
    _jump1691:; // Begin body of loop
    _944 += _950;
    _950++;
    if (_950 < _949)
    goto _jump1691;
    _950 = 0;
    _951++;
    if (_951 < _946)
    goto _jump1691;
    // End body of loop
    if (_944 > 0) 
    goto _jump1692;
    fail_assertion("non-positive loop bound");
    _jump1692:;
    _941 = 0;
    int64_t _952 = 0; // h
    int64_t _953 = 0; // g
    _jump1693:; // Begin body of loop
    _941 += _952;
    _952++;
    if (_952 < _944)
    goto _jump1693;
    _952 = 0;
    _953++;
    if (_953 < _943)
    goto _jump1693;
    // End body of loop
    if (_941 > 0) 
    goto _jump1694;
    fail_assertion("non-positive loop bound");
    _jump1694:;
    _939 = 0;
    int64_t _954 = 0; // h
    int64_t _955 = 0; // g
    _jump1695:; // Begin body of loop
    int64_t _956 = -_954;
    _939 += _956;
    _954++;
    if (_954 < _941)
    goto _jump1695;
    _954 = 0;
    _955++;
    if (_955 < _940)
    goto _jump1695;
    // End body of loop
    int64_t _957;
    // Computing bound for g
    int64_t _958 = 650;
    _a1_int64_t _959;
    _959.d0 = 1;
    _959.data = jpl_alloc(sizeof(int64_t) * 1);
    _959.data[0] = _958;
    int64_t _960 = 473;
    if (_960 >= 0)
    goto _jump1696;
    fail_assertion("negative array index");
    _jump1696:;
    if (_960 < _959.d0)
    goto _jump1697;
    fail_assertion("index too large");
    _jump1697:;
    int64_t _961 = 0;
    _961 *= _959.d0;
    _961 += _960;
    int64_t _962 = _959.data[_961];
    if (_962 > 0) 
    goto _jump1698;
    fail_assertion("non-positive loop bound");
    _jump1698:;
    // Computing bound for h
    int64_t _963 = 2;
    if (_963 > 0) 
    goto _jump1699;
    fail_assertion("non-positive loop bound");
    _jump1699:;
    _957 = 0;
    int64_t _964 = 0; // h
    int64_t _965 = 0; // g
    _jump1700:; // Begin body of loop
    _957 += _965;
    _964++;
    if (_964 < _963)
    goto _jump1700;
    _964 = 0;
    _965++;
    if (_965 < _962)
    goto _jump1700;
    // End body of loop
    if (_938 >= 0)
    goto _jump1701;
    fail_assertion("negative array index");
    _jump1701:;
    if (_938 < _902.d0)
    goto _jump1702;
    fail_assertion("index too large");
    _jump1702:;
    if (_939 >= 0)
    goto _jump1703;
    fail_assertion("negative array index");
    _jump1703:;
    if (_939 < _902.d1)
    goto _jump1704;
    fail_assertion("index too large");
    _jump1704:;
    if (_957 >= 0)
    goto _jump1705;
    fail_assertion("negative array index");
    _jump1705:;
    if (_957 < _902.d2)
    goto _jump1706;
    fail_assertion("index too large");
    _jump1706:;
    int64_t _966 = 0;
    _966 *= _902.d0;
    _966 += _938;
    _966 *= _902.d1;
    _966 += _939;
    _966 *= _902.d2;
    _966 += _957;
    int64_t _967 = _902.data[_966];
    if (_866 >= 0)
    goto _jump1707;
    fail_assertion("negative array index");
    _jump1707:;
    if (_866 < _707.d0)
    goto _jump1708;
    fail_assertion("index too large");
    _jump1708:;
    if (_901 >= 0)
    goto _jump1709;
    fail_assertion("negative array index");
    _jump1709:;
    if (_901 < _707.d1)
    goto _jump1710;
    fail_assertion("index too large");
    _jump1710:;
    if (_967 >= 0)
    goto _jump1711;
    fail_assertion("negative array index");
    _jump1711:;
    if (_967 < _707.d2)
    goto _jump1712;
    fail_assertion("index too large");
    _jump1712:;
    int64_t _968 = 0;
    _968 *= _707.d0;
    _968 += _866;
    _968 *= _707.d1;
    _968 += _901;
    _968 *= _707.d2;
    _968 += _967;
    _a3__a2__a2_double _969 = _707.data[_968];
    _513 = _969;
    _jump1558:;
    _a2_rgba _970 = read_image("k.png");
    int64_t l = _970.d0;
    int64_t m = _970.d1;
    double _971;
    // Computing bound for n
    if (_970.d1 > 0) 
    goto _jump1713;
    fail_assertion("non-positive loop bound");
    _jump1713:;
    _971 = 0;
    int64_t _972 = 0; // n
    _jump1714:; // Begin body of loop
    double _973;
    // Computing bound for o
    if (_513.d1 > 0) 
    goto _jump1715;
    fail_assertion("non-positive loop bound");
    _jump1715:;
    // Computing bound for p
    int64_t _974 = 937;
    if (_974 > 0) 
    goto _jump1716;
    fail_assertion("non-positive loop bound");
    _jump1716:;
    _973 = 0;
    int64_t _975 = 0; // p
    int64_t _976 = 0; // o
    _jump1717:; // Begin body of loop
    _a2_double _977;
    if (!_333)
    goto _jump1718;
    _a2_double _978 = a();
    _977 = _978;
    goto _jump1719;
    _jump1718:;
    _a2_double _979 = a();
    _977 = _979;
    _jump1719:;
    double _980 = c(_977);
    e _981 = { _980, _972, _0 };
    double _982 = _981.a;
    _973 += _982;
    _975++;
    if (_975 < _974)
    goto _jump1717;
    _975 = 0;
    _976++;
    if (_976 < _513.d1)
    goto _jump1717;
    // End body of loop
    _971 += _973;
    _972++;
    if (_972 < _970.d1)
    goto _jump1714;
    // End body of loop
    _a2__a1__a2_e _983;
    // Computing bound for n
    int64_t _984 = 757;
    _983.d0 = _984;
    if (_984 > 0) 
    goto _jump1720;
    fail_assertion("non-positive loop bound");
    _jump1720:;
    // Computing bound for o
    _983.d1 = _970.d1;
    if (_970.d1 > 0) 
    goto _jump1721;
    fail_assertion("non-positive loop bound");
    _jump1721:;
    // Computing total size of heap memory to allocate
    int64_t _985 = 1;
    _985 *= _984;
    _985 *= _970.d1;
    _985 *= sizeof(_a1__a2_e);
    _983.data = jpl_alloc(_985);
    int64_t _986 = 0; // o
    int64_t _987 = 0; // n
    _jump1722:; // Begin body of loop
    _a1__a2_e _988;
    // Computing bound for p
    int64_t _989;
    // Computing bound for p
    int64_t _990 = 384;
    if (_990 > 0) 
    goto _jump1723;
    fail_assertion("non-positive loop bound");
    _jump1723:;
    // Computing bound for q
    int64_t _991 = _986 + _987;
    if (_991 > 0) 
    goto _jump1724;
    fail_assertion("non-positive loop bound");
    _jump1724:;
    // Computing bound for r
    int64_t _992 = 529;
    if (_992 > 0) 
    goto _jump1725;
    fail_assertion("non-positive loop bound");
    _jump1725:;
    _989 = 0;
    int64_t _993 = 0; // r
    int64_t _994 = 0; // q
    int64_t _995 = 0; // p
    _jump1726:; // Begin body of loop
    _989 += _993;
    _993++;
    if (_993 < _992)
    goto _jump1726;
    _993 = 0;
    _994++;
    if (_994 < _991)
    goto _jump1726;
    _994 = 0;
    _995++;
    if (_995 < _990)
    goto _jump1726;
    // End body of loop
    _988.d0 = _989;
    if (_989 > 0) 
    goto _jump1727;
    fail_assertion("non-positive loop bound");
    _jump1727:;
    // Computing total size of heap memory to allocate
    int64_t _996 = 1;
    _996 *= _989;
    _996 *= sizeof(_a2_e);
    _988.data = jpl_alloc(_996);
    int64_t _997 = 0; // p
    _jump1728:; // Begin body of loop
    _a2_e _998;
    // Computing bound for q
    int64_t _999;
    // Computing bound for q
    bool _1000 = true;
    int64_t _1001;
    if (!_1000)
    goto _jump1729;
    _1001 = _513.d1;
    goto _jump1730;
    _jump1729:;
    _1001 = _987;
    _jump1730:;
    if (_1001 > 0) 
    goto _jump1731;
    fail_assertion("non-positive loop bound");
    _jump1731:;
    // Computing bound for r
    if (_513.d0 > 0) 
    goto _jump1732;
    fail_assertion("non-positive loop bound");
    _jump1732:;
    _999 = 0;
    int64_t _1002 = 0; // r
    int64_t _1003 = 0; // q
    _jump1733:; // Begin body of loop
    _999 += _970.d0;
    _1002++;
    if (_1002 < _513.d0)
    goto _jump1733;
    _1002 = 0;
    _1003++;
    if (_1003 < _1001)
    goto _jump1733;
    // End body of loop
    _998.d0 = _999;
    if (_999 > 0) 
    goto _jump1734;
    fail_assertion("non-positive loop bound");
    _jump1734:;
    // Computing bound for r
    _a3_int64_t _1004;
    // Computing bound for q
    _1004.d0 = _513.d1;
    if (_513.d1 > 0) 
    goto _jump1735;
    fail_assertion("non-positive loop bound");
    _jump1735:;
    // Computing bound for r
    _1004.d1 = _513.d0;
    if (_513.d0 > 0) 
    goto _jump1736;
    fail_assertion("non-positive loop bound");
    _jump1736:;
    // Computing bound for s
    int64_t _1005 = 957;
    _1004.d2 = _1005;
    if (_1005 > 0) 
    goto _jump1737;
    fail_assertion("non-positive loop bound");
    _jump1737:;
    // Computing total size of heap memory to allocate
    int64_t _1006 = 1;
    _1006 *= _513.d1;
    _1006 *= _513.d0;
    _1006 *= _1005;
    _1006 *= sizeof(int64_t);
    _1004.data = jpl_alloc(_1006);
    int64_t _1007 = 0; // s
    int64_t _1008 = 0; // r
    int64_t _1009 = 0; // q
    _jump1738:; // Begin body of loop
    int64_t _1010 = 0;
    _1010 *= _1004.d0;
    _1010 += _1009;
    _1010 *= _1004.d1;
    _1010 += _1008;
    _1010 *= _1004.d2;
    _1010 += _1007;
    _1004.data[_1010] = _986;
    _1007++;
    if (_1007 < _1005)
    goto _jump1738;
    _1007 = 0;
    _1008++;
    if (_1008 < _513.d0)
    goto _jump1738;
    _1008 = 0;
    _1009++;
    if (_1009 < _513.d1)
    goto _jump1738;
    // End body of loop
    int64_t _1011 = 562;
    int64_t _1012 = _1011 / _970.d0;
    int64_t _1013 = -_970.d0;
    if (_1012 >= 0)
    goto _jump1739;
    fail_assertion("negative array index");
    _jump1739:;
    if (_1012 < _1004.d0)
    goto _jump1740;
    fail_assertion("index too large");
    _jump1740:;
    if (_1013 >= 0)
    goto _jump1741;
    fail_assertion("negative array index");
    _jump1741:;
    if (_1013 < _1004.d1)
    goto _jump1742;
    fail_assertion("index too large");
    _jump1742:;
    if (_997 >= 0)
    goto _jump1743;
    fail_assertion("negative array index");
    _jump1743:;
    if (_997 < _1004.d2)
    goto _jump1744;
    fail_assertion("index too large");
    _jump1744:;
    int64_t _1014 = 0;
    _1014 *= _1004.d0;
    _1014 += _1012;
    _1014 *= _1004.d1;
    _1014 += _1013;
    _1014 *= _1004.d2;
    _1014 += _997;
    int64_t _1015 = _1004.data[_1014];
    _998.d1 = _1015;
    if (_1015 > 0) 
    goto _jump1745;
    fail_assertion("non-positive loop bound");
    _jump1745:;
    // Computing total size of heap memory to allocate
    int64_t _1016 = 1;
    _1016 *= _999;
    _1016 *= _1015;
    _1016 *= sizeof(e);
    _998.data = jpl_alloc(_1016);
    int64_t _1017 = 0; // r
    int64_t _1018 = 0; // q
    _jump1746:; // Begin body of loop
    double _1019 = 59.0;
    double _1020 = -_1019;
    int64_t _1021;
    // Computing bound for s
    if (_997 > 0) 
    goto _jump1747;
    fail_assertion("non-positive loop bound");
    _jump1747:;
    _1021 = 0;
    int64_t _1022 = 0; // s
    _jump1748:; // Begin body of loop
    _1021 += _997;
    _1022++;
    if (_1022 < _997)
    goto _jump1748;
    // End body of loop
    bool _1023 = false;
    e _1024 = { _1020, _1021, _1023 };
    int64_t _1025 = 0;
    _1025 *= _998.d0;
    _1025 += _1018;
    _1025 *= _998.d1;
    _1025 += _1017;
    _998.data[_1025] = _1024;
    _1017++;
    if (_1017 < _1015)
    goto _jump1746;
    _1017 = 0;
    _1018++;
    if (_1018 < _999)
    goto _jump1746;
    // End body of loop
    int64_t _1026 = 0;
    _1026 *= _988.d0;
    _1026 += _997;
    _988.data[_1026] = _998;
    _997++;
    if (_997 < _989)
    goto _jump1728;
    // End body of loop
    int64_t _1027 = 0;
    _1027 *= _983.d0;
    _1027 += _987;
    _1027 *= _983.d1;
    _1027 += _986;
    _983.data[_1027] = _988;
    _986++;
    if (_986 < _970.d1)
    goto _jump1722;
    _986 = 0;
    _987++;
    if (_987 < _984)
    goto _jump1722;
    // End body of loop
    _a2__a2_int64_t _1028;
    // Computing bound for n
    int64_t _1029 = 672;
    _1028.d0 = _1029;
    if (_1029 > 0) 
    goto _jump1749;
    fail_assertion("non-positive loop bound");
    _jump1749:;
    // Computing bound for o
    _1028.d1 = _970.d1;
    if (_970.d1 > 0) 
    goto _jump1750;
    fail_assertion("non-positive loop bound");
    _jump1750:;
    // Computing total size of heap memory to allocate
    int64_t _1030 = 1;
    _1030 *= _1029;
    _1030 *= _970.d1;
    _1030 *= sizeof(_a2_int64_t);
    _1028.data = jpl_alloc(_1030);
    int64_t _1031 = 0; // o
    int64_t _1032 = 0; // n
    _jump1751:; // Begin body of loop
    _a2_int64_t _1033;
    if (!_0)
    goto _jump1752;
    _a2_int64_t _1034;
    // Computing bound for p
    _1034.d0 = _513.d0;
    if (_513.d0 > 0) 
    goto _jump1753;
    fail_assertion("non-positive loop bound");
    _jump1753:;
    // Computing bound for q
    _1034.d1 = _513.d0;
    if (_513.d0 > 0) 
    goto _jump1754;
    fail_assertion("non-positive loop bound");
    _jump1754:;
    // Computing total size of heap memory to allocate
    int64_t _1035 = 1;
    _1035 *= _513.d0;
    _1035 *= _513.d0;
    _1035 *= sizeof(int64_t);
    _1034.data = jpl_alloc(_1035);
    int64_t _1036 = 0; // q
    int64_t _1037 = 0; // p
    _jump1755:; // Begin body of loop
    int64_t _1038 = 0;
    _1038 *= _1034.d0;
    _1038 += _1037;
    _1038 *= _1034.d1;
    _1038 += _1036;
    _1034.data[_1038] = _970.d0;
    _1036++;
    if (_1036 < _513.d0)
    goto _jump1755;
    _1036 = 0;
    _1037++;
    if (_1037 < _513.d0)
    goto _jump1755;
    // End body of loop
    _1033 = _1034;
    goto _jump1756;
    _jump1752:;
    _a2_int64_t _1039;
    // Computing bound for p
    _1039.d0 = _1031;
    if (_1031 > 0) 
    goto _jump1757;
    fail_assertion("non-positive loop bound");
    _jump1757:;
    // Computing bound for q
    _1039.d1 = _1032;
    if (_1032 > 0) 
    goto _jump1758;
    fail_assertion("non-positive loop bound");
    _jump1758:;
    // Computing total size of heap memory to allocate
    int64_t _1040 = 1;
    _1040 *= _1031;
    _1040 *= _1032;
    _1040 *= sizeof(int64_t);
    _1039.data = jpl_alloc(_1040);
    int64_t _1041 = 0; // q
    int64_t _1042 = 0; // p
    _jump1759:; // Begin body of loop
    int64_t _1043 = 0;
    _1043 *= _1039.d0;
    _1043 += _1042;
    _1043 *= _1039.d1;
    _1043 += _1041;
    _1039.data[_1043] = _1031;
    _1041++;
    if (_1041 < _1032)
    goto _jump1759;
    _1041 = 0;
    _1042++;
    if (_1042 < _1031)
    goto _jump1759;
    // End body of loop
    _1033 = _1039;
    _jump1756:;
    int64_t _1044 = 0;
    _1044 *= _1028.d0;
    _1044 += _1032;
    _1044 *= _1028.d1;
    _1044 += _1031;
    _1028.data[_1044] = _1033;
    _1031++;
    if (_1031 < _970.d1)
    goto _jump1751;
    _1031 = 0;
    _1032++;
    if (_1032 < _1029)
    goto _jump1751;
    // End body of loop
    int64_t _1045;
    if (!_333)
    goto _jump1760;
    _1045 = _513.d1;
    goto _jump1761;
    _jump1760:;
    _1045 = _970.d0;
    _jump1761:;
    if (_1045 >= 0)
    goto _jump1762;
    fail_assertion("negative array index");
    _jump1762:;
    if (_1045 < _1028.d0)
    goto _jump1763;
    fail_assertion("index too large");
    _jump1763:;
    if (_513.d2 >= 0)
    goto _jump1764;
    fail_assertion("negative array index");
    _jump1764:;
    if (_513.d2 < _1028.d1)
    goto _jump1765;
    fail_assertion("index too large");
    _jump1765:;
    int64_t _1046 = 0;
    _1046 *= _1028.d0;
    _1046 += _1045;
    _1046 *= _1028.d1;
    _1046 += _513.d2;
    _a2_int64_t _1047 = _1028.data[_1046];
    _a1_int64_t _1048;
    // Computing bound for n
    _a1_int64_t _1049;
    _1049.d0 = 2;
    _1049.data = jpl_alloc(sizeof(int64_t) * 2);
    _1049.data[0] = _513.d0;
    _1049.data[1] = _513.d1;
    if (_513.d2 >= 0)
    goto _jump1766;
    fail_assertion("negative array index");
    _jump1766:;
    if (_513.d2 < _1049.d0)
    goto _jump1767;
    fail_assertion("index too large");
    _jump1767:;
    int64_t _1050 = 0;
    _1050 *= _1049.d0;
    _1050 += _513.d2;
    int64_t _1051 = _1049.data[_1050];
    _1048.d0 = _1051;
    if (_1051 > 0) 
    goto _jump1768;
    fail_assertion("non-positive loop bound");
    _jump1768:;
    // Computing total size of heap memory to allocate
    int64_t _1052 = 1;
    _1052 *= _1051;
    _1052 *= sizeof(int64_t);
    _1048.data = jpl_alloc(_1052);
    int64_t _1053 = 0; // n
    _jump1769:; // Begin body of loop
    int64_t _1054 = 0;
    _1054 *= _1048.d0;
    _1054 += _1053;
    _1048.data[_1054] = _970.d0;
    _1053++;
    if (_1053 < _1051)
    goto _jump1769;
    // End body of loop
    int64_t _1055 = 296;
    if (_1055 >= 0)
    goto _jump1770;
    fail_assertion("negative array index");
    _jump1770:;
    if (_1055 < _1048.d0)
    goto _jump1771;
    fail_assertion("index too large");
    _jump1771:;
    int64_t _1056 = 0;
    _1056 *= _1048.d0;
    _1056 += _1055;
    int64_t _1057 = _1048.data[_1056];
    if (_970.d1 >= 0)
    goto _jump1772;
    fail_assertion("negative array index");
    _jump1772:;
    if (_970.d1 < _1047.d0)
    goto _jump1773;
    fail_assertion("index too large");
    _jump1773:;
    if (_1057 >= 0)
    goto _jump1774;
    fail_assertion("negative array index");
    _jump1774:;
    if (_1057 < _1047.d1)
    goto _jump1775;
    fail_assertion("index too large");
    _jump1775:;
    int64_t _1058 = 0;
    _1058 *= _1047.d0;
    _1058 += _970.d1;
    _1058 *= _1047.d1;
    _1058 += _1057;
    int64_t _1059 = _1047.data[_1058];
    if (_1059 >= 0)
    goto _jump1776;
    fail_assertion("negative array index");
    _jump1776:;
    if (_1059 < _983.d0)
    goto _jump1777;
    fail_assertion("index too large");
    _jump1777:;
    if (_513.d0 >= 0)
    goto _jump1778;
    fail_assertion("negative array index");
    _jump1778:;
    if (_513.d0 < _983.d1)
    goto _jump1779;
    fail_assertion("index too large");
    _jump1779:;
    int64_t _1060 = 0;
    _1060 *= _983.d0;
    _1060 += _1059;
    _1060 *= _983.d1;
    _1060 += _513.d0;
    _a1__a2_e _1061 = _983.data[_1060];
    e _1062 = f(_513.d0, _971, _1061);
    double _1063 = 98.0;
    bool _1064 = false;
    e _1065;
    if (!_1064)
    goto _jump1780;
    _1065 = _1062;
    goto _jump1781;
    _jump1780:;
    double _1066 = 52.0;
    double _1067 = 88.0;
    bool _1068 = _1066 < _1067;
    e _1069;
    if (!_1068)
    goto _jump1782;
    bool _1070 = true;
    _a3_e _1071;
    if (!_1070)
    goto _jump1783;
    _a3_e _1072;
    // Computing bound for p
    _1072.d0 = _970.d1;
    if (_970.d1 > 0) 
    goto _jump1784;
    fail_assertion("non-positive loop bound");
    _jump1784:;
    // Computing bound for q
    _1072.d1 = _513.d2;
    if (_513.d2 > 0) 
    goto _jump1785;
    fail_assertion("non-positive loop bound");
    _jump1785:;
    // Computing bound for r
    _1072.d2 = _513.d0;
    if (_513.d0 > 0) 
    goto _jump1786;
    fail_assertion("non-positive loop bound");
    _jump1786:;
    // Computing total size of heap memory to allocate
    int64_t _1073 = 1;
    _1073 *= _970.d1;
    _1073 *= _513.d2;
    _1073 *= _513.d0;
    _1073 *= sizeof(e);
    _1072.data = jpl_alloc(_1073);
    int64_t _1074 = 0; // r
    int64_t _1075 = 0; // q
    int64_t _1076 = 0; // p
    _jump1787:; // Begin body of loop
    int64_t _1077 = 0;
    _1077 *= _1072.d0;
    _1077 += _1076;
    _1077 *= _1072.d1;
    _1077 += _1075;
    _1077 *= _1072.d2;
    _1077 += _1074;
    _1072.data[_1077] = _1062;
    _1074++;
    if (_1074 < _513.d0)
    goto _jump1787;
    _1074 = 0;
    _1075++;
    if (_1075 < _513.d2)
    goto _jump1787;
    _1075 = 0;
    _1076++;
    if (_1076 < _970.d1)
    goto _jump1787;
    // End body of loop
    _1071 = _1072;
    goto _jump1788;
    _jump1783:;
    _a3_e _1078;
    // Computing bound for p
    _1078.d0 = _970.d1;
    if (_970.d1 > 0) 
    goto _jump1789;
    fail_assertion("non-positive loop bound");
    _jump1789:;
    // Computing bound for q
    int64_t _1079 = 3;
    _1078.d1 = _1079;
    if (_1079 > 0) 
    goto _jump1790;
    fail_assertion("non-positive loop bound");
    _jump1790:;
    // Computing bound for r
    int64_t _1080 = 100;
    _1078.d2 = _1080;
    if (_1080 > 0) 
    goto _jump1791;
    fail_assertion("non-positive loop bound");
    _jump1791:;
    // Computing total size of heap memory to allocate
    int64_t _1081 = 1;
    _1081 *= _970.d1;
    _1081 *= _1079;
    _1081 *= _1080;
    _1081 *= sizeof(e);
    _1078.data = jpl_alloc(_1081);
    int64_t _1082 = 0; // r
    int64_t _1083 = 0; // q
    int64_t _1084 = 0; // p
    _jump1792:; // Begin body of loop
    int64_t _1085 = 0;
    _1085 *= _1078.d0;
    _1085 += _1084;
    _1085 *= _1078.d1;
    _1085 += _1083;
    _1085 *= _1078.d2;
    _1085 += _1082;
    _1078.data[_1085] = _1062;
    _1082++;
    if (_1082 < _1080)
    goto _jump1792;
    _1082 = 0;
    _1083++;
    if (_1083 < _1079)
    goto _jump1792;
    _1083 = 0;
    _1084++;
    if (_1084 < _970.d1)
    goto _jump1792;
    // End body of loop
    _1071 = _1078;
    _jump1788:;
    int64_t _1086 = 736;
    bool _1087 = _1086 == _513.d2;
    int64_t _1088;
    if (!_1087)
    goto _jump1793;
    int64_t _1089;
    // Computing bound for p
    if (_513.d2 > 0) 
    goto _jump1794;
    fail_assertion("non-positive loop bound");
    _jump1794:;
    // Computing bound for q
    if (_970.d0 > 0) 
    goto _jump1795;
    fail_assertion("non-positive loop bound");
    _jump1795:;
    _1089 = 0;
    int64_t _1090 = 0; // q
    int64_t _1091 = 0; // p
    _jump1796:; // Begin body of loop
    _1089 += _513.d2;
    _1090++;
    if (_1090 < _970.d0)
    goto _jump1796;
    _1090 = 0;
    _1091++;
    if (_1091 < _513.d2)
    goto _jump1796;
    // End body of loop
    _1088 = _1089;
    goto _jump1797;
    _jump1793:;
    int64_t _1092 = 154;
    _1088 = _1092;
    _jump1797:;
    int64_t _1093 = 844;
    if (_1088 >= 0)
    goto _jump1798;
    fail_assertion("negative array index");
    _jump1798:;
    if (_1088 < _1071.d0)
    goto _jump1799;
    fail_assertion("index too large");
    _jump1799:;
    if (_970.d0 >= 0)
    goto _jump1800;
    fail_assertion("negative array index");
    _jump1800:;
    if (_970.d0 < _1071.d1)
    goto _jump1801;
    fail_assertion("index too large");
    _jump1801:;
    if (_1093 >= 0)
    goto _jump1802;
    fail_assertion("negative array index");
    _jump1802:;
    if (_1093 < _1071.d2)
    goto _jump1803;
    fail_assertion("index too large");
    _jump1803:;
    int64_t _1094 = 0;
    _1094 *= _1071.d0;
    _1094 += _1088;
    _1094 *= _1071.d1;
    _1094 += _970.d0;
    _1094 *= _1071.d2;
    _1094 += _1093;
    e _1095 = _1071.data[_1094];
    _1069 = _1095;
    goto _jump1804;
    _jump1782:;
    double _1096 = 89.0;
    e _1097 = { _1096, _970.d1, _0 };
    _a1_e _1098;
    _1098.d0 = 2;
    _1098.data = jpl_alloc(sizeof(e) * 2);
    _1098.data[0] = _1062;
    _1098.data[1] = _1097;
    int64_t _1099 = 377;
    int64_t _1100 = 314;
    bool _1101 = _1099 > _1100;
    int64_t _1102;
    if (!_1101)
    goto _jump1805;
    int64_t _1103;
    if (!_0)
    goto _jump1806;
    _1103 = _513.d1;
    goto _jump1807;
    _jump1806:;
    _1103 = _970.d1;
    _jump1807:;
    _1102 = _1103;
    goto _jump1808;
    _jump1805:;
    int64_t _1104;
    if (!_0)
    goto _jump1809;
    _1104 = _970.d0;
    goto _jump1810;
    _jump1809:;
    _1104 = _970.d1;
    _jump1810:;
    _1102 = _1104;
    _jump1808:;
    if (_1102 >= 0)
    goto _jump1811;
    fail_assertion("negative array index");
    _jump1811:;
    if (_1102 < _1098.d0)
    goto _jump1812;
    fail_assertion("index too large");
    _jump1812:;
    int64_t _1105 = 0;
    _1105 *= _1098.d0;
    _1105 += _1102;
    e _1106 = _1098.data[_1105];
    _1069 = _1106;
    _jump1804:;
    _1065 = _1069;
    _jump1781:;
    double _1107 = _1065.a;
    _a2_rgba _1108;
    // Computing bound for p
    bool _1109 = false;
    int64_t _1110;
    if (!_1109)
    goto _jump1813;
    _1110 = _513.d1;
    goto _jump1814;
    _jump1813:;
    _1110 = _513.d2;
    _jump1814:;
    int64_t _1111 = -_1110;
    _1108.d0 = _1111;
    if (_1111 > 0) 
    goto _jump1815;
    fail_assertion("non-positive loop bound");
    _jump1815:;
    // Computing bound for q
    _1108.d1 = _970.d0;
    if (_970.d0 > 0) 
    goto _jump1816;
    fail_assertion("non-positive loop bound");
    _jump1816:;
    // Computing total size of heap memory to allocate
    int64_t _1112 = 1;
    _1112 *= _1111;
    _1112 *= _970.d0;
    _1112 *= sizeof(rgba);
    _1108.data = jpl_alloc(_1112);
    int64_t _1113 = 0; // q
    int64_t _1114 = 0; // p
    _jump1817:; // Begin body of loop
    _a2_rgba _1115;
    if (!_333)
    goto _jump1818;
    _1115 = _970;
    goto _jump1819;
    _jump1818:;
    _1115 = _970;
    _jump1819:;
    if (_513.d2 >= 0)
    goto _jump1820;
    fail_assertion("negative array index");
    _jump1820:;
    if (_513.d2 < _1115.d0)
    goto _jump1821;
    fail_assertion("index too large");
    _jump1821:;
    if (_970.d0 >= 0)
    goto _jump1822;
    fail_assertion("negative array index");
    _jump1822:;
    if (_970.d0 < _1115.d1)
    goto _jump1823;
    fail_assertion("index too large");
    _jump1823:;
    int64_t _1116 = 0;
    _1116 *= _1115.d0;
    _1116 += _513.d2;
    _1116 *= _1115.d1;
    _1116 += _970.d0;
    rgba _1117 = _1115.data[_1116];
    int64_t _1118 = 0;
    _1118 *= _1108.d0;
    _1118 += _1114;
    _1118 *= _1108.d1;
    _1118 += _1113;
    _1108.data[_1118] = _1117;
    _1113++;
    if (_1113 < _970.d0)
    goto _jump1817;
    _1113 = 0;
    _1114++;
    if (_1114 < _1111)
    goto _jump1817;
    // End body of loop
    int64_t _1119 = 53;
    if (_1119 >= 0)
    goto _jump1824;
    fail_assertion("negative array index");
    _jump1824:;
    if (_1119 < _1108.d0)
    goto _jump1825;
    fail_assertion("index too large");
    _jump1825:;
    if (_513.d1 >= 0)
    goto _jump1826;
    fail_assertion("negative array index");
    _jump1826:;
    if (_513.d1 < _1108.d1)
    goto _jump1827;
    fail_assertion("index too large");
    _jump1827:;
    int64_t _1120 = 0;
    _1120 *= _1108.d0;
    _1120 += _1119;
    _1120 *= _1108.d1;
    _1120 += _513.d1;
    rgba _1121 = _1108.data[_1120];
    double _1122 = _1121.a;
    double _1123 = -_1122;
    bool _1124 = false;
    _a3__a2_double _1125;
    if (!_1124)
    goto _jump1828;
    _a3__a2_double _1126;
    if (!_0)
    goto _jump1829;
    _a3__a2_double _1127;
    if (!_333)
    goto _jump1830;
    _a3__a2_double _1128;
    // Computing bound for p
    _1128.d0 = _970.d0;
    if (_970.d0 > 0) 
    goto _jump1831;
    fail_assertion("non-positive loop bound");
    _jump1831:;
    // Computing bound for q
    int64_t _1129 = 549;
    _1128.d1 = _1129;
    if (_1129 > 0) 
    goto _jump1832;
    fail_assertion("non-positive loop bound");
    _jump1832:;
    // Computing bound for r
    _1128.d2 = _513.d1;
    if (_513.d1 > 0) 
    goto _jump1833;
    fail_assertion("non-positive loop bound");
    _jump1833:;
    // Computing total size of heap memory to allocate
    int64_t _1130 = 1;
    _1130 *= _970.d0;
    _1130 *= _1129;
    _1130 *= _513.d1;
    _1130 *= sizeof(_a2_double);
    _1128.data = jpl_alloc(_1130);
    int64_t _1131 = 0; // r
    int64_t _1132 = 0; // q
    int64_t _1133 = 0; // p
    _jump1834:; // Begin body of loop
    _a2_double _1134 = a();
    int64_t _1135 = 0;
    _1135 *= _1128.d0;
    _1135 += _1133;
    _1135 *= _1128.d1;
    _1135 += _1132;
    _1135 *= _1128.d2;
    _1135 += _1131;
    _1128.data[_1135] = _1134;
    _1131++;
    if (_1131 < _513.d1)
    goto _jump1834;
    _1131 = 0;
    _1132++;
    if (_1132 < _1129)
    goto _jump1834;
    _1132 = 0;
    _1133++;
    if (_1133 < _970.d0)
    goto _jump1834;
    // End body of loop
    _1127 = _1128;
    goto _jump1835;
    _jump1830:;
    _a3__a2_double _1136;
    // Computing bound for p
    _1136.d0 = _970.d0;
    if (_970.d0 > 0) 
    goto _jump1836;
    fail_assertion("non-positive loop bound");
    _jump1836:;
    // Computing bound for q
    _1136.d1 = _513.d2;
    if (_513.d2 > 0) 
    goto _jump1837;
    fail_assertion("non-positive loop bound");
    _jump1837:;
    // Computing bound for r
    _1136.d2 = _513.d1;
    if (_513.d1 > 0) 
    goto _jump1838;
    fail_assertion("non-positive loop bound");
    _jump1838:;
    // Computing total size of heap memory to allocate
    int64_t _1137 = 1;
    _1137 *= _970.d0;
    _1137 *= _513.d2;
    _1137 *= _513.d1;
    _1137 *= sizeof(_a2_double);
    _1136.data = jpl_alloc(_1137);
    int64_t _1138 = 0; // r
    int64_t _1139 = 0; // q
    int64_t _1140 = 0; // p
    _jump1839:; // Begin body of loop
    _a2_double _1141 = a();
    int64_t _1142 = 0;
    _1142 *= _1136.d0;
    _1142 += _1140;
    _1142 *= _1136.d1;
    _1142 += _1139;
    _1142 *= _1136.d2;
    _1142 += _1138;
    _1136.data[_1142] = _1141;
    _1138++;
    if (_1138 < _513.d1)
    goto _jump1839;
    _1138 = 0;
    _1139++;
    if (_1139 < _513.d2)
    goto _jump1839;
    _1139 = 0;
    _1140++;
    if (_1140 < _970.d0)
    goto _jump1839;
    // End body of loop
    _1127 = _1136;
    _jump1835:;
    _1126 = _1127;
    goto _jump1840;
    _jump1829:;
    _a3__a2_double _1143;
    // Computing bound for p
    _1143.d0 = _513.d2;
    if (_513.d2 > 0) 
    goto _jump1841;
    fail_assertion("non-positive loop bound");
    _jump1841:;
    // Computing bound for q
    _1143.d1 = _970.d0;
    if (_970.d0 > 0) 
    goto _jump1842;
    fail_assertion("non-positive loop bound");
    _jump1842:;
    // Computing bound for r
    _1143.d2 = _513.d1;
    if (_513.d1 > 0) 
    goto _jump1843;
    fail_assertion("non-positive loop bound");
    _jump1843:;
    // Computing total size of heap memory to allocate
    int64_t _1144 = 1;
    _1144 *= _513.d2;
    _1144 *= _970.d0;
    _1144 *= _513.d1;
    _1144 *= sizeof(_a2_double);
    _1143.data = jpl_alloc(_1144);
    int64_t _1145 = 0; // r
    int64_t _1146 = 0; // q
    int64_t _1147 = 0; // p
    _jump1844:; // Begin body of loop
    _a2_double _1148;
    // Computing bound for s
    int64_t _1149 = 236;
    _1148.d0 = _1149;
    if (_1149 > 0) 
    goto _jump1845;
    fail_assertion("non-positive loop bound");
    _jump1845:;
    // Computing bound for t
    _1148.d1 = _970.d0;
    if (_970.d0 > 0) 
    goto _jump1846;
    fail_assertion("non-positive loop bound");
    _jump1846:;
    // Computing total size of heap memory to allocate
    int64_t _1150 = 1;
    _1150 *= _1149;
    _1150 *= _970.d0;
    _1150 *= sizeof(double);
    _1148.data = jpl_alloc(_1150);
    int64_t _1151 = 0; // t
    int64_t _1152 = 0; // s
    _jump1847:; // Begin body of loop
    double _1153 = 27.0;
    int64_t _1154 = 0;
    _1154 *= _1148.d0;
    _1154 += _1152;
    _1154 *= _1148.d1;
    _1154 += _1151;
    _1148.data[_1154] = _1153;
    _1151++;
    if (_1151 < _970.d0)
    goto _jump1847;
    _1151 = 0;
    _1152++;
    if (_1152 < _1149)
    goto _jump1847;
    // End body of loop
    int64_t _1155 = 0;
    _1155 *= _1143.d0;
    _1155 += _1147;
    _1155 *= _1143.d1;
    _1155 += _1146;
    _1155 *= _1143.d2;
    _1155 += _1145;
    _1143.data[_1155] = _1148;
    _1145++;
    if (_1145 < _513.d1)
    goto _jump1844;
    _1145 = 0;
    _1146++;
    if (_1146 < _970.d0)
    goto _jump1844;
    _1146 = 0;
    _1147++;
    if (_1147 < _513.d2)
    goto _jump1844;
    // End body of loop
    _1126 = _1143;
    _jump1840:;
    _1125 = _1126;
    goto _jump1848;
    _jump1828:;
    _a3__a2_double _1156;
    // Computing bound for p
    int64_t _1157 = _513.d0 / _970.d0;
    int64_t _1158 = _513.d1 - _1157;
    _1156.d0 = _1158;
    if (_1158 > 0) 
    goto _jump1849;
    fail_assertion("non-positive loop bound");
    _jump1849:;
    // Computing bound for q
    _1156.d1 = _513.d1;
    if (_513.d1 > 0) 
    goto _jump1850;
    fail_assertion("non-positive loop bound");
    _jump1850:;
    // Computing bound for r
    _a1_int64_t _1159;
    // Computing bound for p
    int64_t _1160 = 341;
    _1159.d0 = _1160;
    if (_1160 > 0) 
    goto _jump1851;
    fail_assertion("non-positive loop bound");
    _jump1851:;
    // Computing total size of heap memory to allocate
    int64_t _1161 = 1;
    _1161 *= _1160;
    _1161 *= sizeof(int64_t);
    _1159.data = jpl_alloc(_1161);
    int64_t _1162 = 0; // p
    _jump1852:; // Begin body of loop
    int64_t _1163 = 0;
    _1163 *= _1159.d0;
    _1163 += _1162;
    _1159.data[_1163] = _513.d1;
    _1162++;
    if (_1162 < _1160)
    goto _jump1852;
    // End body of loop
    if (_513.d2 >= 0)
    goto _jump1853;
    fail_assertion("negative array index");
    _jump1853:;
    if (_513.d2 < _1159.d0)
    goto _jump1854;
    fail_assertion("index too large");
    _jump1854:;
    int64_t _1164 = 0;
    _1164 *= _1159.d0;
    _1164 += _513.d2;
    int64_t _1165 = _1159.data[_1164];
    _1156.d2 = _1165;
    if (_1165 > 0) 
    goto _jump1855;
    fail_assertion("non-positive loop bound");
    _jump1855:;
    // Computing total size of heap memory to allocate
    int64_t _1166 = 1;
    _1166 *= _1158;
    _1166 *= _513.d1;
    _1166 *= _1165;
    _1166 *= sizeof(_a2_double);
    _1156.data = jpl_alloc(_1166);
    int64_t _1167 = 0; // r
    int64_t _1168 = 0; // q
    int64_t _1169 = 0; // p
    _jump1856:; // Begin body of loop
    _a2_double _1170 = a();
    int64_t _1171 = 0;
    _1171 *= _1156.d0;
    _1171 += _1169;
    _1171 *= _1156.d1;
    _1171 += _1168;
    _1171 *= _1156.d2;
    _1171 += _1167;
    _1156.data[_1171] = _1170;
    _1167++;
    if (_1167 < _1165)
    goto _jump1856;
    _1167 = 0;
    _1168++;
    if (_1168 < _513.d1)
    goto _jump1856;
    _1168 = 0;
    _1169++;
    if (_1169 < _1158)
    goto _jump1856;
    // End body of loop
    _1125 = _1156;
    _jump1848:;
    int64_t _1172 = _1062.b;
    if (_1172 >= 0)
    goto _jump1857;
    fail_assertion("negative array index");
    _jump1857:;
    if (_1172 < _1125.d0)
    goto _jump1858;
    fail_assertion("index too large");
    _jump1858:;
    if (_513.d1 >= 0)
    goto _jump1859;
    fail_assertion("negative array index");
    _jump1859:;
    if (_513.d1 < _1125.d1)
    goto _jump1860;
    fail_assertion("index too large");
    _jump1860:;
    if (_513.d2 >= 0)
    goto _jump1861;
    fail_assertion("negative array index");
    _jump1861:;
    if (_513.d2 < _1125.d2)
    goto _jump1862;
    fail_assertion("index too large");
    _jump1862:;
    int64_t _1173 = 0;
    _1173 *= _1125.d0;
    _1173 += _1172;
    _1173 *= _1125.d1;
    _1173 += _513.d1;
    _1173 *= _1125.d2;
    _1173 += _513.d2;
    _a2_double _1174 = _1125.data[_1173];
    double _1175 = c(_1174);
    rgba _1176 = { _1063, _1107, _1123, _1175 };
    write_image(_970, "r.png");
    write_image(_970, "r.png");
    _a2_double _1177 = a();
    bool _1178 = false;
    bool _1179;
    if (!_1178)
    goto _jump1863;
    int64_t _1180 = _970.d0 - _513.d2;
    double _1181 = 47.0;
    double _1182 = -_1181;
    _a2_e _1183;
    // Computing bound for v
    int64_t _1184 = 173;
    _1183.d0 = _1184;
    if (_1184 > 0) 
    goto _jump1864;
    fail_assertion("non-positive loop bound");
    _jump1864:;
    // Computing bound for w
    _1183.d1 = _513.d2;
    if (_513.d2 > 0) 
    goto _jump1865;
    fail_assertion("non-positive loop bound");
    _jump1865:;
    // Computing total size of heap memory to allocate
    int64_t _1185 = 1;
    _1185 *= _1184;
    _1185 *= _513.d2;
    _1185 *= sizeof(e);
    _1183.data = jpl_alloc(_1185);
    int64_t _1186 = 0; // w
    int64_t _1187 = 0; // v
    _jump1866:; // Begin body of loop
    int64_t _1188 = 0;
    _1188 *= _1183.d0;
    _1188 += _1187;
    _1188 *= _1183.d1;
    _1188 += _1186;
    _1183.data[_1188] = _1062;
    _1186++;
    if (_1186 < _513.d2)
    goto _jump1866;
    _1186 = 0;
    _1187++;
    if (_1187 < _1184)
    goto _jump1866;
    // End body of loop
    _a1__a2_e _1189;
    _1189.d0 = 1;
    _1189.data = jpl_alloc(sizeof(_a2_e) * 1);
    _1189.data[0] = _1183;
    e _1190 = f(_1180, _1182, _1189);
    bool _1191 = _1190.c;
    _1179 = _1191;
    goto _jump1867;
    _jump1863:;
    _a3_double _1192;
    // Computing bound for v
    int64_t _1193;
    // Computing bound for v
    if (_1177.d0 > 0) 
    goto _jump1868;
    fail_assertion("non-positive loop bound");
    _jump1868:;
    // Computing bound for w
    if (_1177.d1 > 0) 
    goto _jump1869;
    fail_assertion("non-positive loop bound");
    _jump1869:;
    _1193 = 0;
    int64_t _1194 = 0; // w
    int64_t _1195 = 0; // v
    _jump1870:; // Begin body of loop
    _1193 += _513.d0;
    _1194++;
    if (_1194 < _1177.d1)
    goto _jump1870;
    _1194 = 0;
    _1195++;
    if (_1195 < _1177.d0)
    goto _jump1870;
    // End body of loop
    _1192.d0 = _1193;
    if (_1193 > 0) 
    goto _jump1871;
    fail_assertion("non-positive loop bound");
    _jump1871:;
    // Computing bound for w
    int64_t _1196;
    // Computing bound for v
    if (_970.d1 > 0) 
    goto _jump1872;
    fail_assertion("non-positive loop bound");
    _jump1872:;
    _1196 = 0;
    int64_t _1197 = 0; // v
    _jump1873:; // Begin body of loop
    _1196 += _513.d2;
    _1197++;
    if (_1197 < _970.d1)
    goto _jump1873;
    // End body of loop
    _1192.d1 = _1196;
    if (_1196 > 0) 
    goto _jump1874;
    fail_assertion("non-positive loop bound");
    _jump1874:;
    // Computing bound for x
    _1192.d2 = _513.d0;
    if (_513.d0 > 0) 
    goto _jump1875;
    fail_assertion("non-positive loop bound");
    _jump1875:;
    // Computing total size of heap memory to allocate
    int64_t _1198 = 1;
    _1198 *= _1193;
    _1198 *= _1196;
    _1198 *= _513.d0;
    _1198 *= sizeof(double);
    _1192.data = jpl_alloc(_1198);
    int64_t _1199 = 0; // x
    int64_t _1200 = 0; // w
    int64_t _1201 = 0; // v
    _jump1876:; // Begin body of loop
    _a2_double _1202 = a();
    double _1203 = c(_1202);
    int64_t _1204 = 0;
    _1204 *= _1192.d0;
    _1204 += _1201;
    _1204 *= _1192.d1;
    _1204 += _1200;
    _1204 *= _1192.d2;
    _1204 += _1199;
    _1192.data[_1204] = _1203;
    _1199++;
    if (_1199 < _513.d0)
    goto _jump1876;
    _1199 = 0;
    _1200++;
    if (_1200 < _1196)
    goto _jump1876;
    _1200 = 0;
    _1201++;
    if (_1201 < _1193)
    goto _jump1876;
    // End body of loop
    int64_t _1205 = -_513.d2;
    int64_t _1206;
    // Computing bound for v
    int64_t _1207 = -_1177.d0;
    if (_1207 > 0) 
    goto _jump1877;
    fail_assertion("non-positive loop bound");
    _jump1877:;
    // Computing bound for w
    if (_1177.d1 > 0) 
    goto _jump1878;
    fail_assertion("non-positive loop bound");
    _jump1878:;
    // Computing bound for x
    if (_513.d2 > 0) 
    goto _jump1879;
    fail_assertion("non-positive loop bound");
    _jump1879:;
    _1206 = 0;
    int64_t _1208 = 0; // x
    int64_t _1209 = 0; // w
    int64_t _1210 = 0; // v
    _jump1880:; // Begin body of loop
    int64_t _1211 = 17;
    int64_t _1212 = _513.d1 / _1211;
    _1206 += _1212;
    _1208++;
    if (_1208 < _513.d2)
    goto _jump1880;
    _1208 = 0;
    _1209++;
    if (_1209 < _1177.d1)
    goto _jump1880;
    _1209 = 0;
    _1210++;
    if (_1210 < _1207)
    goto _jump1880;
    // End body of loop
    if (_1205 >= 0)
    goto _jump1881;
    fail_assertion("negative array index");
    _jump1881:;
    if (_1205 < _1192.d0)
    goto _jump1882;
    fail_assertion("index too large");
    _jump1882:;
    if (_1177.d0 >= 0)
    goto _jump1883;
    fail_assertion("negative array index");
    _jump1883:;
    if (_1177.d0 < _1192.d1)
    goto _jump1884;
    fail_assertion("index too large");
    _jump1884:;
    if (_1206 >= 0)
    goto _jump1885;
    fail_assertion("negative array index");
    _jump1885:;
    if (_1206 < _1192.d2)
    goto _jump1886;
    fail_assertion("index too large");
    _jump1886:;
    int64_t _1213 = 0;
    _1213 *= _1192.d0;
    _1213 += _1205;
    _1213 *= _1192.d1;
    _1213 += _1177.d0;
    _1213 *= _1192.d2;
    _1213 += _1206;
    double _1214 = _1192.data[_1213];
    double _1215 = 65.0;
    bool _1216 = _1214 == _1215;
    _1179 = _1216;
    _jump1867:;
    rgba _1217;
    if (!_1179)
    goto _jump1887;
    bool _1218 = _333 == _333;
    bool _1219 = _1218 == _0;
    bool _1220;
    if (!_1219)
    goto _jump1888;
    bool _1221 = _0;
    if (0 != _0)
    goto _jump1889;
    _1221 = _0;
    _jump1889:;
    u _1222 = { _1221, _1062 };
    bool _1223 = _1222.a;
    _1220 = _1223;
    goto _jump1890;
    _jump1888:;
    _1220 = _0;
    _jump1890:;
    rgba _1224;
    if (!_1220)
    goto _jump1891;
    _a2__a1_rgba _1225;
    // Computing bound for v
    _1225.d0 = _513.d2;
    if (_513.d2 > 0) 
    goto _jump1892;
    fail_assertion("non-positive loop bound");
    _jump1892:;
    // Computing bound for w
    _1225.d1 = _513.d0;
    if (_513.d0 > 0) 
    goto _jump1893;
    fail_assertion("non-positive loop bound");
    _jump1893:;
    // Computing total size of heap memory to allocate
    int64_t _1226 = 1;
    _1226 *= _513.d2;
    _1226 *= _513.d0;
    _1226 *= sizeof(_a1_rgba);
    _1225.data = jpl_alloc(_1226);
    int64_t _1227 = 0; // w
    int64_t _1228 = 0; // v
    _jump1894:; // Begin body of loop
    _a1_rgba _1229;
    // Computing bound for x
    int64_t _1230 = 969;
    _1229.d0 = _1230;
    if (_1230 > 0) 
    goto _jump1895;
    fail_assertion("non-positive loop bound");
    _jump1895:;
    // Computing total size of heap memory to allocate
    int64_t _1231 = 1;
    _1231 *= _1230;
    _1231 *= sizeof(rgba);
    _1229.data = jpl_alloc(_1231);
    int64_t _1232 = 0; // x
    _jump1896:; // Begin body of loop
    int64_t _1233 = 0;
    _1233 *= _1229.d0;
    _1233 += _1232;
    _1229.data[_1233] = _1176;
    _1232++;
    if (_1232 < _1230)
    goto _jump1896;
    // End body of loop
    int64_t _1234 = 0;
    _1234 *= _1225.d0;
    _1234 += _1228;
    _1234 *= _1225.d1;
    _1234 += _1227;
    _1225.data[_1234] = _1229;
    _1227++;
    if (_1227 < _513.d0)
    goto _jump1894;
    _1227 = 0;
    _1228++;
    if (_1228 < _513.d2)
    goto _jump1894;
    // End body of loop
    int64_t _1235 = 655;
    int64_t _1236;
    if (!_0)
    goto _jump1897;
    _1236 = _970.d0;
    goto _jump1898;
    _jump1897:;
    _1236 = _513.d2;
    _jump1898:;
    int64_t _1237 = _1236 % _970.d0;
    if (_1235 >= 0)
    goto _jump1899;
    fail_assertion("negative array index");
    _jump1899:;
    if (_1235 < _1225.d0)
    goto _jump1900;
    fail_assertion("index too large");
    _jump1900:;
    if (_1237 >= 0)
    goto _jump1901;
    fail_assertion("negative array index");
    _jump1901:;
    if (_1237 < _1225.d1)
    goto _jump1902;
    fail_assertion("index too large");
    _jump1902:;
    int64_t _1238 = 0;
    _1238 *= _1225.d0;
    _1238 += _1235;
    _1238 *= _1225.d1;
    _1238 += _1237;
    _a1_rgba _1239 = _1225.data[_1238];
    if (_513.d0 >= 0)
    goto _jump1903;
    fail_assertion("negative array index");
    _jump1903:;
    if (_513.d0 < _1239.d0)
    goto _jump1904;
    fail_assertion("index too large");
    _jump1904:;
    int64_t _1240 = 0;
    _1240 *= _1239.d0;
    _1240 += _513.d0;
    rgba _1241 = _1239.data[_1240];
    _1224 = _1241;
    goto _jump1905;
    _jump1891:;
    double _1242 = 16.0;
    if (_513.d2 >= 0)
    goto _jump1906;
    fail_assertion("negative array index");
    _jump1906:;
    if (_513.d2 < _1177.d0)
    goto _jump1907;
    fail_assertion("index too large");
    _jump1907:;
    if (_513.d1 >= 0)
    goto _jump1908;
    fail_assertion("negative array index");
    _jump1908:;
    if (_513.d1 < _1177.d1)
    goto _jump1909;
    fail_assertion("index too large");
    _jump1909:;
    int64_t _1243 = 0;
    _1243 *= _1177.d0;
    _1243 += _513.d2;
    _1243 *= _1177.d1;
    _1243 += _513.d1;
    double _1244 = _1177.data[_1243];
    double _1245 = _1062.a;
    double _1246 = 96.0;
    rgba _1247 = { _1242, _1244, _1245, _1246 };
    rgba _1248;
    if (!_333)
    goto _jump1910;
    _1248 = _1176;
    goto _jump1911;
    _jump1910:;
    _1248 = _1176;
    _jump1911:;
    _a2_rgba _1249;
    // Computing bound for v
    int64_t _1250 = 971;
    _1249.d0 = _1250;
    if (_1250 > 0) 
    goto _jump1912;
    fail_assertion("non-positive loop bound");
    _jump1912:;
    // Computing bound for w
    _1249.d1 = _513.d2;
    if (_513.d2 > 0) 
    goto _jump1913;
    fail_assertion("non-positive loop bound");
    _jump1913:;
    // Computing total size of heap memory to allocate
    int64_t _1251 = 1;
    _1251 *= _1250;
    _1251 *= _513.d2;
    _1251 *= sizeof(rgba);
    _1249.data = jpl_alloc(_1251);
    int64_t _1252 = 0; // w
    int64_t _1253 = 0; // v
    _jump1914:; // Begin body of loop
    int64_t _1254 = 0;
    _1254 *= _1249.d0;
    _1254 += _1253;
    _1254 *= _1249.d1;
    _1254 += _1252;
    _1249.data[_1254] = _1176;
    _1252++;
    if (_1252 < _513.d2)
    goto _jump1914;
    _1252 = 0;
    _1253++;
    if (_1253 < _1250)
    goto _jump1914;
    // End body of loop
    int64_t _1255;
    // Computing bound for v
    int64_t _1256 = 911;
    if (_1256 > 0) 
    goto _jump1915;
    fail_assertion("non-positive loop bound");
    _jump1915:;
    _1255 = 0;
    int64_t _1257 = 0; // v
    _jump1916:; // Begin body of loop
    _1255 += _513.d0;
    _1257++;
    if (_1257 < _1256)
    goto _jump1916;
    // End body of loop
    int64_t _1258 = _1062.b;
    if (_1255 >= 0)
    goto _jump1917;
    fail_assertion("negative array index");
    _jump1917:;
    if (_1255 < _1249.d0)
    goto _jump1918;
    fail_assertion("index too large");
    _jump1918:;
    if (_1258 >= 0)
    goto _jump1919;
    fail_assertion("negative array index");
    _jump1919:;
    if (_1258 < _1249.d1)
    goto _jump1920;
    fail_assertion("index too large");
    _jump1920:;
    int64_t _1259 = 0;
    _1259 *= _1249.d0;
    _1259 += _1255;
    _1259 *= _1249.d1;
    _1259 += _1258;
    rgba _1260 = _1249.data[_1259];
    _a1_rgba _1261;
    _1261.d0 = 3;
    _1261.data = jpl_alloc(sizeof(rgba) * 3);
    _1261.data[0] = _1247;
    _1261.data[1] = _1248;
    _1261.data[2] = _1260;
    if (_513.d1 >= 0)
    goto _jump1921;
    fail_assertion("negative array index");
    _jump1921:;
    if (_513.d1 < _1261.d0)
    goto _jump1922;
    fail_assertion("index too large");
    _jump1922:;
    int64_t _1262 = 0;
    _1262 *= _1261.d0;
    _1262 += _513.d1;
    rgba _1263 = _1261.data[_1262];
    _1224 = _1263;
    _jump1905:;
    _1217 = _1224;
    goto _jump1923;
    _jump1887:;
    _a2_double _1264 = a();
    bool _1265 = true;
    bool _1266 = !_1265;
    bool _1268 = false;
    bool _1267 = _1268;
    if (0 == _1268)
    goto _jump1924;
    _1267 = _0;
    _jump1924:;
    bool _1269 = _1266 == _1267;
    int64_t _1270;
    if (!_1269)
    goto _jump1925;
    _1270 = _513.d2;
    goto _jump1926;
    _jump1925:;
    _1270 = _1177.d0;
    _jump1926:;
    if (_1270 >= 0)
    goto _jump1927;
    fail_assertion("negative array index");
    _jump1927:;
    if (_1270 < _1264.d0)
    goto _jump1928;
    fail_assertion("index too large");
    _jump1928:;
    if (_513.d1 >= 0)
    goto _jump1929;
    fail_assertion("negative array index");
    _jump1929:;
    if (_513.d1 < _1264.d1)
    goto _jump1930;
    fail_assertion("index too large");
    _jump1930:;
    int64_t _1271 = 0;
    _1271 *= _1264.d0;
    _1271 += _1270;
    _1271 *= _1264.d1;
    _1271 += _513.d1;
    double _1272 = _1264.data[_1271];
    bool _1273 = false;
    _a2_double _1274;
    if (!_1273)
    goto _jump1931;
    _a2_double _1275 = a();
    _1274 = _1275;
    goto _jump1932;
    _jump1931:;
    _a2_double _1276;
    // Computing bound for v
    _1276.d0 = _970.d1;
    if (_970.d1 > 0) 
    goto _jump1933;
    fail_assertion("non-positive loop bound");
    _jump1933:;
    // Computing bound for w
    _1276.d1 = _513.d0;
    if (_513.d0 > 0) 
    goto _jump1934;
    fail_assertion("non-positive loop bound");
    _jump1934:;
    // Computing total size of heap memory to allocate
    int64_t _1277 = 1;
    _1277 *= _970.d1;
    _1277 *= _513.d0;
    _1277 *= sizeof(double);
    _1276.data = jpl_alloc(_1277);
    int64_t _1278 = 0; // w
    int64_t _1279 = 0; // v
    _jump1935:; // Begin body of loop
    double _1280 = _1176.r;
    int64_t _1281 = 0;
    _1281 *= _1276.d0;
    _1281 += _1279;
    _1281 *= _1276.d1;
    _1281 += _1278;
    _1276.data[_1281] = _1280;
    _1278++;
    if (_1278 < _513.d0)
    goto _jump1935;
    _1278 = 0;
    _1279++;
    if (_1279 < _970.d1)
    goto _jump1935;
    // End body of loop
    _1274 = _1276;
    _jump1932:;
    double _1282 = c(_1274);
    bool _1283;
    if (!_333)
    goto _jump1936;
    _1283 = _333;
    goto _jump1937;
    _jump1936:;
    _1283 = _0;
    _jump1937:;
    _a2_rgba _1284;
    if (!_1283)
    goto _jump1938;
    _a2_rgba _1285;
    // Computing bound for v
    _1285.d0 = _513.d0;
    if (_513.d0 > 0) 
    goto _jump1939;
    fail_assertion("non-positive loop bound");
    _jump1939:;
    // Computing bound for w
    _1285.d1 = _1177.d1;
    if (_1177.d1 > 0) 
    goto _jump1940;
    fail_assertion("non-positive loop bound");
    _jump1940:;
    // Computing total size of heap memory to allocate
    int64_t _1286 = 1;
    _1286 *= _513.d0;
    _1286 *= _1177.d1;
    _1286 *= sizeof(rgba);
    _1285.data = jpl_alloc(_1286);
    int64_t _1287 = 0; // w
    int64_t _1288 = 0; // v
    _jump1941:; // Begin body of loop
    int64_t _1289 = 0;
    _1289 *= _1285.d0;
    _1289 += _1288;
    _1289 *= _1285.d1;
    _1289 += _1287;
    _1285.data[_1289] = _1176;
    _1287++;
    if (_1287 < _1177.d1)
    goto _jump1941;
    _1287 = 0;
    _1288++;
    if (_1288 < _513.d0)
    goto _jump1941;
    // End body of loop
    _1284 = _1285;
    goto _jump1942;
    _jump1938:;
    _1284 = _970;
    _jump1942:;
    if (_970.d1 >= 0)
    goto _jump1943;
    fail_assertion("negative array index");
    _jump1943:;
    if (_970.d1 < _1284.d0)
    goto _jump1944;
    fail_assertion("index too large");
    _jump1944:;
    if (_970.d0 >= 0)
    goto _jump1945;
    fail_assertion("negative array index");
    _jump1945:;
    if (_970.d0 < _1284.d1)
    goto _jump1946;
    fail_assertion("index too large");
    _jump1946:;
    int64_t _1290 = 0;
    _1290 *= _1284.d0;
    _1290 += _970.d1;
    _1290 *= _1284.d1;
    _1290 += _970.d0;
    rgba _1291 = _1284.data[_1290];
    double _1292 = _1291.b;
    double _1293 = 72.0;
    rgba _1294 = { _1272, _1282, _1292, _1293 };
    _1217 = _1294;
    _jump1923:;
    double _1295 = _1217.a;
    _a2__a2_bool _1296;
    // Computing bound for w
    int64_t _1297 = 73;
    _1296.d0 = _1297;
    if (_1297 > 0) 
    goto _jump1947;
    fail_assertion("non-positive loop bound");
    _jump1947:;
    // Computing bound for x
    int64_t _1298 = 560;
    _1296.d1 = _1298;
    if (_1298 > 0) 
    goto _jump1948;
    fail_assertion("non-positive loop bound");
    _jump1948:;
    // Computing total size of heap memory to allocate
    int64_t _1299 = 1;
    _1299 *= _1297;
    _1299 *= _1298;
    _1299 *= sizeof(_a2_bool);
    _1296.data = jpl_alloc(_1299);
    int64_t _1300 = 0; // x
    int64_t _1301 = 0; // w
    _jump1949:; // Begin body of loop
    _a2_bool _1302;
    // Computing bound for y
    _1302.d0 = _513.d2;
    if (_513.d2 > 0) 
    goto _jump1950;
    fail_assertion("non-positive loop bound");
    _jump1950:;
    // Computing bound for z
    _1302.d1 = _513.d0;
    if (_513.d0 > 0) 
    goto _jump1951;
    fail_assertion("non-positive loop bound");
    _jump1951:;
    // Computing total size of heap memory to allocate
    int64_t _1303 = 1;
    _1303 *= _513.d2;
    _1303 *= _513.d0;
    _1303 *= sizeof(bool);
    _1302.data = jpl_alloc(_1303);
    int64_t _1304 = 0; // z
    int64_t _1305 = 0; // y
    _jump1952:; // Begin body of loop
    int64_t _1306 = 0;
    _1306 *= _1302.d0;
    _1306 += _1305;
    _1306 *= _1302.d1;
    _1306 += _1304;
    _1302.data[_1306] = _333;
    _1304++;
    if (_1304 < _513.d0)
    goto _jump1952;
    _1304 = 0;
    _1305++;
    if (_1305 < _513.d2)
    goto _jump1952;
    // End body of loop
    int64_t _1307 = 0;
    _1307 *= _1296.d0;
    _1307 += _1301;
    _1307 *= _1296.d1;
    _1307 += _1300;
    _1296.data[_1307] = _1302;
    _1300++;
    if (_1300 < _1298)
    goto _jump1949;
    _1300 = 0;
    _1301++;
    if (_1301 < _1297)
    goto _jump1949;
    // End body of loop
    int64_t _1308;
    if (!_0)
    goto _jump1953;
    int64_t _1309 = _970.d1 / _513.d2;
    _1308 = _1309;
    goto _jump1954;
    _jump1953:;
    int64_t _1310 = _513.d0 % _1177.d1;
    _1308 = _1310;
    _jump1954:;
    if (_1308 >= 0)
    goto _jump1955;
    fail_assertion("negative array index");
    _jump1955:;
    if (_1308 < _1296.d0)
    goto _jump1956;
    fail_assertion("index too large");
    _jump1956:;
    if (_1177.d1 >= 0)
    goto _jump1957;
    fail_assertion("negative array index");
    _jump1957:;
    if (_1177.d1 < _1296.d1)
    goto _jump1958;
    fail_assertion("index too large");
    _jump1958:;
    int64_t _1311 = 0;
    _1311 *= _1296.d0;
    _1311 += _1308;
    _1311 *= _1296.d1;
    _1311 += _1177.d1;
    _a2_bool _1312 = _1296.data[_1311];
    int64_t _1313 = 65;
    if (_1313 >= 0)
    goto _jump1959;
    fail_assertion("negative array index");
    _jump1959:;
    if (_1313 < _1312.d0)
    goto _jump1960;
    fail_assertion("index too large");
    _jump1960:;
    if (_970.d1 >= 0)
    goto _jump1961;
    fail_assertion("negative array index");
    _jump1961:;
    if (_970.d1 < _1312.d1)
    goto _jump1962;
    fail_assertion("index too large");
    _jump1962:;
    int64_t _1314 = 0;
    _1314 *= _1312.d0;
    _1314 += _1313;
    _1314 *= _1312.d1;
    _1314 += _970.d1;
    bool _1315 = _1312.data[_1314];
    bool _1316;
    if (!_1315)
    goto _jump1963;
    bool _1317 = true;
    double _1318 = 24.0;
    double _1319 = -_1318;
    bool _1320 = _333 != _333;
    double _1321;
    if (!_1320)
    goto _jump1964;
    double _1322 = -_1295;
    _1321 = _1322;
    goto _jump1965;
    _jump1964:;
    double _1323 = -_1295;
    _1321 = _1323;
    _jump1965:;
    bool _1324 = _1319 >= _1321;
    bool _1325 = _1317 != _1324;
    _1316 = _1325;
    goto _jump1966;
    _jump1963:;
    _1316 = _0;
    _jump1966:;
    bool _1326 = !_1316;
    _a3_int64_t _1327;
    if (!_1326)
    goto _jump1967;
    _a3_int64_t _1328;
    // Computing bound for w
    _1328.d0 = _513.d0;
    if (_513.d0 > 0) 
    goto _jump1968;
    fail_assertion("non-positive loop bound");
    _jump1968:;
    // Computing bound for x
    double _1329 = 39.0;
    double _1330;
    // Computing bound for w
    if (_513.d2 > 0) 
    goto _jump1969;
    fail_assertion("non-positive loop bound");
    _jump1969:;
    _1330 = 0;
    int64_t _1331 = 0; // w
    _jump1970:; // Begin body of loop
    _a2_double _1332 = a();
    double _1333 = c(_1332);
    _1330 += _1333;
    _1331++;
    if (_1331 < _513.d2)
    goto _jump1970;
    // End body of loop
    bool _1334 = _1329 != _1330;
    _a3_int64_t _1335;
    if (!_1334)
    goto _jump1971;
    _a3_int64_t _1336;
    // Computing bound for w
    _1336.d0 = _513.d0;
    if (_513.d0 > 0) 
    goto _jump1972;
    fail_assertion("non-positive loop bound");
    _jump1972:;
    // Computing bound for x
    bool _1337 = _1062.c;
    int64_t _1338;
    if (!_1337)
    goto _jump1973;
    _1338 = _513.d1;
    goto _jump1974;
    _jump1973:;
    _1338 = _513.d0;
    _jump1974:;
    _1336.d1 = _1338;
    if (_1338 > 0) 
    goto _jump1975;
    fail_assertion("non-positive loop bound");
    _jump1975:;
    // Computing bound for y
    _1336.d2 = _513.d2;
    if (_513.d2 > 0) 
    goto _jump1976;
    fail_assertion("non-positive loop bound");
    _jump1976:;
    // Computing total size of heap memory to allocate
    int64_t _1339 = 1;
    _1339 *= _513.d0;
    _1339 *= _1338;
    _1339 *= _513.d2;
    _1339 *= sizeof(int64_t);
    _1336.data = jpl_alloc(_1339);
    int64_t _1340 = 0; // y
    int64_t _1341 = 0; // x
    int64_t _1342 = 0; // w
    _jump1977:; // Begin body of loop
    int64_t _1343 = -_1341;
    int64_t _1344 = _970.d1 * _1343;
    int64_t _1345 = 0;
    _1345 *= _1336.d0;
    _1345 += _1342;
    _1345 *= _1336.d1;
    _1345 += _1341;
    _1345 *= _1336.d2;
    _1345 += _1340;
    _1336.data[_1345] = _1344;
    _1340++;
    if (_1340 < _513.d2)
    goto _jump1977;
    _1340 = 0;
    _1341++;
    if (_1341 < _1338)
    goto _jump1977;
    _1341 = 0;
    _1342++;
    if (_1342 < _513.d0)
    goto _jump1977;
    // End body of loop
    _1335 = _1336;
    goto _jump1978;
    _jump1971:;
    _a3_int64_t _1346;
    // Computing bound for w
    _1346.d0 = _1177.d1;
    if (_1177.d1 > 0) 
    goto _jump1979;
    fail_assertion("non-positive loop bound");
    _jump1979:;
    // Computing bound for x
    _1346.d1 = _1177.d1;
    if (_1177.d1 > 0) 
    goto _jump1980;
    fail_assertion("non-positive loop bound");
    _jump1980:;
    // Computing bound for y
    int64_t _1347 = _1062.b;
    _1346.d2 = _1347;
    if (_1347 > 0) 
    goto _jump1981;
    fail_assertion("non-positive loop bound");
    _jump1981:;
    // Computing total size of heap memory to allocate
    int64_t _1348 = 1;
    _1348 *= _1177.d1;
    _1348 *= _1177.d1;
    _1348 *= _1347;
    _1348 *= sizeof(int64_t);
    _1346.data = jpl_alloc(_1348);
    int64_t _1349 = 0; // y
    int64_t _1350 = 0; // x
    int64_t _1351 = 0; // w
    _jump1982:; // Begin body of loop
    int64_t _1352 = 0;
    _1352 *= _1346.d0;
    _1352 += _1351;
    _1352 *= _1346.d1;
    _1352 += _1350;
    _1352 *= _1346.d2;
    _1352 += _1349;
    _1346.data[_1352] = _1177.d1;
    _1349++;
    if (_1349 < _1347)
    goto _jump1982;
    _1349 = 0;
    _1350++;
    if (_1350 < _1177.d1)
    goto _jump1982;
    _1350 = 0;
    _1351++;
    if (_1351 < _1177.d1)
    goto _jump1982;
    // End body of loop
    _1335 = _1346;
    _jump1978:;
    _a1__a3_int64_t _1353;
    // Computing bound for w
    _1353.d0 = _1177.d1;
    if (_1177.d1 > 0) 
    goto _jump1983;
    fail_assertion("non-positive loop bound");
    _jump1983:;
    // Computing total size of heap memory to allocate
    int64_t _1354 = 1;
    _1354 *= _1177.d1;
    _1354 *= sizeof(_a3_int64_t);
    _1353.data = jpl_alloc(_1354);
    int64_t _1355 = 0; // w
    _jump1984:; // Begin body of loop
    _a3_int64_t _1356;
    // Computing bound for x
    _1356.d0 = _1355;
    if (_1355 > 0) 
    goto _jump1985;
    fail_assertion("non-positive loop bound");
    _jump1985:;
    // Computing bound for y
    _1356.d1 = _513.d2;
    if (_513.d2 > 0) 
    goto _jump1986;
    fail_assertion("non-positive loop bound");
    _jump1986:;
    // Computing bound for z
    _1356.d2 = _513.d2;
    if (_513.d2 > 0) 
    goto _jump1987;
    fail_assertion("non-positive loop bound");
    _jump1987:;
    // Computing total size of heap memory to allocate
    int64_t _1357 = 1;
    _1357 *= _1355;
    _1357 *= _513.d2;
    _1357 *= _513.d2;
    _1357 *= sizeof(int64_t);
    _1356.data = jpl_alloc(_1357);
    int64_t _1358 = 0; // z
    int64_t _1359 = 0; // y
    int64_t _1360 = 0; // x
    _jump1988:; // Begin body of loop
    int64_t _1361 = 0;
    _1361 *= _1356.d0;
    _1361 += _1360;
    _1361 *= _1356.d1;
    _1361 += _1359;
    _1361 *= _1356.d2;
    _1361 += _1358;
    _1356.data[_1361] = _970.d1;
    _1358++;
    if (_1358 < _513.d2)
    goto _jump1988;
    _1358 = 0;
    _1359++;
    if (_1359 < _513.d2)
    goto _jump1988;
    _1359 = 0;
    _1360++;
    if (_1360 < _1355)
    goto _jump1988;
    // End body of loop
    int64_t _1362 = 0;
    _1362 *= _1353.d0;
    _1362 += _1355;
    _1353.data[_1362] = _1356;
    _1355++;
    if (_1355 < _1177.d1)
    goto _jump1984;
    // End body of loop
    if (_970.d1 >= 0)
    goto _jump1989;
    fail_assertion("negative array index");
    _jump1989:;
    if (_970.d1 < _1353.d0)
    goto _jump1990;
    fail_assertion("index too large");
    _jump1990:;
    int64_t _1363 = 0;
    _1363 *= _1353.d0;
    _1363 += _970.d1;
    _a3_int64_t _1364 = _1353.data[_1363];
    int64_t _1365 = -_970.d1;
    if (_1365 >= 0)
    goto _jump1991;
    fail_assertion("negative array index");
    _jump1991:;
    if (_1365 < _1364.d0)
    goto _jump1992;
    fail_assertion("index too large");
    _jump1992:;
    if (_1177.d1 >= 0)
    goto _jump1993;
    fail_assertion("negative array index");
    _jump1993:;
    if (_1177.d1 < _1364.d1)
    goto _jump1994;
    fail_assertion("index too large");
    _jump1994:;
    if (_970.d1 >= 0)
    goto _jump1995;
    fail_assertion("negative array index");
    _jump1995:;
    if (_970.d1 < _1364.d2)
    goto _jump1996;
    fail_assertion("index too large");
    _jump1996:;
    int64_t _1366 = 0;
    _1366 *= _1364.d0;
    _1366 += _1365;
    _1366 *= _1364.d1;
    _1366 += _1177.d1;
    _1366 *= _1364.d2;
    _1366 += _970.d1;
    int64_t _1367 = _1364.data[_1366];
    int64_t _1368;
    // Computing bound for w
    int64_t _1369 = _1062.b;
    if (_1369 > 0) 
    goto _jump1997;
    fail_assertion("non-positive loop bound");
    _jump1997:;
    _1368 = 0;
    int64_t _1370 = 0; // w
    _jump1998:; // Begin body of loop
    int64_t _1371 = 318;
    int64_t _1372 = -_1371;
    int64_t _1373 = _1372 + _1177.d0;
    _1368 += _1373;
    _1370++;
    if (_1370 < _1369)
    goto _jump1998;
    // End body of loop
    if (_1367 >= 0)
    goto _jump1999;
    fail_assertion("negative array index");
    _jump1999:;
    if (_1367 < _1335.d0)
    goto _jump2000;
    fail_assertion("index too large");
    _jump2000:;
    if (_1177.d0 >= 0)
    goto _jump2001;
    fail_assertion("negative array index");
    _jump2001:;
    if (_1177.d0 < _1335.d1)
    goto _jump2002;
    fail_assertion("index too large");
    _jump2002:;
    if (_1368 >= 0)
    goto _jump2003;
    fail_assertion("negative array index");
    _jump2003:;
    if (_1368 < _1335.d2)
    goto _jump2004;
    fail_assertion("index too large");
    _jump2004:;
    int64_t _1374 = 0;
    _1374 *= _1335.d0;
    _1374 += _1367;
    _1374 *= _1335.d1;
    _1374 += _1177.d0;
    _1374 *= _1335.d2;
    _1374 += _1368;
    int64_t _1375 = _1335.data[_1374];
    _1328.d1 = _1375;
    if (_1375 > 0) 
    goto _jump2005;
    fail_assertion("non-positive loop bound");
    _jump2005:;
    // Computing bound for y
    int64_t _1376 = _1062.b;
    _1328.d2 = _1376;
    if (_1376 > 0) 
    goto _jump2006;
    fail_assertion("non-positive loop bound");
    _jump2006:;
    // Computing total size of heap memory to allocate
    int64_t _1377 = 1;
    _1377 *= _513.d0;
    _1377 *= _1375;
    _1377 *= _1376;
    _1377 *= sizeof(int64_t);
    _1328.data = jpl_alloc(_1377);
    int64_t _1378 = 0; // y
    int64_t _1379 = 0; // x
    int64_t _1380 = 0; // w
    _jump2007:; // Begin body of loop
    int64_t _1381 = 0;
    _1381 *= _1328.d0;
    _1381 += _1380;
    _1381 *= _1328.d1;
    _1381 += _1379;
    _1381 *= _1328.d2;
    _1381 += _1378;
    _1328.data[_1381] = _1380;
    _1378++;
    if (_1378 < _1376)
    goto _jump2007;
    _1378 = 0;
    _1379++;
    if (_1379 < _1375)
    goto _jump2007;
    _1379 = 0;
    _1380++;
    if (_1380 < _513.d0)
    goto _jump2007;
    // End body of loop
    _1327 = _1328;
    goto _jump2008;
    _jump1967:;
    bool _1382 = false;
    _a3_int64_t _1383;
    if (!_1382)
    goto _jump2009;
    _a1__a3_int64_t _1384;
    // Computing bound for w
    _1384.d0 = _1177.d1;
    if (_1177.d1 > 0) 
    goto _jump2010;
    fail_assertion("non-positive loop bound");
    _jump2010:;
    // Computing total size of heap memory to allocate
    int64_t _1385 = 1;
    _1385 *= _1177.d1;
    _1385 *= sizeof(_a3_int64_t);
    _1384.data = jpl_alloc(_1385);
    int64_t _1386 = 0; // w
    _jump2011:; // Begin body of loop
    _a3_int64_t _1387;
    // Computing bound for x
    int64_t _1388 = _1177.d0 + _970.d0;
    _1387.d0 = _1388;
    if (_1388 > 0) 
    goto _jump2012;
    fail_assertion("non-positive loop bound");
    _jump2012:;
    // Computing bound for y
    _1387.d1 = _513.d0;
    if (_513.d0 > 0) 
    goto _jump2013;
    fail_assertion("non-positive loop bound");
    _jump2013:;
    // Computing bound for z
    _1387.d2 = _970.d1;
    if (_970.d1 > 0) 
    goto _jump2014;
    fail_assertion("non-positive loop bound");
    _jump2014:;
    // Computing total size of heap memory to allocate
    int64_t _1389 = 1;
    _1389 *= _1388;
    _1389 *= _513.d0;
    _1389 *= _970.d1;
    _1389 *= sizeof(int64_t);
    _1387.data = jpl_alloc(_1389);
    int64_t _1390 = 0; // z
    int64_t _1391 = 0; // y
    int64_t _1392 = 0; // x
    _jump2015:; // Begin body of loop
    int64_t _1393 = 0;
    _1393 *= _1387.d0;
    _1393 += _1392;
    _1393 *= _1387.d1;
    _1393 += _1391;
    _1393 *= _1387.d2;
    _1393 += _1390;
    _1387.data[_1393] = _513.d0;
    _1390++;
    if (_1390 < _970.d1)
    goto _jump2015;
    _1390 = 0;
    _1391++;
    if (_1391 < _513.d0)
    goto _jump2015;
    _1391 = 0;
    _1392++;
    if (_1392 < _1388)
    goto _jump2015;
    // End body of loop
    int64_t _1394 = 0;
    _1394 *= _1384.d0;
    _1394 += _1386;
    _1384.data[_1394] = _1387;
    _1386++;
    if (_1386 < _1177.d1)
    goto _jump2011;
    // End body of loop
    if (_970.d1 >= 0)
    goto _jump2016;
    fail_assertion("negative array index");
    _jump2016:;
    if (_970.d1 < _1384.d0)
    goto _jump2017;
    fail_assertion("index too large");
    _jump2017:;
    int64_t _1395 = 0;
    _1395 *= _1384.d0;
    _1395 += _970.d1;
    _a3_int64_t _1396 = _1384.data[_1395];
    _1383 = _1396;
    goto _jump2018;
    _jump2009:;
    _a3__a3_int64_t _1397;
    // Computing bound for w
    _1397.d0 = _970.d1;
    if (_970.d1 > 0) 
    goto _jump2019;
    fail_assertion("non-positive loop bound");
    _jump2019:;
    // Computing bound for x
    int64_t _1398;
    if (!_0)
    goto _jump2020;
    _1398 = _513.d1;
    goto _jump2021;
    _jump2020:;
    _1398 = _513.d1;
    _jump2021:;
    _1397.d1 = _1398;
    if (_1398 > 0) 
    goto _jump2022;
    fail_assertion("non-positive loop bound");
    _jump2022:;
    // Computing bound for y
    _1397.d2 = _970.d1;
    if (_970.d1 > 0) 
    goto _jump2023;
    fail_assertion("non-positive loop bound");
    _jump2023:;
    // Computing total size of heap memory to allocate
    int64_t _1399 = 1;
    _1399 *= _970.d1;
    _1399 *= _1398;
    _1399 *= _970.d1;
    _1399 *= sizeof(_a3_int64_t);
    _1397.data = jpl_alloc(_1399);
    int64_t _1400 = 0; // y
    int64_t _1401 = 0; // x
    int64_t _1402 = 0; // w
    _jump2024:; // Begin body of loop
    _a3_int64_t _1403;
    // Computing bound for z
    _1403.d0 = _1401;
    if (_1401 > 0) 
    goto _jump2025;
    fail_assertion("non-positive loop bound");
    _jump2025:;
    // Computing bound for A
    _1403.d1 = _513.d1;
    if (_513.d1 > 0) 
    goto _jump2026;
    fail_assertion("non-positive loop bound");
    _jump2026:;
    // Computing bound for B
    _1403.d2 = _513.d1;
    if (_513.d1 > 0) 
    goto _jump2027;
    fail_assertion("non-positive loop bound");
    _jump2027:;
    // Computing total size of heap memory to allocate
    int64_t _1404 = 1;
    _1404 *= _1401;
    _1404 *= _513.d1;
    _1404 *= _513.d1;
    _1404 *= sizeof(int64_t);
    _1403.data = jpl_alloc(_1404);
    int64_t _1405 = 0; // B
    int64_t _1406 = 0; // A
    int64_t _1407 = 0; // z
    _jump2028:; // Begin body of loop
    int64_t _1408 = 0;
    _1408 *= _1403.d0;
    _1408 += _1407;
    _1408 *= _1403.d1;
    _1408 += _1406;
    _1408 *= _1403.d2;
    _1408 += _1405;
    _1403.data[_1408] = _1177.d1;
    _1405++;
    if (_1405 < _513.d1)
    goto _jump2028;
    _1405 = 0;
    _1406++;
    if (_1406 < _513.d1)
    goto _jump2028;
    _1406 = 0;
    _1407++;
    if (_1407 < _1401)
    goto _jump2028;
    // End body of loop
    int64_t _1409 = 0;
    _1409 *= _1397.d0;
    _1409 += _1402;
    _1409 *= _1397.d1;
    _1409 += _1401;
    _1409 *= _1397.d2;
    _1409 += _1400;
    _1397.data[_1409] = _1403;
    _1400++;
    if (_1400 < _970.d1)
    goto _jump2024;
    _1400 = 0;
    _1401++;
    if (_1401 < _1398)
    goto _jump2024;
    _1401 = 0;
    _1402++;
    if (_1402 < _970.d1)
    goto _jump2024;
    // End body of loop
    _a1_int64_t _1410;
    _1410.d0 = 1;
    _1410.data = jpl_alloc(sizeof(int64_t) * 1);
    _1410.data[0] = _970.d0;
    if (_513.d2 >= 0)
    goto _jump2029;
    fail_assertion("negative array index");
    _jump2029:;
    if (_513.d2 < _1410.d0)
    goto _jump2030;
    fail_assertion("index too large");
    _jump2030:;
    int64_t _1411 = 0;
    _1411 *= _1410.d0;
    _1411 += _513.d2;
    int64_t _1412 = _1410.data[_1411];
    int64_t _1413 = _513.d2 * _513.d2;
    if (_1412 >= 0)
    goto _jump2031;
    fail_assertion("negative array index");
    _jump2031:;
    if (_1412 < _1397.d0)
    goto _jump2032;
    fail_assertion("index too large");
    _jump2032:;
    if (_513.d2 >= 0)
    goto _jump2033;
    fail_assertion("negative array index");
    _jump2033:;
    if (_513.d2 < _1397.d1)
    goto _jump2034;
    fail_assertion("index too large");
    _jump2034:;
    if (_1413 >= 0)
    goto _jump2035;
    fail_assertion("negative array index");
    _jump2035:;
    if (_1413 < _1397.d2)
    goto _jump2036;
    fail_assertion("index too large");
    _jump2036:;
    int64_t _1414 = 0;
    _1414 *= _1397.d0;
    _1414 += _1412;
    _1414 *= _1397.d1;
    _1414 += _513.d2;
    _1414 *= _1397.d2;
    _1414 += _1413;
    _a3_int64_t _1415 = _1397.data[_1414];
    _a1__a3_int64_t _1416;
    _1416.d0 = 1;
    _1416.data = jpl_alloc(sizeof(_a3_int64_t) * 1);
    _1416.data[0] = _1415;
    _a3_int64_t _1417;
    // Computing bound for w
    _1417.d0 = _513.d2;
    if (_513.d2 > 0) 
    goto _jump2037;
    fail_assertion("non-positive loop bound");
    _jump2037:;
    // Computing bound for x
    _1417.d1 = _1177.d0;
    if (_1177.d0 > 0) 
    goto _jump2038;
    fail_assertion("non-positive loop bound");
    _jump2038:;
    // Computing bound for y
    _1417.d2 = _513.d2;
    if (_513.d2 > 0) 
    goto _jump2039;
    fail_assertion("non-positive loop bound");
    _jump2039:;
    // Computing total size of heap memory to allocate
    int64_t _1418 = 1;
    _1418 *= _513.d2;
    _1418 *= _1177.d0;
    _1418 *= _513.d2;
    _1418 *= sizeof(int64_t);
    _1417.data = jpl_alloc(_1418);
    int64_t _1419 = 0; // y
    int64_t _1420 = 0; // x
    int64_t _1421 = 0; // w
    _jump2040:; // Begin body of loop
    int64_t _1422 = 0;
    _1422 *= _1417.d0;
    _1422 += _1421;
    _1422 *= _1417.d1;
    _1422 += _1420;
    _1422 *= _1417.d2;
    _1422 += _1419;
    _1417.data[_1422] = _513.d1;
    _1419++;
    if (_1419 < _513.d2)
    goto _jump2040;
    _1419 = 0;
    _1420++;
    if (_1420 < _1177.d0)
    goto _jump2040;
    _1420 = 0;
    _1421++;
    if (_1421 < _513.d2)
    goto _jump2040;
    // End body of loop
    _a3_int64_t _1423;
    // Computing bound for w
    _1423.d0 = _1177.d0;
    if (_1177.d0 > 0) 
    goto _jump2041;
    fail_assertion("non-positive loop bound");
    _jump2041:;
    // Computing bound for x
    _1423.d1 = _970.d1;
    if (_970.d1 > 0) 
    goto _jump2042;
    fail_assertion("non-positive loop bound");
    _jump2042:;
    // Computing bound for y
    _1423.d2 = _1177.d0;
    if (_1177.d0 > 0) 
    goto _jump2043;
    fail_assertion("non-positive loop bound");
    _jump2043:;
    // Computing total size of heap memory to allocate
    int64_t _1424 = 1;
    _1424 *= _1177.d0;
    _1424 *= _970.d1;
    _1424 *= _1177.d0;
    _1424 *= sizeof(int64_t);
    _1423.data = jpl_alloc(_1424);
    int64_t _1425 = 0; // y
    int64_t _1426 = 0; // x
    int64_t _1427 = 0; // w
    _jump2044:; // Begin body of loop
    int64_t _1428 = 0;
    _1428 *= _1423.d0;
    _1428 += _1427;
    _1428 *= _1423.d1;
    _1428 += _1426;
    _1428 *= _1423.d2;
    _1428 += _1425;
    _1423.data[_1428] = _1427;
    _1425++;
    if (_1425 < _1177.d0)
    goto _jump2044;
    _1425 = 0;
    _1426++;
    if (_1426 < _970.d1)
    goto _jump2044;
    _1426 = 0;
    _1427++;
    if (_1427 < _1177.d0)
    goto _jump2044;
    // End body of loop
    _a3_int64_t _1429;
    // Computing bound for w
    _1429.d0 = _1177.d1;
    if (_1177.d1 > 0) 
    goto _jump2045;
    fail_assertion("non-positive loop bound");
    _jump2045:;
    // Computing bound for x
    _1429.d1 = _513.d0;
    if (_513.d0 > 0) 
    goto _jump2046;
    fail_assertion("non-positive loop bound");
    _jump2046:;
    // Computing bound for y
    _1429.d2 = _513.d1;
    if (_513.d1 > 0) 
    goto _jump2047;
    fail_assertion("non-positive loop bound");
    _jump2047:;
    // Computing total size of heap memory to allocate
    int64_t _1430 = 1;
    _1430 *= _1177.d1;
    _1430 *= _513.d0;
    _1430 *= _513.d1;
    _1430 *= sizeof(int64_t);
    _1429.data = jpl_alloc(_1430);
    int64_t _1431 = 0; // y
    int64_t _1432 = 0; // x
    int64_t _1433 = 0; // w
    _jump2048:; // Begin body of loop
    int64_t _1434 = 0;
    _1434 *= _1429.d0;
    _1434 += _1433;
    _1434 *= _1429.d1;
    _1434 += _1432;
    _1434 *= _1429.d2;
    _1434 += _1431;
    _1429.data[_1434] = _970.d1;
    _1431++;
    if (_1431 < _513.d1)
    goto _jump2048;
    _1431 = 0;
    _1432++;
    if (_1432 < _513.d0)
    goto _jump2048;
    _1432 = 0;
    _1433++;
    if (_1433 < _1177.d1)
    goto _jump2048;
    // End body of loop
    _a1__a3_int64_t _1435;
    _1435.d0 = 3;
    _1435.data = jpl_alloc(sizeof(_a3_int64_t) * 3);
    _1435.data[0] = _1417;
    _1435.data[1] = _1423;
    _1435.data[2] = _1429;
    int64_t _1436 = _1062.b;
    if (_1436 >= 0)
    goto _jump2049;
    fail_assertion("negative array index");
    _jump2049:;
    if (_1436 < _1435.d0)
    goto _jump2050;
    fail_assertion("index too large");
    _jump2050:;
    int64_t _1437 = 0;
    _1437 *= _1435.d0;
    _1437 += _1436;
    _a3_int64_t _1438 = _1435.data[_1437];
    if (_513.d2 >= 0)
    goto _jump2051;
    fail_assertion("negative array index");
    _jump2051:;
    if (_513.d2 < _1438.d0)
    goto _jump2052;
    fail_assertion("index too large");
    _jump2052:;
    if (_513.d2 >= 0)
    goto _jump2053;
    fail_assertion("negative array index");
    _jump2053:;
    if (_513.d2 < _1438.d1)
    goto _jump2054;
    fail_assertion("index too large");
    _jump2054:;
    if (_513.d0 >= 0)
    goto _jump2055;
    fail_assertion("negative array index");
    _jump2055:;
    if (_513.d0 < _1438.d2)
    goto _jump2056;
    fail_assertion("index too large");
    _jump2056:;
    int64_t _1439 = 0;
    _1439 *= _1438.d0;
    _1439 += _513.d2;
    _1439 *= _1438.d1;
    _1439 += _513.d2;
    _1439 *= _1438.d2;
    _1439 += _513.d0;
    int64_t _1440 = _1438.data[_1439];
    if (_1440 >= 0)
    goto _jump2057;
    fail_assertion("negative array index");
    _jump2057:;
    if (_1440 < _1416.d0)
    goto _jump2058;
    fail_assertion("index too large");
    _jump2058:;
    int64_t _1441 = 0;
    _1441 *= _1416.d0;
    _1441 += _1440;
    _a3_int64_t _1442 = _1416.data[_1441];
    _1383 = _1442;
    _jump2018:;
    _1327 = _1383;
    _jump2008:;
    write_image(_970, "A.png");
}

