
#include <math.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include "rt/runtime.h"

typedef struct { } void_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  double *data;
} _a2_double;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  int64_t *data;
} _a3_int64_t;

typedef struct {
  int64_t d0;
  int64_t *data;
} _a1_int64_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  _a1_int64_t *data;
} _a2__a1_int64_t;

typedef struct {
  int64_t d0;
  double *data;
} _a1_double;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  double *data;
} _a3_double;

typedef struct {
  int64_t d0;
  int64_t d1;
  bool *data;
} _a2_bool;

typedef struct {
  int64_t d0;
  _a3_int64_t *data;
} _a1__a3_int64_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  _a3_int64_t *data;
} _a3__a3_int64_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t *data;
} _a2_int64_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  bool *data;
} _a3_bool;

typedef struct {
  int64_t d0;
  bool *data;
} _a1_bool;

typedef struct {
  int64_t d0;
  int64_t d1;
  _a3_double *data;
} _a2__a3_double;

typedef struct {
  int64_t d0;
  _a1_bool *data;
} _a1__a1_bool;

typedef struct {
  int64_t d0;
  _a2_int64_t *data;
} _a1__a2_int64_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  _a2_int64_t *data;
} _a3__a2_int64_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  rgba *data;
} _a3_rgba;

typedef struct {
  int64_t d0;
  _a3_rgba *data;
} _a1__a3_rgba;

typedef struct {
  int64_t d0;
  int64_t d1;
  _a1__a3_rgba *data;
} _a2__a1__a3_rgba;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  _a3_bool *data;
} _a3__a3_bool;

typedef struct {
  int64_t d0;
  int64_t d1;
  _a3_rgba *data;
} _a2__a3_rgba;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  _a2__a3_rgba *data;
} _a3__a2__a3_rgba;

typedef struct {
  int64_t d0;
  int64_t d1;
  _a2_int64_t *data;
} _a2__a2_int64_t;

typedef struct {
  int64_t d0;
  rgba *data;
} _a1_rgba;

typedef struct {
  int64_t d0;
  _a1_rgba *data;
} _a1__a1_rgba;

typedef struct {
  int64_t d0;
  int64_t d1;
  _a2_rgba *data;
} _a2__a2_rgba;

typedef struct {
  int64_t d0;
  int64_t d1;
  _a3_int64_t *data;
} _a2__a3_int64_t;

typedef struct {
  int64_t d0;
  _a3_bool *data;
} _a1__a3_bool;

typedef struct {
  int64_t d0;
  int64_t d1;
  _a3_bool *data;
} _a2__a3_bool;

typedef struct {
  int64_t d0;
  void_t *data;
} _a1_void_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  void_t *data;
} _a2_void_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  _a1_double *data;
} _a2__a1_double;

typedef struct {
  int64_t d0;
  _a1_double *data;
} _a1__a1_double;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  void_t *data;
} _a3_void_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  _a2_double *data;
} _a3__a2_double;

typedef struct {
  int64_t d0;
  _a1_void_t *data;
} _a1__a1_void_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  _a3__a3_bool *data;
} _a3__a3__a3_bool;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  _a3__a3__a3_bool *data;
} _a3__a3__a3__a3_bool;

typedef struct {
  int64_t d0;
  int64_t d1;
  _a3_void_t *data;
} _a2__a3_void_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  _a1_double *data;
} _a3__a1_double;

typedef struct {
  int64_t d0;
  _a3__a1_double *data;
} _a1__a3__a1_double;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  _a2_rgba *data;
} _a3__a2_rgba;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  _a2__a2_rgba *data;
} _a3__a2__a2_rgba;

typedef struct {
  int64_t d0;
  _a1_int64_t *data;
} _a1__a1_int64_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  _a1__a1_int64_t *data;
} _a3__a1__a1_int64_t;

typedef struct {
  int64_t d0;
  int64_t d1;
  int64_t d2;
  _a3_double *data;
} _a3__a3_double;

bool a(_a3_int64_t b, double c) {
    double _0 = 50.0;
    double _1 = c / _0;
    bool _2 = a(b, _1);
    bool _3 = !_2;
    double _4;
    if (!_3)
    goto _jump74;
    _4 = c;
    goto _jump75;
    _jump74:;
    double _5 = -c;
    double _6 = -_5;
    double _7;
    // Computing bound for e
    int64_t _8 = 242;
    int64_t _9 = -_8;
    if (_9 > 0) 
    goto _jump76;
    fail_assertion("non-positive loop bound");
    _jump76:;
    _7 = 0;
    int64_t _10 = 0; // e
    _jump77:; // Begin body of loop
    _7 += c;
    _10++;
    if (_10 < _9)
    goto _jump77;
    // End body of loop
    double _11 = _6 - _7;
    _4 = _11;
    _jump75:;
    double _12 = -_4;
    double _13;
    // Computing bound for e
    int64_t _14 = 116;
    if (_14 > 0) 
    goto _jump78;
    fail_assertion("non-positive loop bound");
    _jump78:;
    // Computing bound for f
    int64_t _15 = 845;
    if (_15 > 0) 
    goto _jump79;
    fail_assertion("non-positive loop bound");
    _jump79:;
    // Computing bound for g
    double _17 = 47.0;
    bool _18 = _17 != c;
    bool _19 = !_18;
    bool _16 = _19;
    if (0 != _19)
    goto _jump80;
    bool _20 = true;
    _16 = _20;
    _jump80:;
    int64_t _21;
    if (!_16)
    goto _jump81;
    bool _22 = a(b, c);
    int64_t _23;
    if (!_22)
    goto _jump82;
    int64_t _24 = 97;
    _23 = _24;
    goto _jump83;
    _jump82:;
    int64_t _25 = 554;
    _23 = _25;
    _jump83:;
    int64_t _26 = -_23;
    _21 = _26;
    goto _jump84;
    _jump81:;
    _a1_int64_t _27;
    // Computing bound for e
    int64_t _28 = 116;
    _27.d0 = _28;
    if (_28 > 0) 
    goto _jump85;
    fail_assertion("non-positive loop bound");
    _jump85:;
    // Computing total size of heap memory to allocate
    int64_t _29 = 1;
    _29 *= _28;
    _29 *= sizeof(int64_t);
    _27.data = jpl_alloc(_29);
    int64_t _30 = 0; // e
    _jump86:; // Begin body of loop
    int64_t _31 = 177;
    int64_t _32 = 0;
    _32 *= _27.d0;
    _32 += _30;
    _27.data[_32] = _31;
    _30++;
    if (_30 < _28)
    goto _jump86;
    // End body of loop
    int64_t _33 = 192;
    if (_33 >= 0)
    goto _jump87;
    fail_assertion("negative array index");
    _jump87:;
    if (_33 < _27.d0)
    goto _jump88;
    fail_assertion("index too large");
    _jump88:;
    int64_t _34 = 0;
    _34 *= _27.d0;
    _34 += _33;
    int64_t _35 = _27.data[_34];
    int64_t _36 = -_35;
    _21 = _36;
    _jump84:;
    if (_21 > 0) 
    goto _jump89;
    fail_assertion("non-positive loop bound");
    _jump89:;
    _13 = 0;
    int64_t _37 = 0; // g
    int64_t _38 = 0; // f
    int64_t _39 = 0; // e
    _jump90:; // Begin body of loop
    double _40;
    // Computing bound for h
    if (_38 > 0) 
    goto _jump91;
    fail_assertion("non-positive loop bound");
    _jump91:;
    // Computing bound for i
    if (_37 > 0) 
    goto _jump92;
    fail_assertion("non-positive loop bound");
    _jump92:;
    // Computing bound for j
    int64_t _41 = -_39;
    if (_41 > 0) 
    goto _jump93;
    fail_assertion("non-positive loop bound");
    _jump93:;
    _40 = 0;
    int64_t _42 = 0; // j
    int64_t _43 = 0; // i
    int64_t _44 = 0; // h
    _jump94:; // Begin body of loop
    _a2_double _45;
    // Computing bound for k
    _45.d0 = _37;
    if (_37 > 0) 
    goto _jump95;
    fail_assertion("non-positive loop bound");
    _jump95:;
    // Computing bound for l
    _45.d1 = _42;
    if (_42 > 0) 
    goto _jump96;
    fail_assertion("non-positive loop bound");
    _jump96:;
    // Computing total size of heap memory to allocate
    int64_t _46 = 1;
    _46 *= _37;
    _46 *= _42;
    _46 *= sizeof(double);
    _45.data = jpl_alloc(_46);
    int64_t _47 = 0; // l
    int64_t _48 = 0; // k
    _jump97:; // Begin body of loop
    double _49 = 73.0;
    double _50 = 59.0;
    double _51 = fmod(_49, _50);
    int64_t _52 = 0;
    _52 *= _45.d0;
    _52 += _48;
    _52 *= _45.d1;
    _52 += _47;
    _45.data[_52] = _51;
    _47++;
    if (_47 < _42)
    goto _jump97;
    _47 = 0;
    _48++;
    if (_48 < _37)
    goto _jump97;
    // End body of loop
    int64_t _53 = 153;
    bool _54 = _37 == _53;
    int64_t _55;
    if (!_54)
    goto _jump98;
    _55 = _38;
    goto _jump99;
    _jump98:;
    _55 = _39;
    _jump99:;
    if (_55 >= 0)
    goto _jump100;
    fail_assertion("negative array index");
    _jump100:;
    if (_55 < _45.d0)
    goto _jump101;
    fail_assertion("index too large");
    _jump101:;
    if (_43 >= 0)
    goto _jump102;
    fail_assertion("negative array index");
    _jump102:;
    if (_43 < _45.d1)
    goto _jump103;
    fail_assertion("index too large");
    _jump103:;
    int64_t _56 = 0;
    _56 *= _45.d0;
    _56 += _55;
    _56 *= _45.d1;
    _56 += _43;
    double _57 = _45.data[_56];
    _40 += _57;
    _42++;
    if (_42 < _41)
    goto _jump94;
    _42 = 0;
    _43++;
    if (_43 < _37)
    goto _jump94;
    _43 = 0;
    _44++;
    if (_44 < _38)
    goto _jump94;
    // End body of loop
    _13 += _40;
    _37++;
    if (_37 < _21)
    goto _jump90;
    _37 = 0;
    _38++;
    if (_38 < _15)
    goto _jump90;
    _38 = 0;
    _39++;
    if (_39 < _14)
    goto _jump90;
    // End body of loop
    bool _58 = _12 == _13;
    _a2_rgba _59;
    if (!_58)
    goto _jump104;
    int64_t _61 = 207;
    int64_t _62 = -_61;
    int64_t _63 = -_62;
    int64_t _64;
    // Computing bound for e
    int64_t _65 = 749;
    int64_t _66 = 164;
    int64_t _67 = 827;
    if (_65 >= 0)
    goto _jump105;
    fail_assertion("negative array index");
    _jump105:;
    if (_65 < b.d0)
    goto _jump106;
    fail_assertion("index too large");
    _jump106:;
    if (_66 >= 0)
    goto _jump107;
    fail_assertion("negative array index");
    _jump107:;
    if (_66 < b.d1)
    goto _jump108;
    fail_assertion("index too large");
    _jump108:;
    if (_67 >= 0)
    goto _jump109;
    fail_assertion("negative array index");
    _jump109:;
    if (_67 < b.d2)
    goto _jump110;
    fail_assertion("index too large");
    _jump110:;
    int64_t _68 = 0;
    _68 *= b.d0;
    _68 += _65;
    _68 *= b.d1;
    _68 += _66;
    _68 *= b.d2;
    _68 += _67;
    int64_t _69 = b.data[_68];
    if (_69 > 0) 
    goto _jump111;
    fail_assertion("non-positive loop bound");
    _jump111:;
    _64 = 0;
    int64_t _70 = 0; // e
    _jump112:; // Begin body of loop
    int64_t _71 = _70 / _70;
    _64 += _71;
    _70++;
    if (_70 < _69)
    goto _jump112;
    // End body of loop
    bool _72 = _63 != _64;
    bool _73;
    if (!_72)
    goto _jump113;
    int64_t _74 = 558;
    int64_t _75 = 574;
    int64_t _76 = 817;
    int64_t _77 = _75 / _76;
    int64_t _78 = _74 % _77;
    int64_t _79 = 811;
    int64_t _80 = -_79;
    bool _81 = _78 > _80;
    _73 = _81;
    goto _jump114;
    _jump113:;
    double _82 = 28.0;
    bool _83 = a(b, _82);
    _73 = _83;
    _jump114:;
    bool _60 = _73;
    if (0 != _73)
    goto _jump115;
    int64_t _84 = 791;
    bool _85 = true;
    _a3_int64_t _86;
    if (!_85)
    goto _jump116;
    _86 = b;
    goto _jump117;
    _jump116:;
    _86 = b;
    _jump117:;
    int64_t _87 = 558;
    int64_t _88;
    // Computing bound for e
    int64_t _89 = 475;
    if (_89 > 0) 
    goto _jump118;
    fail_assertion("non-positive loop bound");
    _jump118:;
    // Computing bound for f
    int64_t _90 = 138;
    if (_90 > 0) 
    goto _jump119;
    fail_assertion("non-positive loop bound");
    _jump119:;
    // Computing bound for g
    int64_t _91 = 424;
    if (_91 > 0) 
    goto _jump120;
    fail_assertion("non-positive loop bound");
    _jump120:;
    _88 = 0;
    int64_t _92 = 0; // g
    int64_t _93 = 0; // f
    int64_t _94 = 0; // e
    _jump121:; // Begin body of loop
    _88 += _92;
    _92++;
    if (_92 < _91)
    goto _jump121;
    _92 = 0;
    _93++;
    if (_93 < _90)
    goto _jump121;
    _93 = 0;
    _94++;
    if (_94 < _89)
    goto _jump121;
    // End body of loop
    int64_t _95 = -_88;
    int64_t _96 = 691;
    int64_t _97 = -_96;
    if (_87 >= 0)
    goto _jump122;
    fail_assertion("negative array index");
    _jump122:;
    if (_87 < _86.d0)
    goto _jump123;
    fail_assertion("index too large");
    _jump123:;
    if (_95 >= 0)
    goto _jump124;
    fail_assertion("negative array index");
    _jump124:;
    if (_95 < _86.d1)
    goto _jump125;
    fail_assertion("index too large");
    _jump125:;
    if (_97 >= 0)
    goto _jump126;
    fail_assertion("negative array index");
    _jump126:;
    if (_97 < _86.d2)
    goto _jump127;
    fail_assertion("index too large");
    _jump127:;
    int64_t _98 = 0;
    _98 *= _86.d0;
    _98 += _87;
    _98 *= _86.d1;
    _98 += _95;
    _98 *= _86.d2;
    _98 += _97;
    int64_t _99 = _86.data[_98];
    bool _100 = _84 >= _99;
    _60 = _100;
    _jump115:;
    _a2_rgba _101;
    if (!_60)
    goto _jump128;
    _a2_rgba _102;
    // Computing bound for e
    int64_t _103;
    // Computing bound for e
    int64_t _104 = 777;
    int64_t _105 = -_104;
    int64_t _106 = -_105;
    bool _107 = false;
    int64_t _108;
    if (!_107)
    goto _jump129;
    bool _109 = false;
    int64_t _110;
    if (!_109)
    goto _jump130;
    int64_t _111 = 863;
    _110 = _111;
    goto _jump131;
    _jump130:;
    int64_t _112 = 315;
    _110 = _112;
    _jump131:;
    _108 = _110;
    goto _jump132;
    _jump129:;
    int64_t _113 = 981;
    _108 = _113;
    _jump132:;
    int64_t _114 = _106 * _108;
    if (_114 > 0) 
    goto _jump133;
    fail_assertion("non-positive loop bound");
    _jump133:;
    // Computing bound for f
    int64_t _115 = 170;
    if (_115 > 0) 
    goto _jump134;
    fail_assertion("non-positive loop bound");
    _jump134:;
    // Computing bound for g
    int64_t _116;
    // Computing bound for e
    int64_t _117 = 390;
    if (_117 > 0) 
    goto _jump135;
    fail_assertion("non-positive loop bound");
    _jump135:;
    // Computing bound for f
    int64_t _118 = 707;
    int64_t _119 = 558;
    int64_t _120 = _118 - _119;
    if (_120 > 0) 
    goto _jump136;
    fail_assertion("non-positive loop bound");
    _jump136:;
    // Computing bound for g
    int64_t _121 = 276;
    int64_t _122 = -_121;
    if (_122 > 0) 
    goto _jump137;
    fail_assertion("non-positive loop bound");
    _jump137:;
    _116 = 0;
    int64_t _123 = 0; // g
    int64_t _124 = 0; // f
    int64_t _125 = 0; // e
    _jump138:; // Begin body of loop
    _116 += _123;
    _123++;
    if (_123 < _122)
    goto _jump138;
    _123 = 0;
    _124++;
    if (_124 < _120)
    goto _jump138;
    _124 = 0;
    _125++;
    if (_125 < _117)
    goto _jump138;
    // End body of loop
    int64_t _126;
    // Computing bound for e
    int64_t _127 = 917;
    if (_127 > 0) 
    goto _jump139;
    fail_assertion("non-positive loop bound");
    _jump139:;
    // Computing bound for f
    int64_t _128 = 691;
    if (_128 > 0) 
    goto _jump140;
    fail_assertion("non-positive loop bound");
    _jump140:;
    // Computing bound for g
    int64_t _129 = 69;
    if (_129 > 0) 
    goto _jump141;
    fail_assertion("non-positive loop bound");
    _jump141:;
    _126 = 0;
    int64_t _130 = 0; // g
    int64_t _131 = 0; // f
    int64_t _132 = 0; // e
    _jump142:; // Begin body of loop
    _126 += _132;
    _130++;
    if (_130 < _129)
    goto _jump142;
    _130 = 0;
    _131++;
    if (_131 < _128)
    goto _jump142;
    _131 = 0;
    _132++;
    if (_132 < _127)
    goto _jump142;
    // End body of loop
    int64_t _133 = _116 / _126;
    if (_133 > 0) 
    goto _jump143;
    fail_assertion("non-positive loop bound");
    _jump143:;
    _103 = 0;
    int64_t _134 = 0; // g
    int64_t _135 = 0; // f
    int64_t _136 = 0; // e
    _jump144:; // Begin body of loop
    int64_t _137;
    // Computing bound for h
    if (_134 > 0) 
    goto _jump145;
    fail_assertion("non-positive loop bound");
    _jump145:;
    // Computing bound for i
    if (_135 > 0) 
    goto _jump146;
    fail_assertion("non-positive loop bound");
    _jump146:;
    _137 = 0;
    int64_t _138 = 0; // i
    int64_t _139 = 0; // h
    _jump147:; // Begin body of loop
    int64_t _140 = 257;
    if (_136 >= 0)
    goto _jump148;
    fail_assertion("negative array index");
    _jump148:;
    if (_136 < b.d0)
    goto _jump149;
    fail_assertion("index too large");
    _jump149:;
    if (_138 >= 0)
    goto _jump150;
    fail_assertion("negative array index");
    _jump150:;
    if (_138 < b.d1)
    goto _jump151;
    fail_assertion("index too large");
    _jump151:;
    if (_140 >= 0)
    goto _jump152;
    fail_assertion("negative array index");
    _jump152:;
    if (_140 < b.d2)
    goto _jump153;
    fail_assertion("index too large");
    _jump153:;
    int64_t _141 = 0;
    _141 *= b.d0;
    _141 += _136;
    _141 *= b.d1;
    _141 += _138;
    _141 *= b.d2;
    _141 += _140;
    int64_t _142 = b.data[_141];
    _137 += _142;
    _138++;
    if (_138 < _135)
    goto _jump147;
    _138 = 0;
    _139++;
    if (_139 < _134)
    goto _jump147;
    // End body of loop
    _103 += _137;
    _134++;
    if (_134 < _133)
    goto _jump144;
    _134 = 0;
    _135++;
    if (_135 < _115)
    goto _jump144;
    _135 = 0;
    _136++;
    if (_136 < _114)
    goto _jump144;
    // End body of loop
    _102.d0 = _103;
    if (_103 > 0) 
    goto _jump154;
    fail_assertion("non-positive loop bound");
    _jump154:;
    // Computing bound for f
    int64_t _143 = 993;
    _102.d1 = _143;
    if (_143 > 0) 
    goto _jump155;
    fail_assertion("non-positive loop bound");
    _jump155:;
    // Computing total size of heap memory to allocate
    int64_t _144 = 1;
    _144 *= _103;
    _144 *= _143;
    _144 *= sizeof(rgba);
    _102.data = jpl_alloc(_144);
    int64_t _145 = 0; // f
    int64_t _146 = 0; // e
    _jump156:; // Begin body of loop
    double _147;
    // Computing bound for g
    if (_145 > 0) 
    goto _jump157;
    fail_assertion("non-positive loop bound");
    _jump157:;
    _147 = 0;
    int64_t _148 = 0; // g
    _jump158:; // Begin body of loop
    double _149;
    // Computing bound for h
    if (_148 > 0) 
    goto _jump159;
    fail_assertion("non-positive loop bound");
    _jump159:;
    // Computing bound for i
    int64_t _150 = 305;
    if (_150 > 0) 
    goto _jump160;
    fail_assertion("non-positive loop bound");
    _jump160:;
    // Computing bound for j
    if (_145 > 0) 
    goto _jump161;
    fail_assertion("non-positive loop bound");
    _jump161:;
    _149 = 0;
    int64_t _151 = 0; // j
    int64_t _152 = 0; // i
    int64_t _153 = 0; // h
    _jump162:; // Begin body of loop
    _149 += c;
    _151++;
    if (_151 < _145)
    goto _jump162;
    _151 = 0;
    _152++;
    if (_152 < _150)
    goto _jump162;
    _152 = 0;
    _153++;
    if (_153 < _148)
    goto _jump162;
    // End body of loop
    double _154 = 34.0;
    double _155 = _149 + _154;
    _147 += _155;
    _148++;
    if (_148 < _145)
    goto _jump158;
    // End body of loop
    double _156 = 37.0;
    _a2_double _157;
    // Computing bound for g
    int64_t _158 = 269;
    _157.d0 = _158;
    if (_158 > 0) 
    goto _jump163;
    fail_assertion("non-positive loop bound");
    _jump163:;
    // Computing bound for h
    _157.d1 = _146;
    if (_146 > 0) 
    goto _jump164;
    fail_assertion("non-positive loop bound");
    _jump164:;
    // Computing total size of heap memory to allocate
    int64_t _159 = 1;
    _159 *= _158;
    _159 *= _146;
    _159 *= sizeof(double);
    _157.data = jpl_alloc(_159);
    int64_t _160 = 0; // h
    int64_t _161 = 0; // g
    _jump165:; // Begin body of loop
    double _162;
    // Computing bound for i
    if (_145 > 0) 
    goto _jump166;
    fail_assertion("non-positive loop bound");
    _jump166:;
    _162 = 0;
    int64_t _163 = 0; // i
    _jump167:; // Begin body of loop
    double _164 = 61.0;
    _162 += _164;
    _163++;
    if (_163 < _145)
    goto _jump167;
    // End body of loop
    int64_t _165 = 0;
    _165 *= _157.d0;
    _165 += _161;
    _165 *= _157.d1;
    _165 += _160;
    _157.data[_165] = _162;
    _160++;
    if (_160 < _146)
    goto _jump165;
    _160 = 0;
    _161++;
    if (_161 < _158)
    goto _jump165;
    // End body of loop
    _a1_int64_t _166;
    // Computing bound for g
    _166.d0 = _146;
    if (_146 > 0) 
    goto _jump168;
    fail_assertion("non-positive loop bound");
    _jump168:;
    // Computing total size of heap memory to allocate
    int64_t _167 = 1;
    _167 *= _146;
    _167 *= sizeof(int64_t);
    _166.data = jpl_alloc(_167);
    int64_t _168 = 0; // g
    _jump169:; // Begin body of loop
    int64_t _169 = 103;
    int64_t _170 = 0;
    _170 *= _166.d0;
    _170 += _168;
    _166.data[_170] = _169;
    _168++;
    if (_168 < _146)
    goto _jump169;
    // End body of loop
    int64_t _171 = 789;
    if (_171 >= 0)
    goto _jump170;
    fail_assertion("negative array index");
    _jump170:;
    if (_171 < _166.d0)
    goto _jump171;
    fail_assertion("index too large");
    _jump171:;
    int64_t _172 = 0;
    _172 *= _166.d0;
    _172 += _171;
    int64_t _173 = _166.data[_172];
    if (_145 >= 0)
    goto _jump172;
    fail_assertion("negative array index");
    _jump172:;
    if (_145 < _157.d0)
    goto _jump173;
    fail_assertion("index too large");
    _jump173:;
    if (_173 >= 0)
    goto _jump174;
    fail_assertion("negative array index");
    _jump174:;
    if (_173 < _157.d1)
    goto _jump175;
    fail_assertion("index too large");
    _jump175:;
    int64_t _174 = 0;
    _174 *= _157.d0;
    _174 += _145;
    _174 *= _157.d1;
    _174 += _173;
    double _175 = _157.data[_174];
    rgba _176 = { c, _147, _156, _175 };
    int64_t _177 = 0;
    _177 *= _102.d0;
    _177 += _146;
    _177 *= _102.d1;
    _177 += _145;
    _102.data[_177] = _176;
    _145++;
    if (_145 < _143)
    goto _jump156;
    _145 = 0;
    _146++;
    if (_146 < _103)
    goto _jump156;
    // End body of loop
    _101 = _102;
    goto _jump176;
    _jump128:;
    bool _179 = true;
    bool _180;
    if (!_179)
    goto _jump177;
    bool _181 = a(b, c);
    _180 = _181;
    goto _jump178;
    _jump177:;
    bool _182 = true;
    _180 = _182;
    _jump178:;
    bool _178 = _180;
    if (0 == _180)
    goto _jump179;
    bool _183 = c < c;
    _178 = _183;
    _jump179:;
    _a2_rgba _184;
    if (!_178)
    goto _jump180;
    _a2_rgba _185;
    // Computing bound for e
    int64_t _186 = 595;
    _185.d0 = _186;
    if (_186 > 0) 
    goto _jump181;
    fail_assertion("non-positive loop bound");
    _jump181:;
    // Computing bound for f
    int64_t _187 = 400;
    int64_t _188 = -_187;
    _185.d1 = _188;
    if (_188 > 0) 
    goto _jump182;
    fail_assertion("non-positive loop bound");
    _jump182:;
    // Computing total size of heap memory to allocate
    int64_t _189 = 1;
    _189 *= _186;
    _189 *= _188;
    _189 *= sizeof(rgba);
    _185.data = jpl_alloc(_189);
    int64_t _190 = 0; // f
    int64_t _191 = 0; // e
    _jump183:; // Begin body of loop
    double _192 = 71.0;
    double _193;
    // Computing bound for g
    int64_t _194;
    // Computing bound for g
    if (_190 > 0) 
    goto _jump184;
    fail_assertion("non-positive loop bound");
    _jump184:;
    // Computing bound for h
    if (_190 > 0) 
    goto _jump185;
    fail_assertion("non-positive loop bound");
    _jump185:;
    // Computing bound for i
    int64_t _195 = 717;
    if (_195 > 0) 
    goto _jump186;
    fail_assertion("non-positive loop bound");
    _jump186:;
    _194 = 0;
    int64_t _196 = 0; // i
    int64_t _197 = 0; // h
    int64_t _198 = 0; // g
    _jump187:; // Begin body of loop
    int64_t _199 = 167;
    _194 += _199;
    _196++;
    if (_196 < _195)
    goto _jump187;
    _196 = 0;
    _197++;
    if (_197 < _190)
    goto _jump187;
    _197 = 0;
    _198++;
    if (_198 < _190)
    goto _jump187;
    // End body of loop
    if (_194 > 0) 
    goto _jump188;
    fail_assertion("non-positive loop bound");
    _jump188:;
    // Computing bound for h
    int64_t _200 = 844;
    if (_200 > 0) 
    goto _jump189;
    fail_assertion("non-positive loop bound");
    _jump189:;
    // Computing bound for i
    int64_t _201 = 492;
    int64_t _202 = -_201;
    if (_202 > 0) 
    goto _jump190;
    fail_assertion("non-positive loop bound");
    _jump190:;
    _193 = 0;
    int64_t _203 = 0; // i
    int64_t _204 = 0; // h
    int64_t _205 = 0; // g
    _jump191:; // Begin body of loop
    _193 += c;
    _203++;
    if (_203 < _202)
    goto _jump191;
    _203 = 0;
    _204++;
    if (_204 < _200)
    goto _jump191;
    _204 = 0;
    _205++;
    if (_205 < _194)
    goto _jump191;
    // End body of loop
    bool _206 = false;
    double _207;
    if (!_206)
    goto _jump192;
    _207 = c;
    goto _jump193;
    _jump192:;
    double _208;
    // Computing bound for g
    if (_191 > 0) 
    goto _jump194;
    fail_assertion("non-positive loop bound");
    _jump194:;
    // Computing bound for h
    if (_190 > 0) 
    goto _jump195;
    fail_assertion("non-positive loop bound");
    _jump195:;
    // Computing bound for i
    if (_191 > 0) 
    goto _jump196;
    fail_assertion("non-positive loop bound");
    _jump196:;
    _208 = 0;
    int64_t _209 = 0; // i
    int64_t _210 = 0; // h
    int64_t _211 = 0; // g
    _jump197:; // Begin body of loop
    _208 += c;
    _209++;
    if (_209 < _191)
    goto _jump197;
    _209 = 0;
    _210++;
    if (_210 < _190)
    goto _jump197;
    _210 = 0;
    _211++;
    if (_211 < _191)
    goto _jump197;
    // End body of loop
    _207 = _208;
    _jump193:;
    rgba _212 = { c, _192, _193, _207 };
    int64_t _213 = 0;
    _213 *= _185.d0;
    _213 += _191;
    _213 *= _185.d1;
    _213 += _190;
    _185.data[_213] = _212;
    _190++;
    if (_190 < _188)
    goto _jump183;
    _190 = 0;
    _191++;
    if (_191 < _186)
    goto _jump183;
    // End body of loop
    _184 = _185;
    goto _jump198;
    _jump180:;
    bool _214 = true;
    double _215;
    if (!_214)
    goto _jump199;
    double _216 = 49.0;
    _215 = _216;
    goto _jump200;
    _jump199:;
    double _217 = 73.0;
    _215 = _217;
    _jump200:;
    bool _218 = a(b, _215);
    _a2_rgba _219;
    if (!_218)
    goto _jump201;
    _a2_rgba _220;
    // Computing bound for e
    int64_t _221 = 6;
    _220.d0 = _221;
    if (_221 > 0) 
    goto _jump202;
    fail_assertion("non-positive loop bound");
    _jump202:;
    // Computing bound for f
    int64_t _222 = 106;
    int64_t _223 = 58;
    int64_t _224 = 577;
    int64_t _225 = _223 % _224;
    int64_t _226 = _222 * _225;
    _220.d1 = _226;
    if (_226 > 0) 
    goto _jump203;
    fail_assertion("non-positive loop bound");
    _jump203:;
    // Computing total size of heap memory to allocate
    int64_t _227 = 1;
    _227 *= _221;
    _227 *= _226;
    _227 *= sizeof(rgba);
    _220.data = jpl_alloc(_227);
    int64_t _228 = 0; // f
    int64_t _229 = 0; // e
    _jump204:; // Begin body of loop
    double _230 = c + c;
    rgba _231 = { c, c, _230, c };
    int64_t _232 = 0;
    _232 *= _220.d0;
    _232 += _229;
    _232 *= _220.d1;
    _232 += _228;
    _220.data[_232] = _231;
    _228++;
    if (_228 < _226)
    goto _jump204;
    _228 = 0;
    _229++;
    if (_229 < _221)
    goto _jump204;
    // End body of loop
    _219 = _220;
    goto _jump205;
    _jump201:;
    _a2_rgba _233;
    // Computing bound for e
    int64_t _234 = 553;
    int64_t _235 = 42;
    int64_t _236 = 839;
    int64_t _237 = _235 - _236;
    int64_t _238 = _234 + _237;
    _233.d0 = _238;
    if (_238 > 0) 
    goto _jump206;
    fail_assertion("non-positive loop bound");
    _jump206:;
    // Computing bound for f
    int64_t _239 = 355;
    _233.d1 = _239;
    if (_239 > 0) 
    goto _jump207;
    fail_assertion("non-positive loop bound");
    _jump207:;
    // Computing total size of heap memory to allocate
    int64_t _240 = 1;
    _240 *= _238;
    _240 *= _239;
    _240 *= sizeof(rgba);
    _233.data = jpl_alloc(_240);
    int64_t _241 = 0; // f
    int64_t _242 = 0; // e
    _jump208:; // Begin body of loop
    double _243 = 30.0;
    double _244 = 1.0;
    rgba _245 = { _243, _244, c, c };
    int64_t _246 = 0;
    _246 *= _233.d0;
    _246 += _242;
    _246 *= _233.d1;
    _246 += _241;
    _233.data[_246] = _245;
    _241++;
    if (_241 < _239)
    goto _jump208;
    _241 = 0;
    _242++;
    if (_242 < _238)
    goto _jump208;
    // End body of loop
    _219 = _233;
    _jump205:;
    _184 = _219;
    _jump198:;
    _101 = _184;
    _jump176:;
    _59 = _101;
    goto _jump209;
    _jump104:;
    _a2_rgba _247;
    // Computing bound for e
    _a2__a1_int64_t _248;
    // Computing bound for e
    int64_t _249 = 845;
    _248.d0 = _249;
    if (_249 > 0) 
    goto _jump210;
    fail_assertion("non-positive loop bound");
    _jump210:;
    // Computing bound for f
    int64_t _250 = 198;
    int64_t _251 = -_250;
    _248.d1 = _251;
    if (_251 > 0) 
    goto _jump211;
    fail_assertion("non-positive loop bound");
    _jump211:;
    // Computing total size of heap memory to allocate
    int64_t _252 = 1;
    _252 *= _249;
    _252 *= _251;
    _252 *= sizeof(_a1_int64_t);
    _248.data = jpl_alloc(_252);
    int64_t _253 = 0; // f
    int64_t _254 = 0; // e
    _jump212:; // Begin body of loop
    _a1_int64_t _255;
    // Computing bound for g
    int64_t _256 = 183;
    _255.d0 = _256;
    if (_256 > 0) 
    goto _jump213;
    fail_assertion("non-positive loop bound");
    _jump213:;
    // Computing total size of heap memory to allocate
    int64_t _257 = 1;
    _257 *= _256;
    _257 *= sizeof(int64_t);
    _255.data = jpl_alloc(_257);
    int64_t _258 = 0; // g
    _jump214:; // Begin body of loop
    int64_t _259 = 0;
    _259 *= _255.d0;
    _259 += _258;
    _255.data[_259] = _253;
    _258++;
    if (_258 < _256)
    goto _jump214;
    // End body of loop
    int64_t _260 = 0;
    _260 *= _248.d0;
    _260 += _254;
    _260 *= _248.d1;
    _260 += _253;
    _248.data[_260] = _255;
    _253++;
    if (_253 < _251)
    goto _jump212;
    _253 = 0;
    _254++;
    if (_254 < _249)
    goto _jump212;
    // End body of loop
    int64_t _261;
    // Computing bound for e
    int64_t _262 = 232;
    if (_262 > 0) 
    goto _jump215;
    fail_assertion("non-positive loop bound");
    _jump215:;
    // Computing bound for f
    int64_t _263 = 576;
    if (_263 > 0) 
    goto _jump216;
    fail_assertion("non-positive loop bound");
    _jump216:;
    // Computing bound for g
    int64_t _264 = 178;
    if (_264 > 0) 
    goto _jump217;
    fail_assertion("non-positive loop bound");
    _jump217:;
    _261 = 0;
    int64_t _265 = 0; // g
    int64_t _266 = 0; // f
    int64_t _267 = 0; // e
    _jump218:; // Begin body of loop
    int64_t _268 = 413;
    _261 += _268;
    _265++;
    if (_265 < _264)
    goto _jump218;
    _265 = 0;
    _266++;
    if (_266 < _263)
    goto _jump218;
    _266 = 0;
    _267++;
    if (_267 < _262)
    goto _jump218;
    // End body of loop
    int64_t _269 = 589;
    if (_261 >= 0)
    goto _jump219;
    fail_assertion("negative array index");
    _jump219:;
    if (_261 < _248.d0)
    goto _jump220;
    fail_assertion("index too large");
    _jump220:;
    if (_269 >= 0)
    goto _jump221;
    fail_assertion("negative array index");
    _jump221:;
    if (_269 < _248.d1)
    goto _jump222;
    fail_assertion("index too large");
    _jump222:;
    int64_t _270 = 0;
    _270 *= _248.d0;
    _270 += _261;
    _270 *= _248.d1;
    _270 += _269;
    _a1_int64_t _271 = _248.data[_270];
    int64_t _272 = 411;
    if (_272 >= 0)
    goto _jump223;
    fail_assertion("negative array index");
    _jump223:;
    if (_272 < _271.d0)
    goto _jump224;
    fail_assertion("index too large");
    _jump224:;
    int64_t _273 = 0;
    _273 *= _271.d0;
    _273 += _272;
    int64_t _274 = _271.data[_273];
    int64_t _275 = -_274;
    _247.d0 = _275;
    if (_275 > 0) 
    goto _jump225;
    fail_assertion("non-positive loop bound");
    _jump225:;
    // Computing bound for f
    int64_t _276 = 390;
    _247.d1 = _276;
    if (_276 > 0) 
    goto _jump226;
    fail_assertion("non-positive loop bound");
    _jump226:;
    // Computing total size of heap memory to allocate
    int64_t _277 = 1;
    _277 *= _275;
    _277 *= _276;
    _277 *= sizeof(rgba);
    _247.data = jpl_alloc(_277);
    int64_t _278 = 0; // f
    int64_t _279 = 0; // e
    _jump227:; // Begin body of loop
    _a1_double _280;
    // Computing bound for g
    _280.d0 = _278;
    if (_278 > 0) 
    goto _jump228;
    fail_assertion("non-positive loop bound");
    _jump228:;
    // Computing total size of heap memory to allocate
    int64_t _281 = 1;
    _281 *= _278;
    _281 *= sizeof(double);
    _280.data = jpl_alloc(_281);
    int64_t _282 = 0; // g
    _jump229:; // Begin body of loop
    bool _283 = false;
    double _284;
    if (!_283)
    goto _jump230;
    _284 = c;
    goto _jump231;
    _jump230:;
    double _285 = 48.0;
    _284 = _285;
    _jump231:;
    int64_t _286 = 0;
    _286 *= _280.d0;
    _286 += _282;
    _280.data[_286] = _284;
    _282++;
    if (_282 < _278)
    goto _jump229;
    // End body of loop
    int64_t _287;
    // Computing bound for g
    if (_279 > 0) 
    goto _jump232;
    fail_assertion("non-positive loop bound");
    _jump232:;
    // Computing bound for h
    int64_t _288;
    // Computing bound for g
    int64_t _289 = 773;
    if (_289 > 0) 
    goto _jump233;
    fail_assertion("non-positive loop bound");
    _jump233:;
    _288 = 0;
    int64_t _290 = 0; // g
    _jump234:; // Begin body of loop
    _288 += _278;
    _290++;
    if (_290 < _289)
    goto _jump234;
    // End body of loop
    int64_t _291 = _288 / _278;
    if (_291 > 0) 
    goto _jump235;
    fail_assertion("non-positive loop bound");
    _jump235:;
    _287 = 0;
    int64_t _292 = 0; // h
    int64_t _293 = 0; // g
    _jump236:; // Begin body of loop
    _287 += _279;
    _292++;
    if (_292 < _291)
    goto _jump236;
    _292 = 0;
    _293++;
    if (_293 < _279)
    goto _jump236;
    // End body of loop
    if (_287 >= 0)
    goto _jump237;
    fail_assertion("negative array index");
    _jump237:;
    if (_287 < _280.d0)
    goto _jump238;
    fail_assertion("index too large");
    _jump238:;
    int64_t _294 = 0;
    _294 *= _280.d0;
    _294 += _287;
    double _295 = _280.data[_294];
    _a3_double _296;
    // Computing bound for g
    _296.d0 = _279;
    if (_279 > 0) 
    goto _jump239;
    fail_assertion("non-positive loop bound");
    _jump239:;
    // Computing bound for h
    int64_t _297 = 218;
    _296.d1 = _297;
    if (_297 > 0) 
    goto _jump240;
    fail_assertion("non-positive loop bound");
    _jump240:;
    // Computing bound for i
    _296.d2 = _278;
    if (_278 > 0) 
    goto _jump241;
    fail_assertion("non-positive loop bound");
    _jump241:;
    // Computing total size of heap memory to allocate
    int64_t _298 = 1;
    _298 *= _279;
    _298 *= _297;
    _298 *= _278;
    _298 *= sizeof(double);
    _296.data = jpl_alloc(_298);
    int64_t _299 = 0; // i
    int64_t _300 = 0; // h
    int64_t _301 = 0; // g
    _jump242:; // Begin body of loop
    double _302 = 12.0;
    int64_t _303 = 0;
    _303 *= _296.d0;
    _303 += _301;
    _303 *= _296.d1;
    _303 += _300;
    _303 *= _296.d2;
    _303 += _299;
    _296.data[_303] = _302;
    _299++;
    if (_299 < _278)
    goto _jump242;
    _299 = 0;
    _300++;
    if (_300 < _297)
    goto _jump242;
    _300 = 0;
    _301++;
    if (_301 < _279)
    goto _jump242;
    // End body of loop
    int64_t _304 = 114;
    int64_t _305;
    // Computing bound for g
    int64_t _306 = 243;
    if (_306 > 0) 
    goto _jump243;
    fail_assertion("non-positive loop bound");
    _jump243:;
    // Computing bound for h
    if (_279 > 0) 
    goto _jump244;
    fail_assertion("non-positive loop bound");
    _jump244:;
    // Computing bound for i
    if (_278 > 0) 
    goto _jump245;
    fail_assertion("non-positive loop bound");
    _jump245:;
    _305 = 0;
    int64_t _307 = 0; // i
    int64_t _308 = 0; // h
    int64_t _309 = 0; // g
    _jump246:; // Begin body of loop
    int64_t _310 = 642;
    _305 += _310;
    _307++;
    if (_307 < _278)
    goto _jump246;
    _307 = 0;
    _308++;
    if (_308 < _279)
    goto _jump246;
    _308 = 0;
    _309++;
    if (_309 < _306)
    goto _jump246;
    // End body of loop
    if (_304 >= 0)
    goto _jump247;
    fail_assertion("negative array index");
    _jump247:;
    if (_304 < _296.d0)
    goto _jump248;
    fail_assertion("index too large");
    _jump248:;
    if (_279 >= 0)
    goto _jump249;
    fail_assertion("negative array index");
    _jump249:;
    if (_279 < _296.d1)
    goto _jump250;
    fail_assertion("index too large");
    _jump250:;
    if (_305 >= 0)
    goto _jump251;
    fail_assertion("negative array index");
    _jump251:;
    if (_305 < _296.d2)
    goto _jump252;
    fail_assertion("index too large");
    _jump252:;
    int64_t _311 = 0;
    _311 *= _296.d0;
    _311 += _304;
    _311 *= _296.d1;
    _311 += _279;
    _311 *= _296.d2;
    _311 += _305;
    double _312 = _296.data[_311];
    double _313 = 55.0;
    _a1_double _314;
    _314.d0 = 2;
    _314.data = jpl_alloc(sizeof(double) * 2);
    _314.data[0] = c;
    _314.data[1] = c;
    int64_t _315 = -_278;
    if (_315 >= 0)
    goto _jump253;
    fail_assertion("negative array index");
    _jump253:;
    if (_315 < _314.d0)
    goto _jump254;
    fail_assertion("index too large");
    _jump254:;
    int64_t _316 = 0;
    _316 *= _314.d0;
    _316 += _315;
    double _317 = _314.data[_316];
    double _318 = 33.0;
    double _319 = -_318;
    rgba _320 = { _312, _313, _317, _319 };
    double _321 = _320.r;
    double _322 = 66.0;
    double _323;
    // Computing bound for g
    int64_t _324 = 520;
    int64_t _325 = 33;
    int64_t _326 = _324 * _325;
    if (_326 > 0) 
    goto _jump255;
    fail_assertion("non-positive loop bound");
    _jump255:;
    // Computing bound for h
    int64_t _327 = -_279;
    if (_327 > 0) 
    goto _jump256;
    fail_assertion("non-positive loop bound");
    _jump256:;
    // Computing bound for i
    int64_t _328 = -_278;
    if (_328 > 0) 
    goto _jump257;
    fail_assertion("non-positive loop bound");
    _jump257:;
    _323 = 0;
    int64_t _329 = 0; // i
    int64_t _330 = 0; // h
    int64_t _331 = 0; // g
    _jump258:; // Begin body of loop
    double _332 = 78.0;
    _323 += _332;
    _329++;
    if (_329 < _328)
    goto _jump258;
    _329 = 0;
    _330++;
    if (_330 < _327)
    goto _jump258;
    _330 = 0;
    _331++;
    if (_331 < _326)
    goto _jump258;
    // End body of loop
    double _333 = fmod(_322, _323);
    bool _334 = false;
    double _335;
    if (!_334)
    goto _jump259;
    _335 = c;
    goto _jump260;
    _jump259:;
    _335 = c;
    _jump260:;
    double _336 = _335 / c;
    double _337 = -_336;
    double _338 = _333 + _337;
    _a2_double _339;
    // Computing bound for g
    int64_t _340 = -_278;
    _339.d0 = _340;
    if (_340 > 0) 
    goto _jump261;
    fail_assertion("non-positive loop bound");
    _jump261:;
    // Computing bound for h
    int64_t _341 = -_278;
    _339.d1 = _341;
    if (_341 > 0) 
    goto _jump262;
    fail_assertion("non-positive loop bound");
    _jump262:;
    // Computing total size of heap memory to allocate
    int64_t _342 = 1;
    _342 *= _340;
    _342 *= _341;
    _342 *= sizeof(double);
    _339.data = jpl_alloc(_342);
    int64_t _343 = 0; // h
    int64_t _344 = 0; // g
    _jump263:; // Begin body of loop
    double _345;
    // Computing bound for i
    if (_279 > 0) 
    goto _jump264;
    fail_assertion("non-positive loop bound");
    _jump264:;
    _345 = 0;
    int64_t _346 = 0; // i
    _jump265:; // Begin body of loop
    _345 += c;
    _346++;
    if (_346 < _279)
    goto _jump265;
    // End body of loop
    int64_t _347 = 0;
    _347 *= _339.d0;
    _347 += _344;
    _347 *= _339.d1;
    _347 += _343;
    _339.data[_347] = _345;
    _343++;
    if (_343 < _341)
    goto _jump263;
    _343 = 0;
    _344++;
    if (_344 < _340)
    goto _jump263;
    // End body of loop
    bool _348 = true;
    int64_t _349;
    if (!_348)
    goto _jump266;
    _349 = _278;
    goto _jump267;
    _jump266:;
    int64_t _350 = 743;
    _349 = _350;
    _jump267:;
    if (_279 >= 0)
    goto _jump268;
    fail_assertion("negative array index");
    _jump268:;
    if (_279 < _339.d0)
    goto _jump269;
    fail_assertion("index too large");
    _jump269:;
    if (_349 >= 0)
    goto _jump270;
    fail_assertion("negative array index");
    _jump270:;
    if (_349 < _339.d1)
    goto _jump271;
    fail_assertion("index too large");
    _jump271:;
    int64_t _351 = 0;
    _351 *= _339.d0;
    _351 += _279;
    _351 *= _339.d1;
    _351 += _349;
    double _352 = _339.data[_351];
    double _353 = -_352;
    rgba _354 = { _295, _321, _338, _353 };
    int64_t _355 = 0;
    _355 *= _247.d0;
    _355 += _279;
    _355 *= _247.d1;
    _355 += _278;
    _247.data[_355] = _354;
    _278++;
    if (_278 < _276)
    goto _jump227;
    _278 = 0;
    _279++;
    if (_279 < _275)
    goto _jump227;
    // End body of loop
    _59 = _247;
    _jump209:;
    _a2_bool _357;
    // Computing bound for h
    _357.d0 = _59.d0;
    if (_59.d0 > 0) 
    goto _jump272;
    fail_assertion("non-positive loop bound");
    _jump272:;
    // Computing bound for i
    int64_t _358 = 391;
    int64_t _359 = 683;
    if (_358 >= 0)
    goto _jump273;
    fail_assertion("negative array index");
    _jump273:;
    if (_358 < b.d0)
    goto _jump274;
    fail_assertion("index too large");
    _jump274:;
    if (_59.d1 >= 0)
    goto _jump275;
    fail_assertion("negative array index");
    _jump275:;
    if (_59.d1 < b.d1)
    goto _jump276;
    fail_assertion("index too large");
    _jump276:;
    if (_359 >= 0)
    goto _jump277;
    fail_assertion("negative array index");
    _jump277:;
    if (_359 < b.d2)
    goto _jump278;
    fail_assertion("index too large");
    _jump278:;
    int64_t _360 = 0;
    _360 *= b.d0;
    _360 += _358;
    _360 *= b.d1;
    _360 += _59.d1;
    _360 *= b.d2;
    _360 += _359;
    int64_t _361 = b.data[_360];
    _357.d1 = _361;
    if (_361 > 0) 
    goto _jump279;
    fail_assertion("non-positive loop bound");
    _jump279:;
    // Computing total size of heap memory to allocate
    int64_t _362 = 1;
    _362 *= _59.d0;
    _362 *= _361;
    _362 *= sizeof(bool);
    _357.data = jpl_alloc(_362);
    int64_t _363 = 0; // i
    int64_t _364 = 0; // h
    _jump280:; // Begin body of loop
    int64_t _365 = 377;
    int64_t _366 = _59.d0 * _365;
    bool _367 = _59.d1 == _366;
    int64_t _368 = 0;
    _368 *= _357.d0;
    _368 += _364;
    _368 *= _357.d1;
    _368 += _363;
    _357.data[_368] = _367;
    _363++;
    if (_363 < _361)
    goto _jump280;
    _363 = 0;
    _364++;
    if (_364 < _59.d0)
    goto _jump280;
    // End body of loop
    int64_t _369 = -_59.d0;
    int64_t _370 = 581;
    int64_t _371 = 328;
    int64_t _372 = _371 + _59.d1;
    int64_t _373 = _370 * _372;
    int64_t _374 = _369 * _373;
    int64_t _375 = 696;
    if (_374 >= 0)
    goto _jump281;
    fail_assertion("negative array index");
    _jump281:;
    if (_374 < _357.d0)
    goto _jump282;
    fail_assertion("index too large");
    _jump282:;
    if (_375 >= 0)
    goto _jump283;
    fail_assertion("negative array index");
    _jump283:;
    if (_375 < _357.d1)
    goto _jump284;
    fail_assertion("index too large");
    _jump284:;
    int64_t _376 = 0;
    _376 *= _357.d0;
    _376 += _374;
    _376 *= _357.d1;
    _376 += _375;
    bool _377 = _357.data[_376];
    double _378;
    if (!_377)
    goto _jump285;
    double _379 = 74.0;
    _378 = _379;
    goto _jump286;
    _jump285:;
    int64_t _380 = 488;
    int64_t _381 = -_380;
    int64_t _382 = _59.d0 % _59.d1;
    int64_t _383 = _381 % _382;
    int64_t _384 = _59.d0 % _59.d1;
    int64_t _385 = -_384;
    bool _386 = _383 >= _385;
    double _387;
    if (!_386)
    goto _jump287;
    bool _388 = true;
    double _389;
    if (!_388)
    goto _jump288;
    _389 = c;
    goto _jump289;
    _jump288:;
    _389 = c;
    _jump289:;
    bool _390 = a(b, _389);
    double _391;
    if (!_390)
    goto _jump290;
    double _392;
    // Computing bound for h
    int64_t _393 = -_59.d1;
    if (_393 > 0) 
    goto _jump291;
    fail_assertion("non-positive loop bound");
    _jump291:;
    // Computing bound for i
    int64_t _394 = 491;
    if (_394 > 0) 
    goto _jump292;
    fail_assertion("non-positive loop bound");
    _jump292:;
    _392 = 0;
    int64_t _395 = 0; // i
    int64_t _396 = 0; // h
    _jump293:; // Begin body of loop
    double _397 = 81.0;
    _392 += _397;
    _395++;
    if (_395 < _394)
    goto _jump293;
    _395 = 0;
    _396++;
    if (_396 < _393)
    goto _jump293;
    // End body of loop
    _391 = _392;
    goto _jump294;
    _jump290:;
    bool _398 = false;
    double _399;
    if (!_398)
    goto _jump295;
    double _400 = -c;
    _399 = _400;
    goto _jump296;
    _jump295:;
    _399 = c;
    _jump296:;
    _391 = _399;
    _jump294:;
    _387 = _391;
    goto _jump297;
    _jump287:;
    _a2_double _401;
    // Computing bound for h
    int64_t _402 = 128;
    int64_t _403 = -_402;
    _401.d0 = _403;
    if (_403 > 0) 
    goto _jump298;
    fail_assertion("non-positive loop bound");
    _jump298:;
    // Computing bound for i
    _401.d1 = _59.d0;
    if (_59.d0 > 0) 
    goto _jump299;
    fail_assertion("non-positive loop bound");
    _jump299:;
    // Computing total size of heap memory to allocate
    int64_t _404 = 1;
    _404 *= _403;
    _404 *= _59.d0;
    _404 *= sizeof(double);
    _401.data = jpl_alloc(_404);
    int64_t _405 = 0; // i
    int64_t _406 = 0; // h
    _jump300:; // Begin body of loop
    double _407 = -c;
    int64_t _408 = 0;
    _408 *= _401.d0;
    _408 += _406;
    _408 *= _401.d1;
    _408 += _405;
    _401.data[_408] = _407;
    _405++;
    if (_405 < _59.d0)
    goto _jump300;
    _405 = 0;
    _406++;
    if (_406 < _403)
    goto _jump300;
    // End body of loop
    int64_t _409 = _59.d1 / _59.d0;
    int64_t _410 = 51;
    int64_t _411 = _410 + _59.d0;
    if (_409 >= 0)
    goto _jump301;
    fail_assertion("negative array index");
    _jump301:;
    if (_409 < _401.d0)
    goto _jump302;
    fail_assertion("index too large");
    _jump302:;
    if (_411 >= 0)
    goto _jump303;
    fail_assertion("negative array index");
    _jump303:;
    if (_411 < _401.d1)
    goto _jump304;
    fail_assertion("index too large");
    _jump304:;
    int64_t _412 = 0;
    _412 *= _401.d0;
    _412 += _409;
    _412 *= _401.d1;
    _412 += _411;
    double _413 = _401.data[_412];
    _387 = _413;
    _jump297:;
    _378 = _387;
    _jump286:;
    bool _414 = a(b, _378);
    bool _356 = _414;
    if (0 != _414)
    goto _jump305;
    bool _415 = false;
    bool _416;
    if (!_415)
    goto _jump306;
    bool _417 = false;
    _416 = _417;
    goto _jump307;
    _jump306:;
    double _419;
    // Computing bound for h
    if (_59.d1 > 0) 
    goto _jump308;
    fail_assertion("non-positive loop bound");
    _jump308:;
    // Computing bound for i
    if (_59.d1 > 0) 
    goto _jump309;
    fail_assertion("non-positive loop bound");
    _jump309:;
    // Computing bound for j
    bool _420 = false;
    int64_t _421;
    if (!_420)
    goto _jump310;
    int64_t _422 = 489;
    _421 = _422;
    goto _jump311;
    _jump310:;
    int64_t _423 = 333;
    _421 = _423;
    _jump311:;
    if (_421 > 0) 
    goto _jump312;
    fail_assertion("non-positive loop bound");
    _jump312:;
    _419 = 0;
    int64_t _424 = 0; // j
    int64_t _425 = 0; // i
    int64_t _426 = 0; // h
    _jump313:; // Begin body of loop
    double _427;
    // Computing bound for k
    if (_59.d0 > 0) 
    goto _jump314;
    fail_assertion("non-positive loop bound");
    _jump314:;
    // Computing bound for l
    int64_t _428 = 619;
    if (_428 > 0) 
    goto _jump315;
    fail_assertion("non-positive loop bound");
    _jump315:;
    // Computing bound for m
    int64_t _429 = 367;
    if (_429 > 0) 
    goto _jump316;
    fail_assertion("non-positive loop bound");
    _jump316:;
    _427 = 0;
    int64_t _430 = 0; // m
    int64_t _431 = 0; // l
    int64_t _432 = 0; // k
    _jump317:; // Begin body of loop
    double _433 = 65.0;
    _427 += _433;
    _430++;
    if (_430 < _429)
    goto _jump317;
    _430 = 0;
    _431++;
    if (_431 < _428)
    goto _jump317;
    _431 = 0;
    _432++;
    if (_432 < _59.d0)
    goto _jump317;
    // End body of loop
    _419 += _427;
    _424++;
    if (_424 < _421)
    goto _jump313;
    _424 = 0;
    _425++;
    if (_425 < _59.d1)
    goto _jump313;
    _425 = 0;
    _426++;
    if (_426 < _59.d1)
    goto _jump313;
    // End body of loop
    double _434 = -_419;
    bool _435 = _434 != c;
    bool _418 = _435;
    if (0 == _435)
    goto _jump318;
    double _437 = -c;
    bool _438 = _437 < c;
    bool _439 = !_438;
    bool _436 = _439;
    if (0 != _439)
    goto _jump319;
    _a1__a3_int64_t _440;
    _440.d0 = 2;
    _440.data = jpl_alloc(sizeof(_a3_int64_t) * 2);
    _440.data[0] = b;
    _440.data[1] = b;
    bool _441 = true;
    int64_t _442;
    if (!_441)
    goto _jump320;
    _442 = _59.d0;
    goto _jump321;
    _jump320:;
    int64_t _443 = 169;
    _442 = _443;
    _jump321:;
    if (_442 >= 0)
    goto _jump322;
    fail_assertion("negative array index");
    _jump322:;
    if (_442 < _440.d0)
    goto _jump323;
    fail_assertion("index too large");
    _jump323:;
    int64_t _444 = 0;
    _444 *= _440.d0;
    _444 += _442;
    _a3_int64_t _445 = _440.data[_444];
    double _446 = 23.0;
    bool _447 = a(_445, _446);
    _436 = _447;
    _jump319:;
    _418 = _436;
    _jump318:;
    _416 = _418;
    _jump307:;
    _356 = _416;
    _jump305:;
    return _356;
    double _448 = -c;
    bool _450 = false;
    bool _449 = _450;
    if (0 == _450)
    goto _jump324;
    double _451 = 83.0;
    double _452 = _451 * _448;
    bool _453 = _448 > _452;
    _449 = _453;
    _jump324:;
    bool _454 = !_449;
    bool _455;
    if (!_454)
    goto _jump325;
    double _456 = 91.0;
    bool _457 = a(b, _456);
    bool _458 = !_457;
    _455 = _458;
    goto _jump326;
    _jump325:;
    double _459 = 28.0;
    bool _460 = c > _459;
    _455 = _460;
    _jump326:;
    int64_t _461;
    if (!_455)
    goto _jump327;
    int64_t _462 = -_59.d1;
    _461 = _462;
    goto _jump328;
    _jump327:;
    _a1_int64_t _463;
    _463.d0 = 1;
    _463.data = jpl_alloc(sizeof(int64_t) * 1);
    _463.data[0] = _59.d0;
    if (_59.d1 >= 0)
    goto _jump329;
    fail_assertion("negative array index");
    _jump329:;
    if (_59.d1 < _463.d0)
    goto _jump330;
    fail_assertion("index too large");
    _jump330:;
    int64_t _464 = 0;
    _464 *= _463.d0;
    _464 += _59.d1;
    int64_t _465 = _463.data[_464];
    _461 = _465;
    _jump328:;
    int64_t _466;
    // Computing bound for i
    int64_t _467;
    // Computing bound for i
    int64_t _468 = 271;
    if (_468 > 0) 
    goto _jump331;
    fail_assertion("non-positive loop bound");
    _jump331:;
    // Computing bound for j
    if (_59.d0 > 0) 
    goto _jump332;
    fail_assertion("non-positive loop bound");
    _jump332:;
    _467 = 0;
    int64_t _469 = 0; // j
    int64_t _470 = 0; // i
    _jump333:; // Begin body of loop
    int64_t _471 = 957;
    if (_471 >= 0)
    goto _jump334;
    fail_assertion("negative array index");
    _jump334:;
    if (_471 < b.d0)
    goto _jump335;
    fail_assertion("index too large");
    _jump335:;
    if (_59.d0 >= 0)
    goto _jump336;
    fail_assertion("negative array index");
    _jump336:;
    if (_59.d0 < b.d1)
    goto _jump337;
    fail_assertion("index too large");
    _jump337:;
    if (_470 >= 0)
    goto _jump338;
    fail_assertion("negative array index");
    _jump338:;
    if (_470 < b.d2)
    goto _jump339;
    fail_assertion("index too large");
    _jump339:;
    int64_t _472 = 0;
    _472 *= b.d0;
    _472 += _471;
    _472 *= b.d1;
    _472 += _59.d0;
    _472 *= b.d2;
    _472 += _470;
    int64_t _473 = b.data[_472];
    _467 += _473;
    _469++;
    if (_469 < _59.d0)
    goto _jump333;
    _469 = 0;
    _470++;
    if (_470 < _468)
    goto _jump333;
    // End body of loop
    if (_467 > 0) 
    goto _jump340;
    fail_assertion("non-positive loop bound");
    _jump340:;
    // Computing bound for j
    int64_t _474 = -_59.d1;
    int64_t _475 = _474 / _59.d0;
    if (_475 > 0) 
    goto _jump341;
    fail_assertion("non-positive loop bound");
    _jump341:;
    _466 = 0;
    int64_t _476 = 0; // j
    int64_t _477 = 0; // i
    _jump342:; // Begin body of loop
    _466 += _59.d1;
    _476++;
    if (_476 < _475)
    goto _jump342;
    _476 = 0;
    _477++;
    if (_477 < _467)
    goto _jump342;
    // End body of loop
    int64_t _478 = -_466;
    bool _479 = a(b, _448);
    int64_t _480;
    if (!_479)
    goto _jump343;
    int64_t _481 = 281;
    _480 = _481;
    goto _jump344;
    _jump343:;
    _480 = _59.d0;
    _jump344:;
    bool _482 = true;
    int64_t _483;
    if (!_482)
    goto _jump345;
    bool _484 = a(b, c);
    int64_t _485;
    if (!_484)
    goto _jump346;
    int64_t _486;
    // Computing bound for i
    if (_59.d1 > 0) 
    goto _jump347;
    fail_assertion("non-positive loop bound");
    _jump347:;
    _486 = 0;
    int64_t _487 = 0; // i
    _jump348:; // Begin body of loop
    _486 += _59.d1;
    _487++;
    if (_487 < _59.d1)
    goto _jump348;
    // End body of loop
    _485 = _486;
    goto _jump349;
    _jump346:;
    int64_t _488 = 942;
    int64_t _489 = -_488;
    _485 = _489;
    _jump349:;
    _483 = _485;
    goto _jump350;
    _jump345:;
    int64_t _490 = -_59.d0;
    int64_t _491 = _59.d1 / _490;
    _483 = _491;
    _jump350:;
    int64_t _492 = _480 * _483;
    int64_t _493 = _478 % _492;
    int64_t _494 = -_493;
    bool _495 = _461 > _494;
    if (0 != _495)
    goto _jump351;
    fail_assertion("i");
    _jump351:;
    double _496;
    // Computing bound for i
    if (_59.d1 > 0) 
    goto _jump352;
    fail_assertion("non-positive loop bound");
    _jump352:;
    _496 = 0;
    int64_t _497 = 0; // i
    _jump353:; // Begin body of loop
    bool _498 = true;
    bool _499 = !_498;
    _a3__a3_int64_t _500;
    if (!_499)
    goto _jump354;
    _a3__a3_int64_t _501;
    // Computing bound for j
    int64_t _502 = 386;
    _501.d0 = _502;
    if (_502 > 0) 
    goto _jump355;
    fail_assertion("non-positive loop bound");
    _jump355:;
    // Computing bound for k
    int64_t _503 = 179;
    _501.d1 = _503;
    if (_503 > 0) 
    goto _jump356;
    fail_assertion("non-positive loop bound");
    _jump356:;
    // Computing bound for l
    _501.d2 = _497;
    if (_497 > 0) 
    goto _jump357;
    fail_assertion("non-positive loop bound");
    _jump357:;
    // Computing total size of heap memory to allocate
    int64_t _504 = 1;
    _504 *= _502;
    _504 *= _503;
    _504 *= _497;
    _504 *= sizeof(_a3_int64_t);
    _501.data = jpl_alloc(_504);
    int64_t _505 = 0; // l
    int64_t _506 = 0; // k
    int64_t _507 = 0; // j
    _jump358:; // Begin body of loop
    int64_t _508 = 0;
    _508 *= _501.d0;
    _508 += _507;
    _508 *= _501.d1;
    _508 += _506;
    _508 *= _501.d2;
    _508 += _505;
    _501.data[_508] = b;
    _505++;
    if (_505 < _497)
    goto _jump358;
    _505 = 0;
    _506++;
    if (_506 < _503)
    goto _jump358;
    _506 = 0;
    _507++;
    if (_507 < _502)
    goto _jump358;
    // End body of loop
    _500 = _501;
    goto _jump359;
    _jump354:;
    double _509 = 21.0;
    bool _510 = _509 > _448;
    _a3__a3_int64_t _511;
    if (!_510)
    goto _jump360;
    _a3__a3_int64_t _512;
    // Computing bound for j
    int64_t _513 = 665;
    _512.d0 = _513;
    if (_513 > 0) 
    goto _jump361;
    fail_assertion("non-positive loop bound");
    _jump361:;
    // Computing bound for k
    _512.d1 = _497;
    if (_497 > 0) 
    goto _jump362;
    fail_assertion("non-positive loop bound");
    _jump362:;
    // Computing bound for l
    _512.d2 = _497;
    if (_497 > 0) 
    goto _jump363;
    fail_assertion("non-positive loop bound");
    _jump363:;
    // Computing total size of heap memory to allocate
    int64_t _514 = 1;
    _514 *= _513;
    _514 *= _497;
    _514 *= _497;
    _514 *= sizeof(_a3_int64_t);
    _512.data = jpl_alloc(_514);
    int64_t _515 = 0; // l
    int64_t _516 = 0; // k
    int64_t _517 = 0; // j
    _jump364:; // Begin body of loop
    int64_t _518 = 0;
    _518 *= _512.d0;
    _518 += _517;
    _518 *= _512.d1;
    _518 += _516;
    _518 *= _512.d2;
    _518 += _515;
    _512.data[_518] = b;
    _515++;
    if (_515 < _497)
    goto _jump364;
    _515 = 0;
    _516++;
    if (_516 < _497)
    goto _jump364;
    _516 = 0;
    _517++;
    if (_517 < _513)
    goto _jump364;
    // End body of loop
    _511 = _512;
    goto _jump365;
    _jump360:;
    _a3__a3_int64_t _519;
    // Computing bound for j
    _519.d0 = _59.d1;
    if (_59.d1 > 0) 
    goto _jump366;
    fail_assertion("non-positive loop bound");
    _jump366:;
    // Computing bound for k
    int64_t _520 = 161;
    _519.d1 = _520;
    if (_520 > 0) 
    goto _jump367;
    fail_assertion("non-positive loop bound");
    _jump367:;
    // Computing bound for l
    _519.d2 = _59.d1;
    if (_59.d1 > 0) 
    goto _jump368;
    fail_assertion("non-positive loop bound");
    _jump368:;
    // Computing total size of heap memory to allocate
    int64_t _521 = 1;
    _521 *= _59.d1;
    _521 *= _520;
    _521 *= _59.d1;
    _521 *= sizeof(_a3_int64_t);
    _519.data = jpl_alloc(_521);
    int64_t _522 = 0; // l
    int64_t _523 = 0; // k
    int64_t _524 = 0; // j
    _jump369:; // Begin body of loop
    int64_t _525 = 0;
    _525 *= _519.d0;
    _525 += _524;
    _525 *= _519.d1;
    _525 += _523;
    _525 *= _519.d2;
    _525 += _522;
    _519.data[_525] = b;
    _522++;
    if (_522 < _59.d1)
    goto _jump369;
    _522 = 0;
    _523++;
    if (_523 < _520)
    goto _jump369;
    _523 = 0;
    _524++;
    if (_524 < _59.d1)
    goto _jump369;
    // End body of loop
    _511 = _519;
    _jump365:;
    _500 = _511;
    _jump359:;
    int64_t _526 = 180;
    int64_t _527 = -_497;
    int64_t _528 = -_527;
    if (_59.d0 >= 0)
    goto _jump370;
    fail_assertion("negative array index");
    _jump370:;
    if (_59.d0 < _500.d0)
    goto _jump371;
    fail_assertion("index too large");
    _jump371:;
    if (_526 >= 0)
    goto _jump372;
    fail_assertion("negative array index");
    _jump372:;
    if (_526 < _500.d1)
    goto _jump373;
    fail_assertion("index too large");
    _jump373:;
    if (_528 >= 0)
    goto _jump374;
    fail_assertion("negative array index");
    _jump374:;
    if (_528 < _500.d2)
    goto _jump375;
    fail_assertion("index too large");
    _jump375:;
    int64_t _529 = 0;
    _529 *= _500.d0;
    _529 += _59.d0;
    _529 *= _500.d1;
    _529 += _526;
    _529 *= _500.d2;
    _529 += _528;
    _a3_int64_t _530 = _500.data[_529];
    double _531 = 93.0;
    double _532 = -_531;
    double _533 = -_532;
    bool _534 = a(_530, _533);
    double _535;
    if (!_534)
    goto _jump376;
    bool _537 = false;
    bool _536 = _537;
    if (0 == _537)
    goto _jump377;
    _a2_bool _538;
    // Computing bound for j
    _538.d0 = _59.d0;
    if (_59.d0 > 0) 
    goto _jump378;
    fail_assertion("non-positive loop bound");
    _jump378:;
    // Computing bound for k
    _538.d1 = _59.d0;
    if (_59.d0 > 0) 
    goto _jump379;
    fail_assertion("non-positive loop bound");
    _jump379:;
    // Computing total size of heap memory to allocate
    int64_t _539 = 1;
    _539 *= _59.d0;
    _539 *= _59.d0;
    _539 *= sizeof(bool);
    _538.data = jpl_alloc(_539);
    int64_t _540 = 0; // k
    int64_t _541 = 0; // j
    _jump380:; // Begin body of loop
    double _542 = 82.0;
    double _543 = 99.0;
    bool _544 = _542 >= _543;
    int64_t _545 = 0;
    _545 *= _538.d0;
    _545 += _541;
    _545 *= _538.d1;
    _545 += _540;
    _538.data[_545] = _544;
    _540++;
    if (_540 < _59.d0)
    goto _jump380;
    _540 = 0;
    _541++;
    if (_541 < _59.d0)
    goto _jump380;
    // End body of loop
    int64_t _546 = 933;
    int64_t _547 = 640;
    bool _548 = _546 < _547;
    int64_t _549;
    if (!_548)
    goto _jump381;
    _549 = _497;
    goto _jump382;
    _jump381:;
    _549 = _59.d1;
    _jump382:;
    if (_497 >= 0)
    goto _jump383;
    fail_assertion("negative array index");
    _jump383:;
    if (_497 < _538.d0)
    goto _jump384;
    fail_assertion("index too large");
    _jump384:;
    if (_549 >= 0)
    goto _jump385;
    fail_assertion("negative array index");
    _jump385:;
    if (_549 < _538.d1)
    goto _jump386;
    fail_assertion("index too large");
    _jump386:;
    int64_t _550 = 0;
    _550 *= _538.d0;
    _550 += _497;
    _550 *= _538.d1;
    _550 += _549;
    bool _551 = _538.data[_550];
    _536 = _551;
    _jump377:;
    double _552;
    if (!_536)
    goto _jump387;
    double _553 = -_448;
    _552 = _553;
    goto _jump388;
    _jump387:;
    double _554 = 6.0;
    double _555 = -_554;
    double _556 = 53.0;
    double _557 = fmod(_555, _556);
    _552 = _557;
    _jump388:;
    _535 = _552;
    goto _jump389;
    _jump376:;
    double _558;
    // Computing bound for j
    if (_497 > 0) 
    goto _jump390;
    fail_assertion("non-positive loop bound");
    _jump390:;
    // Computing bound for k
    int64_t _559;
    // Computing bound for j
    _a2_int64_t _560;
    // Computing bound for j
    _560.d0 = _59.d0;
    if (_59.d0 > 0) 
    goto _jump391;
    fail_assertion("non-positive loop bound");
    _jump391:;
    // Computing bound for k
    _560.d1 = _497;
    if (_497 > 0) 
    goto _jump392;
    fail_assertion("non-positive loop bound");
    _jump392:;
    // Computing total size of heap memory to allocate
    int64_t _561 = 1;
    _561 *= _59.d0;
    _561 *= _497;
    _561 *= sizeof(int64_t);
    _560.data = jpl_alloc(_561);
    int64_t _562 = 0; // k
    int64_t _563 = 0; // j
    _jump393:; // Begin body of loop
    int64_t _564 = 0;
    _564 *= _560.d0;
    _564 += _563;
    _564 *= _560.d1;
    _564 += _562;
    _560.data[_564] = _563;
    _562++;
    if (_562 < _497)
    goto _jump393;
    _562 = 0;
    _563++;
    if (_563 < _59.d0)
    goto _jump393;
    // End body of loop
    int64_t _565 = 836;
    int64_t _566 = 988;
    if (_565 >= 0)
    goto _jump394;
    fail_assertion("negative array index");
    _jump394:;
    if (_565 < _560.d0)
    goto _jump395;
    fail_assertion("index too large");
    _jump395:;
    if (_566 >= 0)
    goto _jump396;
    fail_assertion("negative array index");
    _jump396:;
    if (_566 < _560.d1)
    goto _jump397;
    fail_assertion("index too large");
    _jump397:;
    int64_t _567 = 0;
    _567 *= _560.d0;
    _567 += _565;
    _567 *= _560.d1;
    _567 += _566;
    int64_t _568 = _560.data[_567];
    if (_568 > 0) 
    goto _jump398;
    fail_assertion("non-positive loop bound");
    _jump398:;
    // Computing bound for k
    if (_497 > 0) 
    goto _jump399;
    fail_assertion("non-positive loop bound");
    _jump399:;
    _559 = 0;
    int64_t _569 = 0; // k
    int64_t _570 = 0; // j
    _jump400:; // Begin body of loop
    int64_t _571 = 875;
    int64_t _572 = -_571;
    bool _573 = false;
    int64_t _574;
    if (!_573)
    goto _jump401;
    _574 = _59.d0;
    goto _jump402;
    _jump401:;
    _574 = _570;
    _jump402:;
    int64_t _575 = _572 - _574;
    _559 += _575;
    _569++;
    if (_569 < _497)
    goto _jump400;
    _569 = 0;
    _570++;
    if (_570 < _568)
    goto _jump400;
    // End body of loop
    int64_t _576 = -_497;
    _a2_int64_t _577;
    // Computing bound for j
    _577.d0 = _59.d1;
    if (_59.d1 > 0) 
    goto _jump403;
    fail_assertion("non-positive loop bound");
    _jump403:;
    // Computing bound for k
    _577.d1 = _59.d1;
    if (_59.d1 > 0) 
    goto _jump404;
    fail_assertion("non-positive loop bound");
    _jump404:;
    // Computing total size of heap memory to allocate
    int64_t _578 = 1;
    _578 *= _59.d1;
    _578 *= _59.d1;
    _578 *= sizeof(int64_t);
    _577.data = jpl_alloc(_578);
    int64_t _579 = 0; // k
    int64_t _580 = 0; // j
    _jump405:; // Begin body of loop
    int64_t _581 = 269;
    int64_t _582 = 0;
    _582 *= _577.d0;
    _582 += _580;
    _582 *= _577.d1;
    _582 += _579;
    _577.data[_582] = _581;
    _579++;
    if (_579 < _59.d1)
    goto _jump405;
    _579 = 0;
    _580++;
    if (_580 < _59.d1)
    goto _jump405;
    // End body of loop
    int64_t _583 = 25;
    int64_t _584 = _59.d0 % _583;
    if (_59.d1 >= 0)
    goto _jump406;
    fail_assertion("negative array index");
    _jump406:;
    if (_59.d1 < _577.d0)
    goto _jump407;
    fail_assertion("index too large");
    _jump407:;
    if (_584 >= 0)
    goto _jump408;
    fail_assertion("negative array index");
    _jump408:;
    if (_584 < _577.d1)
    goto _jump409;
    fail_assertion("index too large");
    _jump409:;
    int64_t _585 = 0;
    _585 *= _577.d0;
    _585 += _59.d1;
    _585 *= _577.d1;
    _585 += _584;
    int64_t _586 = _577.data[_585];
    bool _587 = false;
    int64_t _588;
    if (!_587)
    goto _jump410;
    int64_t _589 = _59.d1 * _59.d0;
    _588 = _589;
    goto _jump411;
    _jump410:;
    int64_t _590 = 382;
    int64_t _591 = _590 - _59.d0;
    _588 = _591;
    _jump411:;
    if (_576 >= 0)
    goto _jump412;
    fail_assertion("negative array index");
    _jump412:;
    if (_576 < b.d0)
    goto _jump413;
    fail_assertion("index too large");
    _jump413:;
    if (_586 >= 0)
    goto _jump414;
    fail_assertion("negative array index");
    _jump414:;
    if (_586 < b.d1)
    goto _jump415;
    fail_assertion("index too large");
    _jump415:;
    if (_588 >= 0)
    goto _jump416;
    fail_assertion("negative array index");
    _jump416:;
    if (_588 < b.d2)
    goto _jump417;
    fail_assertion("index too large");
    _jump417:;
    int64_t _592 = 0;
    _592 *= b.d0;
    _592 += _576;
    _592 *= b.d1;
    _592 += _586;
    _592 *= b.d2;
    _592 += _588;
    int64_t _593 = b.data[_592];
    int64_t _594 = _559 % _593;
    if (_594 > 0) 
    goto _jump418;
    fail_assertion("non-positive loop bound");
    _jump418:;
    // Computing bound for l
    if (_59.d1 > 0) 
    goto _jump419;
    fail_assertion("non-positive loop bound");
    _jump419:;
    _558 = 0;
    int64_t _595 = 0; // l
    int64_t _596 = 0; // k
    int64_t _597 = 0; // j
    _jump420:; // Begin body of loop
    double _598 = -c;
    double _599;
    // Computing bound for m
    if (_497 > 0) 
    goto _jump421;
    fail_assertion("non-positive loop bound");
    _jump421:;
    // Computing bound for n
    if (_597 > 0) 
    goto _jump422;
    fail_assertion("non-positive loop bound");
    _jump422:;
    // Computing bound for o
    if (_597 > 0) 
    goto _jump423;
    fail_assertion("non-positive loop bound");
    _jump423:;
    _599 = 0;
    int64_t _600 = 0; // o
    int64_t _601 = 0; // n
    int64_t _602 = 0; // m
    _jump424:; // Begin body of loop
    _599 += c;
    _600++;
    if (_600 < _597)
    goto _jump424;
    _600 = 0;
    _601++;
    if (_601 < _597)
    goto _jump424;
    _601 = 0;
    _602++;
    if (_602 < _497)
    goto _jump424;
    // End body of loop
    rgba _603 = { _598, _599, c, _448 };
    double _604 = _603.a;
    _558 += _604;
    _595++;
    if (_595 < _59.d1)
    goto _jump420;
    _595 = 0;
    _596++;
    if (_596 < _594)
    goto _jump420;
    _596 = 0;
    _597++;
    if (_597 < _497)
    goto _jump420;
    // End body of loop
    _535 = _558;
    _jump389:;
    _496 += _535;
    _497++;
    if (_497 < _59.d1)
    goto _jump353;
    // End body of loop
    bool _605 = false;
    return _605;
}

rgba b(_a3_bool c, int64_t g, double h) {
    double _0;
    // Computing bound for i
    bool _1 = false;
    _a1_bool _2;
    _2.d0 = 1;
    _2.data = jpl_alloc(sizeof(bool) * 1);
    _2.data[0] = _1;
    int64_t _3;
    // Computing bound for i
    bool _4 = true;
    int64_t _5;
    if (!_4)
    goto _jump425;
    int64_t _6;
    // Computing bound for i
    if (c.d0 > 0) 
    goto _jump426;
    fail_assertion("non-positive loop bound");
    _jump426:;
    // Computing bound for j
    if (g > 0) 
    goto _jump427;
    fail_assertion("non-positive loop bound");
    _jump427:;
    _6 = 0;
    int64_t _7 = 0; // j
    int64_t _8 = 0; // i
    _jump428:; // Begin body of loop
    _6 += _8;
    _7++;
    if (_7 < g)
    goto _jump428;
    _7 = 0;
    _8++;
    if (_8 < c.d0)
    goto _jump428;
    // End body of loop
    _5 = _6;
    goto _jump429;
    _jump425:;
    _5 = g;
    _jump429:;
    if (_5 > 0) 
    goto _jump430;
    fail_assertion("non-positive loop bound");
    _jump430:;
    // Computing bound for j
    if (c.d1 > 0) 
    goto _jump431;
    fail_assertion("non-positive loop bound");
    _jump431:;
    _3 = 0;
    int64_t _9 = 0; // j
    int64_t _10 = 0; // i
    _jump432:; // Begin body of loop
    _3 += _9;
    _9++;
    if (_9 < c.d1)
    goto _jump432;
    _9 = 0;
    _10++;
    if (_10 < _5)
    goto _jump432;
    // End body of loop
    if (_3 >= 0)
    goto _jump433;
    fail_assertion("negative array index");
    _jump433:;
    if (_3 < _2.d0)
    goto _jump434;
    fail_assertion("index too large");
    _jump434:;
    int64_t _11 = 0;
    _11 *= _2.d0;
    _11 += _3;
    bool _12 = _2.data[_11];
    int64_t _13;
    if (!_12)
    goto _jump435;
    int64_t _14;
    // Computing bound for i
    int64_t _15;
    // Computing bound for i
    if (g > 0) 
    goto _jump436;
    fail_assertion("non-positive loop bound");
    _jump436:;
    // Computing bound for j
    if (c.d0 > 0) 
    goto _jump437;
    fail_assertion("non-positive loop bound");
    _jump437:;
    // Computing bound for k
    int64_t _16 = -c.d1;
    if (_16 > 0) 
    goto _jump438;
    fail_assertion("non-positive loop bound");
    _jump438:;
    _15 = 0;
    int64_t _17 = 0; // k
    int64_t _18 = 0; // j
    int64_t _19 = 0; // i
    _jump439:; // Begin body of loop
    int64_t _20 = c.d0 * g;
    _15 += _20;
    _17++;
    if (_17 < _16)
    goto _jump439;
    _17 = 0;
    _18++;
    if (_18 < c.d0)
    goto _jump439;
    _18 = 0;
    _19++;
    if (_19 < g)
    goto _jump439;
    // End body of loop
    if (_15 > 0) 
    goto _jump440;
    fail_assertion("non-positive loop bound");
    _jump440:;
    // Computing bound for j
    if (g > 0) 
    goto _jump441;
    fail_assertion("non-positive loop bound");
    _jump441:;
    // Computing bound for k
    int64_t _21 = -c.d2;
    if (_21 > 0) 
    goto _jump442;
    fail_assertion("non-positive loop bound");
    _jump442:;
    _14 = 0;
    int64_t _22 = 0; // k
    int64_t _23 = 0; // j
    int64_t _24 = 0; // i
    _jump443:; // Begin body of loop
    _14 += _23;
    _22++;
    if (_22 < _21)
    goto _jump443;
    _22 = 0;
    _23++;
    if (_23 < g)
    goto _jump443;
    _23 = 0;
    _24++;
    if (_24 < _15)
    goto _jump443;
    // End body of loop
    _13 = _14;
    goto _jump444;
    _jump435:;
    int64_t _25 = 642;
    _13 = _25;
    _jump444:;
    int64_t _26 = _13 % c.d1;
    if (_26 > 0) 
    goto _jump445;
    fail_assertion("non-positive loop bound");
    _jump445:;
    // Computing bound for j
    if (c.d0 > 0) 
    goto _jump446;
    fail_assertion("non-positive loop bound");
    _jump446:;
    // Computing bound for k
    int64_t _27 = 972;
    if (_27 > 0) 
    goto _jump447;
    fail_assertion("non-positive loop bound");
    _jump447:;
    _0 = 0;
    int64_t _28 = 0; // k
    int64_t _29 = 0; // j
    int64_t _30 = 0; // i
    _jump448:; // Begin body of loop
    double _31 = 80.0;
    double _32 = 64.0;
    double _33 = _31 * _32;
    _0 += _33;
    _28++;
    if (_28 < _27)
    goto _jump448;
    _28 = 0;
    _29++;
    if (_29 < c.d0)
    goto _jump448;
    _29 = 0;
    _30++;
    if (_30 < _26)
    goto _jump448;
    // End body of loop
    bool _34 = true;
    bool _35;
    if (!_34)
    goto _jump449;
    bool _36 = true;
    _35 = _36;
    goto _jump450;
    _jump449:;
    int64_t _37 = 270;
    int64_t _38 = -c.d1;
    int64_t _39 = g - _38;
    bool _40 = _37 < _39;
    _35 = _40;
    _jump450:;
    _a1_int64_t _41;
    if (!_35)
    goto _jump451;
    _a1_int64_t _42;
    // Computing bound for j
    _a1_int64_t _43;
    // Computing bound for j
    bool _44 = true;
    int64_t _45;
    if (!_44)
    goto _jump452;
    _45 = c.d2;
    goto _jump453;
    _jump452:;
    _45 = c.d0;
    _jump453:;
    _43.d0 = _45;
    if (_45 > 0) 
    goto _jump454;
    fail_assertion("non-positive loop bound");
    _jump454:;
    // Computing total size of heap memory to allocate
    int64_t _46 = 1;
    _46 *= _45;
    _46 *= sizeof(int64_t);
    _43.data = jpl_alloc(_46);
    int64_t _47 = 0; // j
    _jump455:; // Begin body of loop
    int64_t _48 = 0;
    _48 *= _43.d0;
    _48 += _47;
    _43.data[_48] = c.d2;
    _47++;
    if (_47 < _45)
    goto _jump455;
    // End body of loop
    if (g >= 0)
    goto _jump456;
    fail_assertion("negative array index");
    _jump456:;
    if (g < _43.d0)
    goto _jump457;
    fail_assertion("index too large");
    _jump457:;
    int64_t _49 = 0;
    _49 *= _43.d0;
    _49 += g;
    int64_t _50 = _43.data[_49];
    _42.d0 = _50;
    if (_50 > 0) 
    goto _jump458;
    fail_assertion("non-positive loop bound");
    _jump458:;
    // Computing total size of heap memory to allocate
    int64_t _51 = 1;
    _51 *= _50;
    _51 *= sizeof(int64_t);
    _42.data = jpl_alloc(_51);
    int64_t _52 = 0; // j
    _jump459:; // Begin body of loop
    int64_t _53 = 733;
    int64_t _54 = 0;
    int64_t _55 = _53 * _54;
    int64_t _56 = 0;
    _56 *= _42.d0;
    _56 += _52;
    _42.data[_56] = _55;
    _52++;
    if (_52 < _50)
    goto _jump459;
    // End body of loop
    _41 = _42;
    goto _jump460;
    _jump451:;
    bool _57 = true;
    _a1_int64_t _58;
    if (!_57)
    goto _jump461;
    int64_t _59 = 161;
    bool _60 = _59 >= c.d1;
    int64_t _61;
    if (!_60)
    goto _jump462;
    int64_t _62 = 424;
    int64_t _63 = c.d0 + _62;
    _61 = _63;
    goto _jump463;
    _jump462:;
    int64_t _64 = -c.d0;
    _61 = _64;
    _jump463:;
    _a1_int64_t _65;
    _65.d0 = 2;
    _65.data = jpl_alloc(sizeof(int64_t) * 2);
    _65.data[0] = _61;
    _65.data[1] = c.d0;
    _58 = _65;
    goto _jump464;
    _jump461:;
    _a1_int64_t _66;
    // Computing bound for j
    _66.d0 = g;
    if (g > 0) 
    goto _jump465;
    fail_assertion("non-positive loop bound");
    _jump465:;
    // Computing total size of heap memory to allocate
    int64_t _67 = 1;
    _67 *= g;
    _67 *= sizeof(int64_t);
    _66.data = jpl_alloc(_67);
    int64_t _68 = 0; // j
    _jump466:; // Begin body of loop
    int64_t _69 = 0;
    _69 *= _66.d0;
    _69 += _68;
    _66.data[_69] = c.d0;
    _68++;
    if (_68 < g)
    goto _jump466;
    // End body of loop
    _58 = _66;
    _jump464:;
    _41 = _58;
    _jump460:;
    int64_t _70;
    // Computing bound for j
    int64_t _71 = 735;
    int64_t _72 = -_71;
    if (_72 > 0) 
    goto _jump467;
    fail_assertion("non-positive loop bound");
    _jump467:;
    // Computing bound for k
    if (c.d2 > 0) 
    goto _jump468;
    fail_assertion("non-positive loop bound");
    _jump468:;
    _70 = 0;
    int64_t _73 = 0; // k
    int64_t _74 = 0; // j
    _jump469:; // Begin body of loop
    int64_t _75;
    // Computing bound for l
    int64_t _76;
    // Computing bound for l
    int64_t _77 = -g;
    if (_77 > 0) 
    goto _jump470;
    fail_assertion("non-positive loop bound");
    _jump470:;
    _76 = 0;
    int64_t _78 = 0; // l
    _jump471:; // Begin body of loop
    _76 += c.d2;
    _78++;
    if (_78 < _77)
    goto _jump471;
    // End body of loop
    if (_76 > 0) 
    goto _jump472;
    fail_assertion("non-positive loop bound");
    _jump472:;
    _75 = 0;
    int64_t _79 = 0; // l
    _jump473:; // Begin body of loop
    _75 += c.d1;
    _79++;
    if (_79 < _76)
    goto _jump473;
    // End body of loop
    _70 += _75;
    _73++;
    if (_73 < c.d2)
    goto _jump469;
    _73 = 0;
    _74++;
    if (_74 < _72)
    goto _jump469;
    // End body of loop
    if (_70 >= 0)
    goto _jump474;
    fail_assertion("negative array index");
    _jump474:;
    if (_70 < _41.d0)
    goto _jump475;
    fail_assertion("index too large");
    _jump475:;
    int64_t _80 = 0;
    _80 *= _41.d0;
    _80 += _70;
    int64_t _81 = _41.data[_80];
    bool _82 = c.d0 != _81;
    _a3_int64_t _83;
    // Computing bound for l
    int64_t _84 = -c.d2;
    _83.d0 = _84;
    if (_84 > 0) 
    goto _jump476;
    fail_assertion("non-positive loop bound");
    _jump476:;
    // Computing bound for m
    _83.d1 = c.d0;
    if (c.d0 > 0) 
    goto _jump477;
    fail_assertion("non-positive loop bound");
    _jump477:;
    // Computing bound for n
    _a3_int64_t _85;
    // Computing bound for l
    int64_t _86;
    // Computing bound for l
    if (c.d0 > 0) 
    goto _jump478;
    fail_assertion("non-positive loop bound");
    _jump478:;
    _86 = 0;
    int64_t _87 = 0; // l
    _jump479:; // Begin body of loop
    _86 += c.d1;
    _87++;
    if (_87 < c.d0)
    goto _jump479;
    // End body of loop
    _85.d0 = _86;
    if (_86 > 0) 
    goto _jump480;
    fail_assertion("non-positive loop bound");
    _jump480:;
    // Computing bound for m
    _85.d1 = c.d2;
    if (c.d2 > 0) 
    goto _jump481;
    fail_assertion("non-positive loop bound");
    _jump481:;
    // Computing bound for n
    bool _88 = false;
    int64_t _89;
    if (!_88)
    goto _jump482;
    int64_t _90 = 364;
    _89 = _90;
    goto _jump483;
    _jump482:;
    _89 = c.d0;
    _jump483:;
    _85.d2 = _89;
    if (_89 > 0) 
    goto _jump484;
    fail_assertion("non-positive loop bound");
    _jump484:;
    // Computing total size of heap memory to allocate
    int64_t _91 = 1;
    _91 *= _86;
    _91 *= c.d2;
    _91 *= _89;
    _91 *= sizeof(int64_t);
    _85.data = jpl_alloc(_91);
    int64_t _92 = 0; // n
    int64_t _93 = 0; // m
    int64_t _94 = 0; // l
    _jump485:; // Begin body of loop
    int64_t _95;
    // Computing bound for o
    if (c.d2 > 0) 
    goto _jump486;
    fail_assertion("non-positive loop bound");
    _jump486:;
    // Computing bound for p
    if (c.d2 > 0) 
    goto _jump487;
    fail_assertion("non-positive loop bound");
    _jump487:;
    // Computing bound for q
    if (c.d1 > 0) 
    goto _jump488;
    fail_assertion("non-positive loop bound");
    _jump488:;
    _95 = 0;
    int64_t _96 = 0; // q
    int64_t _97 = 0; // p
    int64_t _98 = 0; // o
    _jump489:; // Begin body of loop
    _a2_int64_t _99;
    // Computing bound for r
    int64_t _100 = _97 / _98;
    _99.d0 = _100;
    if (_100 > 0) 
    goto _jump490;
    fail_assertion("non-positive loop bound");
    _jump490:;
    // Computing bound for s
    _99.d1 = c.d1;
    if (c.d1 > 0) 
    goto _jump491;
    fail_assertion("non-positive loop bound");
    _jump491:;
    // Computing total size of heap memory to allocate
    int64_t _101 = 1;
    _101 *= _100;
    _101 *= c.d1;
    _101 *= sizeof(int64_t);
    _99.data = jpl_alloc(_101);
    int64_t _102 = 0; // s
    int64_t _103 = 0; // r
    _jump492:; // Begin body of loop
    int64_t _104 = 0;
    _104 *= _99.d0;
    _104 += _103;
    _104 *= _99.d1;
    _104 += _102;
    _99.data[_104] = c.d0;
    _102++;
    if (_102 < c.d1)
    goto _jump492;
    _102 = 0;
    _103++;
    if (_103 < _100)
    goto _jump492;
    // End body of loop
    int64_t _105 = 470;
    if (c.d1 >= 0)
    goto _jump493;
    fail_assertion("negative array index");
    _jump493:;
    if (c.d1 < _99.d0)
    goto _jump494;
    fail_assertion("index too large");
    _jump494:;
    if (_105 >= 0)
    goto _jump495;
    fail_assertion("negative array index");
    _jump495:;
    if (_105 < _99.d1)
    goto _jump496;
    fail_assertion("index too large");
    _jump496:;
    int64_t _106 = 0;
    _106 *= _99.d0;
    _106 += c.d1;
    _106 *= _99.d1;
    _106 += _105;
    int64_t _107 = _99.data[_106];
    _95 += _107;
    _96++;
    if (_96 < c.d1)
    goto _jump489;
    _96 = 0;
    _97++;
    if (_97 < c.d2)
    goto _jump489;
    _97 = 0;
    _98++;
    if (_98 < c.d2)
    goto _jump489;
    // End body of loop
    int64_t _108 = 0;
    _108 *= _85.d0;
    _108 += _94;
    _108 *= _85.d1;
    _108 += _93;
    _108 *= _85.d2;
    _108 += _92;
    _85.data[_108] = _95;
    _92++;
    if (_92 < _89)
    goto _jump485;
    _92 = 0;
    _93++;
    if (_93 < c.d2)
    goto _jump485;
    _93 = 0;
    _94++;
    if (_94 < _86)
    goto _jump485;
    // End body of loop
    bool _110 = true;
    bool _109 = _110;
    if (0 == _110)
    goto _jump497;
    bool _111 = false;
    _a3_int64_t _112;
    if (!_111)
    goto _jump498;
    _a3_int64_t _113;
    // Computing bound for l
    _113.d0 = c.d2;
    if (c.d2 > 0) 
    goto _jump499;
    fail_assertion("non-positive loop bound");
    _jump499:;
    // Computing bound for m
    _113.d1 = c.d2;
    if (c.d2 > 0) 
    goto _jump500;
    fail_assertion("non-positive loop bound");
    _jump500:;
    // Computing bound for n
    _113.d2 = c.d1;
    if (c.d1 > 0) 
    goto _jump501;
    fail_assertion("non-positive loop bound");
    _jump501:;
    // Computing total size of heap memory to allocate
    int64_t _114 = 1;
    _114 *= c.d2;
    _114 *= c.d2;
    _114 *= c.d1;
    _114 *= sizeof(int64_t);
    _113.data = jpl_alloc(_114);
    int64_t _115 = 0; // n
    int64_t _116 = 0; // m
    int64_t _117 = 0; // l
    _jump502:; // Begin body of loop
    int64_t _118 = 0;
    _118 *= _113.d0;
    _118 += _117;
    _118 *= _113.d1;
    _118 += _116;
    _118 *= _113.d2;
    _118 += _115;
    _113.data[_118] = _115;
    _115++;
    if (_115 < c.d1)
    goto _jump502;
    _115 = 0;
    _116++;
    if (_116 < c.d2)
    goto _jump502;
    _116 = 0;
    _117++;
    if (_117 < c.d2)
    goto _jump502;
    // End body of loop
    _112 = _113;
    goto _jump503;
    _jump498:;
    _a3_int64_t _119;
    // Computing bound for l
    int64_t _120 = 727;
    _119.d0 = _120;
    if (_120 > 0) 
    goto _jump504;
    fail_assertion("non-positive loop bound");
    _jump504:;
    // Computing bound for m
    _119.d1 = c.d2;
    if (c.d2 > 0) 
    goto _jump505;
    fail_assertion("non-positive loop bound");
    _jump505:;
    // Computing bound for n
    _119.d2 = g;
    if (g > 0) 
    goto _jump506;
    fail_assertion("non-positive loop bound");
    _jump506:;
    // Computing total size of heap memory to allocate
    int64_t _121 = 1;
    _121 *= _120;
    _121 *= c.d2;
    _121 *= g;
    _121 *= sizeof(int64_t);
    _119.data = jpl_alloc(_121);
    int64_t _122 = 0; // n
    int64_t _123 = 0; // m
    int64_t _124 = 0; // l
    _jump507:; // Begin body of loop
    int64_t _125 = 0;
    _125 *= _119.d0;
    _125 += _124;
    _125 *= _119.d1;
    _125 += _123;
    _125 *= _119.d2;
    _125 += _122;
    _119.data[_125] = _123;
    _122++;
    if (_122 < g)
    goto _jump507;
    _122 = 0;
    _123++;
    if (_123 < c.d2)
    goto _jump507;
    _123 = 0;
    _124++;
    if (_124 < _120)
    goto _jump507;
    // End body of loop
    _112 = _119;
    _jump503:;
    bool _126 = a(_112, h);
    _109 = _126;
    _jump497:;
    int64_t _127;
    if (!_109)
    goto _jump508;
    int64_t _128 = -c.d1;
    _127 = _128;
    goto _jump509;
    _jump508:;
    _127 = c.d2;
    _jump509:;
    bool _129 = true;
    int64_t _130;
    if (!_129)
    goto _jump510;
    _130 = c.d0;
    goto _jump511;
    _jump510:;
    int64_t _131;
    // Computing bound for l
    if (c.d1 > 0) 
    goto _jump512;
    fail_assertion("non-positive loop bound");
    _jump512:;
    // Computing bound for m
    int64_t _132 = -c.d1;
    if (_132 > 0) 
    goto _jump513;
    fail_assertion("non-positive loop bound");
    _jump513:;
    // Computing bound for n
    int64_t _133;
    // Computing bound for l
    if (c.d2 > 0) 
    goto _jump514;
    fail_assertion("non-positive loop bound");
    _jump514:;
    _133 = 0;
    int64_t _134 = 0; // l
    _jump515:; // Begin body of loop
    int64_t _135 = 343;
    _133 += _135;
    _134++;
    if (_134 < c.d2)
    goto _jump515;
    // End body of loop
    if (_133 > 0) 
    goto _jump516;
    fail_assertion("non-positive loop bound");
    _jump516:;
    _131 = 0;
    int64_t _136 = 0; // n
    int64_t _137 = 0; // m
    int64_t _138 = 0; // l
    _jump517:; // Begin body of loop
    int64_t _139 = 788;
    int64_t _140 = c.d2 / _139;
    _131 += _140;
    _136++;
    if (_136 < _133)
    goto _jump517;
    _136 = 0;
    _137++;
    if (_137 < _132)
    goto _jump517;
    _137 = 0;
    _138++;
    if (_138 < c.d1)
    goto _jump517;
    // End body of loop
    if (c.d1 >= 0)
    goto _jump518;
    fail_assertion("negative array index");
    _jump518:;
    if (c.d1 < c.d0)
    goto _jump519;
    fail_assertion("index too large");
    _jump519:;
    if (g >= 0)
    goto _jump520;
    fail_assertion("negative array index");
    _jump520:;
    if (g < c.d1)
    goto _jump521;
    fail_assertion("index too large");
    _jump521:;
    if (_131 >= 0)
    goto _jump522;
    fail_assertion("negative array index");
    _jump522:;
    if (_131 < c.d2)
    goto _jump523;
    fail_assertion("index too large");
    _jump523:;
    int64_t _141 = 0;
    _141 *= c.d0;
    _141 += c.d1;
    _141 *= c.d1;
    _141 += g;
    _141 *= c.d2;
    _141 += _131;
    bool _142 = c.data[_141];
    int64_t _143;
    if (!_142)
    goto _jump524;
    int64_t _144 = 401;
    _143 = _144;
    goto _jump525;
    _jump524:;
    _a3_int64_t _145;
    // Computing bound for l
    int64_t _146 = 206;
    _145.d0 = _146;
    if (_146 > 0) 
    goto _jump526;
    fail_assertion("non-positive loop bound");
    _jump526:;
    // Computing bound for m
    int64_t _147;
    if (!_82)
    goto _jump527;
    _147 = g;
    goto _jump528;
    _jump527:;
    int64_t _148 = 772;
    _147 = _148;
    _jump528:;
    _145.d1 = _147;
    if (_147 > 0) 
    goto _jump529;
    fail_assertion("non-positive loop bound");
    _jump529:;
    // Computing bound for n
    _145.d2 = c.d0;
    if (c.d0 > 0) 
    goto _jump530;
    fail_assertion("non-positive loop bound");
    _jump530:;
    // Computing total size of heap memory to allocate
    int64_t _149 = 1;
    _149 *= _146;
    _149 *= _147;
    _149 *= c.d0;
    _149 *= sizeof(int64_t);
    _145.data = jpl_alloc(_149);
    int64_t _150 = 0; // n
    int64_t _151 = 0; // m
    int64_t _152 = 0; // l
    _jump531:; // Begin body of loop
    int64_t _153 = 0;
    _153 *= _145.d0;
    _153 += _152;
    _153 *= _145.d1;
    _153 += _151;
    _153 *= _145.d2;
    _153 += _150;
    _145.data[_153] = _151;
    _150++;
    if (_150 < c.d0)
    goto _jump531;
    _150 = 0;
    _151++;
    if (_151 < _147)
    goto _jump531;
    _151 = 0;
    _152++;
    if (_152 < _146)
    goto _jump531;
    // End body of loop
    bool _154 = false;
    int64_t _155;
    if (!_154)
    goto _jump532;
    int64_t _156;
    if (!_82)
    goto _jump533;
    _156 = g;
    goto _jump534;
    _jump533:;
    _156 = c.d2;
    _jump534:;
    _155 = _156;
    goto _jump535;
    _jump532:;
    _155 = c.d0;
    _jump535:;
    if (c.d0 >= 0)
    goto _jump536;
    fail_assertion("negative array index");
    _jump536:;
    if (c.d0 < _145.d0)
    goto _jump537;
    fail_assertion("index too large");
    _jump537:;
    if (_155 >= 0)
    goto _jump538;
    fail_assertion("negative array index");
    _jump538:;
    if (_155 < _145.d1)
    goto _jump539;
    fail_assertion("index too large");
    _jump539:;
    if (c.d0 >= 0)
    goto _jump540;
    fail_assertion("negative array index");
    _jump540:;
    if (c.d0 < _145.d2)
    goto _jump541;
    fail_assertion("index too large");
    _jump541:;
    int64_t _157 = 0;
    _157 *= _145.d0;
    _157 += c.d0;
    _157 *= _145.d1;
    _157 += _155;
    _157 *= _145.d2;
    _157 += c.d0;
    int64_t _158 = _145.data[_157];
    _143 = _158;
    _jump525:;
    _130 = _143;
    _jump511:;
    int64_t _159 = -c.d0;
    if (_127 >= 0)
    goto _jump542;
    fail_assertion("negative array index");
    _jump542:;
    if (_127 < _85.d0)
    goto _jump543;
    fail_assertion("index too large");
    _jump543:;
    if (_130 >= 0)
    goto _jump544;
    fail_assertion("negative array index");
    _jump544:;
    if (_130 < _85.d1)
    goto _jump545;
    fail_assertion("index too large");
    _jump545:;
    if (_159 >= 0)
    goto _jump546;
    fail_assertion("negative array index");
    _jump546:;
    if (_159 < _85.d2)
    goto _jump547;
    fail_assertion("index too large");
    _jump547:;
    int64_t _160 = 0;
    _160 *= _85.d0;
    _160 += _127;
    _160 *= _85.d1;
    _160 += _130;
    _160 *= _85.d2;
    _160 += _159;
    int64_t _161 = _85.data[_160];
    _83.d2 = _161;
    if (_161 > 0) 
    goto _jump548;
    fail_assertion("non-positive loop bound");
    _jump548:;
    // Computing total size of heap memory to allocate
    int64_t _162 = 1;
    _162 *= _84;
    _162 *= c.d0;
    _162 *= _161;
    _162 *= sizeof(int64_t);
    _83.data = jpl_alloc(_162);
    int64_t _163 = 0; // n
    int64_t _164 = 0; // m
    int64_t _165 = 0; // l
    _jump549:; // Begin body of loop
    int64_t _166 = 0;
    _166 *= _83.d0;
    _166 += _165;
    _166 *= _83.d1;
    _166 += _164;
    _166 *= _83.d2;
    _166 += _163;
    _83.data[_166] = _164;
    _163++;
    if (_163 < _161)
    goto _jump549;
    _163 = 0;
    _164++;
    if (_164 < c.d0)
    goto _jump549;
    _164 = 0;
    _165++;
    if (_165 < _84)
    goto _jump549;
    // End body of loop
    double _167 = 3.0;
    bool _168 = h != _167;
    bool _169 = false;
    rgba _170;
    if (!_169)
    goto _jump550;
    double _171;
    // Computing bound for q
    if (g > 0) 
    goto _jump551;
    fail_assertion("non-positive loop bound");
    _jump551:;
    // Computing bound for r
    int64_t _172 = 746;
    if (_172 > 0) 
    goto _jump552;
    fail_assertion("non-positive loop bound");
    _jump552:;
    // Computing bound for s
    if (c.d1 > 0) 
    goto _jump553;
    fail_assertion("non-positive loop bound");
    _jump553:;
    _171 = 0;
    int64_t _173 = 0; // s
    int64_t _174 = 0; // r
    int64_t _175 = 0; // q
    _jump554:; // Begin body of loop
    double _176 = 33.0;
    double _177 = -_176;
    double _178 = -_177;
    _171 += _178;
    _173++;
    if (_173 < c.d1)
    goto _jump554;
    _173 = 0;
    _174++;
    if (_174 < _172)
    goto _jump554;
    _174 = 0;
    _175++;
    if (_175 < g)
    goto _jump554;
    // End body of loop
    rgba _179 = { _171, _0, h, h };
    _170 = _179;
    goto _jump555;
    _jump550:;
    int64_t _180;
    // Computing bound for q
    _a3__a3_int64_t _181;
    // Computing bound for q
    int64_t _182 = 415;
    _181.d0 = _182;
    if (_182 > 0) 
    goto _jump556;
    fail_assertion("non-positive loop bound");
    _jump556:;
    // Computing bound for r
    _181.d1 = _83.d0;
    if (_83.d0 > 0) 
    goto _jump557;
    fail_assertion("non-positive loop bound");
    _jump557:;
    // Computing bound for s
    _181.d2 = c.d1;
    if (c.d1 > 0) 
    goto _jump558;
    fail_assertion("non-positive loop bound");
    _jump558:;
    // Computing total size of heap memory to allocate
    int64_t _183 = 1;
    _183 *= _182;
    _183 *= _83.d0;
    _183 *= c.d1;
    _183 *= sizeof(_a3_int64_t);
    _181.data = jpl_alloc(_183);
    int64_t _184 = 0; // s
    int64_t _185 = 0; // r
    int64_t _186 = 0; // q
    _jump559:; // Begin body of loop
    int64_t _187 = 0;
    _187 *= _181.d0;
    _187 += _186;
    _187 *= _181.d1;
    _187 += _185;
    _187 *= _181.d2;
    _187 += _184;
    _181.data[_187] = _83;
    _184++;
    if (_184 < c.d1)
    goto _jump559;
    _184 = 0;
    _185++;
    if (_185 < _83.d0)
    goto _jump559;
    _185 = 0;
    _186++;
    if (_186 < _182)
    goto _jump559;
    // End body of loop
    int64_t _188 = g % _83.d2;
    int64_t _189 = -c.d1;
    if (_188 >= 0)
    goto _jump560;
    fail_assertion("negative array index");
    _jump560:;
    if (_188 < _181.d0)
    goto _jump561;
    fail_assertion("index too large");
    _jump561:;
    if (_189 >= 0)
    goto _jump562;
    fail_assertion("negative array index");
    _jump562:;
    if (_189 < _181.d1)
    goto _jump563;
    fail_assertion("index too large");
    _jump563:;
    if (c.d0 >= 0)
    goto _jump564;
    fail_assertion("negative array index");
    _jump564:;
    if (c.d0 < _181.d2)
    goto _jump565;
    fail_assertion("index too large");
    _jump565:;
    int64_t _190 = 0;
    _190 *= _181.d0;
    _190 += _188;
    _190 *= _181.d1;
    _190 += _189;
    _190 *= _181.d2;
    _190 += c.d0;
    _a3_int64_t _191 = _181.data[_190];
    int64_t _192 = 239;
    int64_t _193 = -_192;
    if (g >= 0)
    goto _jump566;
    fail_assertion("negative array index");
    _jump566:;
    if (g < _191.d0)
    goto _jump567;
    fail_assertion("index too large");
    _jump567:;
    if (_193 >= 0)
    goto _jump568;
    fail_assertion("negative array index");
    _jump568:;
    if (_193 < _191.d1)
    goto _jump569;
    fail_assertion("index too large");
    _jump569:;
    if (c.d2 >= 0)
    goto _jump570;
    fail_assertion("negative array index");
    _jump570:;
    if (c.d2 < _191.d2)
    goto _jump571;
    fail_assertion("index too large");
    _jump571:;
    int64_t _194 = 0;
    _194 *= _191.d0;
    _194 += g;
    _194 *= _191.d1;
    _194 += _193;
    _194 *= _191.d2;
    _194 += c.d2;
    int64_t _195 = _191.data[_194];
    if (_195 > 0) 
    goto _jump572;
    fail_assertion("non-positive loop bound");
    _jump572:;
    _180 = 0;
    int64_t _196 = 0; // q
    _jump573:; // Begin body of loop
    int64_t _197;
    // Computing bound for r
    if (c.d1 > 0) 
    goto _jump574;
    fail_assertion("non-positive loop bound");
    _jump574:;
    // Computing bound for s
    if (g > 0) 
    goto _jump575;
    fail_assertion("non-positive loop bound");
    _jump575:;
    _197 = 0;
    int64_t _198 = 0; // s
    int64_t _199 = 0; // r
    _jump576:; // Begin body of loop
    int64_t _200 = 475;
    _197 += _200;
    _198++;
    if (_198 < g)
    goto _jump576;
    _198 = 0;
    _199++;
    if (_199 < c.d1)
    goto _jump576;
    // End body of loop
    _180 += _197;
    _196++;
    if (_196 < _195)
    goto _jump573;
    // End body of loop
    int64_t _201 = -_180;
    _a3_double _202;
    if (!_168)
    goto _jump577;
    _a2__a3_double _203;
    // Computing bound for q
    _203.d0 = g;
    if (g > 0) 
    goto _jump578;
    fail_assertion("non-positive loop bound");
    _jump578:;
    // Computing bound for r
    int64_t _204 = c.d1 - g;
    _203.d1 = _204;
    if (_204 > 0) 
    goto _jump579;
    fail_assertion("non-positive loop bound");
    _jump579:;
    // Computing total size of heap memory to allocate
    int64_t _205 = 1;
    _205 *= g;
    _205 *= _204;
    _205 *= sizeof(_a3_double);
    _203.data = jpl_alloc(_205);
    int64_t _206 = 0; // r
    int64_t _207 = 0; // q
    _jump580:; // Begin body of loop
    _a3_double _208;
    // Computing bound for s
    _208.d0 = _207;
    if (_207 > 0) 
    goto _jump581;
    fail_assertion("non-positive loop bound");
    _jump581:;
    // Computing bound for t
    int64_t _209 = 818;
    _208.d1 = _209;
    if (_209 > 0) 
    goto _jump582;
    fail_assertion("non-positive loop bound");
    _jump582:;
    // Computing bound for u
    int64_t _210 = 746;
    _208.d2 = _210;
    if (_210 > 0) 
    goto _jump583;
    fail_assertion("non-positive loop bound");
    _jump583:;
    // Computing total size of heap memory to allocate
    int64_t _211 = 1;
    _211 *= _207;
    _211 *= _209;
    _211 *= _210;
    _211 *= sizeof(double);
    _208.data = jpl_alloc(_211);
    int64_t _212 = 0; // u
    int64_t _213 = 0; // t
    int64_t _214 = 0; // s
    _jump584:; // Begin body of loop
    double _215 = 79.0;
    int64_t _216 = 0;
    _216 *= _208.d0;
    _216 += _214;
    _216 *= _208.d1;
    _216 += _213;
    _216 *= _208.d2;
    _216 += _212;
    _208.data[_216] = _215;
    _212++;
    if (_212 < _210)
    goto _jump584;
    _212 = 0;
    _213++;
    if (_213 < _209)
    goto _jump584;
    _213 = 0;
    _214++;
    if (_214 < _207)
    goto _jump584;
    // End body of loop
    int64_t _217 = 0;
    _217 *= _203.d0;
    _217 += _207;
    _217 *= _203.d1;
    _217 += _206;
    _203.data[_217] = _208;
    _206++;
    if (_206 < _204)
    goto _jump580;
    _206 = 0;
    _207++;
    if (_207 < g)
    goto _jump580;
    // End body of loop
    int64_t _218 = -_83.d2;
    if (_83.d2 >= 0)
    goto _jump585;
    fail_assertion("negative array index");
    _jump585:;
    if (_83.d2 < _203.d0)
    goto _jump586;
    fail_assertion("index too large");
    _jump586:;
    if (_218 >= 0)
    goto _jump587;
    fail_assertion("negative array index");
    _jump587:;
    if (_218 < _203.d1)
    goto _jump588;
    fail_assertion("index too large");
    _jump588:;
    int64_t _219 = 0;
    _219 *= _203.d0;
    _219 += _83.d2;
    _219 *= _203.d1;
    _219 += _218;
    _a3_double _220 = _203.data[_219];
    _202 = _220;
    goto _jump589;
    _jump577:;
    _a2__a3_double _221;
    // Computing bound for q
    _221.d0 = _83.d0;
    if (_83.d0 > 0) 
    goto _jump590;
    fail_assertion("non-positive loop bound");
    _jump590:;
    // Computing bound for r
    int64_t _222 = c.d0 % _83.d0;
    _221.d1 = _222;
    if (_222 > 0) 
    goto _jump591;
    fail_assertion("non-positive loop bound");
    _jump591:;
    // Computing total size of heap memory to allocate
    int64_t _223 = 1;
    _223 *= _83.d0;
    _223 *= _222;
    _223 *= sizeof(_a3_double);
    _221.data = jpl_alloc(_223);
    int64_t _224 = 0; // r
    int64_t _225 = 0; // q
    _jump592:; // Begin body of loop
    _a3_double _226;
    // Computing bound for s
    _226.d0 = c.d0;
    if (c.d0 > 0) 
    goto _jump593;
    fail_assertion("non-positive loop bound");
    _jump593:;
    // Computing bound for t
    _226.d1 = _83.d0;
    if (_83.d0 > 0) 
    goto _jump594;
    fail_assertion("non-positive loop bound");
    _jump594:;
    // Computing bound for u
    _226.d2 = _83.d2;
    if (_83.d2 > 0) 
    goto _jump595;
    fail_assertion("non-positive loop bound");
    _jump595:;
    // Computing total size of heap memory to allocate
    int64_t _227 = 1;
    _227 *= c.d0;
    _227 *= _83.d0;
    _227 *= _83.d2;
    _227 *= sizeof(double);
    _226.data = jpl_alloc(_227);
    int64_t _228 = 0; // u
    int64_t _229 = 0; // t
    int64_t _230 = 0; // s
    _jump596:; // Begin body of loop
    int64_t _231 = 0;
    _231 *= _226.d0;
    _231 += _230;
    _231 *= _226.d1;
    _231 += _229;
    _231 *= _226.d2;
    _231 += _228;
    _226.data[_231] = _0;
    _228++;
    if (_228 < _83.d2)
    goto _jump596;
    _228 = 0;
    _229++;
    if (_229 < _83.d0)
    goto _jump596;
    _229 = 0;
    _230++;
    if (_230 < c.d0)
    goto _jump596;
    // End body of loop
    int64_t _232 = 0;
    _232 *= _221.d0;
    _232 += _225;
    _232 *= _221.d1;
    _232 += _224;
    _221.data[_232] = _226;
    _224++;
    if (_224 < _222)
    goto _jump592;
    _224 = 0;
    _225++;
    if (_225 < _83.d0)
    goto _jump592;
    // End body of loop
    if (_83.d1 >= 0)
    goto _jump597;
    fail_assertion("negative array index");
    _jump597:;
    if (_83.d1 < _221.d0)
    goto _jump598;
    fail_assertion("index too large");
    _jump598:;
    if (_83.d0 >= 0)
    goto _jump599;
    fail_assertion("negative array index");
    _jump599:;
    if (_83.d0 < _221.d1)
    goto _jump600;
    fail_assertion("index too large");
    _jump600:;
    int64_t _233 = 0;
    _233 *= _221.d0;
    _233 += _83.d1;
    _233 *= _221.d1;
    _233 += _83.d0;
    _a3_double _234 = _221.data[_233];
    _202 = _234;
    _jump589:;
    if (g >= 0)
    goto _jump601;
    fail_assertion("negative array index");
    _jump601:;
    if (g < _202.d0)
    goto _jump602;
    fail_assertion("index too large");
    _jump602:;
    if (_83.d2 >= 0)
    goto _jump603;
    fail_assertion("negative array index");
    _jump603:;
    if (_83.d2 < _202.d1)
    goto _jump604;
    fail_assertion("index too large");
    _jump604:;
    if (c.d2 >= 0)
    goto _jump605;
    fail_assertion("negative array index");
    _jump605:;
    if (c.d2 < _202.d2)
    goto _jump606;
    fail_assertion("index too large");
    _jump606:;
    int64_t _235 = 0;
    _235 *= _202.d0;
    _235 += g;
    _235 *= _202.d1;
    _235 += _83.d2;
    _235 *= _202.d2;
    _235 += c.d2;
    double _236 = _202.data[_235];
    rgba _237 = b(c, _201, _236);
    _170 = _237;
    _jump555:;
    return _170;
    bool _238 = false;
    _a2_rgba _239;
    if (!_238)
    goto _jump607;
    _a3_int64_t _240;
    if (!_168)
    goto _jump608;
    _240 = _83;
    goto _jump609;
    _jump608:;
    _240 = _83;
    _jump609:;
    double _241 = 87.0;
    bool _242 = a(_240, _241);
    _a2_rgba _243;
    if (!_242)
    goto _jump610;
    _a2_rgba _244;
    // Computing bound for q
    int64_t _245 = 422;
    _244.d0 = _245;
    if (_245 > 0) 
    goto _jump611;
    fail_assertion("non-positive loop bound");
    _jump611:;
    // Computing bound for r
    int64_t _246 = -_83.d2;
    _244.d1 = _246;
    if (_246 > 0) 
    goto _jump612;
    fail_assertion("non-positive loop bound");
    _jump612:;
    // Computing total size of heap memory to allocate
    int64_t _247 = 1;
    _247 *= _245;
    _247 *= _246;
    _247 *= sizeof(rgba);
    _244.data = jpl_alloc(_247);
    int64_t _248 = 0; // r
    int64_t _249 = 0; // q
    _jump613:; // Begin body of loop
    int64_t _250 = 652;
    double _251 = 43.0;
    rgba _252 = b(c, _250, _251);
    int64_t _253 = 0;
    _253 *= _244.d0;
    _253 += _249;
    _253 *= _244.d1;
    _253 += _248;
    _244.data[_253] = _252;
    _248++;
    if (_248 < _246)
    goto _jump613;
    _248 = 0;
    _249++;
    if (_249 < _245)
    goto _jump613;
    // End body of loop
    _243 = _244;
    goto _jump614;
    _jump610:;
    _a2_rgba _254;
    // Computing bound for q
    _254.d0 = _83.d0;
    if (_83.d0 > 0) 
    goto _jump615;
    fail_assertion("non-positive loop bound");
    _jump615:;
    // Computing bound for r
    _254.d1 = _83.d0;
    if (_83.d0 > 0) 
    goto _jump616;
    fail_assertion("non-positive loop bound");
    _jump616:;
    // Computing total size of heap memory to allocate
    int64_t _255 = 1;
    _255 *= _83.d0;
    _255 *= _83.d0;
    _255 *= sizeof(rgba);
    _254.data = jpl_alloc(_255);
    int64_t _256 = 0; // r
    int64_t _257 = 0; // q
    _jump617:; // Begin body of loop
    rgba _258 = b(c, _257, h);
    int64_t _259 = 0;
    _259 *= _254.d0;
    _259 += _257;
    _259 *= _254.d1;
    _259 += _256;
    _254.data[_259] = _258;
    _256++;
    if (_256 < _83.d0)
    goto _jump617;
    _256 = 0;
    _257++;
    if (_257 < _83.d0)
    goto _jump617;
    // End body of loop
    _243 = _254;
    _jump614:;
    _239 = _243;
    goto _jump618;
    _jump607:;
    _a2_rgba _260;
    // Computing bound for q
    _260.d0 = _83.d1;
    if (_83.d1 > 0) 
    goto _jump619;
    fail_assertion("non-positive loop bound");
    _jump619:;
    // Computing bound for r
    _260.d1 = c.d0;
    if (c.d0 > 0) 
    goto _jump620;
    fail_assertion("non-positive loop bound");
    _jump620:;
    // Computing total size of heap memory to allocate
    int64_t _261 = 1;
    _261 *= _83.d1;
    _261 *= c.d0;
    _261 *= sizeof(rgba);
    _260.data = jpl_alloc(_261);
    int64_t _262 = 0; // r
    int64_t _263 = 0; // q
    _jump621:; // Begin body of loop
    int64_t _264;
    // Computing bound for s
    if (_83.d1 > 0) 
    goto _jump622;
    fail_assertion("non-positive loop bound");
    _jump622:;
    // Computing bound for t
    if (c.d0 > 0) 
    goto _jump623;
    fail_assertion("non-positive loop bound");
    _jump623:;
    // Computing bound for u
    if (_263 > 0) 
    goto _jump624;
    fail_assertion("non-positive loop bound");
    _jump624:;
    _264 = 0;
    int64_t _265 = 0; // u
    int64_t _266 = 0; // t
    int64_t _267 = 0; // s
    _jump625:; // Begin body of loop
    _264 += _83.d2;
    _265++;
    if (_265 < _263)
    goto _jump625;
    _265 = 0;
    _266++;
    if (_266 < c.d0)
    goto _jump625;
    _266 = 0;
    _267++;
    if (_267 < _83.d1)
    goto _jump625;
    // End body of loop
    double _268 = 97.0;
    double _269 = _268 * _0;
    rgba _270 = b(c, _264, _269);
    int64_t _271 = 0;
    _271 *= _260.d0;
    _271 += _263;
    _271 *= _260.d1;
    _271 += _262;
    _260.data[_271] = _270;
    _262++;
    if (_262 < c.d0)
    goto _jump621;
    _262 = 0;
    _263++;
    if (_263 < _83.d1)
    goto _jump621;
    // End body of loop
    _239 = _260;
    _jump618:;
    bool _272 = _82;
    if (0 == _82)
    goto _jump626;
    _272 = _168;
    _jump626:;
    bool _273 = !_272;
    _a2_int64_t _274;
    if (!_273)
    goto _jump627;
    _a2_int64_t _275;
    // Computing bound for q
    int64_t _276 = 304;
    _275.d0 = _276;
    if (_276 > 0) 
    goto _jump628;
    fail_assertion("non-positive loop bound");
    _jump628:;
    // Computing bound for r
    _275.d1 = c.d0;
    if (c.d0 > 0) 
    goto _jump629;
    fail_assertion("non-positive loop bound");
    _jump629:;
    // Computing total size of heap memory to allocate
    int64_t _277 = 1;
    _277 *= _276;
    _277 *= c.d0;
    _277 *= sizeof(int64_t);
    _275.data = jpl_alloc(_277);
    int64_t _278 = 0; // r
    int64_t _279 = 0; // q
    _jump630:; // Begin body of loop
    int64_t _280 = 0;
    _280 *= _275.d0;
    _280 += _279;
    _280 *= _275.d1;
    _280 += _278;
    _275.data[_280] = c.d2;
    _278++;
    if (_278 < c.d0)
    goto _jump630;
    _278 = 0;
    _279++;
    if (_279 < _276)
    goto _jump630;
    // End body of loop
    _274 = _275;
    goto _jump631;
    _jump627:;
    _a2_int64_t _281;
    // Computing bound for q
    _281.d0 = _83.d1;
    if (_83.d1 > 0) 
    goto _jump632;
    fail_assertion("non-positive loop bound");
    _jump632:;
    // Computing bound for r
    int64_t _282 = 939;
    int64_t _283 = _282 % _83.d1;
    _281.d1 = _283;
    if (_283 > 0) 
    goto _jump633;
    fail_assertion("non-positive loop bound");
    _jump633:;
    // Computing total size of heap memory to allocate
    int64_t _284 = 1;
    _284 *= _83.d1;
    _284 *= _283;
    _284 *= sizeof(int64_t);
    _281.data = jpl_alloc(_284);
    int64_t _285 = 0; // r
    int64_t _286 = 0; // q
    _jump634:; // Begin body of loop
    int64_t _287 = 0;
    _287 *= _281.d0;
    _287 += _286;
    _287 *= _281.d1;
    _287 += _285;
    _281.data[_287] = _83.d1;
    _285++;
    if (_285 < _283)
    goto _jump634;
    _285 = 0;
    _286++;
    if (_286 < _83.d1)
    goto _jump634;
    // End body of loop
    _274 = _281;
    _jump631:;
    _a1_int64_t _288;
    // Computing bound for q
    int64_t _289;
    // Computing bound for q
    if (_83.d2 > 0) 
    goto _jump635;
    fail_assertion("non-positive loop bound");
    _jump635:;
    // Computing bound for r
    if (c.d2 > 0) 
    goto _jump636;
    fail_assertion("non-positive loop bound");
    _jump636:;
    // Computing bound for s
    if (c.d0 > 0) 
    goto _jump637;
    fail_assertion("non-positive loop bound");
    _jump637:;
    _289 = 0;
    int64_t _290 = 0; // s
    int64_t _291 = 0; // r
    int64_t _292 = 0; // q
    _jump638:; // Begin body of loop
    _289 += c.d0;
    _290++;
    if (_290 < c.d0)
    goto _jump638;
    _290 = 0;
    _291++;
    if (_291 < c.d2)
    goto _jump638;
    _291 = 0;
    _292++;
    if (_292 < _83.d2)
    goto _jump638;
    // End body of loop
    _288.d0 = _289;
    if (_289 > 0) 
    goto _jump639;
    fail_assertion("non-positive loop bound");
    _jump639:;
    // Computing total size of heap memory to allocate
    int64_t _293 = 1;
    _293 *= _289;
    _293 *= sizeof(int64_t);
    _288.data = jpl_alloc(_293);
    int64_t _294 = 0; // q
    _jump640:; // Begin body of loop
    int64_t _295 = 0;
    _295 *= _288.d0;
    _295 += _294;
    _288.data[_295] = _294;
    _294++;
    if (_294 < _289)
    goto _jump640;
    // End body of loop
    if (c.d0 >= 0)
    goto _jump641;
    fail_assertion("negative array index");
    _jump641:;
    if (c.d0 < _288.d0)
    goto _jump642;
    fail_assertion("index too large");
    _jump642:;
    int64_t _296 = 0;
    _296 *= _288.d0;
    _296 += c.d0;
    int64_t _297 = _288.data[_296];
    int64_t _298 = -c.d1;
    if (_297 >= 0)
    goto _jump643;
    fail_assertion("negative array index");
    _jump643:;
    if (_297 < _274.d0)
    goto _jump644;
    fail_assertion("index too large");
    _jump644:;
    if (_298 >= 0)
    goto _jump645;
    fail_assertion("negative array index");
    _jump645:;
    if (_298 < _274.d1)
    goto _jump646;
    fail_assertion("index too large");
    _jump646:;
    int64_t _299 = 0;
    _299 *= _274.d0;
    _299 += _297;
    _299 *= _274.d1;
    _299 += _298;
    int64_t _300 = _274.data[_299];
    if (c.d1 >= 0)
    goto _jump647;
    fail_assertion("negative array index");
    _jump647:;
    if (c.d1 < _239.d0)
    goto _jump648;
    fail_assertion("index too large");
    _jump648:;
    if (_300 >= 0)
    goto _jump649;
    fail_assertion("negative array index");
    _jump649:;
    if (_300 < _239.d1)
    goto _jump650;
    fail_assertion("index too large");
    _jump650:;
    int64_t _301 = 0;
    _301 *= _239.d0;
    _301 += c.d1;
    _301 *= _239.d1;
    _301 += _300;
    rgba _302 = _239.data[_301];
    double _303 = _302.a;
    double _304;
    // Computing bound for q
    int64_t _305 = 474;
    if (_305 > 0) 
    goto _jump651;
    fail_assertion("non-positive loop bound");
    _jump651:;
    // Computing bound for r
    if (_83.d0 > 0) 
    goto _jump652;
    fail_assertion("non-positive loop bound");
    _jump652:;
    // Computing bound for s
    if (c.d0 > 0) 
    goto _jump653;
    fail_assertion("non-positive loop bound");
    _jump653:;
    _304 = 0;
    int64_t _306 = 0; // s
    int64_t _307 = 0; // r
    int64_t _308 = 0; // q
    _jump654:; // Begin body of loop
    _a2_double _309;
    // Computing bound for t
    _309.d0 = _83.d0;
    if (_83.d0 > 0) 
    goto _jump655;
    fail_assertion("non-positive loop bound");
    _jump655:;
    // Computing bound for u
    int64_t _310 = 160;
    _309.d1 = _310;
    if (_310 > 0) 
    goto _jump656;
    fail_assertion("non-positive loop bound");
    _jump656:;
    // Computing total size of heap memory to allocate
    int64_t _311 = 1;
    _311 *= _83.d0;
    _311 *= _310;
    _311 *= sizeof(double);
    _309.data = jpl_alloc(_311);
    int64_t _312 = 0; // u
    int64_t _313 = 0; // t
    _jump657:; // Begin body of loop
    double _314 = fmod(_0, h);
    int64_t _315 = 0;
    _315 *= _309.d0;
    _315 += _313;
    _315 *= _309.d1;
    _315 += _312;
    _309.data[_315] = _314;
    _312++;
    if (_312 < _310)
    goto _jump657;
    _312 = 0;
    _313++;
    if (_313 < _83.d0)
    goto _jump657;
    // End body of loop
    int64_t _316;
    // Computing bound for t
    int64_t _317 = 879;
    if (_317 > 0) 
    goto _jump658;
    fail_assertion("non-positive loop bound");
    _jump658:;
    _316 = 0;
    int64_t _318 = 0; // t
    _jump659:; // Begin body of loop
    _316 += _307;
    _318++;
    if (_318 < _317)
    goto _jump659;
    // End body of loop
    int64_t _319 = 747;
    if (_316 >= 0)
    goto _jump660;
    fail_assertion("negative array index");
    _jump660:;
    if (_316 < _309.d0)
    goto _jump661;
    fail_assertion("index too large");
    _jump661:;
    if (_319 >= 0)
    goto _jump662;
    fail_assertion("negative array index");
    _jump662:;
    if (_319 < _309.d1)
    goto _jump663;
    fail_assertion("index too large");
    _jump663:;
    int64_t _320 = 0;
    _320 *= _309.d0;
    _320 += _316;
    _320 *= _309.d1;
    _320 += _319;
    double _321 = _309.data[_320];
    double _322 = -_321;
    double _323 = _322 + h;
    _304 += _323;
    _306++;
    if (_306 < c.d0)
    goto _jump654;
    _306 = 0;
    _307++;
    if (_307 < _83.d0)
    goto _jump654;
    _307 = 0;
    _308++;
    if (_308 < _305)
    goto _jump654;
    // End body of loop
    double _324;
    // Computing bound for q
    if (c.d2 > 0) 
    goto _jump664;
    fail_assertion("non-positive loop bound");
    _jump664:;
    // Computing bound for r
    if (g > 0) 
    goto _jump665;
    fail_assertion("non-positive loop bound");
    _jump665:;
    _324 = 0;
    int64_t _325 = 0; // r
    int64_t _326 = 0; // q
    _jump666:; // Begin body of loop
    double _327;
    // Computing bound for s
    bool _328 = !_82;
    int64_t _329;
    if (!_328)
    goto _jump667;
    _329 = _325;
    goto _jump668;
    _jump667:;
    int64_t _330 = _83.d0 * g;
    _329 = _330;
    _jump668:;
    int64_t _331 = _329 + _326;
    if (_331 > 0) 
    goto _jump669;
    fail_assertion("non-positive loop bound");
    _jump669:;
    // Computing bound for t
    int64_t _332;
    // Computing bound for s
    if (c.d2 > 0) 
    goto _jump670;
    fail_assertion("non-positive loop bound");
    _jump670:;
    _332 = 0;
    int64_t _333 = 0; // s
    _jump671:; // Begin body of loop
    _332 += c.d2;
    _333++;
    if (_333 < c.d2)
    goto _jump671;
    // End body of loop
    if (_332 > 0) 
    goto _jump672;
    fail_assertion("non-positive loop bound");
    _jump672:;
    _327 = 0;
    int64_t _334 = 0; // t
    int64_t _335 = 0; // s
    _jump673:; // Begin body of loop
    double _336 = -h;
    _a1_double _337;
    _337.d0 = 3;
    _337.data = jpl_alloc(sizeof(double) * 3);
    _337.data[0] = h;
    _337.data[1] = h;
    _337.data[2] = _336;
    if (g >= 0)
    goto _jump674;
    fail_assertion("negative array index");
    _jump674:;
    if (g < _337.d0)
    goto _jump675;
    fail_assertion("index too large");
    _jump675:;
    int64_t _338 = 0;
    _338 *= _337.d0;
    _338 += g;
    double _339 = _337.data[_338];
    _327 += _339;
    _334++;
    if (_334 < _332)
    goto _jump673;
    _334 = 0;
    _335++;
    if (_335 < _331)
    goto _jump673;
    // End body of loop
    double _340 = -_327;
    _324 += _340;
    _325++;
    if (_325 < g)
    goto _jump666;
    _325 = 0;
    _326++;
    if (_326 < c.d2)
    goto _jump666;
    // End body of loop
    double _341;
    // Computing bound for q
    int64_t _342;
    // Computing bound for q
    if (c.d2 > 0) 
    goto _jump676;
    fail_assertion("non-positive loop bound");
    _jump676:;
    _342 = 0;
    int64_t _343 = 0; // q
    _jump677:; // Begin body of loop
    _342 += _83.d1;
    _343++;
    if (_343 < c.d2)
    goto _jump677;
    // End body of loop
    if (_342 > 0) 
    goto _jump678;
    fail_assertion("non-positive loop bound");
    _jump678:;
    // Computing bound for r
    int64_t _344;
    // Computing bound for q
    int64_t _345;
    // Computing bound for q
    int64_t _346;
    // Computing bound for q
    int64_t _347;
    // Computing bound for q
    if (_83.d2 > 0) 
    goto _jump679;
    fail_assertion("non-positive loop bound");
    _jump679:;
    _347 = 0;
    int64_t _348 = 0; // q
    _jump680:; // Begin body of loop
    _347 += c.d1;
    _348++;
    if (_348 < _83.d2)
    goto _jump680;
    // End body of loop
    if (_347 > 0) 
    goto _jump681;
    fail_assertion("non-positive loop bound");
    _jump681:;
    // Computing bound for r
    int64_t _349;
    // Computing bound for q
    if (c.d2 > 0) 
    goto _jump682;
    fail_assertion("non-positive loop bound");
    _jump682:;
    // Computing bound for r
    if (_83.d0 > 0) 
    goto _jump683;
    fail_assertion("non-positive loop bound");
    _jump683:;
    // Computing bound for s
    if (c.d0 > 0) 
    goto _jump684;
    fail_assertion("non-positive loop bound");
    _jump684:;
    _349 = 0;
    int64_t _350 = 0; // s
    int64_t _351 = 0; // r
    int64_t _352 = 0; // q
    _jump685:; // Begin body of loop
    _349 += c.d0;
    _350++;
    if (_350 < c.d0)
    goto _jump685;
    _350 = 0;
    _351++;
    if (_351 < _83.d0)
    goto _jump685;
    _351 = 0;
    _352++;
    if (_352 < c.d2)
    goto _jump685;
    // End body of loop
    if (_349 > 0) 
    goto _jump686;
    fail_assertion("non-positive loop bound");
    _jump686:;
    // Computing bound for s
    int64_t _353 = _83.d0 * g;
    if (_353 > 0) 
    goto _jump687;
    fail_assertion("non-positive loop bound");
    _jump687:;
    _346 = 0;
    int64_t _354 = 0; // s
    int64_t _355 = 0; // r
    int64_t _356 = 0; // q
    _jump688:; // Begin body of loop
    _346 += c.d0;
    _354++;
    if (_354 < _353)
    goto _jump688;
    _354 = 0;
    _355++;
    if (_355 < _349)
    goto _jump688;
    _355 = 0;
    _356++;
    if (_356 < _347)
    goto _jump688;
    // End body of loop
    if (_346 > 0) 
    goto _jump689;
    fail_assertion("non-positive loop bound");
    _jump689:;
    _345 = 0;
    int64_t _357 = 0; // q
    _jump690:; // Begin body of loop
    _345 += _83.d1;
    _357++;
    if (_357 < _346)
    goto _jump690;
    // End body of loop
    int64_t _358 = _345 * c.d1;
    if (_358 > 0) 
    goto _jump691;
    fail_assertion("non-positive loop bound");
    _jump691:;
    // Computing bound for r
    if (c.d2 > 0) 
    goto _jump692;
    fail_assertion("non-positive loop bound");
    _jump692:;
    // Computing bound for s
    _a2_int64_t _359;
    // Computing bound for q
    int64_t _360;
    // Computing bound for q
    if (g > 0) 
    goto _jump693;
    fail_assertion("non-positive loop bound");
    _jump693:;
    // Computing bound for r
    if (g > 0) 
    goto _jump694;
    fail_assertion("non-positive loop bound");
    _jump694:;
    _360 = 0;
    int64_t _361 = 0; // r
    int64_t _362 = 0; // q
    _jump695:; // Begin body of loop
    _360 += _83.d2;
    _361++;
    if (_361 < g)
    goto _jump695;
    _361 = 0;
    _362++;
    if (_362 < g)
    goto _jump695;
    // End body of loop
    _359.d0 = _360;
    if (_360 > 0) 
    goto _jump696;
    fail_assertion("non-positive loop bound");
    _jump696:;
    // Computing bound for r
    if (c.d0 >= 0)
    goto _jump697;
    fail_assertion("negative array index");
    _jump697:;
    if (c.d0 < _83.d0)
    goto _jump698;
    fail_assertion("index too large");
    _jump698:;
    if (c.d2 >= 0)
    goto _jump699;
    fail_assertion("negative array index");
    _jump699:;
    if (c.d2 < _83.d1)
    goto _jump700;
    fail_assertion("index too large");
    _jump700:;
    if (g >= 0)
    goto _jump701;
    fail_assertion("negative array index");
    _jump701:;
    if (g < _83.d2)
    goto _jump702;
    fail_assertion("index too large");
    _jump702:;
    int64_t _363 = 0;
    _363 *= _83.d0;
    _363 += c.d0;
    _363 *= _83.d1;
    _363 += c.d2;
    _363 *= _83.d2;
    _363 += g;
    int64_t _364 = _83.data[_363];
    if (c.d2 >= 0)
    goto _jump703;
    fail_assertion("negative array index");
    _jump703:;
    if (c.d2 < _83.d0)
    goto _jump704;
    fail_assertion("index too large");
    _jump704:;
    if (_364 >= 0)
    goto _jump705;
    fail_assertion("negative array index");
    _jump705:;
    if (_364 < _83.d1)
    goto _jump706;
    fail_assertion("index too large");
    _jump706:;
    if (c.d2 >= 0)
    goto _jump707;
    fail_assertion("negative array index");
    _jump707:;
    if (c.d2 < _83.d2)
    goto _jump708;
    fail_assertion("index too large");
    _jump708:;
    int64_t _365 = 0;
    _365 *= _83.d0;
    _365 += c.d2;
    _365 *= _83.d1;
    _365 += _364;
    _365 *= _83.d2;
    _365 += c.d2;
    int64_t _366 = _83.data[_365];
    _359.d1 = _366;
    if (_366 > 0) 
    goto _jump709;
    fail_assertion("non-positive loop bound");
    _jump709:;
    // Computing total size of heap memory to allocate
    int64_t _367 = 1;
    _367 *= _360;
    _367 *= _366;
    _367 *= sizeof(int64_t);
    _359.data = jpl_alloc(_367);
    int64_t _368 = 0; // r
    int64_t _369 = 0; // q
    _jump710:; // Begin body of loop
    int64_t _370 = 0;
    _370 *= _359.d0;
    _370 += _369;
    _370 *= _359.d1;
    _370 += _368;
    _359.data[_370] = _369;
    _368++;
    if (_368 < _366)
    goto _jump710;
    _368 = 0;
    _369++;
    if (_369 < _360)
    goto _jump710;
    // End body of loop
    int64_t _371;
    if (!_82)
    goto _jump711;
    _a1_int64_t _372;
    // Computing bound for q
    _372.d0 = _83.d1;
    if (_83.d1 > 0) 
    goto _jump712;
    fail_assertion("non-positive loop bound");
    _jump712:;
    // Computing total size of heap memory to allocate
    int64_t _373 = 1;
    _373 *= _83.d1;
    _373 *= sizeof(int64_t);
    _372.data = jpl_alloc(_373);
    int64_t _374 = 0; // q
    _jump713:; // Begin body of loop
    int64_t _375 = 0;
    _375 *= _372.d0;
    _375 += _374;
    _372.data[_375] = c.d2;
    _374++;
    if (_374 < _83.d1)
    goto _jump713;
    // End body of loop
    int64_t _376 = 367;
    if (_376 >= 0)
    goto _jump714;
    fail_assertion("negative array index");
    _jump714:;
    if (_376 < _372.d0)
    goto _jump715;
    fail_assertion("index too large");
    _jump715:;
    int64_t _377 = 0;
    _377 *= _372.d0;
    _377 += _376;
    int64_t _378 = _372.data[_377];
    _371 = _378;
    goto _jump716;
    _jump711:;
    bool _380 = false;
    bool _379 = _380;
    if (0 != _380)
    goto _jump717;
    _379 = _82;
    _jump717:;
    int64_t _381;
    if (!_379)
    goto _jump718;
    _381 = _83.d0;
    goto _jump719;
    _jump718:;
    _381 = g;
    _jump719:;
    _371 = _381;
    _jump716:;
    if (_83.d1 >= 0)
    goto _jump720;
    fail_assertion("negative array index");
    _jump720:;
    if (_83.d1 < _359.d0)
    goto _jump721;
    fail_assertion("index too large");
    _jump721:;
    if (_371 >= 0)
    goto _jump722;
    fail_assertion("negative array index");
    _jump722:;
    if (_371 < _359.d1)
    goto _jump723;
    fail_assertion("index too large");
    _jump723:;
    int64_t _382 = 0;
    _382 *= _359.d0;
    _382 += _83.d1;
    _382 *= _359.d1;
    _382 += _371;
    int64_t _383 = _359.data[_382];
    if (_383 > 0) 
    goto _jump724;
    fail_assertion("non-positive loop bound");
    _jump724:;
    _344 = 0;
    int64_t _384 = 0; // s
    int64_t _385 = 0; // r
    int64_t _386 = 0; // q
    _jump725:; // Begin body of loop
    int64_t _387;
    // Computing bound for t
    if (_83.d2 > 0) 
    goto _jump726;
    fail_assertion("non-positive loop bound");
    _jump726:;
    // Computing bound for u
    if (g > 0) 
    goto _jump727;
    fail_assertion("non-positive loop bound");
    _jump727:;
    // Computing bound for v
    if (_384 > 0) 
    goto _jump728;
    fail_assertion("non-positive loop bound");
    _jump728:;
    _387 = 0;
    int64_t _388 = 0; // v
    int64_t _389 = 0; // u
    int64_t _390 = 0; // t
    _jump729:; // Begin body of loop
    _387 += _389;
    _388++;
    if (_388 < _384)
    goto _jump729;
    _388 = 0;
    _389++;
    if (_389 < g)
    goto _jump729;
    _389 = 0;
    _390++;
    if (_390 < _83.d2)
    goto _jump729;
    // End body of loop
    int64_t _391 = _387 - g;
    _344 += _391;
    _384++;
    if (_384 < _383)
    goto _jump725;
    _384 = 0;
    _385++;
    if (_385 < c.d2)
    goto _jump725;
    _385 = 0;
    _386++;
    if (_386 < _358)
    goto _jump725;
    // End body of loop
    if (_344 > 0) 
    goto _jump730;
    fail_assertion("non-positive loop bound");
    _jump730:;
    _341 = 0;
    int64_t _392 = 0; // r
    int64_t _393 = 0; // q
    _jump731:; // Begin body of loop
    double _395 = 57.0;
    double _396 = 8.0;
    rgba _397 = { _395, _396, _0, h };
    double _398 = _397.g;
    bool _399 = a(_83, _398);
    bool _394 = _399;
    if (0 != _399)
    goto _jump732;
    bool _400 = false;
    bool _401;
    if (!_400)
    goto _jump733;
    bool _403 = _83.d2 != c.d0;
    bool _402 = _403;
    if (0 == _403)
    goto _jump734;
    bool _404 = !_82;
    _402 = _404;
    _jump734:;
    _401 = _402;
    goto _jump735;
    _jump733:;
    bool _405 = _168;
    if (0 == _168)
    goto _jump736;
    _405 = _82;
    _jump736:;
    _401 = _405;
    _jump735:;
    _394 = _401;
    _jump732:;
    double _406;
    if (!_394)
    goto _jump737;
    _a3_double _407;
    // Computing bound for s
    _407.d0 = c.d2;
    if (c.d2 > 0) 
    goto _jump738;
    fail_assertion("non-positive loop bound");
    _jump738:;
    // Computing bound for t
    int64_t _408 = 710;
    _407.d1 = _408;
    if (_408 > 0) 
    goto _jump739;
    fail_assertion("non-positive loop bound");
    _jump739:;
    // Computing bound for u
    int64_t _409 = 921;
    _407.d2 = _409;
    if (_409 > 0) 
    goto _jump740;
    fail_assertion("non-positive loop bound");
    _jump740:;
    // Computing total size of heap memory to allocate
    int64_t _410 = 1;
    _410 *= c.d2;
    _410 *= _408;
    _410 *= _409;
    _410 *= sizeof(double);
    _407.data = jpl_alloc(_410);
    int64_t _411 = 0; // u
    int64_t _412 = 0; // t
    int64_t _413 = 0; // s
    _jump741:; // Begin body of loop
    double _414;
    // Computing bound for v
    if (_83.d2 > 0) 
    goto _jump742;
    fail_assertion("non-positive loop bound");
    _jump742:;
    // Computing bound for w
    if (c.d1 > 0) 
    goto _jump743;
    fail_assertion("non-positive loop bound");
    _jump743:;
    // Computing bound for x
    if (_83.d2 > 0) 
    goto _jump744;
    fail_assertion("non-positive loop bound");
    _jump744:;
    _414 = 0;
    int64_t _415 = 0; // x
    int64_t _416 = 0; // w
    int64_t _417 = 0; // v
    _jump745:; // Begin body of loop
    _414 += h;
    _415++;
    if (_415 < _83.d2)
    goto _jump745;
    _415 = 0;
    _416++;
    if (_416 < c.d1)
    goto _jump745;
    _416 = 0;
    _417++;
    if (_417 < _83.d2)
    goto _jump745;
    // End body of loop
    int64_t _418 = 0;
    _418 *= _407.d0;
    _418 += _413;
    _418 *= _407.d1;
    _418 += _412;
    _418 *= _407.d2;
    _418 += _411;
    _407.data[_418] = _414;
    _411++;
    if (_411 < _409)
    goto _jump741;
    _411 = 0;
    _412++;
    if (_412 < _408)
    goto _jump741;
    _412 = 0;
    _413++;
    if (_413 < c.d2)
    goto _jump741;
    // End body of loop
    int64_t _419 = c.d0 - c.d2;
    _a1_int64_t _420;
    _420.d0 = 3;
    _420.data = jpl_alloc(sizeof(int64_t) * 3);
    _420.data[0] = _419;
    _420.data[1] = _393;
    _420.data[2] = _83.d1;
    if (_83.d0 >= 0)
    goto _jump746;
    fail_assertion("negative array index");
    _jump746:;
    if (_83.d0 < _420.d0)
    goto _jump747;
    fail_assertion("index too large");
    _jump747:;
    int64_t _421 = 0;
    _421 *= _420.d0;
    _421 += _83.d0;
    int64_t _422 = _420.data[_421];
    bool _423 = false;
    bool _424 = !_423;
    int64_t _425;
    if (!_424)
    goto _jump748;
    _425 = _393;
    goto _jump749;
    _jump748:;
    _425 = c.d0;
    _jump749:;
    if (_422 >= 0)
    goto _jump750;
    fail_assertion("negative array index");
    _jump750:;
    if (_422 < _407.d0)
    goto _jump751;
    fail_assertion("index too large");
    _jump751:;
    if (c.d0 >= 0)
    goto _jump752;
    fail_assertion("negative array index");
    _jump752:;
    if (c.d0 < _407.d1)
    goto _jump753;
    fail_assertion("index too large");
    _jump753:;
    if (_425 >= 0)
    goto _jump754;
    fail_assertion("negative array index");
    _jump754:;
    if (_425 < _407.d2)
    goto _jump755;
    fail_assertion("index too large");
    _jump755:;
    int64_t _426 = 0;
    _426 *= _407.d0;
    _426 += _422;
    _426 *= _407.d1;
    _426 += c.d0;
    _426 *= _407.d2;
    _426 += _425;
    double _427 = _407.data[_426];
    _406 = _427;
    goto _jump756;
    _jump737:;
    _406 = h;
    _jump756:;
    _341 += _406;
    _392++;
    if (_392 < _344)
    goto _jump731;
    _392 = 0;
    _393++;
    if (_393 < _342)
    goto _jump731;
    // End body of loop
    rgba _428 = { _303, _304, _324, _341 };
    return _428;
}

rgba d(_a3_rgba e, bool i) {
    bool _0 = e.d0 <= e.d2;
    _a1__a3_rgba _1;
    if (!_0)
    goto _jump1110;
    _a1__a3_rgba _2;
    // Computing bound for j
    _a3_int64_t _3;
    // Computing bound for j
    int64_t _4 = e.d0 - e.d2;
    _3.d0 = _4;
    if (_4 > 0) 
    goto _jump1111;
    fail_assertion("non-positive loop bound");
    _jump1111:;
    // Computing bound for k
    int64_t _5 = 220;
    int64_t _6 = _5 % e.d2;
    _3.d1 = _6;
    if (_6 > 0) 
    goto _jump1112;
    fail_assertion("non-positive loop bound");
    _jump1112:;
    // Computing bound for l
    _3.d2 = e.d1;
    if (e.d1 > 0) 
    goto _jump1113;
    fail_assertion("non-positive loop bound");
    _jump1113:;
    // Computing total size of heap memory to allocate
    int64_t _7 = 1;
    _7 *= _4;
    _7 *= _6;
    _7 *= e.d1;
    _7 *= sizeof(int64_t);
    _3.data = jpl_alloc(_7);
    int64_t _8 = 0; // l
    int64_t _9 = 0; // k
    int64_t _10 = 0; // j
    _jump1114:; // Begin body of loop
    int64_t _11 = 0;
    _11 *= _3.d0;
    _11 += _10;
    _11 *= _3.d1;
    _11 += _9;
    _11 *= _3.d2;
    _11 += _8;
    _3.data[_11] = _9;
    _8++;
    if (_8 < e.d1)
    goto _jump1114;
    _8 = 0;
    _9++;
    if (_9 < _6)
    goto _jump1114;
    _9 = 0;
    _10++;
    if (_10 < _4)
    goto _jump1114;
    // End body of loop
    bool _12 = false;
    bool _13 = !_12;
    int64_t _14;
    if (!_13)
    goto _jump1115;
    int64_t _15 = 695;
    _14 = _15;
    goto _jump1116;
    _jump1115:;
    _14 = e.d2;
    _jump1116:;
    int64_t _16;
    // Computing bound for j
    int64_t _17 = 325;
    int64_t _18 = _17 * e.d2;
    if (_18 > 0) 
    goto _jump1117;
    fail_assertion("non-positive loop bound");
    _jump1117:;
    _16 = 0;
    int64_t _19 = 0; // j
    _jump1118:; // Begin body of loop
    _16 += e.d2;
    _19++;
    if (_19 < _18)
    goto _jump1118;
    // End body of loop
    if (_14 >= 0)
    goto _jump1119;
    fail_assertion("negative array index");
    _jump1119:;
    if (_14 < _3.d0)
    goto _jump1120;
    fail_assertion("index too large");
    _jump1120:;
    if (e.d1 >= 0)
    goto _jump1121;
    fail_assertion("negative array index");
    _jump1121:;
    if (e.d1 < _3.d1)
    goto _jump1122;
    fail_assertion("index too large");
    _jump1122:;
    if (_16 >= 0)
    goto _jump1123;
    fail_assertion("negative array index");
    _jump1123:;
    if (_16 < _3.d2)
    goto _jump1124;
    fail_assertion("index too large");
    _jump1124:;
    int64_t _20 = 0;
    _20 *= _3.d0;
    _20 += _14;
    _20 *= _3.d1;
    _20 += e.d1;
    _20 *= _3.d2;
    _20 += _16;
    int64_t _21 = _3.data[_20];
    _2.d0 = _21;
    if (_21 > 0) 
    goto _jump1125;
    fail_assertion("non-positive loop bound");
    _jump1125:;
    // Computing total size of heap memory to allocate
    int64_t _22 = 1;
    _22 *= _21;
    _22 *= sizeof(_a3_rgba);
    _2.data = jpl_alloc(_22);
    int64_t _23 = 0; // j
    _jump1126:; // Begin body of loop
    bool _24 = true;
    bool _25 = false;
    bool _26 = _24 != _25;
    _a1__a3_rgba _27;
    if (!_26)
    goto _jump1127;
    _a1__a3_rgba _28;
    // Computing bound for k
    _28.d0 = e.d0;
    if (e.d0 > 0) 
    goto _jump1128;
    fail_assertion("non-positive loop bound");
    _jump1128:;
    // Computing total size of heap memory to allocate
    int64_t _29 = 1;
    _29 *= e.d0;
    _29 *= sizeof(_a3_rgba);
    _28.data = jpl_alloc(_29);
    int64_t _30 = 0; // k
    _jump1129:; // Begin body of loop
    int64_t _31 = 0;
    _31 *= _28.d0;
    _31 += _30;
    _28.data[_31] = e;
    _30++;
    if (_30 < e.d0)
    goto _jump1129;
    // End body of loop
    _27 = _28;
    goto _jump1130;
    _jump1127:;
    _a1__a3_rgba _32;
    // Computing bound for k
    int64_t _33 = 444;
    _32.d0 = _33;
    if (_33 > 0) 
    goto _jump1131;
    fail_assertion("non-positive loop bound");
    _jump1131:;
    // Computing total size of heap memory to allocate
    int64_t _34 = 1;
    _34 *= _33;
    _34 *= sizeof(_a3_rgba);
    _32.data = jpl_alloc(_34);
    int64_t _35 = 0; // k
    _jump1132:; // Begin body of loop
    int64_t _36 = 0;
    _36 *= _32.d0;
    _36 += _35;
    _32.data[_36] = e;
    _35++;
    if (_35 < _33)
    goto _jump1132;
    // End body of loop
    _27 = _32;
    _jump1130:;
    if (e.d0 >= 0)
    goto _jump1133;
    fail_assertion("negative array index");
    _jump1133:;
    if (e.d0 < _27.d0)
    goto _jump1134;
    fail_assertion("index too large");
    _jump1134:;
    int64_t _37 = 0;
    _37 *= _27.d0;
    _37 += e.d0;
    _a3_rgba _38 = _27.data[_37];
    int64_t _39 = 0;
    _39 *= _2.d0;
    _39 += _23;
    _2.data[_39] = _38;
    _23++;
    if (_23 < _21)
    goto _jump1126;
    // End body of loop
    _1 = _2;
    goto _jump1135;
    _jump1110:;
    _a2__a1__a3_rgba _40;
    // Computing bound for j
    int64_t _41 = 868;
    _40.d0 = _41;
    if (_41 > 0) 
    goto _jump1136;
    fail_assertion("non-positive loop bound");
    _jump1136:;
    // Computing bound for k
    int64_t _42 = 131;
    _40.d1 = _42;
    if (_42 > 0) 
    goto _jump1137;
    fail_assertion("non-positive loop bound");
    _jump1137:;
    // Computing total size of heap memory to allocate
    int64_t _43 = 1;
    _43 *= _41;
    _43 *= _42;
    _43 *= sizeof(_a1__a3_rgba);
    _40.data = jpl_alloc(_43);
    int64_t _44 = 0; // k
    int64_t _45 = 0; // j
    _jump1138:; // Begin body of loop
    _a1__a3_rgba _46;
    _46.d0 = 1;
    _46.data = jpl_alloc(sizeof(_a3_rgba) * 1);
    _46.data[0] = e;
    int64_t _47 = 0;
    _47 *= _40.d0;
    _47 += _45;
    _47 *= _40.d1;
    _47 += _44;
    _40.data[_47] = _46;
    _44++;
    if (_44 < _42)
    goto _jump1138;
    _44 = 0;
    _45++;
    if (_45 < _41)
    goto _jump1138;
    // End body of loop
    int64_t _48;
    // Computing bound for j
    if (e.d0 > 0) 
    goto _jump1139;
    fail_assertion("non-positive loop bound");
    _jump1139:;
    _48 = 0;
    int64_t _49 = 0; // j
    _jump1140:; // Begin body of loop
    _48 += e.d2;
    _49++;
    if (_49 < e.d0)
    goto _jump1140;
    // End body of loop
    int64_t _50 = -e.d0;
    int64_t _51 = _48 + _50;
    if (_51 >= 0)
    goto _jump1141;
    fail_assertion("negative array index");
    _jump1141:;
    if (_51 < _40.d0)
    goto _jump1142;
    fail_assertion("index too large");
    _jump1142:;
    if (e.d0 >= 0)
    goto _jump1143;
    fail_assertion("negative array index");
    _jump1143:;
    if (e.d0 < _40.d1)
    goto _jump1144;
    fail_assertion("index too large");
    _jump1144:;
    int64_t _52 = 0;
    _52 *= _40.d0;
    _52 += _51;
    _52 *= _40.d1;
    _52 += e.d0;
    _a1__a3_rgba _53 = _40.data[_52];
    _1 = _53;
    _jump1135:;
    int64_t _54 = 211;
    if (_54 >= 0)
    goto _jump1145;
    fail_assertion("negative array index");
    _jump1145:;
    if (_54 < _1.d0)
    goto _jump1146;
    fail_assertion("index too large");
    _jump1146:;
    int64_t _55 = 0;
    _55 *= _1.d0;
    _55 += _54;
    _a3_rgba _56 = _1.data[_55];
    _a1__a3_rgba _57;
    _57.d0 = 1;
    _57.data = jpl_alloc(sizeof(_a3_rgba) * 1);
    _57.data[0] = _56;
    _a1_bool _58;
    // Computing bound for l
    int64_t _59;
    // Computing bound for l
    bool _61 = true;
    bool _60 = _61;
    if (0 == _61)
    goto _jump1147;
    bool _62 = true;
    _60 = _62;
    _jump1147:;
    int64_t _63;
    if (!_60)
    goto _jump1148;
    _63 = e.d0;
    goto _jump1149;
    _jump1148:;
    bool _64 = true;
    int64_t _65;
    if (!_64)
    goto _jump1150;
    _65 = e.d0;
    goto _jump1151;
    _jump1150:;
    _65 = e.d1;
    _jump1151:;
    _63 = _65;
    _jump1149:;
    if (_63 > 0) 
    goto _jump1152;
    fail_assertion("non-positive loop bound");
    _jump1152:;
    _59 = 0;
    int64_t _66 = 0; // l
    _jump1153:; // Begin body of loop
    int64_t _67 = -e.d1;
    _59 += _67;
    _66++;
    if (_66 < _63)
    goto _jump1153;
    // End body of loop
    _58.d0 = _59;
    if (_59 > 0) 
    goto _jump1154;
    fail_assertion("non-positive loop bound");
    _jump1154:;
    // Computing total size of heap memory to allocate
    int64_t _68 = 1;
    _68 *= _59;
    _68 *= sizeof(bool);
    _58.data = jpl_alloc(_68);
    int64_t _69 = 0; // l
    _jump1155:; // Begin body of loop
    bool _70 = !i;
    _a3_int64_t _71;
    // Computing bound for m
    _71.d0 = e.d2;
    if (e.d2 > 0) 
    goto _jump1156;
    fail_assertion("non-positive loop bound");
    _jump1156:;
    // Computing bound for n
    int64_t _72 = 178;
    _71.d1 = _72;
    if (_72 > 0) 
    goto _jump1157;
    fail_assertion("non-positive loop bound");
    _jump1157:;
    // Computing bound for o
    _71.d2 = e.d2;
    if (e.d2 > 0) 
    goto _jump1158;
    fail_assertion("non-positive loop bound");
    _jump1158:;
    // Computing total size of heap memory to allocate
    int64_t _73 = 1;
    _73 *= e.d2;
    _73 *= _72;
    _73 *= e.d2;
    _73 *= sizeof(int64_t);
    _71.data = jpl_alloc(_73);
    int64_t _74 = 0; // o
    int64_t _75 = 0; // n
    int64_t _76 = 0; // m
    _jump1159:; // Begin body of loop
    int64_t _77 = 0;
    _77 *= _71.d0;
    _77 += _76;
    _77 *= _71.d1;
    _77 += _75;
    _77 *= _71.d2;
    _77 += _74;
    _71.data[_77] = _57.d0;
    _74++;
    if (_74 < e.d2)
    goto _jump1159;
    _74 = 0;
    _75++;
    if (_75 < _72)
    goto _jump1159;
    _75 = 0;
    _76++;
    if (_76 < e.d2)
    goto _jump1159;
    // End body of loop
    bool _78 = a(_71, c);
    bool _79 = _70 != _78;
    int64_t _80 = 0;
    _80 *= _58.d0;
    _80 += _69;
    _58.data[_80] = _79;
    _69++;
    if (_69 < _59)
    goto _jump1155;
    // End body of loop
    if (_57.d0 >= 0)
    goto _jump1160;
    fail_assertion("negative array index");
    _jump1160:;
    if (_57.d0 < _58.d0)
    goto _jump1161;
    fail_assertion("index too large");
    _jump1161:;
    int64_t _81 = 0;
    _81 *= _58.d0;
    _81 += _57.d0;
    bool _82 = _58.data[_81];
    bool _83 = !_82;
    rgba _84;
    if (!_83)
    goto _jump1162;
    bool _85 = false;
    double _86 = -c;
    bool _87 = _86 != c;
    _a1_bool _88;
    _88.d0 = 2;
    _88.data = jpl_alloc(sizeof(bool) * 2);
    _88.data[0] = _85;
    _88.data[1] = _87;
    _a2_int64_t _89;
    // Computing bound for l
    _89.d0 = e.d2;
    if (e.d2 > 0) 
    goto _jump1163;
    fail_assertion("non-positive loop bound");
    _jump1163:;
    // Computing bound for m
    int64_t _90 = 349;
    _89.d1 = _90;
    if (_90 > 0) 
    goto _jump1164;
    fail_assertion("non-positive loop bound");
    _jump1164:;
    // Computing total size of heap memory to allocate
    int64_t _91 = 1;
    _91 *= e.d2;
    _91 *= _90;
    _91 *= sizeof(int64_t);
    _89.data = jpl_alloc(_91);
    int64_t _92 = 0; // m
    int64_t _93 = 0; // l
    _jump1165:; // Begin body of loop
    int64_t _94 = 0;
    _94 *= _89.d0;
    _94 += _93;
    _94 *= _89.d1;
    _94 += _92;
    _89.data[_94] = e.d2;
    _92++;
    if (_92 < _90)
    goto _jump1165;
    _92 = 0;
    _93++;
    if (_93 < e.d2)
    goto _jump1165;
    // End body of loop
    if (e.d2 >= 0)
    goto _jump1166;
    fail_assertion("negative array index");
    _jump1166:;
    if (e.d2 < _89.d0)
    goto _jump1167;
    fail_assertion("index too large");
    _jump1167:;
    if (_57.d0 >= 0)
    goto _jump1168;
    fail_assertion("negative array index");
    _jump1168:;
    if (_57.d0 < _89.d1)
    goto _jump1169;
    fail_assertion("index too large");
    _jump1169:;
    int64_t _95 = 0;
    _95 *= _89.d0;
    _95 += e.d2;
    _95 *= _89.d1;
    _95 += _57.d0;
    int64_t _96 = _89.data[_95];
    int64_t _97 = -_96;
    if (_97 >= 0)
    goto _jump1170;
    fail_assertion("negative array index");
    _jump1170:;
    if (_97 < _88.d0)
    goto _jump1171;
    fail_assertion("index too large");
    _jump1171:;
    int64_t _98 = 0;
    _98 *= _88.d0;
    _98 += _97;
    bool _99 = _88.data[_98];
    bool _100 = !_99;
    rgba _101 = d(e, _100);
    _84 = _101;
    goto _jump1172;
    _jump1162:;
    _a2_double _102;
    // Computing bound for l
    int64_t _103 = 786;
    _102.d0 = _103;
    if (_103 > 0) 
    goto _jump1173;
    fail_assertion("non-positive loop bound");
    _jump1173:;
    // Computing bound for m
    _102.d1 = _57.d0;
    if (_57.d0 > 0) 
    goto _jump1174;
    fail_assertion("non-positive loop bound");
    _jump1174:;
    // Computing total size of heap memory to allocate
    int64_t _104 = 1;
    _104 *= _103;
    _104 *= _57.d0;
    _104 *= sizeof(double);
    _102.data = jpl_alloc(_104);
    int64_t _105 = 0; // m
    int64_t _106 = 0; // l
    _jump1175:; // Begin body of loop
    double _107 = -c;
    int64_t _108 = 0;
    _108 *= _102.d0;
    _108 += _106;
    _108 *= _102.d1;
    _108 += _105;
    _102.data[_108] = _107;
    _105++;
    if (_105 < _57.d0)
    goto _jump1175;
    _105 = 0;
    _106++;
    if (_106 < _103)
    goto _jump1175;
    // End body of loop
    int64_t _109 = -e.d1;
    if (e.d0 >= 0)
    goto _jump1176;
    fail_assertion("negative array index");
    _jump1176:;
    if (e.d0 < _102.d0)
    goto _jump1177;
    fail_assertion("index too large");
    _jump1177:;
    if (_109 >= 0)
    goto _jump1178;
    fail_assertion("negative array index");
    _jump1178:;
    if (_109 < _102.d1)
    goto _jump1179;
    fail_assertion("index too large");
    _jump1179:;
    int64_t _110 = 0;
    _110 *= _102.d0;
    _110 += e.d0;
    _110 *= _102.d1;
    _110 += _109;
    double _111 = _102.data[_110];
    int64_t _112 = 154;
    bool _113 = _112 >= e.d1;
    _a2_double _114;
    if (!_113)
    goto _jump1180;
    _a2_double _115;
    // Computing bound for l
    _115.d0 = e.d0;
    if (e.d0 > 0) 
    goto _jump1181;
    fail_assertion("non-positive loop bound");
    _jump1181:;
    // Computing bound for m
    _115.d1 = e.d1;
    if (e.d1 > 0) 
    goto _jump1182;
    fail_assertion("non-positive loop bound");
    _jump1182:;
    // Computing total size of heap memory to allocate
    int64_t _116 = 1;
    _116 *= e.d0;
    _116 *= e.d1;
    _116 *= sizeof(double);
    _115.data = jpl_alloc(_116);
    int64_t _117 = 0; // m
    int64_t _118 = 0; // l
    _jump1183:; // Begin body of loop
    double _119 = 95.0;
    int64_t _120 = 0;
    _120 *= _115.d0;
    _120 += _118;
    _120 *= _115.d1;
    _120 += _117;
    _115.data[_120] = _119;
    _117++;
    if (_117 < e.d1)
    goto _jump1183;
    _117 = 0;
    _118++;
    if (_118 < e.d0)
    goto _jump1183;
    // End body of loop
    _114 = _115;
    goto _jump1184;
    _jump1180:;
    _a2_double _121;
    // Computing bound for l
    _121.d0 = e.d1;
    if (e.d1 > 0) 
    goto _jump1185;
    fail_assertion("non-positive loop bound");
    _jump1185:;
    // Computing bound for m
    _121.d1 = e.d1;
    if (e.d1 > 0) 
    goto _jump1186;
    fail_assertion("non-positive loop bound");
    _jump1186:;
    // Computing total size of heap memory to allocate
    int64_t _122 = 1;
    _122 *= e.d1;
    _122 *= e.d1;
    _122 *= sizeof(double);
    _121.data = jpl_alloc(_122);
    int64_t _123 = 0; // m
    int64_t _124 = 0; // l
    _jump1187:; // Begin body of loop
    double _125 = 4.0;
    int64_t _126 = 0;
    _126 *= _121.d0;
    _126 += _124;
    _126 *= _121.d1;
    _126 += _123;
    _121.data[_126] = _125;
    _123++;
    if (_123 < e.d1)
    goto _jump1187;
    _123 = 0;
    _124++;
    if (_124 < e.d1)
    goto _jump1187;
    // End body of loop
    _114 = _121;
    _jump1184:;
    int64_t _127 = -e.d2;
    int64_t _128 = -_127;
    int64_t _129 = -_57.d0;
    int64_t _130 = -_129;
    if (_128 >= 0)
    goto _jump1188;
    fail_assertion("negative array index");
    _jump1188:;
    if (_128 < _114.d0)
    goto _jump1189;
    fail_assertion("index too large");
    _jump1189:;
    if (_130 >= 0)
    goto _jump1190;
    fail_assertion("negative array index");
    _jump1190:;
    if (_130 < _114.d1)
    goto _jump1191;
    fail_assertion("index too large");
    _jump1191:;
    int64_t _131 = 0;
    _131 *= _114.d0;
    _131 += _128;
    _131 *= _114.d1;
    _131 += _130;
    double _132 = _114.data[_131];
    bool _133 = _111 < _132;
    bool _134;
    if (!i)
    goto _jump1192;
    bool _135;
    if (!i)
    goto _jump1193;
    _135 = i;
    goto _jump1194;
    _jump1193:;
    bool _136 = true;
    bool _137 = !_136;
    _135 = _137;
    _jump1194:;
    _134 = _135;
    goto _jump1195;
    _jump1192:;
    _134 = i;
    _jump1195:;
    bool _138;
    if (!_134)
    goto _jump1196;
    _a1_bool _139;
    // Computing bound for l
    int64_t _140;
    // Computing bound for l
    if (e.d2 > 0) 
    goto _jump1197;
    fail_assertion("non-positive loop bound");
    _jump1197:;
    _140 = 0;
    int64_t _141 = 0; // l
    _jump1198:; // Begin body of loop
    _140 += e.d2;
    _141++;
    if (_141 < e.d2)
    goto _jump1198;
    // End body of loop
    _139.d0 = _140;
    if (_140 > 0) 
    goto _jump1199;
    fail_assertion("non-positive loop bound");
    _jump1199:;
    // Computing total size of heap memory to allocate
    int64_t _142 = 1;
    _142 *= _140;
    _142 *= sizeof(bool);
    _139.data = jpl_alloc(_142);
    int64_t _143 = 0; // l
    _jump1200:; // Begin body of loop
    bool _144 = true;
    int64_t _145 = 0;
    _145 *= _139.d0;
    _145 += _143;
    _139.data[_145] = _144;
    _143++;
    if (_143 < _140)
    goto _jump1200;
    // End body of loop
    int64_t _146 = 162;
    if (_146 >= 0)
    goto _jump1201;
    fail_assertion("negative array index");
    _jump1201:;
    if (_146 < _139.d0)
    goto _jump1202;
    fail_assertion("index too large");
    _jump1202:;
    int64_t _147 = 0;
    _147 *= _139.d0;
    _147 += _146;
    bool _148 = _139.data[_147];
    _138 = _148;
    goto _jump1203;
    _jump1196:;
    bool _149 = true;
    bool _150;
    if (!_149)
    goto _jump1204;
    bool _151 = false;
    _150 = _151;
    goto _jump1205;
    _jump1204:;
    _a2_bool _152;
    // Computing bound for l
    _152.d0 = e.d1;
    if (e.d1 > 0) 
    goto _jump1206;
    fail_assertion("non-positive loop bound");
    _jump1206:;
    // Computing bound for m
    _152.d1 = e.d1;
    if (e.d1 > 0) 
    goto _jump1207;
    fail_assertion("non-positive loop bound");
    _jump1207:;
    // Computing total size of heap memory to allocate
    int64_t _153 = 1;
    _153 *= e.d1;
    _153 *= e.d1;
    _153 *= sizeof(bool);
    _152.data = jpl_alloc(_153);
    int64_t _154 = 0; // m
    int64_t _155 = 0; // l
    _jump1208:; // Begin body of loop
    int64_t _156 = 0;
    _156 *= _152.d0;
    _156 += _155;
    _156 *= _152.d1;
    _156 += _154;
    _152.data[_156] = i;
    _154++;
    if (_154 < e.d1)
    goto _jump1208;
    _154 = 0;
    _155++;
    if (_155 < e.d1)
    goto _jump1208;
    // End body of loop
    int64_t _157 = -e.d0;
    if (e.d1 >= 0)
    goto _jump1209;
    fail_assertion("negative array index");
    _jump1209:;
    if (e.d1 < _152.d0)
    goto _jump1210;
    fail_assertion("index too large");
    _jump1210:;
    if (_157 >= 0)
    goto _jump1211;
    fail_assertion("negative array index");
    _jump1211:;
    if (_157 < _152.d1)
    goto _jump1212;
    fail_assertion("index too large");
    _jump1212:;
    int64_t _158 = 0;
    _158 *= _152.d0;
    _158 += e.d1;
    _158 *= _152.d1;
    _158 += _157;
    bool _159 = _152.data[_158];
    _150 = _159;
    _jump1205:;
    _138 = _150;
    _jump1203:;
    bool _160 = _133 != _138;
    rgba _161;
    if (!_160)
    goto _jump1213;
    _a3__a3_bool _162;
    // Computing bound for l
    _162.d0 = e.d0;
    if (e.d0 > 0) 
    goto _jump1214;
    fail_assertion("non-positive loop bound");
    _jump1214:;
    // Computing bound for m
    _a2_int64_t _163;
    // Computing bound for l
    _163.d0 = e.d2;
    if (e.d2 > 0) 
    goto _jump1215;
    fail_assertion("non-positive loop bound");
    _jump1215:;
    // Computing bound for m
    _163.d1 = e.d0;
    if (e.d0 > 0) 
    goto _jump1216;
    fail_assertion("non-positive loop bound");
    _jump1216:;
    // Computing total size of heap memory to allocate
    int64_t _164 = 1;
    _164 *= e.d2;
    _164 *= e.d0;
    _164 *= sizeof(int64_t);
    _163.data = jpl_alloc(_164);
    int64_t _165 = 0; // m
    int64_t _166 = 0; // l
    _jump1217:; // Begin body of loop
    int64_t _167 = 0;
    _167 *= _163.d0;
    _167 += _166;
    _167 *= _163.d1;
    _167 += _165;
    _163.data[_167] = _165;
    _165++;
    if (_165 < e.d0)
    goto _jump1217;
    _165 = 0;
    _166++;
    if (_166 < e.d2)
    goto _jump1217;
    // End body of loop
    if (_57.d0 >= 0)
    goto _jump1218;
    fail_assertion("negative array index");
    _jump1218:;
    if (_57.d0 < _163.d0)
    goto _jump1219;
    fail_assertion("index too large");
    _jump1219:;
    if (e.d1 >= 0)
    goto _jump1220;
    fail_assertion("negative array index");
    _jump1220:;
    if (e.d1 < _163.d1)
    goto _jump1221;
    fail_assertion("index too large");
    _jump1221:;
    int64_t _168 = 0;
    _168 *= _163.d0;
    _168 += _57.d0;
    _168 *= _163.d1;
    _168 += e.d1;
    int64_t _169 = _163.data[_168];
    _162.d1 = _169;
    if (_169 > 0) 
    goto _jump1222;
    fail_assertion("non-positive loop bound");
    _jump1222:;
    // Computing bound for n
    _a3_int64_t _170;
    // Computing bound for l
    _170.d0 = e.d2;
    if (e.d2 > 0) 
    goto _jump1223;
    fail_assertion("non-positive loop bound");
    _jump1223:;
    // Computing bound for m
    _170.d1 = _57.d0;
    if (_57.d0 > 0) 
    goto _jump1224;
    fail_assertion("non-positive loop bound");
    _jump1224:;
    // Computing bound for n
    int64_t _171 = 128;
    _170.d2 = _171;
    if (_171 > 0) 
    goto _jump1225;
    fail_assertion("non-positive loop bound");
    _jump1225:;
    // Computing total size of heap memory to allocate
    int64_t _172 = 1;
    _172 *= e.d2;
    _172 *= _57.d0;
    _172 *= _171;
    _172 *= sizeof(int64_t);
    _170.data = jpl_alloc(_172);
    int64_t _173 = 0; // n
    int64_t _174 = 0; // m
    int64_t _175 = 0; // l
    _jump1226:; // Begin body of loop
    int64_t _176 = 946;
    int64_t _177 = 0;
    _177 *= _170.d0;
    _177 += _175;
    _177 *= _170.d1;
    _177 += _174;
    _177 *= _170.d2;
    _177 += _173;
    _170.data[_177] = _176;
    _173++;
    if (_173 < _171)
    goto _jump1226;
    _173 = 0;
    _174++;
    if (_174 < _57.d0)
    goto _jump1226;
    _174 = 0;
    _175++;
    if (_175 < e.d2)
    goto _jump1226;
    // End body of loop
    int64_t _178 = 380;
    int64_t _179;
    if (!i)
    goto _jump1227;
    int64_t _180 = 256;
    _179 = _180;
    goto _jump1228;
    _jump1227:;
    int64_t _181 = 849;
    _179 = _181;
    _jump1228:;
    int64_t _182 = 196;
    if (_178 >= 0)
    goto _jump1229;
    fail_assertion("negative array index");
    _jump1229:;
    if (_178 < _170.d0)
    goto _jump1230;
    fail_assertion("index too large");
    _jump1230:;
    if (_179 >= 0)
    goto _jump1231;
    fail_assertion("negative array index");
    _jump1231:;
    if (_179 < _170.d1)
    goto _jump1232;
    fail_assertion("index too large");
    _jump1232:;
    if (_182 >= 0)
    goto _jump1233;
    fail_assertion("negative array index");
    _jump1233:;
    if (_182 < _170.d2)
    goto _jump1234;
    fail_assertion("index too large");
    _jump1234:;
    int64_t _183 = 0;
    _183 *= _170.d0;
    _183 += _178;
    _183 *= _170.d1;
    _183 += _179;
    _183 *= _170.d2;
    _183 += _182;
    int64_t _184 = _170.data[_183];
    _162.d2 = _184;
    if (_184 > 0) 
    goto _jump1235;
    fail_assertion("non-positive loop bound");
    _jump1235:;
    // Computing total size of heap memory to allocate
    int64_t _185 = 1;
    _185 *= e.d0;
    _185 *= _169;
    _185 *= _184;
    _185 *= sizeof(_a3_bool);
    _162.data = jpl_alloc(_185);
    int64_t _186 = 0; // n
    int64_t _187 = 0; // m
    int64_t _188 = 0; // l
    _jump1236:; // Begin body of loop
    _a3_bool _189;
    // Computing bound for o
    int64_t _190 = -_188;
    _189.d0 = _190;
    if (_190 > 0) 
    goto _jump1237;
    fail_assertion("non-positive loop bound");
    _jump1237:;
    // Computing bound for p
    _189.d1 = e.d2;
    if (e.d2 > 0) 
    goto _jump1238;
    fail_assertion("non-positive loop bound");
    _jump1238:;
    // Computing bound for q
    int64_t _191 = 91;
    _189.d2 = _191;
    if (_191 > 0) 
    goto _jump1239;
    fail_assertion("non-positive loop bound");
    _jump1239:;
    // Computing total size of heap memory to allocate
    int64_t _192 = 1;
    _192 *= _190;
    _192 *= e.d2;
    _192 *= _191;
    _192 *= sizeof(bool);
    _189.data = jpl_alloc(_192);
    int64_t _193 = 0; // q
    int64_t _194 = 0; // p
    int64_t _195 = 0; // o
    _jump1240:; // Begin body of loop
    bool _196 = true;
    int64_t _197 = 0;
    _197 *= _189.d0;
    _197 += _195;
    _197 *= _189.d1;
    _197 += _194;
    _197 *= _189.d2;
    _197 += _193;
    _189.data[_197] = _196;
    _193++;
    if (_193 < _191)
    goto _jump1240;
    _193 = 0;
    _194++;
    if (_194 < e.d2)
    goto _jump1240;
    _194 = 0;
    _195++;
    if (_195 < _190)
    goto _jump1240;
    // End body of loop
    int64_t _198 = 0;
    _198 *= _162.d0;
    _198 += _188;
    _198 *= _162.d1;
    _198 += _187;
    _198 *= _162.d2;
    _198 += _186;
    _162.data[_198] = _189;
    _186++;
    if (_186 < _184)
    goto _jump1236;
    _186 = 0;
    _187++;
    if (_187 < _169)
    goto _jump1236;
    _187 = 0;
    _188++;
    if (_188 < e.d0)
    goto _jump1236;
    // End body of loop
    int64_t _199 = 605;
    bool _200 = _199 > e.d1;
    int64_t _201;
    if (!_200)
    goto _jump1241;
    _201 = e.d2;
    goto _jump1242;
    _jump1241:;
    _201 = e.d1;
    _jump1242:;
    int64_t _202 = _201 - e.d2;
    double _203 = 62.0;
    double _204 = fmod(c, _203);
    double _205 = 89.0;
    bool _206 = _204 != _205;
    int64_t _207;
    if (!_206)
    goto _jump1243;
    int64_t _208;
    if (!i)
    goto _jump1244;
    _208 = e.d1;
    goto _jump1245;
    _jump1244:;
    _208 = _57.d0;
    _jump1245:;
    _207 = _208;
    goto _jump1246;
    _jump1243:;
    _207 = _57.d0;
    _jump1246:;
    if (_202 >= 0)
    goto _jump1247;
    fail_assertion("negative array index");
    _jump1247:;
    if (_202 < _162.d0)
    goto _jump1248;
    fail_assertion("index too large");
    _jump1248:;
    if (e.d1 >= 0)
    goto _jump1249;
    fail_assertion("negative array index");
    _jump1249:;
    if (e.d1 < _162.d1)
    goto _jump1250;
    fail_assertion("index too large");
    _jump1250:;
    if (_207 >= 0)
    goto _jump1251;
    fail_assertion("negative array index");
    _jump1251:;
    if (_207 < _162.d2)
    goto _jump1252;
    fail_assertion("index too large");
    _jump1252:;
    int64_t _209 = 0;
    _209 *= _162.d0;
    _209 += _202;
    _209 *= _162.d1;
    _209 += e.d1;
    _209 *= _162.d2;
    _209 += _207;
    _a3_bool _210 = _162.data[_209];
    int64_t _211 = 374;
    double _212 = -c;
    rgba _213 = b(_210, _211, _212);
    _161 = _213;
    goto _jump1253;
    _jump1213:;
    _a3_int64_t _214;
    // Computing bound for l
    _214.d0 = e.d2;
    if (e.d2 > 0) 
    goto _jump1254;
    fail_assertion("non-positive loop bound");
    _jump1254:;
    // Computing bound for m
    int64_t _215 = 296;
    _214.d1 = _215;
    if (_215 > 0) 
    goto _jump1255;
    fail_assertion("non-positive loop bound");
    _jump1255:;
    // Computing bound for n
    int64_t _216 = 727;
    _214.d2 = _216;
    if (_216 > 0) 
    goto _jump1256;
    fail_assertion("non-positive loop bound");
    _jump1256:;
    // Computing total size of heap memory to allocate
    int64_t _217 = 1;
    _217 *= e.d2;
    _217 *= _215;
    _217 *= _216;
    _217 *= sizeof(int64_t);
    _214.data = jpl_alloc(_217);
    int64_t _218 = 0; // n
    int64_t _219 = 0; // m
    int64_t _220 = 0; // l
    _jump1257:; // Begin body of loop
    int64_t _221 = 0;
    _221 *= _214.d0;
    _221 += _220;
    _221 *= _214.d1;
    _221 += _219;
    _221 *= _214.d2;
    _221 += _218;
    _214.data[_221] = _220;
    _218++;
    if (_218 < _216)
    goto _jump1257;
    _218 = 0;
    _219++;
    if (_219 < _215)
    goto _jump1257;
    _219 = 0;
    _220++;
    if (_220 < e.d2)
    goto _jump1257;
    // End body of loop
    double _222 = 97.0;
    bool _223 = a(_214, _222);
    _a1_double _224;
    if (!_223)
    goto _jump1258;
    double _225 = 48.0;
    _a1_double _226;
    _226.d0 = 2;
    _226.data = jpl_alloc(sizeof(double) * 2);
    _226.data[0] = c;
    _226.data[1] = _225;
    _224 = _226;
    goto _jump1259;
    _jump1258:;
    _a1_double _227;
    // Computing bound for l
    _227.d0 = e.d0;
    if (e.d0 > 0) 
    goto _jump1260;
    fail_assertion("non-positive loop bound");
    _jump1260:;
    // Computing total size of heap memory to allocate
    int64_t _228 = 1;
    _228 *= e.d0;
    _228 *= sizeof(double);
    _227.data = jpl_alloc(_228);
    int64_t _229 = 0; // l
    _jump1261:; // Begin body of loop
    double _230 = 30.0;
    int64_t _231 = 0;
    _231 *= _227.d0;
    _231 += _229;
    _227.data[_231] = _230;
    _229++;
    if (_229 < e.d0)
    goto _jump1261;
    // End body of loop
    _224 = _227;
    _jump1259:;
    int64_t _232;
    // Computing bound for l
    if (e.d0 > 0) 
    goto _jump1262;
    fail_assertion("non-positive loop bound");
    _jump1262:;
    // Computing bound for m
    if (_57.d0 > 0) 
    goto _jump1263;
    fail_assertion("non-positive loop bound");
    _jump1263:;
    _232 = 0;
    int64_t _233 = 0; // m
    int64_t _234 = 0; // l
    _jump1264:; // Begin body of loop
    _232 += _233;
    _233++;
    if (_233 < _57.d0)
    goto _jump1264;
    _233 = 0;
    _234++;
    if (_234 < e.d0)
    goto _jump1264;
    // End body of loop
    int64_t _235 = -e.d2;
    int64_t _236 = _232 % _235;
    if (_236 >= 0)
    goto _jump1265;
    fail_assertion("negative array index");
    _jump1265:;
    if (_236 < _224.d0)
    goto _jump1266;
    fail_assertion("index too large");
    _jump1266:;
    int64_t _237 = 0;
    _237 *= _224.d0;
    _237 += _236;
    double _238 = _224.data[_237];
    double _239 = 75.0;
    _a2_double _240;
    // Computing bound for l
    int64_t _241;
    if (!i)
    goto _jump1267;
    _241 = e.d0;
    goto _jump1268;
    _jump1267:;
    _241 = _57.d0;
    _jump1268:;
    _240.d0 = _241;
    if (_241 > 0) 
    goto _jump1269;
    fail_assertion("non-positive loop bound");
    _jump1269:;
    // Computing bound for m
    int64_t _242 = -e.d0;
    _240.d1 = _242;
    if (_242 > 0) 
    goto _jump1270;
    fail_assertion("non-positive loop bound");
    _jump1270:;
    // Computing total size of heap memory to allocate
    int64_t _243 = 1;
    _243 *= _241;
    _243 *= _242;
    _243 *= sizeof(double);
    _240.data = jpl_alloc(_243);
    int64_t _244 = 0; // m
    int64_t _245 = 0; // l
    _jump1271:; // Begin body of loop
    int64_t _246 = 0;
    _246 *= _240.d0;
    _246 += _245;
    _246 *= _240.d1;
    _246 += _244;
    _240.data[_246] = c;
    _244++;
    if (_244 < _242)
    goto _jump1271;
    _244 = 0;
    _245++;
    if (_245 < _241)
    goto _jump1271;
    // End body of loop
    double _247;
    if (!i)
    goto _jump1272;
    _247 = c;
    goto _jump1273;
    _jump1272:;
    _247 = c;
    _jump1273:;
    bool _248 = c > _247;
    int64_t _249;
    if (!_248)
    goto _jump1274;
    int64_t _250 = 96;
    int64_t _251 = -_250;
    _249 = _251;
    goto _jump1275;
    _jump1274:;
    _249 = e.d0;
    _jump1275:;
    if (_249 >= 0)
    goto _jump1276;
    fail_assertion("negative array index");
    _jump1276:;
    if (_249 < _240.d0)
    goto _jump1277;
    fail_assertion("index too large");
    _jump1277:;
    if (e.d1 >= 0)
    goto _jump1278;
    fail_assertion("negative array index");
    _jump1278:;
    if (e.d1 < _240.d1)
    goto _jump1279;
    fail_assertion("index too large");
    _jump1279:;
    int64_t _252 = 0;
    _252 *= _240.d0;
    _252 += _249;
    _252 *= _240.d1;
    _252 += e.d1;
    double _253 = _240.data[_252];
    double _254;
    // Computing bound for l
    if (e.d2 > 0) 
    goto _jump1280;
    fail_assertion("non-positive loop bound");
    _jump1280:;
    // Computing bound for m
    if (_57.d0 > 0) 
    goto _jump1281;
    fail_assertion("non-positive loop bound");
    _jump1281:;
    _254 = 0;
    int64_t _255 = 0; // m
    int64_t _256 = 0; // l
    _jump1282:; // Begin body of loop
    bool _257 = !i;
    double _258;
    if (!_257)
    goto _jump1283;
    double _259 = 30.0;
    double _260 = _259 / c;
    double _261 = 10.0;
    double _262 = _260 * _261;
    _258 = _262;
    goto _jump1284;
    _jump1283:;
    double _263;
    // Computing bound for n
    if (_255 > 0) 
    goto _jump1285;
    fail_assertion("non-positive loop bound");
    _jump1285:;
    // Computing bound for o
    if (e.d2 > 0) 
    goto _jump1286;
    fail_assertion("non-positive loop bound");
    _jump1286:;
    // Computing bound for p
    if (_256 > 0) 
    goto _jump1287;
    fail_assertion("non-positive loop bound");
    _jump1287:;
    _263 = 0;
    int64_t _264 = 0; // p
    int64_t _265 = 0; // o
    int64_t _266 = 0; // n
    _jump1288:; // Begin body of loop
    double _267 = 62.0;
    _263 += _267;
    _264++;
    if (_264 < _256)
    goto _jump1288;
    _264 = 0;
    _265++;
    if (_265 < e.d2)
    goto _jump1288;
    _265 = 0;
    _266++;
    if (_266 < _255)
    goto _jump1288;
    // End body of loop
    _258 = _263;
    _jump1284:;
    _254 += _258;
    _255++;
    if (_255 < _57.d0)
    goto _jump1282;
    _255 = 0;
    _256++;
    if (_256 < e.d2)
    goto _jump1282;
    // End body of loop
    rgba _268 = { _238, _239, _253, _254 };
    _161 = _268;
    _jump1253:;
    _84 = _161;
    _jump1172:;
    return _84;
    bool _269 = _57.d0 == e.d2;
    bool _270;
    if (!_269)
    goto _jump1289;
    _270 = i;
    goto _jump1290;
    _jump1289:;
    bool _271 = e.d1 == e.d0;
    _270 = _271;
    _jump1290:;
    _a3_rgba _272;
    if (!_270)
    goto _jump1291;
    _a3__a2__a3_rgba _273;
    // Computing bound for l
    _273.d0 = e.d1;
    if (e.d1 > 0) 
    goto _jump1292;
    fail_assertion("non-positive loop bound");
    _jump1292:;
    // Computing bound for m
    int64_t _274 = -e.d1;
    _273.d1 = _274;
    if (_274 > 0) 
    goto _jump1293;
    fail_assertion("non-positive loop bound");
    _jump1293:;
    // Computing bound for n
    _273.d2 = e.d1;
    if (e.d1 > 0) 
    goto _jump1294;
    fail_assertion("non-positive loop bound");
    _jump1294:;
    // Computing total size of heap memory to allocate
    int64_t _275 = 1;
    _275 *= e.d1;
    _275 *= _274;
    _275 *= e.d1;
    _275 *= sizeof(_a2__a3_rgba);
    _273.data = jpl_alloc(_275);
    int64_t _276 = 0; // n
    int64_t _277 = 0; // m
    int64_t _278 = 0; // l
    _jump1295:; // Begin body of loop
    double _279 = 1.0;
    double _280 = -_279;
    bool _281 = _280 > c;
    _a2__a3_rgba _282;
    if (!_281)
    goto _jump1296;
    _a2__a3_rgba _283;
    // Computing bound for o
    _283.d0 = e.d1;
    if (e.d1 > 0) 
    goto _jump1297;
    fail_assertion("non-positive loop bound");
    _jump1297:;
    // Computing bound for p
    _283.d1 = _57.d0;
    if (_57.d0 > 0) 
    goto _jump1298;
    fail_assertion("non-positive loop bound");
    _jump1298:;
    // Computing total size of heap memory to allocate
    int64_t _284 = 1;
    _284 *= e.d1;
    _284 *= _57.d0;
    _284 *= sizeof(_a3_rgba);
    _283.data = jpl_alloc(_284);
    int64_t _285 = 0; // p
    int64_t _286 = 0; // o
    _jump1299:; // Begin body of loop
    int64_t _287 = 0;
    _287 *= _283.d0;
    _287 += _286;
    _287 *= _283.d1;
    _287 += _285;
    _283.data[_287] = e;
    _285++;
    if (_285 < _57.d0)
    goto _jump1299;
    _285 = 0;
    _286++;
    if (_286 < e.d1)
    goto _jump1299;
    // End body of loop
    _282 = _283;
    goto _jump1300;
    _jump1296:;
    _a2__a3_rgba _288;
    // Computing bound for o
    _288.d0 = _276;
    if (_276 > 0) 
    goto _jump1301;
    fail_assertion("non-positive loop bound");
    _jump1301:;
    // Computing bound for p
    int64_t _289 = _276 * _278;
    _288.d1 = _289;
    if (_289 > 0) 
    goto _jump1302;
    fail_assertion("non-positive loop bound");
    _jump1302:;
    // Computing total size of heap memory to allocate
    int64_t _290 = 1;
    _290 *= _276;
    _290 *= _289;
    _290 *= sizeof(_a3_rgba);
    _288.data = jpl_alloc(_290);
    int64_t _291 = 0; // p
    int64_t _292 = 0; // o
    _jump1303:; // Begin body of loop
    if (e.d2 >= 0)
    goto _jump1304;
    fail_assertion("negative array index");
    _jump1304:;
    if (e.d2 < _57.d0)
    goto _jump1305;
    fail_assertion("index too large");
    _jump1305:;
    int64_t _293 = 0;
    _293 *= _57.d0;
    _293 += e.d2;
    _a3_rgba _294 = _57.data[_293];
    int64_t _295 = 0;
    _295 *= _288.d0;
    _295 += _292;
    _295 *= _288.d1;
    _295 += _291;
    _288.data[_295] = _294;
    _291++;
    if (_291 < _289)
    goto _jump1303;
    _291 = 0;
    _292++;
    if (_292 < _276)
    goto _jump1303;
    // End body of loop
    _282 = _288;
    _jump1300:;
    int64_t _296 = 0;
    _296 *= _273.d0;
    _296 += _278;
    _296 *= _273.d1;
    _296 += _277;
    _296 *= _273.d2;
    _296 += _276;
    _273.data[_296] = _282;
    _276++;
    if (_276 < e.d1)
    goto _jump1295;
    _276 = 0;
    _277++;
    if (_277 < _274)
    goto _jump1295;
    _277 = 0;
    _278++;
    if (_278 < e.d1)
    goto _jump1295;
    // End body of loop
    int64_t _297 = -e.d2;
    int64_t _298 = -_297;
    int64_t _299;
    // Computing bound for l
    if (_57.d0 > 0) 
    goto _jump1306;
    fail_assertion("non-positive loop bound");
    _jump1306:;
    _299 = 0;
    int64_t _300 = 0; // l
    _jump1307:; // Begin body of loop
    int64_t _301 = e.d2 % _300;
    int64_t _302 = _301 / e.d2;
    int64_t _303 = _302 / e.d2;
    _299 += _303;
    _300++;
    if (_300 < _57.d0)
    goto _jump1307;
    // End body of loop
    if (e.d2 >= 0)
    goto _jump1308;
    fail_assertion("negative array index");
    _jump1308:;
    if (e.d2 < _273.d0)
    goto _jump1309;
    fail_assertion("index too large");
    _jump1309:;
    if (_298 >= 0)
    goto _jump1310;
    fail_assertion("negative array index");
    _jump1310:;
    if (_298 < _273.d1)
    goto _jump1311;
    fail_assertion("index too large");
    _jump1311:;
    if (_299 >= 0)
    goto _jump1312;
    fail_assertion("negative array index");
    _jump1312:;
    if (_299 < _273.d2)
    goto _jump1313;
    fail_assertion("index too large");
    _jump1313:;
    int64_t _304 = 0;
    _304 *= _273.d0;
    _304 += e.d2;
    _304 *= _273.d1;
    _304 += _298;
    _304 *= _273.d2;
    _304 += _299;
    _a2__a3_rgba _305 = _273.data[_304];
    int64_t _306 = _57.d0 % e.d0;
    if (e.d0 >= 0)
    goto _jump1314;
    fail_assertion("negative array index");
    _jump1314:;
    if (e.d0 < _305.d0)
    goto _jump1315;
    fail_assertion("index too large");
    _jump1315:;
    if (_306 >= 0)
    goto _jump1316;
    fail_assertion("negative array index");
    _jump1316:;
    if (_306 < _305.d1)
    goto _jump1317;
    fail_assertion("index too large");
    _jump1317:;
    int64_t _307 = 0;
    _307 *= _305.d0;
    _307 += e.d0;
    _307 *= _305.d1;
    _307 += _306;
    _a3_rgba _308 = _305.data[_307];
    _272 = _308;
    goto _jump1318;
    _jump1291:;
    int64_t _309 = 928;
    int64_t _310;
    // Computing bound for l
    if (e.d0 > 0) 
    goto _jump1319;
    fail_assertion("non-positive loop bound");
    _jump1319:;
    _310 = 0;
    int64_t _311 = 0; // l
    _jump1320:; // Begin body of loop
    int64_t _312 = -e.d0;
    _310 += _312;
    _311++;
    if (_311 < e.d0)
    goto _jump1320;
    // End body of loop
    bool _313 = _309 > _310;
    bool _314;
    if (!_313)
    goto _jump1321;
    bool _316;
    if (!i)
    goto _jump1322;
    _316 = i;
    goto _jump1323;
    _jump1322:;
    _316 = i;
    _jump1323:;
    bool _317;
    if (!_316)
    goto _jump1324;
    _a3_bool _318;
    // Computing bound for l
    _318.d0 = e.d2;
    if (e.d2 > 0) 
    goto _jump1325;
    fail_assertion("non-positive loop bound");
    _jump1325:;
    // Computing bound for m
    _318.d1 = e.d1;
    if (e.d1 > 0) 
    goto _jump1326;
    fail_assertion("non-positive loop bound");
    _jump1326:;
    // Computing bound for n
    _318.d2 = e.d1;
    if (e.d1 > 0) 
    goto _jump1327;
    fail_assertion("non-positive loop bound");
    _jump1327:;
    // Computing total size of heap memory to allocate
    int64_t _319 = 1;
    _319 *= e.d2;
    _319 *= e.d1;
    _319 *= e.d1;
    _319 *= sizeof(bool);
    _318.data = jpl_alloc(_319);
    int64_t _320 = 0; // n
    int64_t _321 = 0; // m
    int64_t _322 = 0; // l
    _jump1328:; // Begin body of loop
    bool _323 = false;
    int64_t _324 = 0;
    _324 *= _318.d0;
    _324 += _322;
    _324 *= _318.d1;
    _324 += _321;
    _324 *= _318.d2;
    _324 += _320;
    _318.data[_324] = _323;
    _320++;
    if (_320 < e.d1)
    goto _jump1328;
    _320 = 0;
    _321++;
    if (_321 < e.d1)
    goto _jump1328;
    _321 = 0;
    _322++;
    if (_322 < e.d2)
    goto _jump1328;
    // End body of loop
    int64_t _325 = _57.d0 / e.d2;
    if (_325 >= 0)
    goto _jump1329;
    fail_assertion("negative array index");
    _jump1329:;
    if (_325 < _318.d0)
    goto _jump1330;
    fail_assertion("index too large");
    _jump1330:;
    if (e.d2 >= 0)
    goto _jump1331;
    fail_assertion("negative array index");
    _jump1331:;
    if (e.d2 < _318.d1)
    goto _jump1332;
    fail_assertion("index too large");
    _jump1332:;
    if (_57.d0 >= 0)
    goto _jump1333;
    fail_assertion("negative array index");
    _jump1333:;
    if (_57.d0 < _318.d2)
    goto _jump1334;
    fail_assertion("index too large");
    _jump1334:;
    int64_t _326 = 0;
    _326 *= _318.d0;
    _326 += _325;
    _326 *= _318.d1;
    _326 += e.d2;
    _326 *= _318.d2;
    _326 += _57.d0;
    bool _327 = _318.data[_326];
    _317 = _327;
    goto _jump1335;
    _jump1324:;
    _a3_int64_t _328;
    // Computing bound for l
    int64_t _329 = 328;
    _328.d0 = _329;
    if (_329 > 0) 
    goto _jump1336;
    fail_assertion("non-positive loop bound");
    _jump1336:;
    // Computing bound for m
    _328.d1 = e.d0;
    if (e.d0 > 0) 
    goto _jump1337;
    fail_assertion("non-positive loop bound");
    _jump1337:;
    // Computing bound for n
    _328.d2 = e.d2;
    if (e.d2 > 0) 
    goto _jump1338;
    fail_assertion("non-positive loop bound");
    _jump1338:;
    // Computing total size of heap memory to allocate
    int64_t _330 = 1;
    _330 *= _329;
    _330 *= e.d0;
    _330 *= e.d2;
    _330 *= sizeof(int64_t);
    _328.data = jpl_alloc(_330);
    int64_t _331 = 0; // n
    int64_t _332 = 0; // m
    int64_t _333 = 0; // l
    _jump1339:; // Begin body of loop
    int64_t _334 = 0;
    _334 *= _328.d0;
    _334 += _333;
    _334 *= _328.d1;
    _334 += _332;
    _334 *= _328.d2;
    _334 += _331;
    _328.data[_334] = _331;
    _331++;
    if (_331 < e.d2)
    goto _jump1339;
    _331 = 0;
    _332++;
    if (_332 < e.d0)
    goto _jump1339;
    _332 = 0;
    _333++;
    if (_333 < _329)
    goto _jump1339;
    // End body of loop
    double _335;
    // Computing bound for l
    int64_t _336 = 455;
    if (_336 > 0) 
    goto _jump1340;
    fail_assertion("non-positive loop bound");
    _jump1340:;
    // Computing bound for m
    int64_t _337 = 93;
    if (_337 > 0) 
    goto _jump1341;
    fail_assertion("non-positive loop bound");
    _jump1341:;
    _335 = 0;
    int64_t _338 = 0; // m
    int64_t _339 = 0; // l
    _jump1342:; // Begin body of loop
    _335 += c;
    _338++;
    if (_338 < _337)
    goto _jump1342;
    _338 = 0;
    _339++;
    if (_339 < _336)
    goto _jump1342;
    // End body of loop
    bool _340 = a(_328, _335);
    _317 = _340;
    _jump1335:;
    bool _315 = _317;
    if (0 == _317)
    goto _jump1343;
    bool _341 = _57.d0 == _57.d0;
    _315 = _341;
    _jump1343:;
    _314 = _315;
    goto _jump1344;
    _jump1321:;
    double _342 = 87.0;
    double _343;
    // Computing bound for l
    int64_t _344 = -_57.d0;
    if (_344 > 0) 
    goto _jump1345;
    fail_assertion("non-positive loop bound");
    _jump1345:;
    _343 = 0;
    int64_t _345 = 0; // l
    _jump1346:; // Begin body of loop
    double _346 = -c;
    _343 += _346;
    _345++;
    if (_345 < _344)
    goto _jump1346;
    // End body of loop
    double _347 = -_343;
    bool _348 = _342 == _347;
    _314 = _348;
    _jump1344:;
    _a3_rgba _349;
    if (!_314)
    goto _jump1347;
    _349 = e;
    goto _jump1348;
    _jump1347:;
    bool _350 = true;
    bool _351 = !_350;
    _a3_rgba _352;
    if (!_351)
    goto _jump1349;
    _a3_rgba _353;
    if (!i)
    goto _jump1350;
    _353 = e;
    goto _jump1351;
    _jump1350:;
    bool _354 = true;
    bool _355 = !_354;
    bool _356 = true;
    bool _357 = !_356;
    bool _358 = _355 != _357;
    _a3_rgba _359;
    if (!_358)
    goto _jump1352;
    _359 = e;
    goto _jump1353;
    _jump1352:;
    _359 = e;
    _jump1353:;
    _353 = _359;
    _jump1351:;
    _352 = _353;
    goto _jump1354;
    _jump1349:;
    _352 = e;
    _jump1354:;
    _349 = _352;
    _jump1348:;
    _272 = _349;
    _jump1318:;
    _a2__a2_int64_t _360;
    // Computing bound for p
    int64_t _361;
    // Computing bound for p
    if (e.d2 > 0) 
    goto _jump1355;
    fail_assertion("non-positive loop bound");
    _jump1355:;
    // Computing bound for q
    if (_272.d2 > 0) 
    goto _jump1356;
    fail_assertion("non-positive loop bound");
    _jump1356:;
    // Computing bound for r
    int64_t _362 = 429;
    if (_362 > 0) 
    goto _jump1357;
    fail_assertion("non-positive loop bound");
    _jump1357:;
    _361 = 0;
    int64_t _363 = 0; // r
    int64_t _364 = 0; // q
    int64_t _365 = 0; // p
    _jump1358:; // Begin body of loop
    _361 += _365;
    _363++;
    if (_363 < _362)
    goto _jump1358;
    _363 = 0;
    _364++;
    if (_364 < _272.d2)
    goto _jump1358;
    _364 = 0;
    _365++;
    if (_365 < e.d2)
    goto _jump1358;
    // End body of loop
    int64_t _366 = e.d0 - _361;
    _360.d0 = _366;
    if (_366 > 0) 
    goto _jump1359;
    fail_assertion("non-positive loop bound");
    _jump1359:;
    // Computing bound for q
    _360.d1 = _272.d2;
    if (_272.d2 > 0) 
    goto _jump1360;
    fail_assertion("non-positive loop bound");
    _jump1360:;
    // Computing total size of heap memory to allocate
    int64_t _367 = 1;
    _367 *= _366;
    _367 *= _272.d2;
    _367 *= sizeof(_a2_int64_t);
    _360.data = jpl_alloc(_367);
    int64_t _368 = 0; // q
    int64_t _369 = 0; // p
    _jump1361:; // Begin body of loop
    _a3_int64_t _370;
    // Computing bound for r
    _370.d0 = e.d1;
    if (e.d1 > 0) 
    goto _jump1362;
    fail_assertion("non-positive loop bound");
    _jump1362:;
    // Computing bound for s
    _370.d1 = _57.d0;
    if (_57.d0 > 0) 
    goto _jump1363;
    fail_assertion("non-positive loop bound");
    _jump1363:;
    // Computing bound for t
    _370.d2 = _57.d0;
    if (_57.d0 > 0) 
    goto _jump1364;
    fail_assertion("non-positive loop bound");
    _jump1364:;
    // Computing total size of heap memory to allocate
    int64_t _371 = 1;
    _371 *= e.d1;
    _371 *= _57.d0;
    _371 *= _57.d0;
    _371 *= sizeof(int64_t);
    _370.data = jpl_alloc(_371);
    int64_t _372 = 0; // t
    int64_t _373 = 0; // s
    int64_t _374 = 0; // r
    _jump1365:; // Begin body of loop
    int64_t _375 = 0;
    _375 *= _370.d0;
    _375 += _374;
    _375 *= _370.d1;
    _375 += _373;
    _375 *= _370.d2;
    _375 += _372;
    _370.data[_375] = _374;
    _372++;
    if (_372 < _57.d0)
    goto _jump1365;
    _372 = 0;
    _373++;
    if (_373 < _57.d0)
    goto _jump1365;
    _373 = 0;
    _374++;
    if (_374 < e.d1)
    goto _jump1365;
    // End body of loop
    bool _376 = a(_370, c);
    _a2_int64_t _377;
    if (!_376)
    goto _jump1366;
    _a2_int64_t _378;
    // Computing bound for r
    _378.d0 = _272.d0;
    if (_272.d0 > 0) 
    goto _jump1367;
    fail_assertion("non-positive loop bound");
    _jump1367:;
    // Computing bound for s
    _378.d1 = _57.d0;
    if (_57.d0 > 0) 
    goto _jump1368;
    fail_assertion("non-positive loop bound");
    _jump1368:;
    // Computing total size of heap memory to allocate
    int64_t _379 = 1;
    _379 *= _272.d0;
    _379 *= _57.d0;
    _379 *= sizeof(int64_t);
    _378.data = jpl_alloc(_379);
    int64_t _380 = 0; // s
    int64_t _381 = 0; // r
    _jump1369:; // Begin body of loop
    int64_t _382 = 0;
    _382 *= _378.d0;
    _382 += _381;
    _382 *= _378.d1;
    _382 += _380;
    _378.data[_382] = _272.d2;
    _380++;
    if (_380 < _57.d0)
    goto _jump1369;
    _380 = 0;
    _381++;
    if (_381 < _272.d0)
    goto _jump1369;
    // End body of loop
    _377 = _378;
    goto _jump1370;
    _jump1366:;
    _a2_int64_t _383;
    // Computing bound for r
    int64_t _384 = 925;
    _383.d0 = _384;
    if (_384 > 0) 
    goto _jump1371;
    fail_assertion("non-positive loop bound");
    _jump1371:;
    // Computing bound for s
    _383.d1 = _272.d2;
    if (_272.d2 > 0) 
    goto _jump1372;
    fail_assertion("non-positive loop bound");
    _jump1372:;
    // Computing total size of heap memory to allocate
    int64_t _385 = 1;
    _385 *= _384;
    _385 *= _272.d2;
    _385 *= sizeof(int64_t);
    _383.data = jpl_alloc(_385);
    int64_t _386 = 0; // s
    int64_t _387 = 0; // r
    _jump1373:; // Begin body of loop
    int64_t _388;
    if (!i)
    goto _jump1374;
    _388 = e.d1;
    goto _jump1375;
    _jump1374:;
    _388 = _272.d0;
    _jump1375:;
    int64_t _389 = 0;
    _389 *= _383.d0;
    _389 += _387;
    _389 *= _383.d1;
    _389 += _386;
    _383.data[_389] = _388;
    _386++;
    if (_386 < _272.d2)
    goto _jump1373;
    _386 = 0;
    _387++;
    if (_387 < _384)
    goto _jump1373;
    // End body of loop
    _377 = _383;
    _jump1370:;
    _a2__a2_int64_t _390;
    // Computing bound for r
    int64_t _391 = -_369;
    _390.d0 = _391;
    if (_391 > 0) 
    goto _jump1376;
    fail_assertion("non-positive loop bound");
    _jump1376:;
    // Computing bound for s
    _390.d1 = _272.d2;
    if (_272.d2 > 0) 
    goto _jump1377;
    fail_assertion("non-positive loop bound");
    _jump1377:;
    // Computing total size of heap memory to allocate
    int64_t _392 = 1;
    _392 *= _391;
    _392 *= _272.d2;
    _392 *= sizeof(_a2_int64_t);
    _390.data = jpl_alloc(_392);
    int64_t _393 = 0; // s
    int64_t _394 = 0; // r
    _jump1378:; // Begin body of loop
    _a2_int64_t _395;
    // Computing bound for t
    _395.d0 = _57.d0;
    if (_57.d0 > 0) 
    goto _jump1379;
    fail_assertion("non-positive loop bound");
    _jump1379:;
    // Computing bound for u
    _395.d1 = e.d0;
    if (e.d0 > 0) 
    goto _jump1380;
    fail_assertion("non-positive loop bound");
    _jump1380:;
    // Computing total size of heap memory to allocate
    int64_t _396 = 1;
    _396 *= _57.d0;
    _396 *= e.d0;
    _396 *= sizeof(int64_t);
    _395.data = jpl_alloc(_396);
    int64_t _397 = 0; // u
    int64_t _398 = 0; // t
    _jump1381:; // Begin body of loop
    int64_t _399 = 0;
    _399 *= _395.d0;
    _399 += _398;
    _399 *= _395.d1;
    _399 += _397;
    _395.data[_399] = _394;
    _397++;
    if (_397 < e.d0)
    goto _jump1381;
    _397 = 0;
    _398++;
    if (_398 < _57.d0)
    goto _jump1381;
    // End body of loop
    int64_t _400 = 0;
    _400 *= _390.d0;
    _400 += _394;
    _400 *= _390.d1;
    _400 += _393;
    _390.data[_400] = _395;
    _393++;
    if (_393 < _272.d2)
    goto _jump1378;
    _393 = 0;
    _394++;
    if (_394 < _391)
    goto _jump1378;
    // End body of loop
    int64_t _401 = 588;
    bool _402 = c >= c;
    int64_t _403;
    if (!_402)
    goto _jump1382;
    _403 = _272.d2;
    goto _jump1383;
    _jump1382:;
    int64_t _404;
    // Computing bound for r
    if (_369 > 0) 
    goto _jump1384;
    fail_assertion("non-positive loop bound");
    _jump1384:;
    // Computing bound for s
    if (_368 > 0) 
    goto _jump1385;
    fail_assertion("non-positive loop bound");
    _jump1385:;
    _404 = 0;
    int64_t _405 = 0; // s
    int64_t _406 = 0; // r
    _jump1386:; // Begin body of loop
    _404 += _405;
    _405++;
    if (_405 < _368)
    goto _jump1386;
    _405 = 0;
    _406++;
    if (_406 < _369)
    goto _jump1386;
    // End body of loop
    _403 = _404;
    _jump1383:;
    if (_401 >= 0)
    goto _jump1387;
    fail_assertion("negative array index");
    _jump1387:;
    if (_401 < _390.d0)
    goto _jump1388;
    fail_assertion("index too large");
    _jump1388:;
    if (_403 >= 0)
    goto _jump1389;
    fail_assertion("negative array index");
    _jump1389:;
    if (_403 < _390.d1)
    goto _jump1390;
    fail_assertion("index too large");
    _jump1390:;
    int64_t _407 = 0;
    _407 *= _390.d0;
    _407 += _401;
    _407 *= _390.d1;
    _407 += _403;
    _a2_int64_t _408 = _390.data[_407];
    _a1__a2_int64_t _409;
    _409.d0 = 2;
    _409.data = jpl_alloc(sizeof(_a2_int64_t) * 2);
    _409.data[0] = _377;
    _409.data[1] = _408;
    int64_t _410 = -_272.d0;
    if (_410 >= 0)
    goto _jump1391;
    fail_assertion("negative array index");
    _jump1391:;
    if (_410 < _409.d0)
    goto _jump1392;
    fail_assertion("index too large");
    _jump1392:;
    int64_t _411 = 0;
    _411 *= _409.d0;
    _411 += _410;
    _a2_int64_t _412 = _409.data[_411];
    int64_t _413 = 0;
    _413 *= _360.d0;
    _413 += _369;
    _413 *= _360.d1;
    _413 += _368;
    _360.data[_413] = _412;
    _368++;
    if (_368 < _272.d2)
    goto _jump1361;
    _368 = 0;
    _369++;
    if (_369 < _366)
    goto _jump1361;
    // End body of loop
    if (e.d2 >= 0)
    goto _jump1393;
    fail_assertion("negative array index");
    _jump1393:;
    if (e.d2 < _360.d0)
    goto _jump1394;
    fail_assertion("index too large");
    _jump1394:;
    if (e.d2 >= 0)
    goto _jump1395;
    fail_assertion("negative array index");
    _jump1395:;
    if (e.d2 < _360.d1)
    goto _jump1396;
    fail_assertion("index too large");
    _jump1396:;
    int64_t _414 = 0;
    _414 *= _360.d0;
    _414 += e.d2;
    _414 *= _360.d1;
    _414 += e.d2;
    _a2_int64_t _415 = _360.data[_414];
    int64_t _416;
    // Computing bound for s
    if (_415.d0 > 0) 
    goto _jump1397;
    fail_assertion("non-positive loop bound");
    _jump1397:;
    _416 = 0;
    int64_t _417 = 0; // s
    _jump1398:; // Begin body of loop
    _416 += _57.d0;
    _417++;
    if (_417 < _415.d0)
    goto _jump1398;
    // End body of loop
    int64_t _418;
    // Computing bound for s
    if (e.d1 > 0) 
    goto _jump1399;
    fail_assertion("non-positive loop bound");
    _jump1399:;
    _418 = 0;
    int64_t _419 = 0; // s
    _jump1400:; // Begin body of loop
    _418 += _272.d1;
    _419++;
    if (_419 < e.d1)
    goto _jump1400;
    // End body of loop
    bool _420 = _416 != _418;
    double _421;
    if (!_420)
    goto _jump1401;
    double _422;
    // Computing bound for s
    if (_272.d1 > 0) 
    goto _jump1402;
    fail_assertion("non-positive loop bound");
    _jump1402:;
    _422 = 0;
    int64_t _423 = 0; // s
    _jump1403:; // Begin body of loop
    double _424 = 66.0;
    _422 += _424;
    _423++;
    if (_423 < _272.d1)
    goto _jump1403;
    // End body of loop
    double _425 = c / _422;
    double _426 = -_425;
    double _427 = 16.0;
    double _428 = -_427;
    double _429 = -_428;
    double _430 = fmod(_429, c);
    double _431 = _426 - _430;
    _421 = _431;
    goto _jump1404;
    _jump1401:;
    _421 = c;
    _jump1404:;
    _a3_double _432;
    // Computing bound for s
    int64_t _433 = _57.d0 * e.d2;
    _432.d0 = _433;
    if (_433 > 0) 
    goto _jump1405;
    fail_assertion("non-positive loop bound");
    _jump1405:;
    // Computing bound for t
    int64_t _434 = -e.d1;
    _432.d1 = _434;
    if (_434 > 0) 
    goto _jump1406;
    fail_assertion("non-positive loop bound");
    _jump1406:;
    // Computing bound for u
    int64_t _435;
    // Computing bound for s
    if (_272.d2 > 0) 
    goto _jump1407;
    fail_assertion("non-positive loop bound");
    _jump1407:;
    _435 = 0;
    int64_t _436 = 0; // s
    _jump1408:; // Begin body of loop
    _435 += _57.d0;
    _436++;
    if (_436 < _272.d2)
    goto _jump1408;
    // End body of loop
    _432.d2 = _435;
    if (_435 > 0) 
    goto _jump1409;
    fail_assertion("non-positive loop bound");
    _jump1409:;
    // Computing total size of heap memory to allocate
    int64_t _437 = 1;
    _437 *= _433;
    _437 *= _434;
    _437 *= _435;
    _437 *= sizeof(double);
    _432.data = jpl_alloc(_437);
    int64_t _438 = 0; // u
    int64_t _439 = 0; // t
    int64_t _440 = 0; // s
    _jump1410:; // Begin body of loop
    double _441 = 27.0;
    double _442 = -_441;
    int64_t _443 = 0;
    _443 *= _432.d0;
    _443 += _440;
    _443 *= _432.d1;
    _443 += _439;
    _443 *= _432.d2;
    _443 += _438;
    _432.data[_443] = _442;
    _438++;
    if (_438 < _435)
    goto _jump1410;
    _438 = 0;
    _439++;
    if (_439 < _434)
    goto _jump1410;
    _439 = 0;
    _440++;
    if (_440 < _433)
    goto _jump1410;
    // End body of loop
    int64_t _444 = 689;
    int64_t _445;
    // Computing bound for s
    if (_57.d0 > 0) 
    goto _jump1411;
    fail_assertion("non-positive loop bound");
    _jump1411:;
    // Computing bound for t
    if (_272.d0 > 0) 
    goto _jump1412;
    fail_assertion("non-positive loop bound");
    _jump1412:;
    _445 = 0;
    int64_t _446 = 0; // t
    int64_t _447 = 0; // s
    _jump1413:; // Begin body of loop
    _445 += _272.d2;
    _446++;
    if (_446 < _272.d0)
    goto _jump1413;
    _446 = 0;
    _447++;
    if (_447 < _57.d0)
    goto _jump1413;
    // End body of loop
    int64_t _448 = 781;
    if (_444 >= 0)
    goto _jump1414;
    fail_assertion("negative array index");
    _jump1414:;
    if (_444 < _432.d0)
    goto _jump1415;
    fail_assertion("index too large");
    _jump1415:;
    if (_445 >= 0)
    goto _jump1416;
    fail_assertion("negative array index");
    _jump1416:;
    if (_445 < _432.d1)
    goto _jump1417;
    fail_assertion("index too large");
    _jump1417:;
    if (_448 >= 0)
    goto _jump1418;
    fail_assertion("negative array index");
    _jump1418:;
    if (_448 < _432.d2)
    goto _jump1419;
    fail_assertion("index too large");
    _jump1419:;
    int64_t _449 = 0;
    _449 *= _432.d0;
    _449 += _444;
    _449 *= _432.d1;
    _449 += _445;
    _449 *= _432.d2;
    _449 += _448;
    double _450 = _432.data[_449];
    int64_t _451 = 932;
    bool _452 = _272.d0 < _451;
    bool _453 = !_452;
    double _454;
    if (!_453)
    goto _jump1420;
    if (_415.d1 >= 0)
    goto _jump1421;
    fail_assertion("negative array index");
    _jump1421:;
    if (_415.d1 < _272.d0)
    goto _jump1422;
    fail_assertion("index too large");
    _jump1422:;
    if (_415.d0 >= 0)
    goto _jump1423;
    fail_assertion("negative array index");
    _jump1423:;
    if (_415.d0 < _272.d1)
    goto _jump1424;
    fail_assertion("index too large");
    _jump1424:;
    if (_272.d1 >= 0)
    goto _jump1425;
    fail_assertion("negative array index");
    _jump1425:;
    if (_272.d1 < _272.d2)
    goto _jump1426;
    fail_assertion("index too large");
    _jump1426:;
    int64_t _455 = 0;
    _455 *= _272.d0;
    _455 += _415.d1;
    _455 *= _272.d1;
    _455 += _415.d0;
    _455 *= _272.d2;
    _455 += _272.d1;
    rgba _456 = _272.data[_455];
    double _457 = _456.a;
    _454 = _457;
    goto _jump1427;
    _jump1420:;
    double _458;
    // Computing bound for s
    if (e.d1 > 0) 
    goto _jump1428;
    fail_assertion("non-positive loop bound");
    _jump1428:;
    _458 = 0;
    int64_t _459 = 0; // s
    _jump1429:; // Begin body of loop
    double _460 = 77.0;
    double _461 = -_460;
    _458 += _461;
    _459++;
    if (_459 < e.d1)
    goto _jump1429;
    // End body of loop
    rgba _462 = d(_272, i);
    double _463 = _462.r;
    double _464 = _458 * _463;
    _454 = _464;
    _jump1427:;
    double _465 = _450 + _454;
    bool _466 = _421 <= _465;
    rgba _467;
    if (!_466)
    goto _jump1430;
    _a1_double _468;
    // Computing bound for s
    _468.d0 = _272.d2;
    if (_272.d2 > 0) 
    goto _jump1431;
    fail_assertion("non-positive loop bound");
    _jump1431:;
    // Computing total size of heap memory to allocate
    int64_t _469 = 1;
    _469 *= _272.d2;
    _469 *= sizeof(double);
    _468.data = jpl_alloc(_469);
    int64_t _470 = 0; // s
    _jump1432:; // Begin body of loop
    double _471 = 15.0;
    int64_t _472 = 0;
    _472 *= _468.d0;
    _472 += _470;
    _468.data[_472] = _471;
    _470++;
    if (_470 < _272.d2)
    goto _jump1432;
    // End body of loop
    if (_272.d0 >= 0)
    goto _jump1433;
    fail_assertion("negative array index");
    _jump1433:;
    if (_272.d0 < _468.d0)
    goto _jump1434;
    fail_assertion("index too large");
    _jump1434:;
    int64_t _473 = 0;
    _473 *= _468.d0;
    _473 += _272.d0;
    double _474 = _468.data[_473];
    double _475 = 25.0;
    double _476 = _474 - _475;
    double _477;
    // Computing bound for s
    int64_t _478 = _272.d1 % _415.d1;
    int64_t _479 = _478 - e.d1;
    if (_479 > 0) 
    goto _jump1435;
    fail_assertion("non-positive loop bound");
    _jump1435:;
    // Computing bound for t
    if (_272.d1 > 0) 
    goto _jump1436;
    fail_assertion("non-positive loop bound");
    _jump1436:;
    // Computing bound for u
    _a2_int64_t _480;
    // Computing bound for s
    _480.d0 = _272.d0;
    if (_272.d0 > 0) 
    goto _jump1437;
    fail_assertion("non-positive loop bound");
    _jump1437:;
    // Computing bound for t
    _480.d1 = e.d2;
    if (e.d2 > 0) 
    goto _jump1438;
    fail_assertion("non-positive loop bound");
    _jump1438:;
    // Computing total size of heap memory to allocate
    int64_t _481 = 1;
    _481 *= _272.d0;
    _481 *= e.d2;
    _481 *= sizeof(int64_t);
    _480.data = jpl_alloc(_481);
    int64_t _482 = 0; // t
    int64_t _483 = 0; // s
    _jump1439:; // Begin body of loop
    int64_t _484 = 0;
    _484 *= _480.d0;
    _484 += _483;
    _484 *= _480.d1;
    _484 += _482;
    _480.data[_484] = _482;
    _482++;
    if (_482 < e.d2)
    goto _jump1439;
    _482 = 0;
    _483++;
    if (_483 < _272.d0)
    goto _jump1439;
    // End body of loop
    int64_t _485 = -_415.d0;
    if (_485 >= 0)
    goto _jump1440;
    fail_assertion("negative array index");
    _jump1440:;
    if (_485 < _480.d0)
    goto _jump1441;
    fail_assertion("index too large");
    _jump1441:;
    if (_415.d0 >= 0)
    goto _jump1442;
    fail_assertion("negative array index");
    _jump1442:;
    if (_415.d0 < _480.d1)
    goto _jump1443;
    fail_assertion("index too large");
    _jump1443:;
    int64_t _486 = 0;
    _486 *= _480.d0;
    _486 += _485;
    _486 *= _480.d1;
    _486 += _415.d0;
    int64_t _487 = _480.data[_486];
    if (_487 > 0) 
    goto _jump1444;
    fail_assertion("non-positive loop bound");
    _jump1444:;
    _477 = 0;
    int64_t _488 = 0; // u
    int64_t _489 = 0; // t
    int64_t _490 = 0; // s
    _jump1445:; // Begin body of loop
    double _491;
    // Computing bound for v
    if (_488 > 0) 
    goto _jump1446;
    fail_assertion("non-positive loop bound");
    _jump1446:;
    _491 = 0;
    int64_t _492 = 0; // v
    _jump1447:; // Begin body of loop
    double _493 = 60.0;
    _491 += _493;
    _492++;
    if (_492 < _488)
    goto _jump1447;
    // End body of loop
    double _494 = -_491;
    _477 += _494;
    _488++;
    if (_488 < _487)
    goto _jump1445;
    _488 = 0;
    _489++;
    if (_489 < _272.d1)
    goto _jump1445;
    _489 = 0;
    _490++;
    if (_490 < _479)
    goto _jump1445;
    // End body of loop
    bool _495 = _476 <= _477;
    _a3_bool _496;
    if (!_495)
    goto _jump1448;
    bool _497 = true;
    _a3_bool _498;
    if (!_497)
    goto _jump1449;
    _a3_bool _499;
    // Computing bound for s
    double _500 = 7.0;
    bool _501 = c >= _500;
    int64_t _502;
    if (!_501)
    goto _jump1450;
    int64_t _503;
    if (!i)
    goto _jump1451;
    _503 = e.d0;
    goto _jump1452;
    _jump1451:;
    _503 = e.d0;
    _jump1452:;
    _502 = _503;
    goto _jump1453;
    _jump1450:;
    int64_t _504;
    // Computing bound for s
    if (e.d2 > 0) 
    goto _jump1454;
    fail_assertion("non-positive loop bound");
    _jump1454:;
    _504 = 0;
    int64_t _505 = 0; // s
    _jump1455:; // Begin body of loop
    _504 += _272.d1;
    _505++;
    if (_505 < e.d2)
    goto _jump1455;
    // End body of loop
    _502 = _504;
    _jump1453:;
    _499.d0 = _502;
    if (_502 > 0) 
    goto _jump1456;
    fail_assertion("non-positive loop bound");
    _jump1456:;
    // Computing bound for t
    int64_t _506 = _57.d0 / e.d0;
    _499.d1 = _506;
    if (_506 > 0) 
    goto _jump1457;
    fail_assertion("non-positive loop bound");
    _jump1457:;
    // Computing bound for u
    _499.d2 = _415.d1;
    if (_415.d1 > 0) 
    goto _jump1458;
    fail_assertion("non-positive loop bound");
    _jump1458:;
    // Computing total size of heap memory to allocate
    int64_t _507 = 1;
    _507 *= _502;
    _507 *= _506;
    _507 *= _415.d1;
    _507 *= sizeof(bool);
    _499.data = jpl_alloc(_507);
    int64_t _508 = 0; // u
    int64_t _509 = 0; // t
    int64_t _510 = 0; // s
    _jump1459:; // Begin body of loop
    int64_t _511;
    if (!i)
    goto _jump1460;
    _511 = e.d1;
    goto _jump1461;
    _jump1460:;
    _511 = e.d0;
    _jump1461:;
    bool _512 = _511 != _272.d0;
    int64_t _513 = 0;
    _513 *= _499.d0;
    _513 += _510;
    _513 *= _499.d1;
    _513 += _509;
    _513 *= _499.d2;
    _513 += _508;
    _499.data[_513] = _512;
    _508++;
    if (_508 < _415.d1)
    goto _jump1459;
    _508 = 0;
    _509++;
    if (_509 < _506)
    goto _jump1459;
    _509 = 0;
    _510++;
    if (_510 < _502)
    goto _jump1459;
    // End body of loop
    _498 = _499;
    goto _jump1462;
    _jump1449:;
    _a3_bool _514;
    // Computing bound for s
    _a1_int64_t _515;
    // Computing bound for s
    int64_t _516 = 28;
    _515.d0 = _516;
    if (_516 > 0) 
    goto _jump1463;
    fail_assertion("non-positive loop bound");
    _jump1463:;
    // Computing total size of heap memory to allocate
    int64_t _517 = 1;
    _517 *= _516;
    _517 *= sizeof(int64_t);
    _515.data = jpl_alloc(_517);
    int64_t _518 = 0; // s
    _jump1464:; // Begin body of loop
    int64_t _519 = 0;
    _519 *= _515.d0;
    _519 += _518;
    _515.data[_519] = _272.d0;
    _518++;
    if (_518 < _516)
    goto _jump1464;
    // End body of loop
    if (_272.d0 >= 0)
    goto _jump1465;
    fail_assertion("negative array index");
    _jump1465:;
    if (_272.d0 < _515.d0)
    goto _jump1466;
    fail_assertion("index too large");
    _jump1466:;
    int64_t _520 = 0;
    _520 *= _515.d0;
    _520 += _272.d0;
    int64_t _521 = _515.data[_520];
    _514.d0 = _521;
    if (_521 > 0) 
    goto _jump1467;
    fail_assertion("non-positive loop bound");
    _jump1467:;
    // Computing bound for t
    _514.d1 = _415.d1;
    if (_415.d1 > 0) 
    goto _jump1468;
    fail_assertion("non-positive loop bound");
    _jump1468:;
    // Computing bound for u
    _a2_int64_t _522;
    // Computing bound for s
    _522.d0 = e.d0;
    if (e.d0 > 0) 
    goto _jump1469;
    fail_assertion("non-positive loop bound");
    _jump1469:;
    // Computing bound for t
    _522.d1 = _272.d0;
    if (_272.d0 > 0) 
    goto _jump1470;
    fail_assertion("non-positive loop bound");
    _jump1470:;
    // Computing total size of heap memory to allocate
    int64_t _523 = 1;
    _523 *= e.d0;
    _523 *= _272.d0;
    _523 *= sizeof(int64_t);
    _522.data = jpl_alloc(_523);
    int64_t _524 = 0; // t
    int64_t _525 = 0; // s
    _jump1471:; // Begin body of loop
    int64_t _526 = 0;
    _526 *= _522.d0;
    _526 += _525;
    _526 *= _522.d1;
    _526 += _524;
    _522.data[_526] = _272.d0;
    _524++;
    if (_524 < _272.d0)
    goto _jump1471;
    _524 = 0;
    _525++;
    if (_525 < e.d0)
    goto _jump1471;
    // End body of loop
    int64_t _527 = _272.d0 / _272.d1;
    int64_t _528;
    // Computing bound for s
    if (_272.d2 > 0) 
    goto _jump1472;
    fail_assertion("non-positive loop bound");
    _jump1472:;
    _528 = 0;
    int64_t _529 = 0; // s
    _jump1473:; // Begin body of loop
    _528 += e.d1;
    _529++;
    if (_529 < _272.d2)
    goto _jump1473;
    // End body of loop
    if (_527 >= 0)
    goto _jump1474;
    fail_assertion("negative array index");
    _jump1474:;
    if (_527 < _522.d0)
    goto _jump1475;
    fail_assertion("index too large");
    _jump1475:;
    if (_528 >= 0)
    goto _jump1476;
    fail_assertion("negative array index");
    _jump1476:;
    if (_528 < _522.d1)
    goto _jump1477;
    fail_assertion("index too large");
    _jump1477:;
    int64_t _530 = 0;
    _530 *= _522.d0;
    _530 += _527;
    _530 *= _522.d1;
    _530 += _528;
    int64_t _531 = _522.data[_530];
    _514.d2 = _531;
    if (_531 > 0) 
    goto _jump1478;
    fail_assertion("non-positive loop bound");
    _jump1478:;
    // Computing total size of heap memory to allocate
    int64_t _532 = 1;
    _532 *= _521;
    _532 *= _415.d1;
    _532 *= _531;
    _532 *= sizeof(bool);
    _514.data = jpl_alloc(_532);
    int64_t _533 = 0; // u
    int64_t _534 = 0; // t
    int64_t _535 = 0; // s
    _jump1479:; // Begin body of loop
    bool _536 = _415.d1 != _415.d0;
    int64_t _537 = 0;
    _537 *= _514.d0;
    _537 += _535;
    _537 *= _514.d1;
    _537 += _534;
    _537 *= _514.d2;
    _537 += _533;
    _514.data[_537] = _536;
    _533++;
    if (_533 < _531)
    goto _jump1479;
    _533 = 0;
    _534++;
    if (_534 < _415.d1)
    goto _jump1479;
    _534 = 0;
    _535++;
    if (_535 < _521)
    goto _jump1479;
    // End body of loop
    _498 = _514;
    _jump1462:;
    _496 = _498;
    goto _jump1480;
    _jump1448:;
    _a3_bool _538;
    // Computing bound for s
    bool _540 = false;
    bool _539 = _540;
    if (0 == _540)
    goto _jump1481;
    bool _541 = false;
    _539 = _541;
    _jump1481:;
    _a2_int64_t _542;
    if (!_539)
    goto _jump1482;
    _542 = _415;
    goto _jump1483;
    _jump1482:;
    _542 = _415;
    _jump1483:;
    int64_t _543 = _272.d2 / e.d1;
    if (_543 >= 0)
    goto _jump1484;
    fail_assertion("negative array index");
    _jump1484:;
    if (_543 < _542.d0)
    goto _jump1485;
    fail_assertion("index too large");
    _jump1485:;
    if (_272.d1 >= 0)
    goto _jump1486;
    fail_assertion("negative array index");
    _jump1486:;
    if (_272.d1 < _542.d1)
    goto _jump1487;
    fail_assertion("index too large");
    _jump1487:;
    int64_t _544 = 0;
    _544 *= _542.d0;
    _544 += _543;
    _544 *= _542.d1;
    _544 += _272.d1;
    int64_t _545 = _542.data[_544];
    _538.d0 = _545;
    if (_545 > 0) 
    goto _jump1488;
    fail_assertion("non-positive loop bound");
    _jump1488:;
    // Computing bound for t
    _538.d1 = e.d2;
    if (e.d2 > 0) 
    goto _jump1489;
    fail_assertion("non-positive loop bound");
    _jump1489:;
    // Computing bound for u
    _538.d2 = _57.d0;
    if (_57.d0 > 0) 
    goto _jump1490;
    fail_assertion("non-positive loop bound");
    _jump1490:;
    // Computing total size of heap memory to allocate
    int64_t _546 = 1;
    _546 *= _545;
    _546 *= e.d2;
    _546 *= _57.d0;
    _546 *= sizeof(bool);
    _538.data = jpl_alloc(_546);
    int64_t _547 = 0; // u
    int64_t _548 = 0; // t
    int64_t _549 = 0; // s
    _jump1491:; // Begin body of loop
    int64_t _550 = 0;
    _550 *= _538.d0;
    _550 += _549;
    _550 *= _538.d1;
    _550 += _548;
    _550 *= _538.d2;
    _550 += _547;
    _538.data[_550] = i;
    _547++;
    if (_547 < _57.d0)
    goto _jump1491;
    _547 = 0;
    _548++;
    if (_548 < e.d2)
    goto _jump1491;
    _548 = 0;
    _549++;
    if (_549 < _545)
    goto _jump1491;
    // End body of loop
    _496 = _538;
    _jump1480:;
    _a3__a3_int64_t _551;
    // Computing bound for s
    _551.d0 = _272.d1;
    if (_272.d1 > 0) 
    goto _jump1492;
    fail_assertion("non-positive loop bound");
    _jump1492:;
    // Computing bound for t
    _551.d1 = _57.d0;
    if (_57.d0 > 0) 
    goto _jump1493;
    fail_assertion("non-positive loop bound");
    _jump1493:;
    // Computing bound for u
    _551.d2 = e.d0;
    if (e.d0 > 0) 
    goto _jump1494;
    fail_assertion("non-positive loop bound");
    _jump1494:;
    // Computing total size of heap memory to allocate
    int64_t _552 = 1;
    _552 *= _272.d1;
    _552 *= _57.d0;
    _552 *= e.d0;
    _552 *= sizeof(_a3_int64_t);
    _551.data = jpl_alloc(_552);
    int64_t _553 = 0; // u
    int64_t _554 = 0; // t
    int64_t _555 = 0; // s
    _jump1495:; // Begin body of loop
    _a3_int64_t _556;
    // Computing bound for v
    _556.d0 = _553;
    if (_553 > 0) 
    goto _jump1496;
    fail_assertion("non-positive loop bound");
    _jump1496:;
    // Computing bound for w
    _556.d1 = _555;
    if (_555 > 0) 
    goto _jump1497;
    fail_assertion("non-positive loop bound");
    _jump1497:;
    // Computing bound for x
    _556.d2 = _415.d0;
    if (_415.d0 > 0) 
    goto _jump1498;
    fail_assertion("non-positive loop bound");
    _jump1498:;
    // Computing total size of heap memory to allocate
    int64_t _557 = 1;
    _557 *= _553;
    _557 *= _555;
    _557 *= _415.d0;
    _557 *= sizeof(int64_t);
    _556.data = jpl_alloc(_557);
    int64_t _558 = 0; // x
    int64_t _559 = 0; // w
    int64_t _560 = 0; // v
    _jump1499:; // Begin body of loop
    int64_t _561 = 406;
    int64_t _562 = 0;
    _562 *= _556.d0;
    _562 += _560;
    _562 *= _556.d1;
    _562 += _559;
    _562 *= _556.d2;
    _562 += _558;
    _556.data[_562] = _561;
    _558++;
    if (_558 < _415.d0)
    goto _jump1499;
    _558 = 0;
    _559++;
    if (_559 < _555)
    goto _jump1499;
    _559 = 0;
    _560++;
    if (_560 < _553)
    goto _jump1499;
    // End body of loop
    int64_t _563 = 0;
    _563 *= _551.d0;
    _563 += _555;
    _563 *= _551.d1;
    _563 += _554;
    _563 *= _551.d2;
    _563 += _553;
    _551.data[_563] = _556;
    _553++;
    if (_553 < e.d0)
    goto _jump1495;
    _553 = 0;
    _554++;
    if (_554 < _57.d0)
    goto _jump1495;
    _554 = 0;
    _555++;
    if (_555 < _272.d1)
    goto _jump1495;
    // End body of loop
    int64_t _564 = -_415.d1;
    int64_t _565 = e.d2 - _564;
    int64_t _566;
    // Computing bound for s
    int64_t _567;
    // Computing bound for s
    int64_t _568 = 890;
    if (_568 > 0) 
    goto _jump1500;
    fail_assertion("non-positive loop bound");
    _jump1500:;
    // Computing bound for t
    int64_t _569 = 947;
    if (_569 > 0) 
    goto _jump1501;
    fail_assertion("non-positive loop bound");
    _jump1501:;
    // Computing bound for u
    int64_t _570 = 649;
    if (_570 > 0) 
    goto _jump1502;
    fail_assertion("non-positive loop bound");
    _jump1502:;
    _567 = 0;
    int64_t _571 = 0; // u
    int64_t _572 = 0; // t
    int64_t _573 = 0; // s
    _jump1503:; // Begin body of loop
    _567 += _571;
    _571++;
    if (_571 < _570)
    goto _jump1503;
    _571 = 0;
    _572++;
    if (_572 < _569)
    goto _jump1503;
    _572 = 0;
    _573++;
    if (_573 < _568)
    goto _jump1503;
    // End body of loop
    if (_567 > 0) 
    goto _jump1504;
    fail_assertion("non-positive loop bound");
    _jump1504:;
    _566 = 0;
    int64_t _574 = 0; // s
    _jump1505:; // Begin body of loop
    _566 += e.d2;
    _574++;
    if (_574 < _567)
    goto _jump1505;
    // End body of loop
    int64_t _575 = _566 - _272.d0;
    if (_565 >= 0)
    goto _jump1506;
    fail_assertion("negative array index");
    _jump1506:;
    if (_565 < _551.d0)
    goto _jump1507;
    fail_assertion("index too large");
    _jump1507:;
    if (_575 >= 0)
    goto _jump1508;
    fail_assertion("negative array index");
    _jump1508:;
    if (_575 < _551.d1)
    goto _jump1509;
    fail_assertion("index too large");
    _jump1509:;
    if (_415.d0 >= 0)
    goto _jump1510;
    fail_assertion("negative array index");
    _jump1510:;
    if (_415.d0 < _551.d2)
    goto _jump1511;
    fail_assertion("index too large");
    _jump1511:;
    int64_t _576 = 0;
    _576 *= _551.d0;
    _576 += _565;
    _576 *= _551.d1;
    _576 += _575;
    _576 *= _551.d2;
    _576 += _415.d0;
    _a3_int64_t _577 = _551.data[_576];
    bool _579 = true;
    bool _578 = _579;
    if (0 == _579)
    goto _jump1512;
    _578 = i;
    _jump1512:;
    int64_t _580;
    if (!_578)
    goto _jump1513;
    _580 = _415.d1;
    goto _jump1514;
    _jump1513:;
    _580 = e.d2;
    _jump1514:;
    int64_t _581 = 67;
    bool _582 = _580 != _581;
    int64_t _583;
    if (!_582)
    goto _jump1515;
    _a2_int64_t _584;
    // Computing bound for s
    _584.d0 = e.d2;
    if (e.d2 > 0) 
    goto _jump1516;
    fail_assertion("non-positive loop bound");
    _jump1516:;
    // Computing bound for t
    int64_t _585 = 841;
    _584.d1 = _585;
    if (_585 > 0) 
    goto _jump1517;
    fail_assertion("non-positive loop bound");
    _jump1517:;
    // Computing total size of heap memory to allocate
    int64_t _586 = 1;
    _586 *= e.d2;
    _586 *= _585;
    _586 *= sizeof(int64_t);
    _584.data = jpl_alloc(_586);
    int64_t _587 = 0; // t
    int64_t _588 = 0; // s
    _jump1518:; // Begin body of loop
    int64_t _589 = 0;
    _589 *= _584.d0;
    _589 += _588;
    _589 *= _584.d1;
    _589 += _587;
    _584.data[_589] = e.d0;
    _587++;
    if (_587 < _585)
    goto _jump1518;
    _587 = 0;
    _588++;
    if (_588 < e.d2)
    goto _jump1518;
    // End body of loop
    int64_t _590 = 763;
    if (_590 >= 0)
    goto _jump1519;
    fail_assertion("negative array index");
    _jump1519:;
    if (_590 < _584.d0)
    goto _jump1520;
    fail_assertion("index too large");
    _jump1520:;
    if (e.d2 >= 0)
    goto _jump1521;
    fail_assertion("negative array index");
    _jump1521:;
    if (e.d2 < _584.d1)
    goto _jump1522;
    fail_assertion("index too large");
    _jump1522:;
    int64_t _591 = 0;
    _591 *= _584.d0;
    _591 += _590;
    _591 *= _584.d1;
    _591 += e.d2;
    int64_t _592 = _584.data[_591];
    _583 = _592;
    goto _jump1523;
    _jump1515:;
    _583 = _415.d0;
    _jump1523:;
    bool _593 = i;
    if (0 != i)
    goto _jump1524;
    bool _594 = !i;
    _593 = _594;
    _jump1524:;
    int64_t _595;
    if (!_593)
    goto _jump1525;
    int64_t _596 = 335;
    _595 = _596;
    goto _jump1526;
    _jump1525:;
    bool _597 = e.d1 == _415.d1;
    int64_t _598;
    if (!_597)
    goto _jump1527;
    bool _599 = true;
    int64_t _600;
    if (!_599)
    goto _jump1528;
    _600 = _415.d1;
    goto _jump1529;
    _jump1528:;
    _600 = _415.d0;
    _jump1529:;
    _598 = _600;
    goto _jump1530;
    _jump1527:;
    int64_t _601 = 778;
    _598 = _601;
    _jump1530:;
    _595 = _598;
    _jump1526:;
    int64_t _602;
    // Computing bound for s
    int64_t _603 = 947;
    if (_603 > 0) 
    goto _jump1531;
    fail_assertion("non-positive loop bound");
    _jump1531:;
    // Computing bound for t
    if (_272.d1 > 0) 
    goto _jump1532;
    fail_assertion("non-positive loop bound");
    _jump1532:;
    _602 = 0;
    int64_t _604 = 0; // t
    int64_t _605 = 0; // s
    _jump1533:; // Begin body of loop
    int64_t _606 = _272.d1 % _272.d1;
    _602 += _606;
    _604++;
    if (_604 < _272.d1)
    goto _jump1533;
    _604 = 0;
    _605++;
    if (_605 < _603)
    goto _jump1533;
    // End body of loop
    int64_t _607 = _595 - _602;
    if (_583 >= 0)
    goto _jump1534;
    fail_assertion("negative array index");
    _jump1534:;
    if (_583 < _577.d0)
    goto _jump1535;
    fail_assertion("index too large");
    _jump1535:;
    if (_272.d1 >= 0)
    goto _jump1536;
    fail_assertion("negative array index");
    _jump1536:;
    if (_272.d1 < _577.d1)
    goto _jump1537;
    fail_assertion("index too large");
    _jump1537:;
    if (_607 >= 0)
    goto _jump1538;
    fail_assertion("negative array index");
    _jump1538:;
    if (_607 < _577.d2)
    goto _jump1539;
    fail_assertion("index too large");
    _jump1539:;
    int64_t _608 = 0;
    _608 *= _577.d0;
    _608 += _583;
    _608 *= _577.d1;
    _608 += _272.d1;
    _608 *= _577.d2;
    _608 += _607;
    int64_t _609 = _577.data[_608];
    _a3_double _610;
    // Computing bound for s
    int64_t _611 = e.d1 % _415.d0;
    _610.d0 = _611;
    if (_611 > 0) 
    goto _jump1540;
    fail_assertion("non-positive loop bound");
    _jump1540:;
    // Computing bound for t
    _610.d1 = _415.d1;
    if (_415.d1 > 0) 
    goto _jump1541;
    fail_assertion("non-positive loop bound");
    _jump1541:;
    // Computing bound for u
    int64_t _612;
    if (!i)
    goto _jump1542;
    _612 = e.d0;
    goto _jump1543;
    _jump1542:;
    _612 = _272.d2;
    _jump1543:;
    int64_t _613 = _612 + _272.d1;
    _610.d2 = _613;
    if (_613 > 0) 
    goto _jump1544;
    fail_assertion("non-positive loop bound");
    _jump1544:;
    // Computing total size of heap memory to allocate
    int64_t _614 = 1;
    _614 *= _611;
    _614 *= _415.d1;
    _614 *= _613;
    _614 *= sizeof(double);
    _610.data = jpl_alloc(_614);
    int64_t _615 = 0; // u
    int64_t _616 = 0; // t
    int64_t _617 = 0; // s
    _jump1545:; // Begin body of loop
    _a1_double _618;
    // Computing bound for v
    _618.d0 = _616;
    if (_616 > 0) 
    goto _jump1546;
    fail_assertion("non-positive loop bound");
    _jump1546:;
    // Computing total size of heap memory to allocate
    int64_t _619 = 1;
    _619 *= _616;
    _619 *= sizeof(double);
    _618.data = jpl_alloc(_619);
    int64_t _620 = 0; // v
    _jump1547:; // Begin body of loop
    int64_t _621 = 0;
    _621 *= _618.d0;
    _621 += _620;
    _618.data[_621] = c;
    _620++;
    if (_620 < _616)
    goto _jump1547;
    // End body of loop
    int64_t _622 = 274;
    if (_622 >= 0)
    goto _jump1548;
    fail_assertion("negative array index");
    _jump1548:;
    if (_622 < _618.d0)
    goto _jump1549;
    fail_assertion("index too large");
    _jump1549:;
    int64_t _623 = 0;
    _623 *= _618.d0;
    _623 += _622;
    double _624 = _618.data[_623];
    int64_t _625 = 0;
    _625 *= _610.d0;
    _625 += _617;
    _625 *= _610.d1;
    _625 += _616;
    _625 *= _610.d2;
    _625 += _615;
    _610.data[_625] = _624;
    _615++;
    if (_615 < _613)
    goto _jump1545;
    _615 = 0;
    _616++;
    if (_616 < _415.d1)
    goto _jump1545;
    _616 = 0;
    _617++;
    if (_617 < _611)
    goto _jump1545;
    // End body of loop
    double _626 = 73.0;
    bool _627 = _626 < c;
    _a2_int64_t _628;
    if (!_627)
    goto _jump1550;
    _a2_int64_t _629;
    // Computing bound for s
    _629.d0 = _415.d0;
    if (_415.d0 > 0) 
    goto _jump1551;
    fail_assertion("non-positive loop bound");
    _jump1551:;
    // Computing bound for t
    _629.d1 = _57.d0;
    if (_57.d0 > 0) 
    goto _jump1552;
    fail_assertion("non-positive loop bound");
    _jump1552:;
    // Computing total size of heap memory to allocate
    int64_t _630 = 1;
    _630 *= _415.d0;
    _630 *= _57.d0;
    _630 *= sizeof(int64_t);
    _629.data = jpl_alloc(_630);
    int64_t _631 = 0; // t
    int64_t _632 = 0; // s
    _jump1553:; // Begin body of loop
    int64_t _633 = 0;
    _633 *= _629.d0;
    _633 += _632;
    _633 *= _629.d1;
    _633 += _631;
    _629.data[_633] = _415.d0;
    _631++;
    if (_631 < _57.d0)
    goto _jump1553;
    _631 = 0;
    _632++;
    if (_632 < _415.d0)
    goto _jump1553;
    // End body of loop
    _628 = _629;
    goto _jump1554;
    _jump1550:;
    _628 = _415;
    _jump1554:;
    if (_57.d0 >= 0)
    goto _jump1555;
    fail_assertion("negative array index");
    _jump1555:;
    if (_57.d0 < _628.d0)
    goto _jump1556;
    fail_assertion("index too large");
    _jump1556:;
    if (_272.d1 >= 0)
    goto _jump1557;
    fail_assertion("negative array index");
    _jump1557:;
    if (_272.d1 < _628.d1)
    goto _jump1558;
    fail_assertion("index too large");
    _jump1558:;
    int64_t _634 = 0;
    _634 *= _628.d0;
    _634 += _57.d0;
    _634 *= _628.d1;
    _634 += _272.d1;
    int64_t _635 = _628.data[_634];
    if (e.d0 >= 0)
    goto _jump1559;
    fail_assertion("negative array index");
    _jump1559:;
    if (e.d0 < _610.d0)
    goto _jump1560;
    fail_assertion("index too large");
    _jump1560:;
    if (_635 >= 0)
    goto _jump1561;
    fail_assertion("negative array index");
    _jump1561:;
    if (_635 < _610.d1)
    goto _jump1562;
    fail_assertion("index too large");
    _jump1562:;
    if (_415.d1 >= 0)
    goto _jump1563;
    fail_assertion("negative array index");
    _jump1563:;
    if (_415.d1 < _610.d2)
    goto _jump1564;
    fail_assertion("index too large");
    _jump1564:;
    int64_t _636 = 0;
    _636 *= _610.d0;
    _636 += e.d0;
    _636 *= _610.d1;
    _636 += _635;
    _636 *= _610.d2;
    _636 += _415.d1;
    double _637 = _610.data[_636];
    double _638 = -c;
    double _639 = -_638;
    double _640 = _637 + _639;
    rgba _641 = b(_496, _609, _640);
    _467 = _641;
    goto _jump1565;
    _jump1430:;
    bool _642 = false;
    _a1_rgba _643;
    if (!_642)
    goto _jump1566;
    int64_t _644 = 683;
    if (e.d2 >= 0)
    goto _jump1567;
    fail_assertion("negative array index");
    _jump1567:;
    if (e.d2 < e.d0)
    goto _jump1568;
    fail_assertion("index too large");
    _jump1568:;
    if (e.d1 >= 0)
    goto _jump1569;
    fail_assertion("negative array index");
    _jump1569:;
    if (e.d1 < e.d1)
    goto _jump1570;
    fail_assertion("index too large");
    _jump1570:;
    if (_644 >= 0)
    goto _jump1571;
    fail_assertion("negative array index");
    _jump1571:;
    if (_644 < e.d2)
    goto _jump1572;
    fail_assertion("index too large");
    _jump1572:;
    int64_t _645 = 0;
    _645 *= e.d0;
    _645 += e.d2;
    _645 *= e.d1;
    _645 += e.d1;
    _645 *= e.d2;
    _645 += _644;
    rgba _646 = e.data[_645];
    rgba _647 = d(e, i);
    int64_t _648 = 761;
    if (e.d2 >= 0)
    goto _jump1573;
    fail_assertion("negative array index");
    _jump1573:;
    if (e.d2 < e.d0)
    goto _jump1574;
    fail_assertion("index too large");
    _jump1574:;
    if (_648 >= 0)
    goto _jump1575;
    fail_assertion("negative array index");
    _jump1575:;
    if (_648 < e.d1)
    goto _jump1576;
    fail_assertion("index too large");
    _jump1576:;
    if (_272.d0 >= 0)
    goto _jump1577;
    fail_assertion("negative array index");
    _jump1577:;
    if (_272.d0 < e.d2)
    goto _jump1578;
    fail_assertion("index too large");
    _jump1578:;
    int64_t _649 = 0;
    _649 *= e.d0;
    _649 += e.d2;
    _649 *= e.d1;
    _649 += _648;
    _649 *= e.d2;
    _649 += _272.d0;
    rgba _650 = e.data[_649];
    _a1_rgba _651;
    _651.d0 = 3;
    _651.data = jpl_alloc(sizeof(rgba) * 3);
    _651.data[0] = _646;
    _651.data[1] = _647;
    _651.data[2] = _650;
    _643 = _651;
    goto _jump1579;
    _jump1566:;
    _a1_rgba _652;
    // Computing bound for s
    _652.d0 = _415.d0;
    if (_415.d0 > 0) 
    goto _jump1580;
    fail_assertion("non-positive loop bound");
    _jump1580:;
    // Computing total size of heap memory to allocate
    int64_t _653 = 1;
    _653 *= _415.d0;
    _653 *= sizeof(rgba);
    _652.data = jpl_alloc(_653);
    int64_t _654 = 0; // s
    _jump1581:; // Begin body of loop
    bool _655 = true;
    rgba _656 = d(e, _655);
    int64_t _657 = 0;
    _657 *= _652.d0;
    _657 += _654;
    _652.data[_657] = _656;
    _654++;
    if (_654 < _415.d0)
    goto _jump1581;
    // End body of loop
    _643 = _652;
    _jump1579:;
    _a3_bool _658;
    // Computing bound for s
    _658.d0 = _272.d1;
    if (_272.d1 > 0) 
    goto _jump1582;
    fail_assertion("non-positive loop bound");
    _jump1582:;
    // Computing bound for t
    _658.d1 = e.d1;
    if (e.d1 > 0) 
    goto _jump1583;
    fail_assertion("non-positive loop bound");
    _jump1583:;
    // Computing bound for u
    _658.d2 = _415.d0;
    if (_415.d0 > 0) 
    goto _jump1584;
    fail_assertion("non-positive loop bound");
    _jump1584:;
    // Computing total size of heap memory to allocate
    int64_t _659 = 1;
    _659 *= _272.d1;
    _659 *= e.d1;
    _659 *= _415.d0;
    _659 *= sizeof(bool);
    _658.data = jpl_alloc(_659);
    int64_t _660 = 0; // u
    int64_t _661 = 0; // t
    int64_t _662 = 0; // s
    _jump1585:; // Begin body of loop
    int64_t _663 = 0;
    _663 *= _658.d0;
    _663 += _662;
    _663 *= _658.d1;
    _663 += _661;
    _663 *= _658.d2;
    _663 += _660;
    _658.data[_663] = i;
    _660++;
    if (_660 < _415.d0)
    goto _jump1585;
    _660 = 0;
    _661++;
    if (_661 < e.d1)
    goto _jump1585;
    _661 = 0;
    _662++;
    if (_662 < _272.d1)
    goto _jump1585;
    // End body of loop
    double _664;
    if (!i)
    goto _jump1586;
    _664 = c;
    goto _jump1587;
    _jump1586:;
    double _665 = 69.0;
    _664 = _665;
    _jump1587:;
    rgba _666 = b(_658, e.d2, _664);
    _a1_rgba _667;
    _667.d0 = 1;
    _667.data = jpl_alloc(sizeof(rgba) * 1);
    _667.data[0] = _666;
    _a1_rgba _668;
    // Computing bound for s
    _668.d0 = _272.d1;
    if (_272.d1 > 0) 
    goto _jump1588;
    fail_assertion("non-positive loop bound");
    _jump1588:;
    // Computing total size of heap memory to allocate
    int64_t _669 = 1;
    _669 *= _272.d1;
    _669 *= sizeof(rgba);
    _668.data = jpl_alloc(_669);
    int64_t _670 = 0; // s
    _jump1589:; // Begin body of loop
    rgba _671 = d(e, i);
    int64_t _672 = 0;
    _672 *= _668.d0;
    _672 += _670;
    _668.data[_672] = _671;
    _670++;
    if (_670 < _272.d1)
    goto _jump1589;
    // End body of loop
    _a1__a1_rgba _673;
    _673.d0 = 3;
    _673.data = jpl_alloc(sizeof(_a1_rgba) * 3);
    _673.data[0] = _643;
    _673.data[1] = _667;
    _673.data[2] = _668;
    if (e.d1 >= 0)
    goto _jump1590;
    fail_assertion("negative array index");
    _jump1590:;
    if (e.d1 < _673.d0)
    goto _jump1591;
    fail_assertion("index too large");
    _jump1591:;
    int64_t _674 = 0;
    _674 *= _673.d0;
    _674 += e.d1;
    _a1_rgba _675 = _673.data[_674];
    if (_415.d1 >= 0)
    goto _jump1592;
    fail_assertion("negative array index");
    _jump1592:;
    if (_415.d1 < _675.d0)
    goto _jump1593;
    fail_assertion("index too large");
    _jump1593:;
    int64_t _676 = 0;
    _676 *= _675.d0;
    _676 += _415.d1;
    rgba _677 = _675.data[_676];
    _467 = _677;
    _jump1565:;
    return _467;
    _a2_double _678;
    // Computing bound for s
    _678.d0 = _57.d0;
    if (_57.d0 > 0) 
    goto _jump1594;
    fail_assertion("non-positive loop bound");
    _jump1594:;
    // Computing bound for t
    int64_t _679 = 981;
    _678.d1 = _679;
    if (_679 > 0) 
    goto _jump1595;
    fail_assertion("non-positive loop bound");
    _jump1595:;
    // Computing total size of heap memory to allocate
    int64_t _680 = 1;
    _680 *= _57.d0;
    _680 *= _679;
    _680 *= sizeof(double);
    _678.data = jpl_alloc(_680);
    int64_t _681 = 0; // t
    int64_t _682 = 0; // s
    _jump1596:; // Begin body of loop
    double _683 = 87.0;
    int64_t _684 = 0;
    _684 *= _678.d0;
    _684 += _682;
    _684 *= _678.d1;
    _684 += _681;
    _678.data[_684] = _683;
    _681++;
    if (_681 < _679)
    goto _jump1596;
    _681 = 0;
    _682++;
    if (_682 < _57.d0)
    goto _jump1596;
    // End body of loop
    int64_t _685 = 183;
    if (_685 >= 0)
    goto _jump1597;
    fail_assertion("negative array index");
    _jump1597:;
    if (_685 < _678.d0)
    goto _jump1598;
    fail_assertion("index too large");
    _jump1598:;
    if (_415.d0 >= 0)
    goto _jump1599;
    fail_assertion("negative array index");
    _jump1599:;
    if (_415.d0 < _678.d1)
    goto _jump1600;
    fail_assertion("index too large");
    _jump1600:;
    int64_t _686 = 0;
    _686 *= _678.d0;
    _686 += _685;
    _686 *= _678.d1;
    _686 += _415.d0;
    double _687 = _678.data[_686];
    bool _688 = false;
    double _689;
    if (!_688)
    goto _jump1601;
    double _690;
    // Computing bound for s
    if (_57.d0 > 0) 
    goto _jump1602;
    fail_assertion("non-positive loop bound");
    _jump1602:;
    _690 = 0;
    int64_t _691 = 0; // s
    _jump1603:; // Begin body of loop
    _690 += c;
    _691++;
    if (_691 < _57.d0)
    goto _jump1603;
    // End body of loop
    double _692 = c + _690;
    double _693;
    // Computing bound for s
    if (_415.d1 > 0) 
    goto _jump1604;
    fail_assertion("non-positive loop bound");
    _jump1604:;
    _693 = 0;
    int64_t _694 = 0; // s
    _jump1605:; // Begin body of loop
    _693 += c;
    _694++;
    if (_694 < _415.d1)
    goto _jump1605;
    // End body of loop
    bool _695 = _692 <= _693;
    double _696;
    if (!_695)
    goto _jump1606;
    _696 = c;
    goto _jump1607;
    _jump1606:;
    _a1_double _697;
    // Computing bound for s
    _697.d0 = e.d2;
    if (e.d2 > 0) 
    goto _jump1608;
    fail_assertion("non-positive loop bound");
    _jump1608:;
    // Computing total size of heap memory to allocate
    int64_t _698 = 1;
    _698 *= e.d2;
    _698 *= sizeof(double);
    _697.data = jpl_alloc(_698);
    int64_t _699 = 0; // s
    _jump1609:; // Begin body of loop
    double _700 = 39.0;
    double _701 = -_700;
    int64_t _702 = 0;
    _702 *= _697.d0;
    _702 += _699;
    _697.data[_702] = _701;
    _699++;
    if (_699 < e.d2)
    goto _jump1609;
    // End body of loop
    if (_272.d0 >= 0)
    goto _jump1610;
    fail_assertion("negative array index");
    _jump1610:;
    if (_272.d0 < _697.d0)
    goto _jump1611;
    fail_assertion("index too large");
    _jump1611:;
    int64_t _703 = 0;
    _703 *= _697.d0;
    _703 += _272.d0;
    double _704 = _697.data[_703];
    double _705 = -c;
    double _706 = -c;
    double _707 = _705 - _706;
    double _708 = -_707;
    double _709 = _704 - _708;
    _696 = _709;
    _jump1607:;
    _689 = _696;
    goto _jump1612;
    _jump1601:;
    _689 = c;
    _jump1612:;
    rgba _710 = { _687, _689, c, c };
    return _710;
    double _711 = 62.0;
    double _712 = 43.0;
    bool _713 = _711 <= _712;
    _a2_rgba _714;
    if (!_713)
    goto _jump1613;
    double _715;
    // Computing bound for s
    if (_272.d1 > 0) 
    goto _jump1614;
    fail_assertion("non-positive loop bound");
    _jump1614:;
    // Computing bound for t
    if (e.d2 > 0) 
    goto _jump1615;
    fail_assertion("non-positive loop bound");
    _jump1615:;
    _715 = 0;
    int64_t _716 = 0; // t
    int64_t _717 = 0; // s
    _jump1616:; // Begin body of loop
    double _718 = 92.0;
    _715 += _718;
    _716++;
    if (_716 < e.d2)
    goto _jump1616;
    _716 = 0;
    _717++;
    if (_717 < _272.d1)
    goto _jump1616;
    // End body of loop
    double _719 = c / _715;
    double _720 = -c;
    double _721 = -_720;
    double _722 = _719 - _721;
    bool _723 = c > _722;
    _a2_rgba _724;
    if (!_723)
    goto _jump1617;
    _a3_int64_t _725;
    // Computing bound for s
    int64_t _726 = 969;
    _725.d0 = _726;
    if (_726 > 0) 
    goto _jump1618;
    fail_assertion("non-positive loop bound");
    _jump1618:;
    // Computing bound for t
    _725.d1 = _272.d2;
    if (_272.d2 > 0) 
    goto _jump1619;
    fail_assertion("non-positive loop bound");
    _jump1619:;
    // Computing bound for u
    _725.d2 = _415.d1;
    if (_415.d1 > 0) 
    goto _jump1620;
    fail_assertion("non-positive loop bound");
    _jump1620:;
    // Computing total size of heap memory to allocate
    int64_t _727 = 1;
    _727 *= _726;
    _727 *= _272.d2;
    _727 *= _415.d1;
    _727 *= sizeof(int64_t);
    _725.data = jpl_alloc(_727);
    int64_t _728 = 0; // u
    int64_t _729 = 0; // t
    int64_t _730 = 0; // s
    _jump1621:; // Begin body of loop
    int64_t _731 = 0;
    _731 *= _725.d0;
    _731 += _730;
    _731 *= _725.d1;
    _731 += _729;
    _731 *= _725.d2;
    _731 += _728;
    _725.data[_731] = e.d0;
    _728++;
    if (_728 < _415.d1)
    goto _jump1621;
    _728 = 0;
    _729++;
    if (_729 < _272.d2)
    goto _jump1621;
    _729 = 0;
    _730++;
    if (_730 < _726)
    goto _jump1621;
    // End body of loop
    bool _732 = a(_725, c);
    bool _733;
    if (!_732)
    goto _jump1622;
    bool _734 = true;
    bool _735 = !_734;
    _733 = _735;
    goto _jump1623;
    _jump1622:;
    bool _736 = true;
    bool _737 = !_736;
    _733 = _737;
    _jump1623:;
    _a2_rgba _738;
    if (!_733)
    goto _jump1624;
    _a2_rgba _739;
    // Computing bound for s
    int64_t _740 = e.d1 - e.d1;
    int64_t _741 = -_740;
    _739.d0 = _741;
    if (_741 > 0) 
    goto _jump1625;
    fail_assertion("non-positive loop bound");
    _jump1625:;
    // Computing bound for t
    _739.d1 = _57.d0;
    if (_57.d0 > 0) 
    goto _jump1626;
    fail_assertion("non-positive loop bound");
    _jump1626:;
    // Computing total size of heap memory to allocate
    int64_t _742 = 1;
    _742 *= _741;
    _742 *= _57.d0;
    _742 *= sizeof(rgba);
    _739.data = jpl_alloc(_742);
    int64_t _743 = 0; // t
    int64_t _744 = 0; // s
    _jump1627:; // Begin body of loop
    int64_t _745 = -_272.d2;
    if (_744 >= 0)
    goto _jump1628;
    fail_assertion("negative array index");
    _jump1628:;
    if (_744 < _272.d0)
    goto _jump1629;
    fail_assertion("index too large");
    _jump1629:;
    if (_745 >= 0)
    goto _jump1630;
    fail_assertion("negative array index");
    _jump1630:;
    if (_745 < _272.d1)
    goto _jump1631;
    fail_assertion("index too large");
    _jump1631:;
    if (_272.d1 >= 0)
    goto _jump1632;
    fail_assertion("negative array index");
    _jump1632:;
    if (_272.d1 < _272.d2)
    goto _jump1633;
    fail_assertion("index too large");
    _jump1633:;
    int64_t _746 = 0;
    _746 *= _272.d0;
    _746 += _744;
    _746 *= _272.d1;
    _746 += _745;
    _746 *= _272.d2;
    _746 += _272.d1;
    rgba _747 = _272.data[_746];
    int64_t _748 = 0;
    _748 *= _739.d0;
    _748 += _744;
    _748 *= _739.d1;
    _748 += _743;
    _739.data[_748] = _747;
    _743++;
    if (_743 < _57.d0)
    goto _jump1627;
    _743 = 0;
    _744++;
    if (_744 < _741)
    goto _jump1627;
    // End body of loop
    _738 = _739;
    goto _jump1634;
    _jump1624:;
    _a2_rgba _749;
    // Computing bound for s
    _749.d0 = _415.d0;
    if (_415.d0 > 0) 
    goto _jump1635;
    fail_assertion("non-positive loop bound");
    _jump1635:;
    // Computing bound for t
    _749.d1 = _272.d2;
    if (_272.d2 > 0) 
    goto _jump1636;
    fail_assertion("non-positive loop bound");
    _jump1636:;
    // Computing total size of heap memory to allocate
    int64_t _750 = 1;
    _750 *= _415.d0;
    _750 *= _272.d2;
    _750 *= sizeof(rgba);
    _749.data = jpl_alloc(_750);
    int64_t _751 = 0; // t
    int64_t _752 = 0; // s
    _jump1637:; // Begin body of loop
    _a3_bool _753;
    // Computing bound for u
    _753.d0 = _751;
    if (_751 > 0) 
    goto _jump1638;
    fail_assertion("non-positive loop bound");
    _jump1638:;
    // Computing bound for v
    _753.d1 = _751;
    if (_751 > 0) 
    goto _jump1639;
    fail_assertion("non-positive loop bound");
    _jump1639:;
    // Computing bound for w
    _753.d2 = e.d0;
    if (e.d0 > 0) 
    goto _jump1640;
    fail_assertion("non-positive loop bound");
    _jump1640:;
    // Computing total size of heap memory to allocate
    int64_t _754 = 1;
    _754 *= _751;
    _754 *= _751;
    _754 *= e.d0;
    _754 *= sizeof(bool);
    _753.data = jpl_alloc(_754);
    int64_t _755 = 0; // w
    int64_t _756 = 0; // v
    int64_t _757 = 0; // u
    _jump1641:; // Begin body of loop
    int64_t _758 = 0;
    _758 *= _753.d0;
    _758 += _757;
    _758 *= _753.d1;
    _758 += _756;
    _758 *= _753.d2;
    _758 += _755;
    _753.data[_758] = i;
    _755++;
    if (_755 < e.d0)
    goto _jump1641;
    _755 = 0;
    _756++;
    if (_756 < _751)
    goto _jump1641;
    _756 = 0;
    _757++;
    if (_757 < _751)
    goto _jump1641;
    // End body of loop
    double _759;
    // Computing bound for u
    if (e.d1 > 0) 
    goto _jump1642;
    fail_assertion("non-positive loop bound");
    _jump1642:;
    // Computing bound for v
    if (e.d1 > 0) 
    goto _jump1643;
    fail_assertion("non-positive loop bound");
    _jump1643:;
    _759 = 0;
    int64_t _760 = 0; // v
    int64_t _761 = 0; // u
    _jump1644:; // Begin body of loop
    double _762 = 65.0;
    _759 += _762;
    _760++;
    if (_760 < e.d1)
    goto _jump1644;
    _760 = 0;
    _761++;
    if (_761 < e.d1)
    goto _jump1644;
    // End body of loop
    rgba _763 = b(_753, e.d1, _759);
    int64_t _764 = 0;
    _764 *= _749.d0;
    _764 += _752;
    _764 *= _749.d1;
    _764 += _751;
    _749.data[_764] = _763;
    _751++;
    if (_751 < _272.d2)
    goto _jump1637;
    _751 = 0;
    _752++;
    if (_752 < _415.d0)
    goto _jump1637;
    // End body of loop
    _738 = _749;
    _jump1634:;
    _724 = _738;
    goto _jump1645;
    _jump1617:;
    _a2__a2_rgba _765;
    // Computing bound for s
    int64_t _766 = 173;
    _765.d0 = _766;
    if (_766 > 0) 
    goto _jump1646;
    fail_assertion("non-positive loop bound");
    _jump1646:;
    // Computing bound for t
    _765.d1 = e.d1;
    if (e.d1 > 0) 
    goto _jump1647;
    fail_assertion("non-positive loop bound");
    _jump1647:;
    // Computing total size of heap memory to allocate
    int64_t _767 = 1;
    _767 *= _766;
    _767 *= e.d1;
    _767 *= sizeof(_a2_rgba);
    _765.data = jpl_alloc(_767);
    int64_t _768 = 0; // t
    int64_t _769 = 0; // s
    _jump1648:; // Begin body of loop
    _a2_rgba _770;
    // Computing bound for u
    if (e.d2 >= 0)
    goto _jump1649;
    fail_assertion("negative array index");
    _jump1649:;
    if (e.d2 < _415.d0)
    goto _jump1650;
    fail_assertion("index too large");
    _jump1650:;
    if (_415.d0 >= 0)
    goto _jump1651;
    fail_assertion("negative array index");
    _jump1651:;
    if (_415.d0 < _415.d1)
    goto _jump1652;
    fail_assertion("index too large");
    _jump1652:;
    int64_t _771 = 0;
    _771 *= _415.d0;
    _771 += e.d2;
    _771 *= _415.d1;
    _771 += _415.d0;
    int64_t _772 = _415.data[_771];
    _770.d0 = _772;
    if (_772 > 0) 
    goto _jump1653;
    fail_assertion("non-positive loop bound");
    _jump1653:;
    // Computing bound for v
    int64_t _773;
    // Computing bound for u
    if (_272.d1 > 0) 
    goto _jump1654;
    fail_assertion("non-positive loop bound");
    _jump1654:;
    // Computing bound for v
    if (e.d0 > 0) 
    goto _jump1655;
    fail_assertion("non-positive loop bound");
    _jump1655:;
    // Computing bound for w
    if (_415.d0 > 0) 
    goto _jump1656;
    fail_assertion("non-positive loop bound");
    _jump1656:;
    _773 = 0;
    int64_t _774 = 0; // w
    int64_t _775 = 0; // v
    int64_t _776 = 0; // u
    _jump1657:; // Begin body of loop
    _773 += e.d0;
    _774++;
    if (_774 < _415.d0)
    goto _jump1657;
    _774 = 0;
    _775++;
    if (_775 < e.d0)
    goto _jump1657;
    _775 = 0;
    _776++;
    if (_776 < _272.d1)
    goto _jump1657;
    // End body of loop
    _770.d1 = _773;
    if (_773 > 0) 
    goto _jump1658;
    fail_assertion("non-positive loop bound");
    _jump1658:;
    // Computing total size of heap memory to allocate
    int64_t _777 = 1;
    _777 *= _772;
    _777 *= _773;
    _777 *= sizeof(rgba);
    _770.data = jpl_alloc(_777);
    int64_t _778 = 0; // v
    int64_t _779 = 0; // u
    _jump1659:; // Begin body of loop
    rgba _780 = d(e, i);
    int64_t _781 = 0;
    _781 *= _770.d0;
    _781 += _779;
    _781 *= _770.d1;
    _781 += _778;
    _770.data[_781] = _780;
    _778++;
    if (_778 < _773)
    goto _jump1659;
    _778 = 0;
    _779++;
    if (_779 < _772)
    goto _jump1659;
    // End body of loop
    int64_t _782 = 0;
    _782 *= _765.d0;
    _782 += _769;
    _782 *= _765.d1;
    _782 += _768;
    _765.data[_782] = _770;
    _768++;
    if (_768 < e.d1)
    goto _jump1648;
    _768 = 0;
    _769++;
    if (_769 < _766)
    goto _jump1648;
    // End body of loop
    int64_t _783 = -_415.d0;
    if (_415.d0 >= 0)
    goto _jump1660;
    fail_assertion("negative array index");
    _jump1660:;
    if (_415.d0 < _765.d0)
    goto _jump1661;
    fail_assertion("index too large");
    _jump1661:;
    if (_783 >= 0)
    goto _jump1662;
    fail_assertion("negative array index");
    _jump1662:;
    if (_783 < _765.d1)
    goto _jump1663;
    fail_assertion("index too large");
    _jump1663:;
    int64_t _784 = 0;
    _784 *= _765.d0;
    _784 += _415.d0;
    _784 *= _765.d1;
    _784 += _783;
    _a2_rgba _785 = _765.data[_784];
    _724 = _785;
    _jump1645:;
    _714 = _724;
    goto _jump1664;
    _jump1613:;
    _a2_rgba _786;
    // Computing bound for s
    _786.d0 = _272.d1;
    if (_272.d1 > 0) 
    goto _jump1665;
    fail_assertion("non-positive loop bound");
    _jump1665:;
    // Computing bound for t
    int64_t _787;
    if (!i)
    goto _jump1666;
    _787 = _272.d1;
    goto _jump1667;
    _jump1666:;
    _787 = _272.d1;
    _jump1667:;
    int64_t _788 = e.d0 + _787;
    _786.d1 = _788;
    if (_788 > 0) 
    goto _jump1668;
    fail_assertion("non-positive loop bound");
    _jump1668:;
    // Computing total size of heap memory to allocate
    int64_t _789 = 1;
    _789 *= _272.d1;
    _789 *= _788;
    _789 *= sizeof(rgba);
    _786.data = jpl_alloc(_789);
    int64_t _790 = 0; // t
    int64_t _791 = 0; // s
    _jump1669:; // Begin body of loop
    _a3_bool _792;
    // Computing bound for u
    _792.d0 = _415.d1;
    if (_415.d1 > 0) 
    goto _jump1670;
    fail_assertion("non-positive loop bound");
    _jump1670:;
    // Computing bound for v
    _792.d1 = _415.d1;
    if (_415.d1 > 0) 
    goto _jump1671;
    fail_assertion("non-positive loop bound");
    _jump1671:;
    // Computing bound for w
    _792.d2 = e.d2;
    if (e.d2 > 0) 
    goto _jump1672;
    fail_assertion("non-positive loop bound");
    _jump1672:;
    // Computing total size of heap memory to allocate
    int64_t _793 = 1;
    _793 *= _415.d1;
    _793 *= _415.d1;
    _793 *= e.d2;
    _793 *= sizeof(bool);
    _792.data = jpl_alloc(_793);
    int64_t _794 = 0; // w
    int64_t _795 = 0; // v
    int64_t _796 = 0; // u
    _jump1673:; // Begin body of loop
    bool _797 = i;
    if (0 == i)
    goto _jump1674;
    bool _798 = false;
    _797 = _798;
    _jump1674:;
    int64_t _799 = 0;
    _799 *= _792.d0;
    _799 += _796;
    _799 *= _792.d1;
    _799 += _795;
    _799 *= _792.d2;
    _799 += _794;
    _792.data[_799] = _797;
    _794++;
    if (_794 < e.d2)
    goto _jump1673;
    _794 = 0;
    _795++;
    if (_795 < _415.d1)
    goto _jump1673;
    _795 = 0;
    _796++;
    if (_796 < _415.d1)
    goto _jump1673;
    // End body of loop
    int64_t _800 = _57.d0 - _415.d1;
    if (e.d2 >= 0)
    goto _jump1675;
    fail_assertion("negative array index");
    _jump1675:;
    if (e.d2 < _792.d0)
    goto _jump1676;
    fail_assertion("index too large");
    _jump1676:;
    if (_800 >= 0)
    goto _jump1677;
    fail_assertion("negative array index");
    _jump1677:;
    if (_800 < _792.d1)
    goto _jump1678;
    fail_assertion("index too large");
    _jump1678:;
    if (_791 >= 0)
    goto _jump1679;
    fail_assertion("negative array index");
    _jump1679:;
    if (_791 < _792.d2)
    goto _jump1680;
    fail_assertion("index too large");
    _jump1680:;
    int64_t _801 = 0;
    _801 *= _792.d0;
    _801 += e.d2;
    _801 *= _792.d1;
    _801 += _800;
    _801 *= _792.d2;
    _801 += _791;
    bool _802 = _792.data[_801];
    rgba _803;
    if (!_802)
    goto _jump1681;
    _a3_bool _804;
    // Computing bound for u
    _804.d0 = _57.d0;
    if (_57.d0 > 0) 
    goto _jump1682;
    fail_assertion("non-positive loop bound");
    _jump1682:;
    // Computing bound for v
    _804.d1 = _415.d0;
    if (_415.d0 > 0) 
    goto _jump1683;
    fail_assertion("non-positive loop bound");
    _jump1683:;
    // Computing bound for w
    _804.d2 = _415.d1;
    if (_415.d1 > 0) 
    goto _jump1684;
    fail_assertion("non-positive loop bound");
    _jump1684:;
    // Computing total size of heap memory to allocate
    int64_t _805 = 1;
    _805 *= _57.d0;
    _805 *= _415.d0;
    _805 *= _415.d1;
    _805 *= sizeof(bool);
    _804.data = jpl_alloc(_805);
    int64_t _806 = 0; // w
    int64_t _807 = 0; // v
    int64_t _808 = 0; // u
    _jump1685:; // Begin body of loop
    int64_t _809 = 0;
    _809 *= _804.d0;
    _809 += _808;
    _809 *= _804.d1;
    _809 += _807;
    _809 *= _804.d2;
    _809 += _806;
    _804.data[_809] = i;
    _806++;
    if (_806 < _415.d1)
    goto _jump1685;
    _806 = 0;
    _807++;
    if (_807 < _415.d0)
    goto _jump1685;
    _807 = 0;
    _808++;
    if (_808 < _57.d0)
    goto _jump1685;
    // End body of loop
    int64_t _810 = 617;
    bool _811 = _810 <= e.d0;
    double _812;
    if (!_811)
    goto _jump1686;
    double _813 = 26.0;
    _812 = _813;
    goto _jump1687;
    _jump1686:;
    _812 = c;
    _jump1687:;
    rgba _814 = b(_804, _790, _812);
    _803 = _814;
    goto _jump1688;
    _jump1681:;
    _a3_bool _815;
    // Computing bound for u
    _815.d0 = _790;
    if (_790 > 0) 
    goto _jump1689;
    fail_assertion("non-positive loop bound");
    _jump1689:;
    // Computing bound for v
    _815.d1 = e.d1;
    if (e.d1 > 0) 
    goto _jump1690;
    fail_assertion("non-positive loop bound");
    _jump1690:;
    // Computing bound for w
    _815.d2 = e.d2;
    if (e.d2 > 0) 
    goto _jump1691;
    fail_assertion("non-positive loop bound");
    _jump1691:;
    // Computing total size of heap memory to allocate
    int64_t _816 = 1;
    _816 *= _790;
    _816 *= e.d1;
    _816 *= e.d2;
    _816 *= sizeof(bool);
    _815.data = jpl_alloc(_816);
    int64_t _817 = 0; // w
    int64_t _818 = 0; // v
    int64_t _819 = 0; // u
    _jump1692:; // Begin body of loop
    bool _820 = !i;
    int64_t _821 = 0;
    _821 *= _815.d0;
    _821 += _819;
    _821 *= _815.d1;
    _821 += _818;
    _821 *= _815.d2;
    _821 += _817;
    _815.data[_821] = _820;
    _817++;
    if (_817 < e.d2)
    goto _jump1692;
    _817 = 0;
    _818++;
    if (_818 < e.d1)
    goto _jump1692;
    _818 = 0;
    _819++;
    if (_819 < _790)
    goto _jump1692;
    // End body of loop
    bool _822 = true;
    double _823;
    if (!_822)
    goto _jump1693;
    double _824 = 65.0;
    double _825 = 96.0;
    double _826 = _824 - _825;
    _823 = _826;
    goto _jump1694;
    _jump1693:;
    double _827 = 46.0;
    double _828 = 36.0;
    double _829 = _827 - _828;
    _823 = _829;
    _jump1694:;
    rgba _830 = b(_815, _57.d0, _823);
    _803 = _830;
    _jump1688:;
    int64_t _831 = 0;
    _831 *= _786.d0;
    _831 += _791;
    _831 *= _786.d1;
    _831 += _790;
    _786.data[_831] = _803;
    _790++;
    if (_790 < _788)
    goto _jump1669;
    _790 = 0;
    _791++;
    if (_791 < _272.d1)
    goto _jump1669;
    // End body of loop
    _714 = _786;
    _jump1664:;
    _a3_int64_t _832;
    // Computing bound for s
    _832.d0 = e.d0;
    if (e.d0 > 0) 
    goto _jump1695;
    fail_assertion("non-positive loop bound");
    _jump1695:;
    // Computing bound for t
    int64_t _833;
    // Computing bound for s
    if (_57.d0 > 0) 
    goto _jump1696;
    fail_assertion("non-positive loop bound");
    _jump1696:;
    // Computing bound for t
    int64_t _834 = _272.d2 - _272.d2;
    int64_t _835 = _834 / _272.d0;
    if (_835 >= 0)
    goto _jump1697;
    fail_assertion("negative array index");
    _jump1697:;
    if (_835 < _415.d0)
    goto _jump1698;
    fail_assertion("index too large");
    _jump1698:;
    if (e.d1 >= 0)
    goto _jump1699;
    fail_assertion("negative array index");
    _jump1699:;
    if (e.d1 < _415.d1)
    goto _jump1700;
    fail_assertion("index too large");
    _jump1700:;
    int64_t _836 = 0;
    _836 *= _415.d0;
    _836 += _835;
    _836 *= _415.d1;
    _836 += e.d1;
    int64_t _837 = _415.data[_836];
    if (_837 > 0) 
    goto _jump1701;
    fail_assertion("non-positive loop bound");
    _jump1701:;
    // Computing bound for u
    if (_272.d1 > 0) 
    goto _jump1702;
    fail_assertion("non-positive loop bound");
    _jump1702:;
    _833 = 0;
    int64_t _838 = 0; // u
    int64_t _839 = 0; // t
    int64_t _840 = 0; // s
    _jump1703:; // Begin body of loop
    int64_t _841;
    // Computing bound for v
    if (_415.d0 > 0) 
    goto _jump1704;
    fail_assertion("non-positive loop bound");
    _jump1704:;
    // Computing bound for w
    if (_839 > 0) 
    goto _jump1705;
    fail_assertion("non-positive loop bound");
    _jump1705:;
    _841 = 0;
    int64_t _842 = 0; // w
    int64_t _843 = 0; // v
    _jump1706:; // Begin body of loop
    _841 += _415.d1;
    _842++;
    if (_842 < _839)
    goto _jump1706;
    _842 = 0;
    _843++;
    if (_843 < _415.d0)
    goto _jump1706;
    // End body of loop
    _833 += _841;
    _838++;
    if (_838 < _272.d1)
    goto _jump1703;
    _838 = 0;
    _839++;
    if (_839 < _837)
    goto _jump1703;
    _839 = 0;
    _840++;
    if (_840 < _57.d0)
    goto _jump1703;
    // End body of loop
    _832.d1 = _833;
    if (_833 > 0) 
    goto _jump1707;
    fail_assertion("non-positive loop bound");
    _jump1707:;
    // Computing bound for u
    _a2_int64_t _844;
    // Computing bound for s
    if (e.d1 >= 0)
    goto _jump1708;
    fail_assertion("negative array index");
    _jump1708:;
    if (e.d1 < _415.d0)
    goto _jump1709;
    fail_assertion("index too large");
    _jump1709:;
    if (_415.d1 >= 0)
    goto _jump1710;
    fail_assertion("negative array index");
    _jump1710:;
    if (_415.d1 < _415.d1)
    goto _jump1711;
    fail_assertion("index too large");
    _jump1711:;
    int64_t _845 = 0;
    _845 *= _415.d0;
    _845 += e.d1;
    _845 *= _415.d1;
    _845 += _415.d1;
    int64_t _846 = _415.data[_845];
    int64_t _847 = -_846;
    _844.d0 = _847;
    if (_847 > 0) 
    goto _jump1712;
    fail_assertion("non-positive loop bound");
    _jump1712:;
    // Computing bound for t
    _844.d1 = _57.d0;
    if (_57.d0 > 0) 
    goto _jump1713;
    fail_assertion("non-positive loop bound");
    _jump1713:;
    // Computing total size of heap memory to allocate
    int64_t _848 = 1;
    _848 *= _847;
    _848 *= _57.d0;
    _848 *= sizeof(int64_t);
    _844.data = jpl_alloc(_848);
    int64_t _849 = 0; // t
    int64_t _850 = 0; // s
    _jump1714:; // Begin body of loop
    int64_t _851 = 0;
    _851 *= _844.d0;
    _851 += _850;
    _851 *= _844.d1;
    _851 += _849;
    _844.data[_851] = _272.d2;
    _849++;
    if (_849 < _57.d0)
    goto _jump1714;
    _849 = 0;
    _850++;
    if (_850 < _847)
    goto _jump1714;
    // End body of loop
    bool _852 = true;
    bool _853 = !_852;
    int64_t _854;
    if (!_853)
    goto _jump1715;
    _a3_int64_t _855;
    // Computing bound for s
    int64_t _856 = 575;
    _855.d0 = _856;
    if (_856 > 0) 
    goto _jump1716;
    fail_assertion("non-positive loop bound");
    _jump1716:;
    // Computing bound for t
    _855.d1 = e.d0;
    if (e.d0 > 0) 
    goto _jump1717;
    fail_assertion("non-positive loop bound");
    _jump1717:;
    // Computing bound for u
    _855.d2 = _272.d1;
    if (_272.d1 > 0) 
    goto _jump1718;
    fail_assertion("non-positive loop bound");
    _jump1718:;
    // Computing total size of heap memory to allocate
    int64_t _857 = 1;
    _857 *= _856;
    _857 *= e.d0;
    _857 *= _272.d1;
    _857 *= sizeof(int64_t);
    _855.data = jpl_alloc(_857);
    int64_t _858 = 0; // u
    int64_t _859 = 0; // t
    int64_t _860 = 0; // s
    _jump1719:; // Begin body of loop
    int64_t _861 = 0;
    _861 *= _855.d0;
    _861 += _860;
    _861 *= _855.d1;
    _861 += _859;
    _861 *= _855.d2;
    _861 += _858;
    _855.data[_861] = _272.d1;
    _858++;
    if (_858 < _272.d1)
    goto _jump1719;
    _858 = 0;
    _859++;
    if (_859 < e.d0)
    goto _jump1719;
    _859 = 0;
    _860++;
    if (_860 < _856)
    goto _jump1719;
    // End body of loop
    int64_t _862;
    // Computing bound for s
    if (_272.d2 > 0) 
    goto _jump1720;
    fail_assertion("non-positive loop bound");
    _jump1720:;
    // Computing bound for t
    if (_57.d0 > 0) 
    goto _jump1721;
    fail_assertion("non-positive loop bound");
    _jump1721:;
    _862 = 0;
    int64_t _863 = 0; // t
    int64_t _864 = 0; // s
    _jump1722:; // Begin body of loop
    _862 += _863;
    _863++;
    if (_863 < _57.d0)
    goto _jump1722;
    _863 = 0;
    _864++;
    if (_864 < _272.d2)
    goto _jump1722;
    // End body of loop
    int64_t _865;
    // Computing bound for s
    if (e.d0 > 0) 
    goto _jump1723;
    fail_assertion("non-positive loop bound");
    _jump1723:;
    // Computing bound for t
    if (_415.d0 > 0) 
    goto _jump1724;
    fail_assertion("non-positive loop bound");
    _jump1724:;
    // Computing bound for u
    if (_57.d0 > 0) 
    goto _jump1725;
    fail_assertion("non-positive loop bound");
    _jump1725:;
    _865 = 0;
    int64_t _866 = 0; // u
    int64_t _867 = 0; // t
    int64_t _868 = 0; // s
    _jump1726:; // Begin body of loop
    int64_t _869 = 835;
    _865 += _869;
    _866++;
    if (_866 < _57.d0)
    goto _jump1726;
    _866 = 0;
    _867++;
    if (_867 < _415.d0)
    goto _jump1726;
    _867 = 0;
    _868++;
    if (_868 < e.d0)
    goto _jump1726;
    // End body of loop
    int64_t _870;
    // Computing bound for s
    if (_57.d0 > 0) 
    goto _jump1727;
    fail_assertion("non-positive loop bound");
    _jump1727:;
    // Computing bound for t
    if (_415.d0 > 0) 
    goto _jump1728;
    fail_assertion("non-positive loop bound");
    _jump1728:;
    _870 = 0;
    int64_t _871 = 0; // t
    int64_t _872 = 0; // s
    _jump1729:; // Begin body of loop
    _870 += e.d0;
    _871++;
    if (_871 < _415.d0)
    goto _jump1729;
    _871 = 0;
    _872++;
    if (_872 < _57.d0)
    goto _jump1729;
    // End body of loop
    if (_862 >= 0)
    goto _jump1730;
    fail_assertion("negative array index");
    _jump1730:;
    if (_862 < _855.d0)
    goto _jump1731;
    fail_assertion("index too large");
    _jump1731:;
    if (_865 >= 0)
    goto _jump1732;
    fail_assertion("negative array index");
    _jump1732:;
    if (_865 < _855.d1)
    goto _jump1733;
    fail_assertion("index too large");
    _jump1733:;
    if (_870 >= 0)
    goto _jump1734;
    fail_assertion("negative array index");
    _jump1734:;
    if (_870 < _855.d2)
    goto _jump1735;
    fail_assertion("index too large");
    _jump1735:;
    int64_t _873 = 0;
    _873 *= _855.d0;
    _873 += _862;
    _873 *= _855.d1;
    _873 += _865;
    _873 *= _855.d2;
    _873 += _870;
    int64_t _874 = _855.data[_873];
    _854 = _874;
    goto _jump1736;
    _jump1715:;
    _854 = e.d1;
    _jump1736:;
    if (_272.d1 >= 0)
    goto _jump1737;
    fail_assertion("negative array index");
    _jump1737:;
    if (_272.d1 < _844.d0)
    goto _jump1738;
    fail_assertion("index too large");
    _jump1738:;
    if (_854 >= 0)
    goto _jump1739;
    fail_assertion("negative array index");
    _jump1739:;
    if (_854 < _844.d1)
    goto _jump1740;
    fail_assertion("index too large");
    _jump1740:;
    int64_t _875 = 0;
    _875 *= _844.d0;
    _875 += _272.d1;
    _875 *= _844.d1;
    _875 += _854;
    int64_t _876 = _844.data[_875];
    _832.d2 = _876;
    if (_876 > 0) 
    goto _jump1741;
    fail_assertion("non-positive loop bound");
    _jump1741:;
    // Computing total size of heap memory to allocate
    int64_t _877 = 1;
    _877 *= e.d0;
    _877 *= _833;
    _877 *= _876;
    _877 *= sizeof(int64_t);
    _832.data = jpl_alloc(_877);
    int64_t _878 = 0; // u
    int64_t _879 = 0; // t
    int64_t _880 = 0; // s
    _jump1742:; // Begin body of loop
    int64_t _881 = 675;
    int64_t _882 = 0;
    _882 *= _832.d0;
    _882 += _880;
    _882 *= _832.d1;
    _882 += _879;
    _882 *= _832.d2;
    _882 += _878;
    _832.data[_882] = _881;
    _878++;
    if (_878 < _876)
    goto _jump1742;
    _878 = 0;
    _879++;
    if (_879 < _833)
    goto _jump1742;
    _879 = 0;
    _880++;
    if (_880 < e.d0)
    goto _jump1742;
    // End body of loop
    int64_t _883 = _57.d0 % _272.d0;
    if (_272.d1 >= 0)
    goto _jump1743;
    fail_assertion("negative array index");
    _jump1743:;
    if (_272.d1 < _832.d0)
    goto _jump1744;
    fail_assertion("index too large");
    _jump1744:;
    if (_883 >= 0)
    goto _jump1745;
    fail_assertion("negative array index");
    _jump1745:;
    if (_883 < _832.d1)
    goto _jump1746;
    fail_assertion("index too large");
    _jump1746:;
    if (_272.d0 >= 0)
    goto _jump1747;
    fail_assertion("negative array index");
    _jump1747:;
    if (_272.d0 < _832.d2)
    goto _jump1748;
    fail_assertion("index too large");
    _jump1748:;
    int64_t _884 = 0;
    _884 *= _832.d0;
    _884 += _272.d1;
    _884 *= _832.d1;
    _884 += _883;
    _884 *= _832.d2;
    _884 += _272.d0;
    int64_t _885 = _832.data[_884];
    if (_885 >= 0)
    goto _jump1749;
    fail_assertion("negative array index");
    _jump1749:;
    if (_885 < _714.d0)
    goto _jump1750;
    fail_assertion("index too large");
    _jump1750:;
    if (_415.d0 >= 0)
    goto _jump1751;
    fail_assertion("negative array index");
    _jump1751:;
    if (_415.d0 < _714.d1)
    goto _jump1752;
    fail_assertion("index too large");
    _jump1752:;
    int64_t _886 = 0;
    _886 *= _714.d0;
    _886 += _885;
    _886 *= _714.d1;
    _886 += _415.d0;
    rgba _887 = _714.data[_886];
    return _887;
}

bool e(bool f, void_t g) {
    _a2__a3_int64_t _0;
    // Computing bound for h
    bool _2 = false;
    bool _1 = _2;
    if (0 != _2)
    goto _jump1753;
    _1 = f;
    _jump1753:;
    int64_t _3;
    if (!_1)
    goto _jump1754;
    int64_t _4 = 358;
    int64_t _5 = -_4;
    int64_t _6 = 648;
    int64_t _7 = _5 * _6;
    _3 = _7;
    goto _jump1755;
    _jump1754:;
    bool _8 = false;
    bool _9 = !_8;
    int64_t _10;
    if (!_9)
    goto _jump1756;
    int64_t _11 = 305;
    _10 = _11;
    goto _jump1757;
    _jump1756:;
    int64_t _12 = 595;
    _10 = _12;
    _jump1757:;
    _3 = _10;
    _jump1755:;
    _0.d0 = _3;
    if (_3 > 0) 
    goto _jump1758;
    fail_assertion("non-positive loop bound");
    _jump1758:;
    // Computing bound for i
    bool _14 = true;
    bool _13 = _14;
    if (0 != _14)
    goto _jump1759;
    bool _15 = true;
    _13 = _15;
    _jump1759:;
    bool _16 = e(_13, g);
    int64_t _17;
    if (!_16)
    goto _jump1760;
    int64_t _18 = 427;
    _17 = _18;
    goto _jump1761;
    _jump1760:;
    int64_t _19 = 166;
    _17 = _19;
    _jump1761:;
    _0.d1 = _17;
    if (_17 > 0) 
    goto _jump1762;
    fail_assertion("non-positive loop bound");
    _jump1762:;
    // Computing total size of heap memory to allocate
    int64_t _20 = 1;
    _20 *= _3;
    _20 *= _17;
    _20 *= sizeof(_a3_int64_t);
    _0.data = jpl_alloc(_20);
    int64_t _21 = 0; // i
    int64_t _22 = 0; // h
    _jump1763:; // Begin body of loop
    bool _24 = _22 == _21;
    bool _23 = _24;
    if (0 != _24)
    goto _jump1764;
    double _25;
    // Computing bound for j
    int64_t _26 = 5;
    if (_26 > 0) 
    goto _jump1765;
    fail_assertion("non-positive loop bound");
    _jump1765:;
    // Computing bound for k
    if (_21 > 0) 
    goto _jump1766;
    fail_assertion("non-positive loop bound");
    _jump1766:;
    _25 = 0;
    int64_t _27 = 0; // k
    int64_t _28 = 0; // j
    _jump1767:; // Begin body of loop
    double _29 = 98.0;
    _25 += _29;
    _27++;
    if (_27 < _21)
    goto _jump1767;
    _27 = 0;
    _28++;
    if (_28 < _26)
    goto _jump1767;
    // End body of loop
    bool _30 = _25 <= c;
    _23 = _30;
    _jump1764:;
    _a3_int64_t _31;
    if (!_23)
    goto _jump1768;
    _a3_int64_t _32;
    // Computing bound for j
    int64_t _33;
    // Computing bound for j
    int64_t _34;
    // Computing bound for j
    if (_22 > 0) 
    goto _jump1769;
    fail_assertion("non-positive loop bound");
    _jump1769:;
    _34 = 0;
    int64_t _35 = 0; // j
    _jump1770:; // Begin body of loop
    _34 += _35;
    _35++;
    if (_35 < _22)
    goto _jump1770;
    // End body of loop
    if (_34 > 0) 
    goto _jump1771;
    fail_assertion("non-positive loop bound");
    _jump1771:;
    // Computing bound for k
    if (_21 > 0) 
    goto _jump1772;
    fail_assertion("non-positive loop bound");
    _jump1772:;
    _33 = 0;
    int64_t _36 = 0; // k
    int64_t _37 = 0; // j
    _jump1773:; // Begin body of loop
    _33 += _37;
    _36++;
    if (_36 < _21)
    goto _jump1773;
    _36 = 0;
    _37++;
    if (_37 < _34)
    goto _jump1773;
    // End body of loop
    _32.d0 = _33;
    if (_33 > 0) 
    goto _jump1774;
    fail_assertion("non-positive loop bound");
    _jump1774:;
    // Computing bound for k
    _32.d1 = _22;
    if (_22 > 0) 
    goto _jump1775;
    fail_assertion("non-positive loop bound");
    _jump1775:;
    // Computing bound for l
    _32.d2 = _22;
    if (_22 > 0) 
    goto _jump1776;
    fail_assertion("non-positive loop bound");
    _jump1776:;
    // Computing total size of heap memory to allocate
    int64_t _38 = 1;
    _38 *= _33;
    _38 *= _22;
    _38 *= _22;
    _38 *= sizeof(int64_t);
    _32.data = jpl_alloc(_38);
    int64_t _39 = 0; // l
    int64_t _40 = 0; // k
    int64_t _41 = 0; // j
    _jump1777:; // Begin body of loop
    int64_t _42 = 0;
    _42 *= _32.d0;
    _42 += _41;
    _42 *= _32.d1;
    _42 += _40;
    _42 *= _32.d2;
    _42 += _39;
    _32.data[_42] = _40;
    _39++;
    if (_39 < _22)
    goto _jump1777;
    _39 = 0;
    _40++;
    if (_40 < _22)
    goto _jump1777;
    _40 = 0;
    _41++;
    if (_41 < _33)
    goto _jump1777;
    // End body of loop
    _31 = _32;
    goto _jump1778;
    _jump1768:;
    _a3_int64_t _43;
    // Computing bound for j
    _43.d0 = _21;
    if (_21 > 0) 
    goto _jump1779;
    fail_assertion("non-positive loop bound");
    _jump1779:;
    // Computing bound for k
    int64_t _44 = _22 / _22;
    _43.d1 = _44;
    if (_44 > 0) 
    goto _jump1780;
    fail_assertion("non-positive loop bound");
    _jump1780:;
    // Computing bound for l
    int64_t _45;
    // Computing bound for j
    int64_t _46 = 404;
    if (_46 > 0) 
    goto _jump1781;
    fail_assertion("non-positive loop bound");
    _jump1781:;
    // Computing bound for k
    int64_t _47 = 738;
    if (_47 > 0) 
    goto _jump1782;
    fail_assertion("non-positive loop bound");
    _jump1782:;
    // Computing bound for l
    int64_t _48 = 670;
    if (_48 > 0) 
    goto _jump1783;
    fail_assertion("non-positive loop bound");
    _jump1783:;
    _45 = 0;
    int64_t _49 = 0; // l
    int64_t _50 = 0; // k
    int64_t _51 = 0; // j
    _jump1784:; // Begin body of loop
    int64_t _52 = 315;
    int64_t _53 = _51 / _52;
    _45 += _53;
    _49++;
    if (_49 < _48)
    goto _jump1784;
    _49 = 0;
    _50++;
    if (_50 < _47)
    goto _jump1784;
    _50 = 0;
    _51++;
    if (_51 < _46)
    goto _jump1784;
    // End body of loop
    _43.d2 = _45;
    if (_45 > 0) 
    goto _jump1785;
    fail_assertion("non-positive loop bound");
    _jump1785:;
    // Computing total size of heap memory to allocate
    int64_t _54 = 1;
    _54 *= _21;
    _54 *= _44;
    _54 *= _45;
    _54 *= sizeof(int64_t);
    _43.data = jpl_alloc(_54);
    int64_t _55 = 0; // l
    int64_t _56 = 0; // k
    int64_t _57 = 0; // j
    _jump1786:; // Begin body of loop
    int64_t _58 = 0;
    _58 *= _43.d0;
    _58 += _57;
    _58 *= _43.d1;
    _58 += _56;
    _58 *= _43.d2;
    _58 += _55;
    _43.data[_58] = _22;
    _55++;
    if (_55 < _45)
    goto _jump1786;
    _55 = 0;
    _56++;
    if (_56 < _44)
    goto _jump1786;
    _56 = 0;
    _57++;
    if (_57 < _21)
    goto _jump1786;
    // End body of loop
    _31 = _43;
    _jump1778:;
    int64_t _59 = 0;
    _59 *= _0.d0;
    _59 += _22;
    _59 *= _0.d1;
    _59 += _21;
    _0.data[_59] = _31;
    _21++;
    if (_21 < _17)
    goto _jump1763;
    _21 = 0;
    _22++;
    if (_22 < _3)
    goto _jump1763;
    // End body of loop
    _a1_int64_t _60;
    // Computing bound for h
    int64_t _61;
    // Computing bound for h
    int64_t _62;
    // Computing bound for h
    int64_t _63 = 921;
    if (_63 > 0) 
    goto _jump1787;
    fail_assertion("non-positive loop bound");
    _jump1787:;
    _62 = 0;
    int64_t _64 = 0; // h
    _jump1788:; // Begin body of loop
    int64_t _65 = 260;
    _62 += _65;
    _64++;
    if (_64 < _63)
    goto _jump1788;
    // End body of loop
    if (_62 > 0) 
    goto _jump1789;
    fail_assertion("non-positive loop bound");
    _jump1789:;
    _61 = 0;
    int64_t _66 = 0; // h
    _jump1790:; // Begin body of loop
    int64_t _67 = -_66;
    _61 += _67;
    _66++;
    if (_66 < _62)
    goto _jump1790;
    // End body of loop
    _60.d0 = _61;
    if (_61 > 0) 
    goto _jump1791;
    fail_assertion("non-positive loop bound");
    _jump1791:;
    // Computing total size of heap memory to allocate
    int64_t _68 = 1;
    _68 *= _61;
    _68 *= sizeof(int64_t);
    _60.data = jpl_alloc(_68);
    int64_t _69 = 0; // h
    _jump1792:; // Begin body of loop
    int64_t _70 = 17;
    int64_t _71 = 0;
    _71 *= _60.d0;
    _71 += _69;
    _60.data[_71] = _70;
    _69++;
    if (_69 < _61)
    goto _jump1792;
    // End body of loop
    int64_t _72 = 448;
    if (_72 >= 0)
    goto _jump1793;
    fail_assertion("negative array index");
    _jump1793:;
    if (_72 < _60.d0)
    goto _jump1794;
    fail_assertion("index too large");
    _jump1794:;
    int64_t _73 = 0;
    _73 *= _60.d0;
    _73 += _72;
    int64_t _74 = _60.data[_73];
    _a1_int64_t _75;
    // Computing bound for h
    int64_t _76 = 255;
    int64_t _77 = 638;
    int64_t _78 = _76 - _77;
    _75.d0 = _78;
    if (_78 > 0) 
    goto _jump1795;
    fail_assertion("non-positive loop bound");
    _jump1795:;
    // Computing total size of heap memory to allocate
    int64_t _79 = 1;
    _79 *= _78;
    _79 *= sizeof(int64_t);
    _75.data = jpl_alloc(_79);
    int64_t _80 = 0; // h
    _jump1796:; // Begin body of loop
    int64_t _81 = 58;
    int64_t _82 = -_81;
    int64_t _83 = 0;
    _83 *= _75.d0;
    _83 += _80;
    _75.data[_83] = _82;
    _80++;
    if (_80 < _78)
    goto _jump1796;
    // End body of loop
    int64_t _84 = 999;
    int64_t _85 = 861;
    int64_t _86 = _84 - _85;
    if (_86 >= 0)
    goto _jump1797;
    fail_assertion("negative array index");
    _jump1797:;
    if (_86 < _75.d0)
    goto _jump1798;
    fail_assertion("index too large");
    _jump1798:;
    int64_t _87 = 0;
    _87 *= _75.d0;
    _87 += _86;
    int64_t _88 = _75.data[_87];
    int64_t _89 = _74 % _88;
    int64_t _90;
    // Computing bound for h
    int64_t _91;
    // Computing bound for h
    bool _92 = false;
    int64_t _93;
    if (!_92)
    goto _jump1799;
    int64_t _94 = 275;
    _93 = _94;
    goto _jump1800;
    _jump1799:;
    int64_t _95 = 800;
    _93 = _95;
    _jump1800:;
    if (_93 > 0) 
    goto _jump1801;
    fail_assertion("non-positive loop bound");
    _jump1801:;
    // Computing bound for i
    int64_t _96;
    // Computing bound for h
    int64_t _97 = 495;
    if (_97 > 0) 
    goto _jump1802;
    fail_assertion("non-positive loop bound");
    _jump1802:;
    _96 = 0;
    int64_t _98 = 0; // h
    _jump1803:; // Begin body of loop
    _96 += _98;
    _98++;
    if (_98 < _97)
    goto _jump1803;
    // End body of loop
    if (_96 > 0) 
    goto _jump1804;
    fail_assertion("non-positive loop bound");
    _jump1804:;
    // Computing bound for j
    bool _99 = false;
    int64_t _100;
    if (!_99)
    goto _jump1805;
    int64_t _101 = 616;
    _100 = _101;
    goto _jump1806;
    _jump1805:;
    int64_t _102 = 663;
    _100 = _102;
    _jump1806:;
    if (_100 > 0) 
    goto _jump1807;
    fail_assertion("non-positive loop bound");
    _jump1807:;
    _91 = 0;
    int64_t _103 = 0; // j
    int64_t _104 = 0; // i
    int64_t _105 = 0; // h
    _jump1808:; // Begin body of loop
    int64_t _106 = 340;
    _91 += _106;
    _103++;
    if (_103 < _100)
    goto _jump1808;
    _103 = 0;
    _104++;
    if (_104 < _96)
    goto _jump1808;
    _104 = 0;
    _105++;
    if (_105 < _93)
    goto _jump1808;
    // End body of loop
    int64_t _107 = -_91;
    int64_t _108 = -_107;
    if (_108 > 0) 
    goto _jump1809;
    fail_assertion("non-positive loop bound");
    _jump1809:;
    // Computing bound for i
    int64_t _109;
    // Computing bound for h
    int64_t _110 = 923;
    int64_t _111 = -_110;
    if (_111 > 0) 
    goto _jump1810;
    fail_assertion("non-positive loop bound");
    _jump1810:;
    // Computing bound for i
    int64_t _112 = 355;
    if (_112 > 0) 
    goto _jump1811;
    fail_assertion("non-positive loop bound");
    _jump1811:;
    // Computing bound for j
    int64_t _113;
    // Computing bound for h
    int64_t _114 = 899;
    if (_114 > 0) 
    goto _jump1812;
    fail_assertion("non-positive loop bound");
    _jump1812:;
    // Computing bound for i
    int64_t _115 = 37;
    if (_115 > 0) 
    goto _jump1813;
    fail_assertion("non-positive loop bound");
    _jump1813:;
    _113 = 0;
    int64_t _116 = 0; // i
    int64_t _117 = 0; // h
    _jump1814:; // Begin body of loop
    int64_t _118 = 371;
    _113 += _118;
    _116++;
    if (_116 < _115)
    goto _jump1814;
    _116 = 0;
    _117++;
    if (_117 < _114)
    goto _jump1814;
    // End body of loop
    if (_113 > 0) 
    goto _jump1815;
    fail_assertion("non-positive loop bound");
    _jump1815:;
    _109 = 0;
    int64_t _119 = 0; // j
    int64_t _120 = 0; // i
    int64_t _121 = 0; // h
    _jump1816:; // Begin body of loop
    double _122 = 85.0;
    double _123 = 69.0;
    bool _124 = _122 <= _123;
    void_t _125;
    if (!f)
    goto _jump1817;
    _125 = g;
    goto _jump1818;
    _jump1817:;
    _125 = g;
    _jump1818:;
    bool _126 = e(_124, _125);
    int64_t _127;
    if (!_126)
    goto _jump1819;
    int64_t _128 = -_120;
    _127 = _128;
    goto _jump1820;
    _jump1819:;
    bool _129 = false;
    bool _130 = !_129;
    int64_t _131;
    if (!_130)
    goto _jump1821;
    _131 = _119;
    goto _jump1822;
    _jump1821:;
    _131 = _120;
    _jump1822:;
    _127 = _131;
    _jump1820:;
    _109 += _127;
    _119++;
    if (_119 < _113)
    goto _jump1816;
    _119 = 0;
    _120++;
    if (_120 < _112)
    goto _jump1816;
    _120 = 0;
    _121++;
    if (_121 < _111)
    goto _jump1816;
    // End body of loop
    if (_109 > 0) 
    goto _jump1823;
    fail_assertion("non-positive loop bound");
    _jump1823:;
    // Computing bound for j
    bool _132 = false;
    bool _133 = e(_132, g);
    int64_t _134;
    if (!_133)
    goto _jump1824;
    int64_t _135;
    if (!f)
    goto _jump1825;
    int64_t _136 = 289;
    int64_t _137 = -_136;
    _135 = _137;
    goto _jump1826;
    _jump1825:;
    int64_t _138 = 918;
    _135 = _138;
    _jump1826:;
    int64_t _139 = 543;
    int64_t _140 = 389;
    int64_t _141 = -_140;
    int64_t _142 = _139 % _141;
    int64_t _143 = _135 - _142;
    _134 = _143;
    goto _jump1827;
    _jump1824:;
    int64_t _144 = 76;
    int64_t _145 = 376;
    int64_t _146;
    // Computing bound for h
    int64_t _147 = 896;
    if (_147 > 0) 
    goto _jump1828;
    fail_assertion("non-positive loop bound");
    _jump1828:;
    _146 = 0;
    int64_t _148 = 0; // h
    _jump1829:; // Begin body of loop
    _146 += _148;
    _148++;
    if (_148 < _147)
    goto _jump1829;
    // End body of loop
    _a1_int64_t _149;
    _149.d0 = 3;
    _149.data = jpl_alloc(sizeof(int64_t) * 3);
    _149.data[0] = _144;
    _149.data[1] = _145;
    _149.data[2] = _146;
    int64_t _150 = 895;
    if (_150 >= 0)
    goto _jump1830;
    fail_assertion("negative array index");
    _jump1830:;
    if (_150 < _149.d0)
    goto _jump1831;
    fail_assertion("index too large");
    _jump1831:;
    int64_t _151 = 0;
    _151 *= _149.d0;
    _151 += _150;
    int64_t _152 = _149.data[_151];
    _134 = _152;
    _jump1827:;
    if (_134 > 0) 
    goto _jump1832;
    fail_assertion("non-positive loop bound");
    _jump1832:;
    _90 = 0;
    int64_t _153 = 0; // j
    int64_t _154 = 0; // i
    int64_t _155 = 0; // h
    _jump1833:; // Begin body of loop
    int64_t _156 = 744;
    _90 += _156;
    _153++;
    if (_153 < _134)
    goto _jump1833;
    _153 = 0;
    _154++;
    if (_154 < _109)
    goto _jump1833;
    _154 = 0;
    _155++;
    if (_155 < _108)
    goto _jump1833;
    // End body of loop
    if (_89 >= 0)
    goto _jump1834;
    fail_assertion("negative array index");
    _jump1834:;
    if (_89 < _0.d0)
    goto _jump1835;
    fail_assertion("index too large");
    _jump1835:;
    if (_90 >= 0)
    goto _jump1836;
    fail_assertion("negative array index");
    _jump1836:;
    if (_90 < _0.d1)
    goto _jump1837;
    fail_assertion("index too large");
    _jump1837:;
    int64_t _157 = 0;
    _157 *= _0.d0;
    _157 += _89;
    _157 *= _0.d1;
    _157 += _90;
    _a3_int64_t _158 = _0.data[_157];
    double _159;
    // Computing bound for h
    int64_t _160;
    // Computing bound for h
    int64_t _161 = 603;
    if (_161 > 0) 
    goto _jump1838;
    fail_assertion("non-positive loop bound");
    _jump1838:;
    // Computing bound for i
    int64_t _162;
    // Computing bound for h
    bool _163 = false;
    bool _164 = !_163;
    int64_t _165;
    if (!_164)
    goto _jump1839;
    int64_t _166 = 38;
    _165 = _166;
    goto _jump1840;
    _jump1839:;
    int64_t _167 = 146;
    int64_t _168 = -_167;
    _165 = _168;
    _jump1840:;
    int64_t _169 = 274;
    int64_t _170 = 881;
    int64_t _171 = _169 - _170;
    int64_t _172 = 857;
    int64_t _173 = -_172;
    int64_t _174 = _171 - _173;
    int64_t _175 = _165 / _174;
    if (_175 > 0) 
    goto _jump1841;
    fail_assertion("non-positive loop bound");
    _jump1841:;
    // Computing bound for i
    int64_t _176 = 178;
    int64_t _177 = -_176;
    int64_t _178 = 21;
    int64_t _179 = 942;
    int64_t _180 = 571;
    int64_t _181 = _179 - _180;
    int64_t _182 = _178 * _181;
    int64_t _183 = _177 * _182;
    if (_183 > 0) 
    goto _jump1842;
    fail_assertion("non-positive loop bound");
    _jump1842:;
    // Computing bound for j
    int64_t _184 = 435;
    if (_184 > 0) 
    goto _jump1843;
    fail_assertion("non-positive loop bound");
    _jump1843:;
    _162 = 0;
    int64_t _185 = 0; // j
    int64_t _186 = 0; // i
    int64_t _187 = 0; // h
    _jump1844:; // Begin body of loop
    _a3_int64_t _188;
    // Computing bound for k
    int64_t _189;
    // Computing bound for k
    int64_t _190 = 810;
    if (_190 > 0) 
    goto _jump1845;
    fail_assertion("non-positive loop bound");
    _jump1845:;
    // Computing bound for l
    if (_185 > 0) 
    goto _jump1846;
    fail_assertion("non-positive loop bound");
    _jump1846:;
    _189 = 0;
    int64_t _191 = 0; // l
    int64_t _192 = 0; // k
    _jump1847:; // Begin body of loop
    _189 += _185;
    _191++;
    if (_191 < _185)
    goto _jump1847;
    _191 = 0;
    _192++;
    if (_192 < _190)
    goto _jump1847;
    // End body of loop
    _188.d0 = _189;
    if (_189 > 0) 
    goto _jump1848;
    fail_assertion("non-positive loop bound");
    _jump1848:;
    // Computing bound for l
    int64_t _193 = 784;
    _188.d1 = _193;
    if (_193 > 0) 
    goto _jump1849;
    fail_assertion("non-positive loop bound");
    _jump1849:;
    // Computing bound for m
    _188.d2 = _187;
    if (_187 > 0) 
    goto _jump1850;
    fail_assertion("non-positive loop bound");
    _jump1850:;
    // Computing total size of heap memory to allocate
    int64_t _194 = 1;
    _194 *= _189;
    _194 *= _193;
    _194 *= _187;
    _194 *= sizeof(int64_t);
    _188.data = jpl_alloc(_194);
    int64_t _195 = 0; // m
    int64_t _196 = 0; // l
    int64_t _197 = 0; // k
    _jump1851:; // Begin body of loop
    int64_t _198 = 0;
    _198 *= _188.d0;
    _198 += _197;
    _198 *= _188.d1;
    _198 += _196;
    _198 *= _188.d2;
    _198 += _195;
    _188.data[_198] = _186;
    _195++;
    if (_195 < _187)
    goto _jump1851;
    _195 = 0;
    _196++;
    if (_196 < _193)
    goto _jump1851;
    _196 = 0;
    _197++;
    if (_197 < _189)
    goto _jump1851;
    // End body of loop
    int64_t _199;
    // Computing bound for k
    if (_186 > 0) 
    goto _jump1852;
    fail_assertion("non-positive loop bound");
    _jump1852:;
    // Computing bound for l
    int64_t _200 = 82;
    if (_200 > 0) 
    goto _jump1853;
    fail_assertion("non-positive loop bound");
    _jump1853:;
    _199 = 0;
    int64_t _201 = 0; // l
    int64_t _202 = 0; // k
    _jump1854:; // Begin body of loop
    _199 += _202;
    _201++;
    if (_201 < _200)
    goto _jump1854;
    _201 = 0;
    _202++;
    if (_202 < _186)
    goto _jump1854;
    // End body of loop
    int64_t _203 = _185 + _186;
    if (_199 >= 0)
    goto _jump1855;
    fail_assertion("negative array index");
    _jump1855:;
    if (_199 < _188.d0)
    goto _jump1856;
    fail_assertion("index too large");
    _jump1856:;
    if (_186 >= 0)
    goto _jump1857;
    fail_assertion("negative array index");
    _jump1857:;
    if (_186 < _188.d1)
    goto _jump1858;
    fail_assertion("index too large");
    _jump1858:;
    if (_203 >= 0)
    goto _jump1859;
    fail_assertion("negative array index");
    _jump1859:;
    if (_203 < _188.d2)
    goto _jump1860;
    fail_assertion("index too large");
    _jump1860:;
    int64_t _204 = 0;
    _204 *= _188.d0;
    _204 += _199;
    _204 *= _188.d1;
    _204 += _186;
    _204 *= _188.d2;
    _204 += _203;
    int64_t _205 = _188.data[_204];
    _162 += _205;
    _185++;
    if (_185 < _184)
    goto _jump1844;
    _185 = 0;
    _186++;
    if (_186 < _183)
    goto _jump1844;
    _186 = 0;
    _187++;
    if (_187 < _175)
    goto _jump1844;
    // End body of loop
    if (_162 > 0) 
    goto _jump1861;
    fail_assertion("non-positive loop bound");
    _jump1861:;
    // Computing bound for j
    _a3_int64_t _206;
    // Computing bound for h
    int64_t _207;
    if (!f)
    goto _jump1862;
    int64_t _208 = 439;
    _207 = _208;
    goto _jump1863;
    _jump1862:;
    int64_t _209 = 979;
    _207 = _209;
    _jump1863:;
    int64_t _210 = -_207;
    _206.d0 = _210;
    if (_210 > 0) 
    goto _jump1864;
    fail_assertion("non-positive loop bound");
    _jump1864:;
    // Computing bound for i
    int64_t _211 = 674;
    int64_t _212 = -_211;
    _206.d1 = _212;
    if (_212 > 0) 
    goto _jump1865;
    fail_assertion("non-positive loop bound");
    _jump1865:;
    // Computing bound for j
    int64_t _213 = 138;
    _206.d2 = _213;
    if (_213 > 0) 
    goto _jump1866;
    fail_assertion("non-positive loop bound");
    _jump1866:;
    // Computing total size of heap memory to allocate
    int64_t _214 = 1;
    _214 *= _210;
    _214 *= _212;
    _214 *= _213;
    _214 *= sizeof(int64_t);
    _206.data = jpl_alloc(_214);
    int64_t _215 = 0; // j
    int64_t _216 = 0; // i
    int64_t _217 = 0; // h
    _jump1867:; // Begin body of loop
    int64_t _218 = 0;
    _218 *= _206.d0;
    _218 += _217;
    _218 *= _206.d1;
    _218 += _216;
    _218 *= _206.d2;
    _218 += _215;
    _206.data[_218] = _215;
    _215++;
    if (_215 < _213)
    goto _jump1867;
    _215 = 0;
    _216++;
    if (_216 < _212)
    goto _jump1867;
    _216 = 0;
    _217++;
    if (_217 < _210)
    goto _jump1867;
    // End body of loop
    int64_t _219 = 196;
    int64_t _220;
    if (!f)
    goto _jump1868;
    int64_t _221 = 582;
    _220 = _221;
    goto _jump1869;
    _jump1868:;
    int64_t _222 = 170;
    _220 = _222;
    _jump1869:;
    int64_t _223 = _219 - _220;
    int64_t _224 = 531;
    int64_t _225 = -_224;
    int64_t _226 = _223 * _225;
    int64_t _227;
    // Computing bound for h
    int64_t _228 = 66;
    if (_228 > 0) 
    goto _jump1870;
    fail_assertion("non-positive loop bound");
    _jump1870:;
    _227 = 0;
    int64_t _229 = 0; // h
    _jump1871:; // Begin body of loop
    _227 += _229;
    _229++;
    if (_229 < _228)
    goto _jump1871;
    // End body of loop
    bool _230 = true;
    int64_t _231;
    if (!_230)
    goto _jump1872;
    int64_t _232 = 288;
    int64_t _233 = -_232;
    _231 = _233;
    goto _jump1873;
    _jump1872:;
    int64_t _234;
    // Computing bound for h
    int64_t _235 = 898;
    if (_235 > 0) 
    goto _jump1874;
    fail_assertion("non-positive loop bound");
    _jump1874:;
    // Computing bound for i
    int64_t _236 = 651;
    if (_236 > 0) 
    goto _jump1875;
    fail_assertion("non-positive loop bound");
    _jump1875:;
    // Computing bound for j
    int64_t _237 = 466;
    if (_237 > 0) 
    goto _jump1876;
    fail_assertion("non-positive loop bound");
    _jump1876:;
    _234 = 0;
    int64_t _238 = 0; // j
    int64_t _239 = 0; // i
    int64_t _240 = 0; // h
    _jump1877:; // Begin body of loop
    _234 += _239;
    _238++;
    if (_238 < _237)
    goto _jump1877;
    _238 = 0;
    _239++;
    if (_239 < _236)
    goto _jump1877;
    _239 = 0;
    _240++;
    if (_240 < _235)
    goto _jump1877;
    // End body of loop
    _231 = _234;
    _jump1873:;
    int64_t _241 = _227 * _231;
    int64_t _242;
    // Computing bound for h
    int64_t _243 = 633;
    if (_243 > 0) 
    goto _jump1878;
    fail_assertion("non-positive loop bound");
    _jump1878:;
    _242 = 0;
    int64_t _244 = 0; // h
    _jump1879:; // Begin body of loop
    int64_t _245 = 301;
    _242 += _245;
    _244++;
    if (_244 < _243)
    goto _jump1879;
    // End body of loop
    if (_226 >= 0)
    goto _jump1880;
    fail_assertion("negative array index");
    _jump1880:;
    if (_226 < _206.d0)
    goto _jump1881;
    fail_assertion("index too large");
    _jump1881:;
    if (_241 >= 0)
    goto _jump1882;
    fail_assertion("negative array index");
    _jump1882:;
    if (_241 < _206.d1)
    goto _jump1883;
    fail_assertion("index too large");
    _jump1883:;
    if (_242 >= 0)
    goto _jump1884;
    fail_assertion("negative array index");
    _jump1884:;
    if (_242 < _206.d2)
    goto _jump1885;
    fail_assertion("index too large");
    _jump1885:;
    int64_t _246 = 0;
    _246 *= _206.d0;
    _246 += _226;
    _246 *= _206.d1;
    _246 += _241;
    _246 *= _206.d2;
    _246 += _242;
    int64_t _247 = _206.data[_246];
    if (_247 > 0) 
    goto _jump1886;
    fail_assertion("non-positive loop bound");
    _jump1886:;
    _160 = 0;
    int64_t _248 = 0; // j
    int64_t _249 = 0; // i
    int64_t _250 = 0; // h
    _jump1887:; // Begin body of loop
    int64_t _251 = 97;
    bool _252 = _251 > _250;
    bool _253 = false;
    void_t _254;
    if (!_253)
    goto _jump1888;
    _254 = g;
    goto _jump1889;
    _jump1888:;
    _254 = g;
    _jump1889:;
    bool _255 = e(_252, _254);
    bool _256 = true;
    bool _257 = _255 == _256;
    int64_t _258;
    if (!_257)
    goto _jump1890;
    _258 = _249;
    goto _jump1891;
    _jump1890:;
    int64_t _259 = -_249;
    int64_t _260 = _248 + _259;
    _258 = _260;
    _jump1891:;
    _160 += _258;
    _248++;
    if (_248 < _247)
    goto _jump1887;
    _248 = 0;
    _249++;
    if (_249 < _162)
    goto _jump1887;
    _249 = 0;
    _250++;
    if (_250 < _161)
    goto _jump1887;
    // End body of loop
    if (_160 > 0) 
    goto _jump1892;
    fail_assertion("non-positive loop bound");
    _jump1892:;
    // Computing bound for i
    int64_t _261;
    // Computing bound for h
    int64_t _262 = 501;
    int64_t _263 = -_262;
    int64_t _264 = 816;
    int64_t _265 = 409;
    int64_t _266 = _264 * _265;
    int64_t _267 = _263 / _266;
    int64_t _268 = -_267;
    int64_t _269 = -_268;
    if (_269 > 0) 
    goto _jump1893;
    fail_assertion("non-positive loop bound");
    _jump1893:;
    // Computing bound for i
    int64_t _270 = 953;
    if (_270 > 0) 
    goto _jump1894;
    fail_assertion("non-positive loop bound");
    _jump1894:;
    _261 = 0;
    int64_t _271 = 0; // i
    int64_t _272 = 0; // h
    _jump1895:; // Begin body of loop
    bool _273 = true;
    bool _274 = !_273;
    bool _275;
    if (!_274)
    goto _jump1896;
    bool _276 = true;
    _275 = _276;
    goto _jump1897;
    _jump1896:;
    double _277 = 99.0;
    double _278 = -_277;
    double _279;
    // Computing bound for j
    if (_271 > 0) 
    goto _jump1898;
    fail_assertion("non-positive loop bound");
    _jump1898:;
    // Computing bound for k
    if (_271 > 0) 
    goto _jump1899;
    fail_assertion("non-positive loop bound");
    _jump1899:;
    _279 = 0;
    int64_t _280 = 0; // k
    int64_t _281 = 0; // j
    _jump1900:; // Begin body of loop
    _279 += c;
    _280++;
    if (_280 < _271)
    goto _jump1900;
    _280 = 0;
    _281++;
    if (_281 < _271)
    goto _jump1900;
    // End body of loop
    bool _282 = _278 == _279;
    _275 = _282;
    _jump1897:;
    int64_t _283;
    if (!_275)
    goto _jump1901;
    _283 = _271;
    goto _jump1902;
    _jump1901:;
    int64_t _284 = 974;
    _283 = _284;
    _jump1902:;
    _261 += _283;
    _271++;
    if (_271 < _270)
    goto _jump1895;
    _271 = 0;
    _272++;
    if (_272 < _269)
    goto _jump1895;
    // End body of loop
    if (_261 > 0) 
    goto _jump1903;
    fail_assertion("non-positive loop bound");
    _jump1903:;
    _159 = 0;
    int64_t _285 = 0; // i
    int64_t _286 = 0; // h
    _jump1904:; // Begin body of loop
    double _287 = 72.0;
    _159 += _287;
    _285++;
    if (_285 < _261)
    goto _jump1904;
    _285 = 0;
    _286++;
    if (_286 < _160)
    goto _jump1904;
    // End body of loop
    bool _288 = a(_158, _159);
    double _289;
    // Computing bound for i
    int64_t _290;
    // Computing bound for i
    int64_t _291 = 346;
    if (_291 > 0) 
    goto _jump1905;
    fail_assertion("non-positive loop bound");
    _jump1905:;
    // Computing bound for j
    int64_t _292;
    // Computing bound for i
    bool _293 = true;
    int64_t _294;
    if (!_293)
    goto _jump1906;
    int64_t _295 = 965;
    _294 = _295;
    goto _jump1907;
    _jump1906:;
    int64_t _296 = 850;
    _294 = _296;
    _jump1907:;
    if (_294 > 0) 
    goto _jump1908;
    fail_assertion("non-positive loop bound");
    _jump1908:;
    // Computing bound for j
    int64_t _297 = 809;
    int64_t _298 = 375;
    int64_t _299 = _297 * _298;
    if (_299 > 0) 
    goto _jump1909;
    fail_assertion("non-positive loop bound");
    _jump1909:;
    _292 = 0;
    int64_t _300 = 0; // j
    int64_t _301 = 0; // i
    _jump1910:; // Begin body of loop
    _292 += _301;
    _300++;
    if (_300 < _299)
    goto _jump1910;
    _300 = 0;
    _301++;
    if (_301 < _294)
    goto _jump1910;
    // End body of loop
    int64_t _302;
    if (!f)
    goto _jump1911;
    int64_t _303 = 815;
    _302 = _303;
    goto _jump1912;
    _jump1911:;
    int64_t _304;
    if (!_288)
    goto _jump1913;
    int64_t _305 = 982;
    _304 = _305;
    goto _jump1914;
    _jump1913:;
    int64_t _306 = 224;
    _304 = _306;
    _jump1914:;
    _302 = _304;
    _jump1912:;
    int64_t _307 = _292 + _302;
    if (_307 > 0) 
    goto _jump1915;
    fail_assertion("non-positive loop bound");
    _jump1915:;
    _290 = 0;
    int64_t _308 = 0; // j
    int64_t _309 = 0; // i
    _jump1916:; // Begin body of loop
    _290 += _308;
    _308++;
    if (_308 < _307)
    goto _jump1916;
    _308 = 0;
    _309++;
    if (_309 < _291)
    goto _jump1916;
    // End body of loop
    if (_290 > 0) 
    goto _jump1917;
    fail_assertion("non-positive loop bound");
    _jump1917:;
    // Computing bound for j
    int64_t _310;
    // Computing bound for i
    bool _312 = false;
    bool _311 = _312;
    if (0 == _312)
    goto _jump1918;
    _311 = _288;
    _jump1918:;
    int64_t _313;
    if (!_311)
    goto _jump1919;
    int64_t _314 = 495;
    _313 = _314;
    goto _jump1920;
    _jump1919:;
    int64_t _315;
    if (!_288)
    goto _jump1921;
    int64_t _316 = 989;
    _315 = _316;
    goto _jump1922;
    _jump1921:;
    int64_t _317 = 231;
    _315 = _317;
    _jump1922:;
    _313 = _315;
    _jump1920:;
    if (_313 > 0) 
    goto _jump1923;
    fail_assertion("non-positive loop bound");
    _jump1923:;
    // Computing bound for j
    int64_t _318;
    // Computing bound for i
    int64_t _319 = 896;
    if (_319 > 0) 
    goto _jump1924;
    fail_assertion("non-positive loop bound");
    _jump1924:;
    _318 = 0;
    int64_t _320 = 0; // i
    _jump1925:; // Begin body of loop
    int64_t _321 = 256;
    int64_t _322 = -_321;
    _318 += _322;
    _320++;
    if (_320 < _319)
    goto _jump1925;
    // End body of loop
    if (_318 > 0) 
    goto _jump1926;
    fail_assertion("non-positive loop bound");
    _jump1926:;
    _310 = 0;
    int64_t _323 = 0; // j
    int64_t _324 = 0; // i
    _jump1927:; // Begin body of loop
    int64_t _325;
    if (!_288)
    goto _jump1928;
    int64_t _326 = 19;
    _325 = _326;
    goto _jump1929;
    _jump1928:;
    int64_t _327 = 80;
    int64_t _328 = -_327;
    _325 = _328;
    _jump1929:;
    _310 += _325;
    _323++;
    if (_323 < _318)
    goto _jump1927;
    _323 = 0;
    _324++;
    if (_324 < _313)
    goto _jump1927;
    // End body of loop
    int64_t _329 = -_310;
    if (_329 > 0) 
    goto _jump1930;
    fail_assertion("non-positive loop bound");
    _jump1930:;
    _289 = 0;
    int64_t _330 = 0; // j
    int64_t _331 = 0; // i
    _jump1931:; // Begin body of loop
    double _332;
    // Computing bound for k
    bool _333 = false;
    int64_t _334;
    if (!_333)
    goto _jump1932;
    _334 = _331;
    goto _jump1933;
    _jump1932:;
    _334 = _330;
    _jump1933:;
    if (_334 > 0) 
    goto _jump1934;
    fail_assertion("non-positive loop bound");
    _jump1934:;
    // Computing bound for l
    int64_t _335;
    // Computing bound for k
    int64_t _336 = 376;
    _a1_int64_t _337;
    _337.d0 = 1;
    _337.data = jpl_alloc(sizeof(int64_t) * 1);
    _337.data[0] = _336;
    if (_330 >= 0)
    goto _jump1935;
    fail_assertion("negative array index");
    _jump1935:;
    if (_330 < _337.d0)
    goto _jump1936;
    fail_assertion("index too large");
    _jump1936:;
    int64_t _338 = 0;
    _338 *= _337.d0;
    _338 += _330;
    int64_t _339 = _337.data[_338];
    if (_339 > 0) 
    goto _jump1937;
    fail_assertion("non-positive loop bound");
    _jump1937:;
    _335 = 0;
    int64_t _340 = 0; // k
    _jump1938:; // Begin body of loop
    int64_t _341 = 803;
    int64_t _342 = _341 % _330;
    _335 += _342;
    _340++;
    if (_340 < _339)
    goto _jump1938;
    // End body of loop
    if (_335 > 0) 
    goto _jump1939;
    fail_assertion("non-positive loop bound");
    _jump1939:;
    _332 = 0;
    int64_t _343 = 0; // l
    int64_t _344 = 0; // k
    _jump1940:; // Begin body of loop
    _a2_double _345;
    // Computing bound for m
    int64_t _346 = 832;
    int64_t _347 = -_346;
    _345.d0 = _347;
    if (_347 > 0) 
    goto _jump1941;
    fail_assertion("non-positive loop bound");
    _jump1941:;
    // Computing bound for n
    int64_t _348;
    // Computing bound for m
    if (_330 > 0) 
    goto _jump1942;
    fail_assertion("non-positive loop bound");
    _jump1942:;
    _348 = 0;
    int64_t _349 = 0; // m
    _jump1943:; // Begin body of loop
    _348 += _343;
    _349++;
    if (_349 < _330)
    goto _jump1943;
    // End body of loop
    _345.d1 = _348;
    if (_348 > 0) 
    goto _jump1944;
    fail_assertion("non-positive loop bound");
    _jump1944:;
    // Computing total size of heap memory to allocate
    int64_t _350 = 1;
    _350 *= _347;
    _350 *= _348;
    _350 *= sizeof(double);
    _345.data = jpl_alloc(_350);
    int64_t _351 = 0; // n
    int64_t _352 = 0; // m
    _jump1945:; // Begin body of loop
    double _353 = 42.0;
    int64_t _354 = 0;
    _354 *= _345.d0;
    _354 += _352;
    _354 *= _345.d1;
    _354 += _351;
    _345.data[_354] = _353;
    _351++;
    if (_351 < _348)
    goto _jump1945;
    _351 = 0;
    _352++;
    if (_352 < _347)
    goto _jump1945;
    // End body of loop
    if (_344 >= 0)
    goto _jump1946;
    fail_assertion("negative array index");
    _jump1946:;
    if (_344 < _345.d0)
    goto _jump1947;
    fail_assertion("index too large");
    _jump1947:;
    if (_330 >= 0)
    goto _jump1948;
    fail_assertion("negative array index");
    _jump1948:;
    if (_330 < _345.d1)
    goto _jump1949;
    fail_assertion("index too large");
    _jump1949:;
    int64_t _355 = 0;
    _355 *= _345.d0;
    _355 += _344;
    _355 *= _345.d1;
    _355 += _330;
    double _356 = _345.data[_355];
    _332 += _356;
    _343++;
    if (_343 < _335)
    goto _jump1940;
    _343 = 0;
    _344++;
    if (_344 < _334)
    goto _jump1940;
    // End body of loop
    _289 += _332;
    _330++;
    if (_330 < _329)
    goto _jump1931;
    _330 = 0;
    _331++;
    if (_331 < _290)
    goto _jump1931;
    // End body of loop
    double _357;
    // Computing bound for i
    double _358 = -c;
    double _359 = 87.0;
    double _360 = c + _359;
    double _361 = _358 * _360;
    double _362 = 59.0;
    bool _363 = _361 == _362;
    int64_t _364;
    if (!_363)
    goto _jump1950;
    int64_t _365 = 589;
    _364 = _365;
    goto _jump1951;
    _jump1950:;
    int64_t _366 = 875;
    int64_t _367 = -_366;
    _364 = _367;
    _jump1951:;
    if (_364 > 0) 
    goto _jump1952;
    fail_assertion("non-positive loop bound");
    _jump1952:;
    _357 = 0;
    int64_t _368 = 0; // i
    _jump1953:; // Begin body of loop
    double _369 = 5.0;
    _357 += _369;
    _368++;
    if (_368 < _364)
    goto _jump1953;
    // End body of loop
    double _370 = _289 * _357;
    bool _371 = _370 >= c;
    if (0 != _371)
    goto _jump1954;
    fail_assertion("i");
    _jump1954:;
    _a3_bool _372;
    if (!f)
    goto _jump1955;
    _a3_bool _373;
    if (!f)
    goto _jump1956;
    _a1__a3_bool _374;
    // Computing bound for i
    int64_t _375;
    if (!_288)
    goto _jump1957;
    bool _376 = false;
    int64_t _377;
    if (!_376)
    goto _jump1958;
    int64_t _378 = 991;
    _377 = _378;
    goto _jump1959;
    _jump1958:;
    int64_t _379 = 248;
    _377 = _379;
    _jump1959:;
    int64_t _380 = -_377;
    _375 = _380;
    goto _jump1960;
    _jump1957:;
    int64_t _381 = 837;
    int64_t _382 = 844;
    int64_t _383 = _381 * _382;
    int64_t _384 = 573;
    int64_t _385 = -_384;
    int64_t _386 = _383 + _385;
    _375 = _386;
    _jump1960:;
    _374.d0 = _375;
    if (_375 > 0) 
    goto _jump1961;
    fail_assertion("non-positive loop bound");
    _jump1961:;
    // Computing total size of heap memory to allocate
    int64_t _387 = 1;
    _387 *= _375;
    _387 *= sizeof(_a3_bool);
    _374.data = jpl_alloc(_387);
    int64_t _388 = 0; // i
    _jump1962:; // Begin body of loop
    _a3_bool _389;
    // Computing bound for j
    int64_t _390 = 66;
    int64_t _391 = 254;
    int64_t _392 = _390 + _391;
    _389.d0 = _392;
    if (_392 > 0) 
    goto _jump1963;
    fail_assertion("non-positive loop bound");
    _jump1963:;
    // Computing bound for k
    bool _393 = !_288;
    int64_t _394;
    if (!_393)
    goto _jump1964;
    int64_t _395 = -_388;
    _394 = _395;
    goto _jump1965;
    _jump1964:;
    int64_t _396 = 700;
    _394 = _396;
    _jump1965:;
    _389.d1 = _394;
    if (_394 > 0) 
    goto _jump1966;
    fail_assertion("non-positive loop bound");
    _jump1966:;
    // Computing bound for l
    int64_t _397;
    if (!_288)
    goto _jump1967;
    _397 = _388;
    goto _jump1968;
    _jump1967:;
    int64_t _398 = 401;
    _397 = _398;
    _jump1968:;
    _389.d2 = _397;
    if (_397 > 0) 
    goto _jump1969;
    fail_assertion("non-positive loop bound");
    _jump1969:;
    // Computing total size of heap memory to allocate
    int64_t _399 = 1;
    _399 *= _392;
    _399 *= _394;
    _399 *= _397;
    _399 *= sizeof(bool);
    _389.data = jpl_alloc(_399);
    int64_t _400 = 0; // l
    int64_t _401 = 0; // k
    int64_t _402 = 0; // j
    _jump1970:; // Begin body of loop
    bool _403 = true;
    bool _404 = !_403;
    bool _405 = !_404;
    int64_t _406 = 0;
    _406 *= _389.d0;
    _406 += _402;
    _406 *= _389.d1;
    _406 += _401;
    _406 *= _389.d2;
    _406 += _400;
    _389.data[_406] = _405;
    _400++;
    if (_400 < _397)
    goto _jump1970;
    _400 = 0;
    _401++;
    if (_401 < _394)
    goto _jump1970;
    _401 = 0;
    _402++;
    if (_402 < _392)
    goto _jump1970;
    // End body of loop
    int64_t _407 = 0;
    _407 *= _374.d0;
    _407 += _388;
    _374.data[_407] = _389;
    _388++;
    if (_388 < _375)
    goto _jump1962;
    // End body of loop
    int64_t _408 = 909;
    if (_408 >= 0)
    goto _jump1971;
    fail_assertion("negative array index");
    _jump1971:;
    if (_408 < _374.d0)
    goto _jump1972;
    fail_assertion("index too large");
    _jump1972:;
    int64_t _409 = 0;
    _409 *= _374.d0;
    _409 += _408;
    _a3_bool _410 = _374.data[_409];
    _373 = _410;
    goto _jump1973;
    _jump1956:;
    _a2__a3_bool _411;
    // Computing bound for i
    int64_t _412;
    // Computing bound for i
    int64_t _413 = 481;
    _a1_int64_t _414;
    _414.d0 = 1;
    _414.data = jpl_alloc(sizeof(int64_t) * 1);
    _414.data[0] = _413;
    int64_t _415 = 576;
    int64_t _416 = 704;
    int64_t _417 = _415 / _416;
    if (_417 >= 0)
    goto _jump1974;
    fail_assertion("negative array index");
    _jump1974:;
    if (_417 < _414.d0)
    goto _jump1975;
    fail_assertion("index too large");
    _jump1975:;
    int64_t _418 = 0;
    _418 *= _414.d0;
    _418 += _417;
    int64_t _419 = _414.data[_418];
    if (_419 > 0) 
    goto _jump1976;
    fail_assertion("non-positive loop bound");
    _jump1976:;
    // Computing bound for j
    int64_t _420;
    // Computing bound for i
    int64_t _421 = 458;
    int64_t _422 = -_421;
    if (_422 > 0) 
    goto _jump1977;
    fail_assertion("non-positive loop bound");
    _jump1977:;
    // Computing bound for j
    int64_t _423 = 882;
    if (_423 > 0) 
    goto _jump1978;
    fail_assertion("non-positive loop bound");
    _jump1978:;
    // Computing bound for k
    int64_t _424 = 275;
    if (_424 > 0) 
    goto _jump1979;
    fail_assertion("non-positive loop bound");
    _jump1979:;
    _420 = 0;
    int64_t _425 = 0; // k
    int64_t _426 = 0; // j
    int64_t _427 = 0; // i
    _jump1980:; // Begin body of loop
    _420 += _427;
    _425++;
    if (_425 < _424)
    goto _jump1980;
    _425 = 0;
    _426++;
    if (_426 < _423)
    goto _jump1980;
    _426 = 0;
    _427++;
    if (_427 < _422)
    goto _jump1980;
    // End body of loop
    if (_420 > 0) 
    goto _jump1981;
    fail_assertion("non-positive loop bound");
    _jump1981:;
    _412 = 0;
    int64_t _428 = 0; // j
    int64_t _429 = 0; // i
    _jump1982:; // Begin body of loop
    bool _430;
    if (!_288)
    goto _jump1983;
    _430 = _288;
    goto _jump1984;
    _jump1983:;
    _430 = _288;
    _jump1984:;
    int64_t _431;
    if (!_430)
    goto _jump1985;
    int64_t _432 = _429 / _429;
    _431 = _432;
    goto _jump1986;
    _jump1985:;
    int64_t _433;
    // Computing bound for k
    int64_t _434 = 979;
    if (_434 > 0) 
    goto _jump1987;
    fail_assertion("non-positive loop bound");
    _jump1987:;
    _433 = 0;
    int64_t _435 = 0; // k
    _jump1988:; // Begin body of loop
    _433 += _428;
    _435++;
    if (_435 < _434)
    goto _jump1988;
    // End body of loop
    _431 = _433;
    _jump1986:;
    _412 += _431;
    _428++;
    if (_428 < _420)
    goto _jump1982;
    _428 = 0;
    _429++;
    if (_429 < _419)
    goto _jump1982;
    // End body of loop
    _411.d0 = _412;
    if (_412 > 0) 
    goto _jump1989;
    fail_assertion("non-positive loop bound");
    _jump1989:;
    // Computing bound for j
    int64_t _436 = 682;
    _411.d1 = _436;
    if (_436 > 0) 
    goto _jump1990;
    fail_assertion("non-positive loop bound");
    _jump1990:;
    // Computing total size of heap memory to allocate
    int64_t _437 = 1;
    _437 *= _412;
    _437 *= _436;
    _437 *= sizeof(_a3_bool);
    _411.data = jpl_alloc(_437);
    int64_t _438 = 0; // j
    int64_t _439 = 0; // i
    _jump1991:; // Begin body of loop
    double _440;
    // Computing bound for k
    if (_439 > 0) 
    goto _jump1992;
    fail_assertion("non-positive loop bound");
    _jump1992:;
    _440 = 0;
    int64_t _441 = 0; // k
    _jump1993:; // Begin body of loop
    _440 += c;
    _441++;
    if (_441 < _439)
    goto _jump1993;
    // End body of loop
    bool _442 = c != _440;
    _a3_bool _443;
    if (!_442)
    goto _jump1994;
    _a3_bool _444;
    // Computing bound for k
    int64_t _445 = -_439;
    _444.d0 = _445;
    if (_445 > 0) 
    goto _jump1995;
    fail_assertion("non-positive loop bound");
    _jump1995:;
    // Computing bound for l
    _444.d1 = _439;
    if (_439 > 0) 
    goto _jump1996;
    fail_assertion("non-positive loop bound");
    _jump1996:;
    // Computing bound for m
    _444.d2 = _438;
    if (_438 > 0) 
    goto _jump1997;
    fail_assertion("non-positive loop bound");
    _jump1997:;
    // Computing total size of heap memory to allocate
    int64_t _446 = 1;
    _446 *= _445;
    _446 *= _439;
    _446 *= _438;
    _446 *= sizeof(bool);
    _444.data = jpl_alloc(_446);
    int64_t _447 = 0; // m
    int64_t _448 = 0; // l
    int64_t _449 = 0; // k
    _jump1998:; // Begin body of loop
    bool _450 = e(f, g);
    int64_t _451 = 0;
    _451 *= _444.d0;
    _451 += _449;
    _451 *= _444.d1;
    _451 += _448;
    _451 *= _444.d2;
    _451 += _447;
    _444.data[_451] = _450;
    _447++;
    if (_447 < _438)
    goto _jump1998;
    _447 = 0;
    _448++;
    if (_448 < _439)
    goto _jump1998;
    _448 = 0;
    _449++;
    if (_449 < _445)
    goto _jump1998;
    // End body of loop
    _443 = _444;
    goto _jump1999;
    _jump1994:;
    bool _452 = _439 == _439;
    _a3_bool _453;
    if (!_452)
    goto _jump2000;
    _a3_bool _454;
    // Computing bound for k
    _454.d0 = _438;
    if (_438 > 0) 
    goto _jump2001;
    fail_assertion("non-positive loop bound");
    _jump2001:;
    // Computing bound for l
    int64_t _455 = 569;
    _454.d1 = _455;
    if (_455 > 0) 
    goto _jump2002;
    fail_assertion("non-positive loop bound");
    _jump2002:;
    // Computing bound for m
    _454.d2 = _438;
    if (_438 > 0) 
    goto _jump2003;
    fail_assertion("non-positive loop bound");
    _jump2003:;
    // Computing total size of heap memory to allocate
    int64_t _456 = 1;
    _456 *= _438;
    _456 *= _455;
    _456 *= _438;
    _456 *= sizeof(bool);
    _454.data = jpl_alloc(_456);
    int64_t _457 = 0; // m
    int64_t _458 = 0; // l
    int64_t _459 = 0; // k
    _jump2004:; // Begin body of loop
    int64_t _460 = 0;
    _460 *= _454.d0;
    _460 += _459;
    _460 *= _454.d1;
    _460 += _458;
    _460 *= _454.d2;
    _460 += _457;
    _454.data[_460] = _288;
    _457++;
    if (_457 < _438)
    goto _jump2004;
    _457 = 0;
    _458++;
    if (_458 < _455)
    goto _jump2004;
    _458 = 0;
    _459++;
    if (_459 < _438)
    goto _jump2004;
    // End body of loop
    _453 = _454;
    goto _jump2005;
    _jump2000:;
    _a3_bool _461;
    // Computing bound for k
    int64_t _462 = 497;
    _461.d0 = _462;
    if (_462 > 0) 
    goto _jump2006;
    fail_assertion("non-positive loop bound");
    _jump2006:;
    // Computing bound for l
    int64_t _463 = 900;
    _461.d1 = _463;
    if (_463 > 0) 
    goto _jump2007;
    fail_assertion("non-positive loop bound");
    _jump2007:;
    // Computing bound for m
    _461.d2 = _439;
    if (_439 > 0) 
    goto _jump2008;
    fail_assertion("non-positive loop bound");
    _jump2008:;
    // Computing total size of heap memory to allocate
    int64_t _464 = 1;
    _464 *= _462;
    _464 *= _463;
    _464 *= _439;
    _464 *= sizeof(bool);
    _461.data = jpl_alloc(_464);
    int64_t _465 = 0; // m
    int64_t _466 = 0; // l
    int64_t _467 = 0; // k
    _jump2009:; // Begin body of loop
    bool _468 = true;
    int64_t _469 = 0;
    _469 *= _461.d0;
    _469 += _467;
    _469 *= _461.d1;
    _469 += _466;
    _469 *= _461.d2;
    _469 += _465;
    _461.data[_469] = _468;
    _465++;
    if (_465 < _439)
    goto _jump2009;
    _465 = 0;
    _466++;
    if (_466 < _463)
    goto _jump2009;
    _466 = 0;
    _467++;
    if (_467 < _462)
    goto _jump2009;
    // End body of loop
    _453 = _461;
    _jump2005:;
    _443 = _453;
    _jump1999:;
    int64_t _470 = 0;
    _470 *= _411.d0;
    _470 += _439;
    _470 *= _411.d1;
    _470 += _438;
    _411.data[_470] = _443;
    _438++;
    if (_438 < _436)
    goto _jump1991;
    _438 = 0;
    _439++;
    if (_439 < _412)
    goto _jump1991;
    // End body of loop
    _a1_int64_t _471;
    // Computing bound for i
    int64_t _472 = 526;
    _471.d0 = _472;
    if (_472 > 0) 
    goto _jump2010;
    fail_assertion("non-positive loop bound");
    _jump2010:;
    // Computing total size of heap memory to allocate
    int64_t _473 = 1;
    _473 *= _472;
    _473 *= sizeof(int64_t);
    _471.data = jpl_alloc(_473);
    int64_t _474 = 0; // i
    _jump2011:; // Begin body of loop
    int64_t _475 = 0;
    _475 *= _471.d0;
    _475 += _474;
    _471.data[_475] = _474;
    _474++;
    if (_474 < _472)
    goto _jump2011;
    // End body of loop
    int64_t _476;
    if (!f)
    goto _jump2012;
    int64_t _477 = 224;
    _476 = _477;
    goto _jump2013;
    _jump2012:;
    int64_t _478 = 301;
    _476 = _478;
    _jump2013:;
    int64_t _479 = -_476;
    if (_479 >= 0)
    goto _jump2014;
    fail_assertion("negative array index");
    _jump2014:;
    if (_479 < _471.d0)
    goto _jump2015;
    fail_assertion("index too large");
    _jump2015:;
    int64_t _480 = 0;
    _480 *= _471.d0;
    _480 += _479;
    int64_t _481 = _471.data[_480];
    int64_t _482 = 32;
    if (_481 >= 0)
    goto _jump2016;
    fail_assertion("negative array index");
    _jump2016:;
    if (_481 < _411.d0)
    goto _jump2017;
    fail_assertion("index too large");
    _jump2017:;
    if (_482 >= 0)
    goto _jump2018;
    fail_assertion("negative array index");
    _jump2018:;
    if (_482 < _411.d1)
    goto _jump2019;
    fail_assertion("index too large");
    _jump2019:;
    int64_t _483 = 0;
    _483 *= _411.d0;
    _483 += _481;
    _483 *= _411.d1;
    _483 += _482;
    _a3_bool _484 = _411.data[_483];
    _373 = _484;
    _jump1973:;
    _372 = _373;
    goto _jump2020;
    _jump1955:;
    _a2__a3_bool _485;
    // Computing bound for i
    int64_t _486;
    // Computing bound for i
    int64_t _487 = 448;
    if (_487 > 0) 
    goto _jump2021;
    fail_assertion("non-positive loop bound");
    _jump2021:;
    // Computing bound for j
    int64_t _488 = 326;
    if (_488 > 0) 
    goto _jump2022;
    fail_assertion("non-positive loop bound");
    _jump2022:;
    // Computing bound for k
    double _489 = 88.0;
    double _490 = c - _489;
    double _491 = 43.0;
    bool _492 = _490 <= _491;
    int64_t _493;
    if (!_492)
    goto _jump2023;
    int64_t _494 = 410;
    int64_t _495 = -_494;
    int64_t _496 = 445;
    int64_t _497 = _495 / _496;
    _493 = _497;
    goto _jump2024;
    _jump2023:;
    int64_t _498 = 849;
    _a1_int64_t _499;
    _499.d0 = 1;
    _499.data = jpl_alloc(sizeof(int64_t) * 1);
    _499.data[0] = _498;
    int64_t _500 = 893;
    if (_500 >= 0)
    goto _jump2025;
    fail_assertion("negative array index");
    _jump2025:;
    if (_500 < _499.d0)
    goto _jump2026;
    fail_assertion("index too large");
    _jump2026:;
    int64_t _501 = 0;
    _501 *= _499.d0;
    _501 += _500;
    int64_t _502 = _499.data[_501];
    _493 = _502;
    _jump2024:;
    if (_493 > 0) 
    goto _jump2027;
    fail_assertion("non-positive loop bound");
    _jump2027:;
    _486 = 0;
    int64_t _503 = 0; // k
    int64_t _504 = 0; // j
    int64_t _505 = 0; // i
    _jump2028:; // Begin body of loop
    int64_t _506;
    // Computing bound for l
    int64_t _507 = -_505;
    if (_507 > 0) 
    goto _jump2029;
    fail_assertion("non-positive loop bound");
    _jump2029:;
    _506 = 0;
    int64_t _508 = 0; // l
    _jump2030:; // Begin body of loop
    int64_t _509;
    // Computing bound for m
    if (_508 > 0) 
    goto _jump2031;
    fail_assertion("non-positive loop bound");
    _jump2031:;
    // Computing bound for n
    if (_508 > 0) 
    goto _jump2032;
    fail_assertion("non-positive loop bound");
    _jump2032:;
    _509 = 0;
    int64_t _510 = 0; // n
    int64_t _511 = 0; // m
    _jump2033:; // Begin body of loop
    _509 += _510;
    _510++;
    if (_510 < _508)
    goto _jump2033;
    _510 = 0;
    _511++;
    if (_511 < _508)
    goto _jump2033;
    // End body of loop
    _506 += _509;
    _508++;
    if (_508 < _507)
    goto _jump2030;
    // End body of loop
    int64_t _512 = 137;
    int64_t _513 = _506 / _512;
    _486 += _513;
    _503++;
    if (_503 < _493)
    goto _jump2028;
    _503 = 0;
    _504++;
    if (_504 < _488)
    goto _jump2028;
    _504 = 0;
    _505++;
    if (_505 < _487)
    goto _jump2028;
    // End body of loop
    _485.d0 = _486;
    if (_486 > 0) 
    goto _jump2034;
    fail_assertion("non-positive loop bound");
    _jump2034:;
    // Computing bound for j
    int64_t _514 = 858;
    _485.d1 = _514;
    if (_514 > 0) 
    goto _jump2035;
    fail_assertion("non-positive loop bound");
    _jump2035:;
    // Computing total size of heap memory to allocate
    int64_t _515 = 1;
    _515 *= _486;
    _515 *= _514;
    _515 *= sizeof(_a3_bool);
    _485.data = jpl_alloc(_515);
    int64_t _516 = 0; // j
    int64_t _517 = 0; // i
    _jump2036:; // Begin body of loop
    _a3_bool _518;
    // Computing bound for k
    int64_t _519 = 19;
    _518.d0 = _519;
    if (_519 > 0) 
    goto _jump2037;
    fail_assertion("non-positive loop bound");
    _jump2037:;
    // Computing bound for l
    _518.d1 = _516;
    if (_516 > 0) 
    goto _jump2038;
    fail_assertion("non-positive loop bound");
    _jump2038:;
    // Computing bound for m
    _518.d2 = _517;
    if (_517 > 0) 
    goto _jump2039;
    fail_assertion("non-positive loop bound");
    _jump2039:;
    // Computing total size of heap memory to allocate
    int64_t _520 = 1;
    _520 *= _519;
    _520 *= _516;
    _520 *= _517;
    _520 *= sizeof(bool);
    _518.data = jpl_alloc(_520);
    int64_t _521 = 0; // m
    int64_t _522 = 0; // l
    int64_t _523 = 0; // k
    _jump2040:; // Begin body of loop
    bool _524 = e(_288, g);
    int64_t _525 = 0;
    _525 *= _518.d0;
    _525 += _523;
    _525 *= _518.d1;
    _525 += _522;
    _525 *= _518.d2;
    _525 += _521;
    _518.data[_525] = _524;
    _521++;
    if (_521 < _517)
    goto _jump2040;
    _521 = 0;
    _522++;
    if (_522 < _516)
    goto _jump2040;
    _522 = 0;
    _523++;
    if (_523 < _519)
    goto _jump2040;
    // End body of loop
    int64_t _526 = 421;
    int64_t _527 = -_526;
    int64_t _528 = -_527;
    _a1_int64_t _529;
    // Computing bound for k
    _529.d0 = _517;
    if (_517 > 0) 
    goto _jump2041;
    fail_assertion("non-positive loop bound");
    _jump2041:;
    // Computing total size of heap memory to allocate
    int64_t _530 = 1;
    _530 *= _517;
    _530 *= sizeof(int64_t);
    _529.data = jpl_alloc(_530);
    int64_t _531 = 0; // k
    _jump2042:; // Begin body of loop
    int64_t _532 = 0;
    _532 *= _529.d0;
    _532 += _531;
    _529.data[_532] = _531;
    _531++;
    if (_531 < _517)
    goto _jump2042;
    // End body of loop
    int64_t _533 = -_517;
    if (_533 >= 0)
    goto _jump2043;
    fail_assertion("negative array index");
    _jump2043:;
    if (_533 < _529.d0)
    goto _jump2044;
    fail_assertion("index too large");
    _jump2044:;
    int64_t _534 = 0;
    _534 *= _529.d0;
    _534 += _533;
    int64_t _535 = _529.data[_534];
    if (_528 >= 0)
    goto _jump2045;
    fail_assertion("negative array index");
    _jump2045:;
    if (_528 < _518.d0)
    goto _jump2046;
    fail_assertion("index too large");
    _jump2046:;
    if (_535 >= 0)
    goto _jump2047;
    fail_assertion("negative array index");
    _jump2047:;
    if (_535 < _518.d1)
    goto _jump2048;
    fail_assertion("index too large");
    _jump2048:;
    if (_517 >= 0)
    goto _jump2049;
    fail_assertion("negative array index");
    _jump2049:;
    if (_517 < _518.d2)
    goto _jump2050;
    fail_assertion("index too large");
    _jump2050:;
    int64_t _536 = 0;
    _536 *= _518.d0;
    _536 += _528;
    _536 *= _518.d1;
    _536 += _535;
    _536 *= _518.d2;
    _536 += _517;
    bool _537 = _518.data[_536];
    _a3_bool _538;
    if (!_537)
    goto _jump2051;
    _a2__a3_bool _539;
    // Computing bound for k
    int64_t _540 = 499;
    int64_t _541 = _516 / _540;
    _539.d0 = _541;
    if (_541 > 0) 
    goto _jump2052;
    fail_assertion("non-positive loop bound");
    _jump2052:;
    // Computing bound for l
    int64_t _542;
    if (!f)
    goto _jump2053;
    _542 = _516;
    goto _jump2054;
    _jump2053:;
    _542 = _516;
    _jump2054:;
    _539.d1 = _542;
    if (_542 > 0) 
    goto _jump2055;
    fail_assertion("non-positive loop bound");
    _jump2055:;
    // Computing total size of heap memory to allocate
    int64_t _543 = 1;
    _543 *= _541;
    _543 *= _542;
    _543 *= sizeof(_a3_bool);
    _539.data = jpl_alloc(_543);
    int64_t _544 = 0; // l
    int64_t _545 = 0; // k
    _jump2056:; // Begin body of loop
    _a3_bool _546;
    // Computing bound for m
    _546.d0 = _545;
    if (_545 > 0) 
    goto _jump2057;
    fail_assertion("non-positive loop bound");
    _jump2057:;
    // Computing bound for n
    _546.d1 = _545;
    if (_545 > 0) 
    goto _jump2058;
    fail_assertion("non-positive loop bound");
    _jump2058:;
    // Computing bound for o
    int64_t _547 = 346;
    _546.d2 = _547;
    if (_547 > 0) 
    goto _jump2059;
    fail_assertion("non-positive loop bound");
    _jump2059:;
    // Computing total size of heap memory to allocate
    int64_t _548 = 1;
    _548 *= _545;
    _548 *= _545;
    _548 *= _547;
    _548 *= sizeof(bool);
    _546.data = jpl_alloc(_548);
    int64_t _549 = 0; // o
    int64_t _550 = 0; // n
    int64_t _551 = 0; // m
    _jump2060:; // Begin body of loop
    int64_t _552 = 0;
    _552 *= _546.d0;
    _552 += _551;
    _552 *= _546.d1;
    _552 += _550;
    _552 *= _546.d2;
    _552 += _549;
    _546.data[_552] = _288;
    _549++;
    if (_549 < _547)
    goto _jump2060;
    _549 = 0;
    _550++;
    if (_550 < _545)
    goto _jump2060;
    _550 = 0;
    _551++;
    if (_551 < _545)
    goto _jump2060;
    // End body of loop
    int64_t _553 = 0;
    _553 *= _539.d0;
    _553 += _545;
    _553 *= _539.d1;
    _553 += _544;
    _539.data[_553] = _546;
    _544++;
    if (_544 < _542)
    goto _jump2056;
    _544 = 0;
    _545++;
    if (_545 < _541)
    goto _jump2056;
    // End body of loop
    int64_t _554 = 692;
    if (_516 >= 0)
    goto _jump2061;
    fail_assertion("negative array index");
    _jump2061:;
    if (_516 < _539.d0)
    goto _jump2062;
    fail_assertion("index too large");
    _jump2062:;
    if (_554 >= 0)
    goto _jump2063;
    fail_assertion("negative array index");
    _jump2063:;
    if (_554 < _539.d1)
    goto _jump2064;
    fail_assertion("index too large");
    _jump2064:;
    int64_t _555 = 0;
    _555 *= _539.d0;
    _555 += _516;
    _555 *= _539.d1;
    _555 += _554;
    _a3_bool _556 = _539.data[_555];
    _538 = _556;
    goto _jump2065;
    _jump2051:;
    _a3_bool _557;
    // Computing bound for k
    int64_t _558 = 714;
    int64_t _559 = -_558;
    int64_t _560 = _516 - _559;
    _557.d0 = _560;
    if (_560 > 0) 
    goto _jump2066;
    fail_assertion("non-positive loop bound");
    _jump2066:;
    // Computing bound for l
    _557.d1 = _517;
    if (_517 > 0) 
    goto _jump2067;
    fail_assertion("non-positive loop bound");
    _jump2067:;
    // Computing bound for m
    int64_t _561 = 23;
    int64_t _562 = 638;
    int64_t _563 = _561 - _562;
    _557.d2 = _563;
    if (_563 > 0) 
    goto _jump2068;
    fail_assertion("non-positive loop bound");
    _jump2068:;
    // Computing total size of heap memory to allocate
    int64_t _564 = 1;
    _564 *= _560;
    _564 *= _517;
    _564 *= _563;
    _564 *= sizeof(bool);
    _557.data = jpl_alloc(_564);
    int64_t _565 = 0; // m
    int64_t _566 = 0; // l
    int64_t _567 = 0; // k
    _jump2069:; // Begin body of loop
    double _568 = 92.0;
    double _569 = 87.0;
    double _570 = -_569;
    bool _571 = _568 <= _570;
    int64_t _572 = 0;
    _572 *= _557.d0;
    _572 += _567;
    _572 *= _557.d1;
    _572 += _566;
    _572 *= _557.d2;
    _572 += _565;
    _557.data[_572] = _571;
    _565++;
    if (_565 < _563)
    goto _jump2069;
    _565 = 0;
    _566++;
    if (_566 < _517)
    goto _jump2069;
    _566 = 0;
    _567++;
    if (_567 < _560)
    goto _jump2069;
    // End body of loop
    _538 = _557;
    _jump2065:;
    int64_t _573 = 0;
    _573 *= _485.d0;
    _573 += _517;
    _573 *= _485.d1;
    _573 += _516;
    _485.data[_573] = _538;
    _516++;
    if (_516 < _514)
    goto _jump2036;
    _516 = 0;
    _517++;
    if (_517 < _486)
    goto _jump2036;
    // End body of loop
    _a3_int64_t _574;
    // Computing bound for i
    int64_t _575 = 92;
    int64_t _576 = -_575;
    int64_t _577 = -_576;
    _574.d0 = _577;
    if (_577 > 0) 
    goto _jump2070;
    fail_assertion("non-positive loop bound");
    _jump2070:;
    // Computing bound for j
    _a2_int64_t _578;
    // Computing bound for i
    int64_t _579 = 368;
    _578.d0 = _579;
    if (_579 > 0) 
    goto _jump2071;
    fail_assertion("non-positive loop bound");
    _jump2071:;
    // Computing bound for j
    int64_t _580 = 681;
    int64_t _581 = -_580;
    _578.d1 = _581;
    if (_581 > 0) 
    goto _jump2072;
    fail_assertion("non-positive loop bound");
    _jump2072:;
    // Computing total size of heap memory to allocate
    int64_t _582 = 1;
    _582 *= _579;
    _582 *= _581;
    _582 *= sizeof(int64_t);
    _578.data = jpl_alloc(_582);
    int64_t _583 = 0; // j
    int64_t _584 = 0; // i
    _jump2073:; // Begin body of loop
    int64_t _585 = 215;
    int64_t _586 = 0;
    _586 *= _578.d0;
    _586 += _584;
    _586 *= _578.d1;
    _586 += _583;
    _578.data[_586] = _585;
    _583++;
    if (_583 < _581)
    goto _jump2073;
    _583 = 0;
    _584++;
    if (_584 < _579)
    goto _jump2073;
    // End body of loop
    _a3_int64_t _587;
    // Computing bound for i
    int64_t _588 = 419;
    _587.d0 = _588;
    if (_588 > 0) 
    goto _jump2074;
    fail_assertion("non-positive loop bound");
    _jump2074:;
    // Computing bound for j
    int64_t _589 = 692;
    _587.d1 = _589;
    if (_589 > 0) 
    goto _jump2075;
    fail_assertion("non-positive loop bound");
    _jump2075:;
    // Computing bound for k
    int64_t _590 = 576;
    _587.d2 = _590;
    if (_590 > 0) 
    goto _jump2076;
    fail_assertion("non-positive loop bound");
    _jump2076:;
    // Computing total size of heap memory to allocate
    int64_t _591 = 1;
    _591 *= _588;
    _591 *= _589;
    _591 *= _590;
    _591 *= sizeof(int64_t);
    _587.data = jpl_alloc(_591);
    int64_t _592 = 0; // k
    int64_t _593 = 0; // j
    int64_t _594 = 0; // i
    _jump2077:; // Begin body of loop
    int64_t _595 = 0;
    _595 *= _587.d0;
    _595 += _594;
    _595 *= _587.d1;
    _595 += _593;
    _595 *= _587.d2;
    _595 += _592;
    _587.data[_595] = _594;
    _592++;
    if (_592 < _590)
    goto _jump2077;
    _592 = 0;
    _593++;
    if (_593 < _589)
    goto _jump2077;
    _593 = 0;
    _594++;
    if (_594 < _588)
    goto _jump2077;
    // End body of loop
    int64_t _596 = 566;
    int64_t _597 = 698;
    int64_t _598 = _596 * _597;
    int64_t _599 = 561;
    int64_t _600 = 504;
    if (_598 >= 0)
    goto _jump2078;
    fail_assertion("negative array index");
    _jump2078:;
    if (_598 < _587.d0)
    goto _jump2079;
    fail_assertion("index too large");
    _jump2079:;
    if (_599 >= 0)
    goto _jump2080;
    fail_assertion("negative array index");
    _jump2080:;
    if (_599 < _587.d1)
    goto _jump2081;
    fail_assertion("index too large");
    _jump2081:;
    if (_600 >= 0)
    goto _jump2082;
    fail_assertion("negative array index");
    _jump2082:;
    if (_600 < _587.d2)
    goto _jump2083;
    fail_assertion("index too large");
    _jump2083:;
    int64_t _601 = 0;
    _601 *= _587.d0;
    _601 += _598;
    _601 *= _587.d1;
    _601 += _599;
    _601 *= _587.d2;
    _601 += _600;
    int64_t _602 = _587.data[_601];
    int64_t _603 = 641;
    if (_602 >= 0)
    goto _jump2084;
    fail_assertion("negative array index");
    _jump2084:;
    if (_602 < _578.d0)
    goto _jump2085;
    fail_assertion("index too large");
    _jump2085:;
    if (_603 >= 0)
    goto _jump2086;
    fail_assertion("negative array index");
    _jump2086:;
    if (_603 < _578.d1)
    goto _jump2087;
    fail_assertion("index too large");
    _jump2087:;
    int64_t _604 = 0;
    _604 *= _578.d0;
    _604 += _602;
    _604 *= _578.d1;
    _604 += _603;
    int64_t _605 = _578.data[_604];
    _574.d1 = _605;
    if (_605 > 0) 
    goto _jump2088;
    fail_assertion("non-positive loop bound");
    _jump2088:;
    // Computing bound for k
    int64_t _606 = 792;
    int64_t _607 = -_606;
    _574.d2 = _607;
    if (_607 > 0) 
    goto _jump2089;
    fail_assertion("non-positive loop bound");
    _jump2089:;
    // Computing total size of heap memory to allocate
    int64_t _608 = 1;
    _608 *= _577;
    _608 *= _605;
    _608 *= _607;
    _608 *= sizeof(int64_t);
    _574.data = jpl_alloc(_608);
    int64_t _609 = 0; // k
    int64_t _610 = 0; // j
    int64_t _611 = 0; // i
    _jump2090:; // Begin body of loop
    double _612 = 60.0;
    bool _613 = c >= _612;
    int64_t _614;
    if (!_613)
    goto _jump2091;
    _614 = _611;
    goto _jump2092;
    _jump2091:;
    bool _615 = true;
    int64_t _616;
    if (!_615)
    goto _jump2093;
    _616 = _611;
    goto _jump2094;
    _jump2093:;
    int64_t _617;
    // Computing bound for l
    if (_609 > 0) 
    goto _jump2095;
    fail_assertion("non-positive loop bound");
    _jump2095:;
    _617 = 0;
    int64_t _618 = 0; // l
    _jump2096:; // Begin body of loop
    _617 += _609;
    _618++;
    if (_618 < _609)
    goto _jump2096;
    // End body of loop
    _616 = _617;
    _jump2094:;
    _614 = _616;
    _jump2092:;
    int64_t _619 = 0;
    _619 *= _574.d0;
    _619 += _611;
    _619 *= _574.d1;
    _619 += _610;
    _619 *= _574.d2;
    _619 += _609;
    _574.data[_619] = _614;
    _609++;
    if (_609 < _607)
    goto _jump2090;
    _609 = 0;
    _610++;
    if (_610 < _605)
    goto _jump2090;
    _610 = 0;
    _611++;
    if (_611 < _577)
    goto _jump2090;
    // End body of loop
    bool _620 = f;
    if (0 != f)
    goto _jump2097;
    bool _621 = e(_288, g);
    bool _622;
    if (!_621)
    goto _jump2098;
    _622 = _288;
    goto _jump2099;
    _jump2098:;
    bool _623 = !_288;
    _622 = _623;
    _jump2099:;
    _620 = _622;
    _jump2097:;
    int64_t _624;
    if (!_620)
    goto _jump2100;
    bool _625;
    if (!_288)
    goto _jump2101;
    bool _626;
    if (!_288)
    goto _jump2102;
    _626 = f;
    goto _jump2103;
    _jump2102:;
    _626 = f;
    _jump2103:;
    _625 = _626;
    goto _jump2104;
    _jump2101:;
    _625 = _288;
    _jump2104:;
    int64_t _627;
    if (!_625)
    goto _jump2105;
    int64_t _628;
    if (!f)
    goto _jump2106;
    int64_t _629 = 423;
    _628 = _629;
    goto _jump2107;
    _jump2106:;
    int64_t _630;
    // Computing bound for i
    int64_t _631 = 367;
    if (_631 > 0) 
    goto _jump2108;
    fail_assertion("non-positive loop bound");
    _jump2108:;
    _630 = 0;
    int64_t _632 = 0; // i
    _jump2109:; // Begin body of loop
    _630 += _632;
    _632++;
    if (_632 < _631)
    goto _jump2109;
    // End body of loop
    _628 = _630;
    _jump2107:;
    _627 = _628;
    goto _jump2110;
    _jump2105:;
    int64_t _633 = 60;
    int64_t _634 = 606;
    int64_t _635 = _633 % _634;
    int64_t _636 = -_635;
    _627 = _636;
    _jump2110:;
    _624 = _627;
    goto _jump2111;
    _jump2100:;
    _a2_int64_t _637;
    // Computing bound for i
    int64_t _638 = 125;
    _637.d0 = _638;
    if (_638 > 0) 
    goto _jump2112;
    fail_assertion("non-positive loop bound");
    _jump2112:;
    // Computing bound for j
    int64_t _639 = 479;
    int64_t _640 = -_639;
    _637.d1 = _640;
    if (_640 > 0) 
    goto _jump2113;
    fail_assertion("non-positive loop bound");
    _jump2113:;
    // Computing total size of heap memory to allocate
    int64_t _641 = 1;
    _641 *= _638;
    _641 *= _640;
    _641 *= sizeof(int64_t);
    _637.data = jpl_alloc(_641);
    int64_t _642 = 0; // j
    int64_t _643 = 0; // i
    _jump2114:; // Begin body of loop
    int64_t _644;
    if (!f)
    goto _jump2115;
    _644 = _643;
    goto _jump2116;
    _jump2115:;
    int64_t _645 = 701;
    _644 = _645;
    _jump2116:;
    int64_t _646 = 0;
    _646 *= _637.d0;
    _646 += _643;
    _646 *= _637.d1;
    _646 += _642;
    _637.data[_646] = _644;
    _642++;
    if (_642 < _640)
    goto _jump2114;
    _642 = 0;
    _643++;
    if (_643 < _638)
    goto _jump2114;
    // End body of loop
    int64_t _647;
    if (!f)
    goto _jump2117;
    int64_t _648 = 89;
    _647 = _648;
    goto _jump2118;
    _jump2117:;
    int64_t _649 = 434;
    _647 = _649;
    _jump2118:;
    bool _650 = !_288;
    int64_t _651;
    if (!_650)
    goto _jump2119;
    int64_t _652 = 69;
    _651 = _652;
    goto _jump2120;
    _jump2119:;
    int64_t _653;
    if (!_288)
    goto _jump2121;
    int64_t _654 = 229;
    _653 = _654;
    goto _jump2122;
    _jump2121:;
    int64_t _655 = 295;
    _653 = _655;
    _jump2122:;
    _651 = _653;
    _jump2120:;
    if (_647 >= 0)
    goto _jump2123;
    fail_assertion("negative array index");
    _jump2123:;
    if (_647 < _637.d0)
    goto _jump2124;
    fail_assertion("index too large");
    _jump2124:;
    if (_651 >= 0)
    goto _jump2125;
    fail_assertion("negative array index");
    _jump2125:;
    if (_651 < _637.d1)
    goto _jump2126;
    fail_assertion("index too large");
    _jump2126:;
    int64_t _656 = 0;
    _656 *= _637.d0;
    _656 += _647;
    _656 *= _637.d1;
    _656 += _651;
    int64_t _657 = _637.data[_656];
    _624 = _657;
    _jump2111:;
    int64_t _658;
    // Computing bound for i
    int64_t _659 = 67;
    if (_659 > 0) 
    goto _jump2127;
    fail_assertion("non-positive loop bound");
    _jump2127:;
    // Computing bound for j
    int64_t _660 = 212;
    if (_660 > 0) 
    goto _jump2128;
    fail_assertion("non-positive loop bound");
    _jump2128:;
    // Computing bound for k
    int64_t _661 = 517;
    if (_661 > 0) 
    goto _jump2129;
    fail_assertion("non-positive loop bound");
    _jump2129:;
    _658 = 0;
    int64_t _662 = 0; // k
    int64_t _663 = 0; // j
    int64_t _664 = 0; // i
    _jump2130:; // Begin body of loop
    _658 += _663;
    _662++;
    if (_662 < _661)
    goto _jump2130;
    _662 = 0;
    _663++;
    if (_663 < _660)
    goto _jump2130;
    _663 = 0;
    _664++;
    if (_664 < _659)
    goto _jump2130;
    // End body of loop
    bool _665 = !_288;
    int64_t _666;
    if (!_665)
    goto _jump2131;
    int64_t _667 = 280;
    int64_t _668 = -_667;
    _666 = _668;
    goto _jump2132;
    _jump2131:;
    int64_t _669 = 726;
    _666 = _669;
    _jump2132:;
    _a1_int64_t _670;
    _670.d0 = 2;
    _670.data = jpl_alloc(sizeof(int64_t) * 2);
    _670.data[0] = _658;
    _670.data[1] = _666;
    int64_t _671;
    // Computing bound for i
    bool _672 = true;
    int64_t _673;
    if (!_672)
    goto _jump2133;
    int64_t _674 = 234;
    int64_t _675 = 476;
    int64_t _676 = _674 * _675;
    _673 = _676;
    goto _jump2134;
    _jump2133:;
    int64_t _677 = 235;
    _673 = _677;
    _jump2134:;
    if (_673 > 0) 
    goto _jump2135;
    fail_assertion("non-positive loop bound");
    _jump2135:;
    // Computing bound for j
    int64_t _678;
    // Computing bound for i
    int64_t _679 = 572;
    if (_679 > 0) 
    goto _jump2136;
    fail_assertion("non-positive loop bound");
    _jump2136:;
    // Computing bound for j
    int64_t _680 = 781;
    if (_680 > 0) 
    goto _jump2137;
    fail_assertion("non-positive loop bound");
    _jump2137:;
    _678 = 0;
    int64_t _681 = 0; // j
    int64_t _682 = 0; // i
    _jump2138:; // Begin body of loop
    bool _683 = false;
    int64_t _684;
    if (!_683)
    goto _jump2139;
    int64_t _685 = 363;
    _684 = _685;
    goto _jump2140;
    _jump2139:;
    _684 = _681;
    _jump2140:;
    _678 += _684;
    _681++;
    if (_681 < _680)
    goto _jump2138;
    _681 = 0;
    _682++;
    if (_682 < _679)
    goto _jump2138;
    // End body of loop
    if (_678 > 0) 
    goto _jump2141;
    fail_assertion("non-positive loop bound");
    _jump2141:;
    _671 = 0;
    int64_t _686 = 0; // j
    int64_t _687 = 0; // i
    _jump2142:; // Begin body of loop
    int64_t _688;
    // Computing bound for k
    if (_687 > 0) 
    goto _jump2143;
    fail_assertion("non-positive loop bound");
    _jump2143:;
    _688 = 0;
    int64_t _689 = 0; // k
    _jump2144:; // Begin body of loop
    _688 += _687;
    _689++;
    if (_689 < _687)
    goto _jump2144;
    // End body of loop
    _671 += _688;
    _686++;
    if (_686 < _678)
    goto _jump2142;
    _686 = 0;
    _687++;
    if (_687 < _673)
    goto _jump2142;
    // End body of loop
    if (_671 >= 0)
    goto _jump2145;
    fail_assertion("negative array index");
    _jump2145:;
    if (_671 < _670.d0)
    goto _jump2146;
    fail_assertion("index too large");
    _jump2146:;
    int64_t _690 = 0;
    _690 *= _670.d0;
    _690 += _671;
    int64_t _691 = _670.data[_690];
    int64_t _692 = 116;
    int64_t _693;
    // Computing bound for i
    bool _694 = false;
    int64_t _695;
    if (!_694)
    goto _jump2147;
    int64_t _696 = 791;
    _695 = _696;
    goto _jump2148;
    _jump2147:;
    int64_t _697 = 954;
    _695 = _697;
    _jump2148:;
    int64_t _698 = -_695;
    if (_698 > 0) 
    goto _jump2149;
    fail_assertion("non-positive loop bound");
    _jump2149:;
    _693 = 0;
    int64_t _699 = 0; // i
    _jump2150:; // Begin body of loop
    _693 += _699;
    _699++;
    if (_699 < _698)
    goto _jump2150;
    // End body of loop
    int64_t _700 = _692 + _693;
    if (_624 >= 0)
    goto _jump2151;
    fail_assertion("negative array index");
    _jump2151:;
    if (_624 < _574.d0)
    goto _jump2152;
    fail_assertion("index too large");
    _jump2152:;
    if (_691 >= 0)
    goto _jump2153;
    fail_assertion("negative array index");
    _jump2153:;
    if (_691 < _574.d1)
    goto _jump2154;
    fail_assertion("index too large");
    _jump2154:;
    if (_700 >= 0)
    goto _jump2155;
    fail_assertion("negative array index");
    _jump2155:;
    if (_700 < _574.d2)
    goto _jump2156;
    fail_assertion("index too large");
    _jump2156:;
    int64_t _701 = 0;
    _701 *= _574.d0;
    _701 += _624;
    _701 *= _574.d1;
    _701 += _691;
    _701 *= _574.d2;
    _701 += _700;
    int64_t _702 = _574.data[_701];
    int64_t _703 = 54;
    int64_t _704 = 716;
    int64_t _705 = -_704;
    int64_t _706 = 631;
    int64_t _707 = _705 % _706;
    int64_t _708 = 527;
    int64_t _709 = _707 / _708;
    _a1_int64_t _710;
    _710.d0 = 2;
    _710.data = jpl_alloc(sizeof(int64_t) * 2);
    _710.data[0] = _703;
    _710.data[1] = _709;
    _a1_int64_t _711;
    // Computing bound for i
    int64_t _712 = 36;
    int64_t _713 = -_712;
    int64_t _714 = 506;
    int64_t _715 = -_714;
    int64_t _716 = _713 - _715;
    _711.d0 = _716;
    if (_716 > 0) 
    goto _jump2157;
    fail_assertion("non-positive loop bound");
    _jump2157:;
    // Computing total size of heap memory to allocate
    int64_t _717 = 1;
    _717 *= _716;
    _717 *= sizeof(int64_t);
    _711.data = jpl_alloc(_717);
    int64_t _718 = 0; // i
    _jump2158:; // Begin body of loop
    int64_t _719 = 0;
    _719 *= _711.d0;
    _719 += _718;
    _711.data[_719] = _718;
    _718++;
    if (_718 < _716)
    goto _jump2158;
    // End body of loop
    int64_t _720;
    // Computing bound for i
    int64_t _721;
    if (!f)
    goto _jump2159;
    int64_t _722 = 203;
    int64_t _723 = -_722;
    _721 = _723;
    goto _jump2160;
    _jump2159:;
    int64_t _724 = 502;
    _721 = _724;
    _jump2160:;
    if (_721 > 0) 
    goto _jump2161;
    fail_assertion("non-positive loop bound");
    _jump2161:;
    // Computing bound for j
    int64_t _725 = 667;
    int64_t _726 = 143;
    int64_t _727 = _725 + _726;
    if (_727 > 0) 
    goto _jump2162;
    fail_assertion("non-positive loop bound");
    _jump2162:;
    // Computing bound for k
    int64_t _728;
    if (!_288)
    goto _jump2163;
    int64_t _729 = 101;
    int64_t _730 = 535;
    int64_t _731 = _729 / _730;
    _728 = _731;
    goto _jump2164;
    _jump2163:;
    int64_t _732;
    // Computing bound for i
    int64_t _733 = 132;
    if (_733 > 0) 
    goto _jump2165;
    fail_assertion("non-positive loop bound");
    _jump2165:;
    // Computing bound for j
    int64_t _734 = 826;
    if (_734 > 0) 
    goto _jump2166;
    fail_assertion("non-positive loop bound");
    _jump2166:;
    _732 = 0;
    int64_t _735 = 0; // j
    int64_t _736 = 0; // i
    _jump2167:; // Begin body of loop
    _732 += _735;
    _735++;
    if (_735 < _734)
    goto _jump2167;
    _735 = 0;
    _736++;
    if (_736 < _733)
    goto _jump2167;
    // End body of loop
    _728 = _732;
    _jump2164:;
    if (_728 > 0) 
    goto _jump2168;
    fail_assertion("non-positive loop bound");
    _jump2168:;
    _720 = 0;
    int64_t _737 = 0; // k
    int64_t _738 = 0; // j
    int64_t _739 = 0; // i
    _jump2169:; // Begin body of loop
    int64_t _740 = 640;
    _720 += _740;
    _737++;
    if (_737 < _728)
    goto _jump2169;
    _737 = 0;
    _738++;
    if (_738 < _727)
    goto _jump2169;
    _738 = 0;
    _739++;
    if (_739 < _721)
    goto _jump2169;
    // End body of loop
    if (_720 >= 0)
    goto _jump2170;
    fail_assertion("negative array index");
    _jump2170:;
    if (_720 < _711.d0)
    goto _jump2171;
    fail_assertion("index too large");
    _jump2171:;
    int64_t _741 = 0;
    _741 *= _711.d0;
    _741 += _720;
    int64_t _742 = _711.data[_741];
    if (_742 >= 0)
    goto _jump2172;
    fail_assertion("negative array index");
    _jump2172:;
    if (_742 < _710.d0)
    goto _jump2173;
    fail_assertion("index too large");
    _jump2173:;
    int64_t _743 = 0;
    _743 *= _710.d0;
    _743 += _742;
    int64_t _744 = _710.data[_743];
    if (_702 >= 0)
    goto _jump2174;
    fail_assertion("negative array index");
    _jump2174:;
    if (_702 < _485.d0)
    goto _jump2175;
    fail_assertion("index too large");
    _jump2175:;
    if (_744 >= 0)
    goto _jump2176;
    fail_assertion("negative array index");
    _jump2176:;
    if (_744 < _485.d1)
    goto _jump2177;
    fail_assertion("index too large");
    _jump2177:;
    int64_t _745 = 0;
    _745 *= _485.d0;
    _745 += _702;
    _745 *= _485.d1;
    _745 += _744;
    _a3_bool _746 = _485.data[_745];
    _372 = _746;
    _jump2020:;
    if (0 != f)
    goto _jump2178;
    fail_assertion("m");
    _jump2178:;
    bool _747 = false;
    bool _748 = _747 == _288;
    bool _749 = !_748;
    void_t _750;
    if (!f)
    goto _jump2179;
    _750 = g;
    goto _jump2180;
    _jump2179:;
    _750 = g;
    _jump2180:;
    bool _751 = e(_749, _750);
    bool _752 = !_751;
    bool _753 = !_752;
    bool _754;
    if (!_753)
    goto _jump2181;
    double _755 = 94.0;
    double _756;
    if (!f)
    goto _jump2182;
    bool _757 = true;
    double _758;
    if (!_757)
    goto _jump2183;
    double _759 = 36.0;
    _758 = _759;
    goto _jump2184;
    _jump2183:;
    double _760 = 99.0;
    _758 = _760;
    _jump2184:;
    _756 = _758;
    goto _jump2185;
    _jump2182:;
    bool _761 = false;
    double _762;
    if (!_761)
    goto _jump2186;
    _762 = c;
    goto _jump2187;
    _jump2186:;
    _762 = c;
    _jump2187:;
    _756 = _762;
    _jump2185:;
    double _763 = _755 + _756;
    double _764;
    if (!_288)
    goto _jump2188;
    double _765;
    // Computing bound for m
    if (_372.d1 > 0) 
    goto _jump2189;
    fail_assertion("non-positive loop bound");
    _jump2189:;
    // Computing bound for n
    int64_t _766;
    // Computing bound for m
    if (_372.d2 > 0) 
    goto _jump2190;
    fail_assertion("non-positive loop bound");
    _jump2190:;
    // Computing bound for n
    if (_372.d1 > 0) 
    goto _jump2191;
    fail_assertion("non-positive loop bound");
    _jump2191:;
    // Computing bound for o
    int64_t _767 = 839;
    if (_767 > 0) 
    goto _jump2192;
    fail_assertion("non-positive loop bound");
    _jump2192:;
    _766 = 0;
    int64_t _768 = 0; // o
    int64_t _769 = 0; // n
    int64_t _770 = 0; // m
    _jump2193:; // Begin body of loop
    _766 += _769;
    _768++;
    if (_768 < _767)
    goto _jump2193;
    _768 = 0;
    _769++;
    if (_769 < _372.d1)
    goto _jump2193;
    _769 = 0;
    _770++;
    if (_770 < _372.d2)
    goto _jump2193;
    // End body of loop
    if (_766 > 0) 
    goto _jump2194;
    fail_assertion("non-positive loop bound");
    _jump2194:;
    // Computing bound for o
    int64_t _771 = 736;
    if (_771 > 0) 
    goto _jump2195;
    fail_assertion("non-positive loop bound");
    _jump2195:;
    _765 = 0;
    int64_t _772 = 0; // o
    int64_t _773 = 0; // n
    int64_t _774 = 0; // m
    _jump2196:; // Begin body of loop
    double _775;
    // Computing bound for p
    int64_t _776 = 604;
    if (_776 > 0) 
    goto _jump2197;
    fail_assertion("non-positive loop bound");
    _jump2197:;
    // Computing bound for q
    if (_774 > 0) 
    goto _jump2198;
    fail_assertion("non-positive loop bound");
    _jump2198:;
    _775 = 0;
    int64_t _777 = 0; // q
    int64_t _778 = 0; // p
    _jump2199:; // Begin body of loop
    double _779 = 9.0;
    _775 += _779;
    _777++;
    if (_777 < _774)
    goto _jump2199;
    _777 = 0;
    _778++;
    if (_778 < _776)
    goto _jump2199;
    // End body of loop
    _765 += _775;
    _772++;
    if (_772 < _771)
    goto _jump2196;
    _772 = 0;
    _773++;
    if (_773 < _766)
    goto _jump2196;
    _773 = 0;
    _774++;
    if (_774 < _372.d1)
    goto _jump2196;
    // End body of loop
    _764 = _765;
    goto _jump2200;
    _jump2188:;
    double _780 = 56.0;
    _764 = _780;
    _jump2200:;
    bool _781 = _763 <= _764;
    bool _782 = !_781;
    _754 = _782;
    goto _jump2201;
    _jump2181:;
    _a3_int64_t _783;
    // Computing bound for m
    int64_t _784;
    // Computing bound for m
    bool _785 = true;
    int64_t _786;
    if (!_785)
    goto _jump2202;
    _786 = _372.d2;
    goto _jump2203;
    _jump2202:;
    _786 = _372.d2;
    _jump2203:;
    int64_t _787 = _786 * _372.d1;
    if (_787 > 0) 
    goto _jump2204;
    fail_assertion("non-positive loop bound");
    _jump2204:;
    _784 = 0;
    int64_t _788 = 0; // m
    _jump2205:; // Begin body of loop
    int64_t _789;
    // Computing bound for n
    int64_t _790 = 414;
    if (_790 > 0) 
    goto _jump2206;
    fail_assertion("non-positive loop bound");
    _jump2206:;
    // Computing bound for o
    if (_788 > 0) 
    goto _jump2207;
    fail_assertion("non-positive loop bound");
    _jump2207:;
    // Computing bound for p
    int64_t _791 = _788 + _372.d1;
    if (_791 > 0) 
    goto _jump2208;
    fail_assertion("non-positive loop bound");
    _jump2208:;
    _789 = 0;
    int64_t _792 = 0; // p
    int64_t _793 = 0; // o
    int64_t _794 = 0; // n
    _jump2209:; // Begin body of loop
    _789 += _794;
    _792++;
    if (_792 < _791)
    goto _jump2209;
    _792 = 0;
    _793++;
    if (_793 < _788)
    goto _jump2209;
    _793 = 0;
    _794++;
    if (_794 < _790)
    goto _jump2209;
    // End body of loop
    _784 += _789;
    _788++;
    if (_788 < _787)
    goto _jump2205;
    // End body of loop
    _783.d0 = _784;
    if (_784 > 0) 
    goto _jump2210;
    fail_assertion("non-positive loop bound");
    _jump2210:;
    // Computing bound for n
    int64_t _795 = 716;
    _783.d1 = _795;
    if (_795 > 0) 
    goto _jump2211;
    fail_assertion("non-positive loop bound");
    _jump2211:;
    // Computing bound for o
    int64_t _796 = -_372.d2;
    int64_t _797 = -_796;
    _783.d2 = _797;
    if (_797 > 0) 
    goto _jump2212;
    fail_assertion("non-positive loop bound");
    _jump2212:;
    // Computing total size of heap memory to allocate
    int64_t _798 = 1;
    _798 *= _784;
    _798 *= _795;
    _798 *= _797;
    _798 *= sizeof(int64_t);
    _783.data = jpl_alloc(_798);
    int64_t _799 = 0; // o
    int64_t _800 = 0; // n
    int64_t _801 = 0; // m
    _jump2213:; // Begin body of loop
    int64_t _802;
    // Computing bound for p
    _a3_int64_t _803;
    // Computing bound for p
    _803.d0 = _801;
    if (_801 > 0) 
    goto _jump2214;
    fail_assertion("non-positive loop bound");
    _jump2214:;
    // Computing bound for q
    _803.d1 = _372.d2;
    if (_372.d2 > 0) 
    goto _jump2215;
    fail_assertion("non-positive loop bound");
    _jump2215:;
    // Computing bound for r
    _803.d2 = _799;
    if (_799 > 0) 
    goto _jump2216;
    fail_assertion("non-positive loop bound");
    _jump2216:;
    // Computing total size of heap memory to allocate
    int64_t _804 = 1;
    _804 *= _801;
    _804 *= _372.d2;
    _804 *= _799;
    _804 *= sizeof(int64_t);
    _803.data = jpl_alloc(_804);
    int64_t _805 = 0; // r
    int64_t _806 = 0; // q
    int64_t _807 = 0; // p
    _jump2217:; // Begin body of loop
    int64_t _808 = 0;
    _808 *= _803.d0;
    _808 += _807;
    _808 *= _803.d1;
    _808 += _806;
    _808 *= _803.d2;
    _808 += _805;
    _803.data[_808] = _801;
    _805++;
    if (_805 < _799)
    goto _jump2217;
    _805 = 0;
    _806++;
    if (_806 < _372.d2)
    goto _jump2217;
    _806 = 0;
    _807++;
    if (_807 < _801)
    goto _jump2217;
    // End body of loop
    int64_t _809;
    // Computing bound for p
    if (_799 > 0) 
    goto _jump2218;
    fail_assertion("non-positive loop bound");
    _jump2218:;
    _809 = 0;
    int64_t _810 = 0; // p
    _jump2219:; // Begin body of loop
    _809 += _372.d0;
    _810++;
    if (_810 < _799)
    goto _jump2219;
    // End body of loop
    int64_t _811;
    if (!_288)
    goto _jump2220;
    _811 = _372.d2;
    goto _jump2221;
    _jump2220:;
    _811 = _372.d1;
    _jump2221:;
    if (_809 >= 0)
    goto _jump2222;
    fail_assertion("negative array index");
    _jump2222:;
    if (_809 < _803.d0)
    goto _jump2223;
    fail_assertion("index too large");
    _jump2223:;
    if (_811 >= 0)
    goto _jump2224;
    fail_assertion("negative array index");
    _jump2224:;
    if (_811 < _803.d1)
    goto _jump2225;
    fail_assertion("index too large");
    _jump2225:;
    if (_800 >= 0)
    goto _jump2226;
    fail_assertion("negative array index");
    _jump2226:;
    if (_800 < _803.d2)
    goto _jump2227;
    fail_assertion("index too large");
    _jump2227:;
    int64_t _812 = 0;
    _812 *= _803.d0;
    _812 += _809;
    _812 *= _803.d1;
    _812 += _811;
    _812 *= _803.d2;
    _812 += _800;
    int64_t _813 = _803.data[_812];
    if (_813 > 0) 
    goto _jump2228;
    fail_assertion("non-positive loop bound");
    _jump2228:;
    // Computing bound for q
    int64_t _814;
    // Computing bound for p
    int64_t _815 = 144;
    if (_815 > 0) 
    goto _jump2229;
    fail_assertion("non-positive loop bound");
    _jump2229:;
    // Computing bound for q
    if (_799 > 0) 
    goto _jump2230;
    fail_assertion("non-positive loop bound");
    _jump2230:;
    _814 = 0;
    int64_t _816 = 0; // q
    int64_t _817 = 0; // p
    _jump2231:; // Begin body of loop
    int64_t _818;
    // Computing bound for r
    int64_t _819 = 439;
    if (_819 > 0) 
    goto _jump2232;
    fail_assertion("non-positive loop bound");
    _jump2232:;
    // Computing bound for s
    if (_800 > 0) 
    goto _jump2233;
    fail_assertion("non-positive loop bound");
    _jump2233:;
    // Computing bound for t
    int64_t _820 = 546;
    if (_820 > 0) 
    goto _jump2234;
    fail_assertion("non-positive loop bound");
    _jump2234:;
    _818 = 0;
    int64_t _821 = 0; // t
    int64_t _822 = 0; // s
    int64_t _823 = 0; // r
    _jump2235:; // Begin body of loop
    _818 += _801;
    _821++;
    if (_821 < _820)
    goto _jump2235;
    _821 = 0;
    _822++;
    if (_822 < _800)
    goto _jump2235;
    _822 = 0;
    _823++;
    if (_823 < _819)
    goto _jump2235;
    // End body of loop
    _814 += _818;
    _816++;
    if (_816 < _799)
    goto _jump2231;
    _816 = 0;
    _817++;
    if (_817 < _815)
    goto _jump2231;
    // End body of loop
    if (_814 > 0) 
    goto _jump2236;
    fail_assertion("non-positive loop bound");
    _jump2236:;
    _802 = 0;
    int64_t _824 = 0; // q
    int64_t _825 = 0; // p
    _jump2237:; // Begin body of loop
    _802 += _801;
    _824++;
    if (_824 < _814)
    goto _jump2237;
    _824 = 0;
    _825++;
    if (_825 < _813)
    goto _jump2237;
    // End body of loop
    int64_t _826 = 0;
    _826 *= _783.d0;
    _826 += _801;
    _826 *= _783.d1;
    _826 += _800;
    _826 *= _783.d2;
    _826 += _799;
    _783.data[_826] = _802;
    _799++;
    if (_799 < _797)
    goto _jump2213;
    _799 = 0;
    _800++;
    if (_800 < _795)
    goto _jump2213;
    _800 = 0;
    _801++;
    if (_801 < _784)
    goto _jump2213;
    // End body of loop
    double _827 = 83.0;
    double _828 = 23.0;
    double _829 = _828 / c;
    double _830 = _827 - _829;
    double _831 = _830 * c;
    bool _832 = a(_783, _831);
    _754 = _832;
    _jump2201:;
    int64_t _833;
    // Computing bound for m
    _a2__a3_int64_t _834;
    // Computing bound for m
    _834.d0 = _372.d2;
    if (_372.d2 > 0) 
    goto _jump2238;
    fail_assertion("non-positive loop bound");
    _jump2238:;
    // Computing bound for n
    _834.d1 = _372.d2;
    if (_372.d2 > 0) 
    goto _jump2239;
    fail_assertion("non-positive loop bound");
    _jump2239:;
    // Computing total size of heap memory to allocate
    int64_t _835 = 1;
    _835 *= _372.d2;
    _835 *= _372.d2;
    _835 *= sizeof(_a3_int64_t);
    _834.data = jpl_alloc(_835);
    int64_t _836 = 0; // n
    int64_t _837 = 0; // m
    _jump2240:; // Begin body of loop
    _a3_int64_t _838;
    // Computing bound for o
    _838.d0 = _372.d1;
    if (_372.d1 > 0) 
    goto _jump2241;
    fail_assertion("non-positive loop bound");
    _jump2241:;
    // Computing bound for p
    _838.d1 = _372.d1;
    if (_372.d1 > 0) 
    goto _jump2242;
    fail_assertion("non-positive loop bound");
    _jump2242:;
    // Computing bound for q
    _838.d2 = _372.d0;
    if (_372.d0 > 0) 
    goto _jump2243;
    fail_assertion("non-positive loop bound");
    _jump2243:;
    // Computing total size of heap memory to allocate
    int64_t _839 = 1;
    _839 *= _372.d1;
    _839 *= _372.d1;
    _839 *= _372.d0;
    _839 *= sizeof(int64_t);
    _838.data = jpl_alloc(_839);
    int64_t _840 = 0; // q
    int64_t _841 = 0; // p
    int64_t _842 = 0; // o
    _jump2244:; // Begin body of loop
    int64_t _843 = 0;
    _843 *= _838.d0;
    _843 += _842;
    _843 *= _838.d1;
    _843 += _841;
    _843 *= _838.d2;
    _843 += _840;
    _838.data[_843] = _372.d1;
    _840++;
    if (_840 < _372.d0)
    goto _jump2244;
    _840 = 0;
    _841++;
    if (_841 < _372.d1)
    goto _jump2244;
    _841 = 0;
    _842++;
    if (_842 < _372.d1)
    goto _jump2244;
    // End body of loop
    int64_t _844 = 0;
    _844 *= _834.d0;
    _844 += _837;
    _844 *= _834.d1;
    _844 += _836;
    _834.data[_844] = _838;
    _836++;
    if (_836 < _372.d2)
    goto _jump2240;
    _836 = 0;
    _837++;
    if (_837 < _372.d2)
    goto _jump2240;
    // End body of loop
    int64_t _845 = -_372.d2;
    int64_t _846 = -_372.d1;
    int64_t _847 = _845 - _846;
    if (_847 >= 0)
    goto _jump2245;
    fail_assertion("negative array index");
    _jump2245:;
    if (_847 < _834.d0)
    goto _jump2246;
    fail_assertion("index too large");
    _jump2246:;
    if (_372.d1 >= 0)
    goto _jump2247;
    fail_assertion("negative array index");
    _jump2247:;
    if (_372.d1 < _834.d1)
    goto _jump2248;
    fail_assertion("index too large");
    _jump2248:;
    int64_t _848 = 0;
    _848 *= _834.d0;
    _848 += _847;
    _848 *= _834.d1;
    _848 += _372.d1;
    _a3_int64_t _849 = _834.data[_848];
    int64_t _850 = _372.d0 + _372.d1;
    bool _851 = !_288;
    int64_t _852;
    if (!_851)
    goto _jump2249;
    _852 = _372.d0;
    goto _jump2250;
    _jump2249:;
    _852 = _372.d1;
    _jump2250:;
    int64_t _853 = -_852;
    _a2_int64_t _854;
    // Computing bound for m
    _854.d0 = _372.d2;
    if (_372.d2 > 0) 
    goto _jump2251;
    fail_assertion("non-positive loop bound");
    _jump2251:;
    // Computing bound for n
    _854.d1 = _372.d1;
    if (_372.d1 > 0) 
    goto _jump2252;
    fail_assertion("non-positive loop bound");
    _jump2252:;
    // Computing total size of heap memory to allocate
    int64_t _855 = 1;
    _855 *= _372.d2;
    _855 *= _372.d1;
    _855 *= sizeof(int64_t);
    _854.data = jpl_alloc(_855);
    int64_t _856 = 0; // n
    int64_t _857 = 0; // m
    _jump2253:; // Begin body of loop
    int64_t _858 = 0;
    _858 *= _854.d0;
    _858 += _857;
    _858 *= _854.d1;
    _858 += _856;
    _854.data[_858] = _857;
    _856++;
    if (_856 < _372.d1)
    goto _jump2253;
    _856 = 0;
    _857++;
    if (_857 < _372.d2)
    goto _jump2253;
    // End body of loop
    int64_t _859;
    // Computing bound for m
    if (_372.d1 > 0) 
    goto _jump2254;
    fail_assertion("non-positive loop bound");
    _jump2254:;
    _859 = 0;
    int64_t _860 = 0; // m
    _jump2255:; // Begin body of loop
    int64_t _861 = _860 % _372.d1;
    _859 += _861;
    _860++;
    if (_860 < _372.d1)
    goto _jump2255;
    // End body of loop
    if (_859 >= 0)
    goto _jump2256;
    fail_assertion("negative array index");
    _jump2256:;
    if (_859 < _854.d0)
    goto _jump2257;
    fail_assertion("index too large");
    _jump2257:;
    if (_372.d0 >= 0)
    goto _jump2258;
    fail_assertion("negative array index");
    _jump2258:;
    if (_372.d0 < _854.d1)
    goto _jump2259;
    fail_assertion("index too large");
    _jump2259:;
    int64_t _862 = 0;
    _862 *= _854.d0;
    _862 += _859;
    _862 *= _854.d1;
    _862 += _372.d0;
    int64_t _863 = _854.data[_862];
    if (_850 >= 0)
    goto _jump2260;
    fail_assertion("negative array index");
    _jump2260:;
    if (_850 < _849.d0)
    goto _jump2261;
    fail_assertion("index too large");
    _jump2261:;
    if (_853 >= 0)
    goto _jump2262;
    fail_assertion("negative array index");
    _jump2262:;
    if (_853 < _849.d1)
    goto _jump2263;
    fail_assertion("index too large");
    _jump2263:;
    if (_863 >= 0)
    goto _jump2264;
    fail_assertion("negative array index");
    _jump2264:;
    if (_863 < _849.d2)
    goto _jump2265;
    fail_assertion("index too large");
    _jump2265:;
    int64_t _864 = 0;
    _864 *= _849.d0;
    _864 += _850;
    _864 *= _849.d1;
    _864 += _853;
    _864 *= _849.d2;
    _864 += _863;
    int64_t _865 = _849.data[_864];
    if (_865 > 0) 
    goto _jump2266;
    fail_assertion("non-positive loop bound");
    _jump2266:;
    // Computing bound for n
    if (_372.d1 > 0) 
    goto _jump2267;
    fail_assertion("non-positive loop bound");
    _jump2267:;
    _833 = 0;
    int64_t _866 = 0; // n
    int64_t _867 = 0; // m
    _jump2268:; // Begin body of loop
    _833 += _372.d1;
    _866++;
    if (_866 < _372.d1)
    goto _jump2268;
    _866 = 0;
    _867++;
    if (_867 < _865)
    goto _jump2268;
    // End body of loop
    bool _868 = _833 != _372.d0;
    bool _869 = _754 != _868;
    return _869;
    bool _870 = false;
    bool _871 = !_870;
    bool _872 = !_288;
    void_t _873;
    if (!_872)
    goto _jump2269;
    _873 = g;
    goto _jump2270;
    _jump2269:;
    _873 = g;
    _jump2270:;
    _a1_void_t _874;
    _874.d0 = 3;
    _874.data = jpl_alloc(sizeof(void_t) * 3);
    _874.data[0] = _873;
    _874.data[1] = g;
    _874.data[2] = g;
    bool _875 = !_288;
    bool _876;
    if (!_875)
    goto _jump2271;
    _876 = _288;
    goto _jump2272;
    _jump2271:;
    _876 = f;
    _jump2272:;
    int64_t _877;
    if (!_876)
    goto _jump2273;
    _877 = _372.d0;
    goto _jump2274;
    _jump2273:;
    int64_t _878 = 428;
    _877 = _878;
    _jump2274:;
    if (_877 >= 0)
    goto _jump2275;
    fail_assertion("negative array index");
    _jump2275:;
    if (_877 < _874.d0)
    goto _jump2276;
    fail_assertion("index too large");
    _jump2276:;
    int64_t _879 = 0;
    _879 *= _874.d0;
    _879 += _877;
    void_t _880 = _874.data[_879];
    void_t _881;
    if (!_288)
    goto _jump2277;
    int64_t _882 = 345;
    bool _883 = _882 <= _372.d2;
    bool _884 = !_883;
    void_t _885;
    if (!_884)
    goto _jump2278;
    bool _886;
    if (!_288)
    goto _jump2279;
    _886 = _288;
    goto _jump2280;
    _jump2279:;
    bool _887 = false;
    _886 = _887;
    _jump2280:;
    void_t _888;
    if (!_886)
    goto _jump2281;
    _888 = g;
    goto _jump2282;
    _jump2281:;
    _888 = g;
    _jump2282:;
    _885 = _888;
    goto _jump2283;
    _jump2278:;
    void_t _889;
    if (!_288)
    goto _jump2284;
    _889 = g;
    goto _jump2285;
    _jump2284:;
    _889 = g;
    _jump2285:;
    _885 = _889;
    _jump2283:;
    _881 = _885;
    goto _jump2286;
    _jump2277:;
    _a2_void_t _890;
    // Computing bound for m
    int64_t _891 = 472;
    int64_t _892 = _372.d1 / _891;
    _890.d0 = _892;
    if (_892 > 0) 
    goto _jump2287;
    fail_assertion("non-positive loop bound");
    _jump2287:;
    // Computing bound for n
    _890.d1 = _372.d0;
    if (_372.d0 > 0) 
    goto _jump2288;
    fail_assertion("non-positive loop bound");
    _jump2288:;
    // Computing total size of heap memory to allocate
    int64_t _893 = 1;
    _893 *= _892;
    _893 *= _372.d0;
    _893 *= sizeof(void_t);
    _890.data = jpl_alloc(_893);
    int64_t _894 = 0; // n
    int64_t _895 = 0; // m
    _jump2289:; // Begin body of loop
    void_t _896;
    if (!f)
    goto _jump2290;
    _896 = g;
    goto _jump2291;
    _jump2290:;
    _896 = g;
    _jump2291:;
    int64_t _897 = 0;
    _897 *= _890.d0;
    _897 += _895;
    _897 *= _890.d1;
    _897 += _894;
    _890.data[_897] = _896;
    _894++;
    if (_894 < _372.d0)
    goto _jump2289;
    _894 = 0;
    _895++;
    if (_895 < _892)
    goto _jump2289;
    // End body of loop
    if (_372.d1 >= 0)
    goto _jump2292;
    fail_assertion("negative array index");
    _jump2292:;
    if (_372.d1 < _890.d0)
    goto _jump2293;
    fail_assertion("index too large");
    _jump2293:;
    if (_372.d1 >= 0)
    goto _jump2294;
    fail_assertion("negative array index");
    _jump2294:;
    if (_372.d1 < _890.d1)
    goto _jump2295;
    fail_assertion("index too large");
    _jump2295:;
    int64_t _898 = 0;
    _898 *= _890.d0;
    _898 += _372.d1;
    _898 *= _890.d1;
    _898 += _372.d1;
    void_t _899 = _890.data[_898];
    _881 = _899;
    _jump2286:;
    _a1_void_t _900;
    _900.d0 = 2;
    _900.data = jpl_alloc(sizeof(void_t) * 2);
    _900.data[0] = _880;
    _900.data[1] = _881;
    if (_372.d1 >= 0)
    goto _jump2296;
    fail_assertion("negative array index");
    _jump2296:;
    if (_372.d1 < _900.d0)
    goto _jump2297;
    fail_assertion("index too large");
    _jump2297:;
    int64_t _901 = 0;
    _901 *= _900.d0;
    _901 += _372.d1;
    void_t _902 = _900.data[_901];
    bool _903 = e(_871, _902);
    if (0 != _903)
    goto _jump2298;
    fail_assertion("m");
    _jump2298:;
    return f;
}

_a3_bool m(_a3_void_t n) {
    bool _0 = false;
    double _1 = -c;
    double _2;
    // Computing bound for u
    int64_t _3 = -n.d1;
    if (_3 > 0) 
    goto _jump2490;
    fail_assertion("non-positive loop bound");
    _jump2490:;
    // Computing bound for v
    if (h > 0) 
    goto _jump2491;
    fail_assertion("non-positive loop bound");
    _jump2491:;
    // Computing bound for w
    _a1_int64_t _4;
    _4.d0 = 1;
    _4.data = jpl_alloc(sizeof(int64_t) * 1);
    _4.data[0] = l;
    if (j >= 0)
    goto _jump2492;
    fail_assertion("negative array index");
    _jump2492:;
    if (j < _4.d0)
    goto _jump2493;
    fail_assertion("index too large");
    _jump2493:;
    int64_t _5 = 0;
    _5 *= _4.d0;
    _5 += j;
    int64_t _6 = _4.data[_5];
    if (_6 > 0) 
    goto _jump2494;
    fail_assertion("non-positive loop bound");
    _jump2494:;
    _2 = 0;
    int64_t _7 = 0; // w
    int64_t _8 = 0; // v
    int64_t _9 = 0; // u
    _jump2495:; // Begin body of loop
    _a3_int64_t _10;
    // Computing bound for x
    _10.d0 = l;
    if (l > 0) 
    goto _jump2496;
    fail_assertion("non-positive loop bound");
    _jump2496:;
    // Computing bound for y
    _10.d1 = _8;
    if (_8 > 0) 
    goto _jump2497;
    fail_assertion("non-positive loop bound");
    _jump2497:;
    // Computing bound for z
    _10.d2 = k;
    if (k > 0) 
    goto _jump2498;
    fail_assertion("non-positive loop bound");
    _jump2498:;
    // Computing total size of heap memory to allocate
    int64_t _11 = 1;
    _11 *= l;
    _11 *= _8;
    _11 *= k;
    _11 *= sizeof(int64_t);
    _10.data = jpl_alloc(_11);
    int64_t _12 = 0; // z
    int64_t _13 = 0; // y
    int64_t _14 = 0; // x
    _jump2499:; // Begin body of loop
    int64_t _15 = 0;
    _15 *= _10.d0;
    _15 += _14;
    _15 *= _10.d1;
    _15 += _13;
    _15 *= _10.d2;
    _15 += _12;
    _10.data[_15] = _14;
    _12++;
    if (_12 < k)
    goto _jump2499;
    _12 = 0;
    _13++;
    if (_13 < _8)
    goto _jump2499;
    _13 = 0;
    _14++;
    if (_14 < l)
    goto _jump2499;
    // End body of loop
    int64_t _16 = n.d1 / _7;
    int64_t _17 = 341;
    if (_16 >= 0)
    goto _jump2500;
    fail_assertion("negative array index");
    _jump2500:;
    if (_16 < _10.d0)
    goto _jump2501;
    fail_assertion("index too large");
    _jump2501:;
    if (n.d1 >= 0)
    goto _jump2502;
    fail_assertion("negative array index");
    _jump2502:;
    if (n.d1 < _10.d1)
    goto _jump2503;
    fail_assertion("index too large");
    _jump2503:;
    if (_17 >= 0)
    goto _jump2504;
    fail_assertion("negative array index");
    _jump2504:;
    if (_17 < _10.d2)
    goto _jump2505;
    fail_assertion("index too large");
    _jump2505:;
    int64_t _18 = 0;
    _18 *= _10.d0;
    _18 += _16;
    _18 *= _10.d1;
    _18 += n.d1;
    _18 *= _10.d2;
    _18 += _17;
    int64_t _19 = _10.data[_18];
    int64_t _20 = j / _19;
    if (_20 >= 0)
    goto _jump2506;
    fail_assertion("negative array index");
    _jump2506:;
    if (_20 < f.d0)
    goto _jump2507;
    fail_assertion("index too large");
    _jump2507:;
    if (h >= 0)
    goto _jump2508;
    fail_assertion("negative array index");
    _jump2508:;
    if (h < f.d1)
    goto _jump2509;
    fail_assertion("index too large");
    _jump2509:;
    int64_t _21 = 0;
    _21 *= f.d0;
    _21 += _20;
    _21 *= f.d1;
    _21 += h;
    rgba _22 = f.data[_21];
    double _23 = _22.a;
    _2 += _23;
    _7++;
    if (_7 < _6)
    goto _jump2495;
    _7 = 0;
    _8++;
    if (_8 < h)
    goto _jump2495;
    _8 = 0;
    _9++;
    if (_9 < _3)
    goto _jump2495;
    // End body of loop
    _a3_bool _24;
    // Computing bound for u
    _24.d0 = n.d0;
    if (n.d0 > 0) 
    goto _jump2510;
    fail_assertion("non-positive loop bound");
    _jump2510:;
    // Computing bound for v
    _24.d1 = h;
    if (h > 0) 
    goto _jump2511;
    fail_assertion("non-positive loop bound");
    _jump2511:;
    // Computing bound for w
    _24.d2 = h;
    if (h > 0) 
    goto _jump2512;
    fail_assertion("non-positive loop bound");
    _jump2512:;
    // Computing total size of heap memory to allocate
    int64_t _25 = 1;
    _25 *= n.d0;
    _25 *= h;
    _25 *= h;
    _25 *= sizeof(bool);
    _24.data = jpl_alloc(_25);
    int64_t _26 = 0; // w
    int64_t _27 = 0; // v
    int64_t _28 = 0; // u
    _jump2513:; // Begin body of loop
    int64_t _29 = 0;
    _29 *= _24.d0;
    _29 += _28;
    _29 *= _24.d1;
    _29 += _27;
    _29 *= _24.d2;
    _29 += _26;
    _24.data[_29] = _0;
    _26++;
    if (_26 < h)
    goto _jump2513;
    _26 = 0;
    _27++;
    if (_27 < h)
    goto _jump2513;
    _27 = 0;
    _28++;
    if (_28 < n.d0)
    goto _jump2513;
    // End body of loop
    int64_t _30 = -l;
    if (l >= 0)
    goto _jump2514;
    fail_assertion("negative array index");
    _jump2514:;
    if (l < _24.d0)
    goto _jump2515;
    fail_assertion("index too large");
    _jump2515:;
    if (h >= 0)
    goto _jump2516;
    fail_assertion("negative array index");
    _jump2516:;
    if (h < _24.d1)
    goto _jump2517;
    fail_assertion("index too large");
    _jump2517:;
    if (_30 >= 0)
    goto _jump2518;
    fail_assertion("negative array index");
    _jump2518:;
    if (_30 < _24.d2)
    goto _jump2519;
    fail_assertion("index too large");
    _jump2519:;
    int64_t _31 = 0;
    _31 *= _24.d0;
    _31 += l;
    _31 *= _24.d1;
    _31 += h;
    _31 *= _24.d2;
    _31 += _30;
    bool _32 = _24.data[_31];
    _a3_int64_t _33;
    if (!_32)
    goto _jump2520;
    _a3_int64_t _34;
    // Computing bound for u
    _34.d0 = j;
    if (j > 0) 
    goto _jump2521;
    fail_assertion("non-positive loop bound");
    _jump2521:;
    // Computing bound for v
    int64_t _35 = -l;
    _34.d1 = _35;
    if (_35 > 0) 
    goto _jump2522;
    fail_assertion("non-positive loop bound");
    _jump2522:;
    // Computing bound for w
    _34.d2 = h;
    if (h > 0) 
    goto _jump2523;
    fail_assertion("non-positive loop bound");
    _jump2523:;
    // Computing total size of heap memory to allocate
    int64_t _36 = 1;
    _36 *= j;
    _36 *= _35;
    _36 *= h;
    _36 *= sizeof(int64_t);
    _34.data = jpl_alloc(_36);
    int64_t _37 = 0; // w
    int64_t _38 = 0; // v
    int64_t _39 = 0; // u
    _jump2524:; // Begin body of loop
    int64_t _40 = 0;
    _40 *= _34.d0;
    _40 += _39;
    _40 *= _34.d1;
    _40 += _38;
    _40 *= _34.d2;
    _40 += _37;
    _34.data[_40] = j;
    _37++;
    if (_37 < h)
    goto _jump2524;
    _37 = 0;
    _38++;
    if (_38 < _35)
    goto _jump2524;
    _38 = 0;
    _39++;
    if (_39 < j)
    goto _jump2524;
    // End body of loop
    _33 = _34;
    goto _jump2525;
    _jump2520:;
    _a3_int64_t _41;
    // Computing bound for u
    _41.d0 = l;
    if (l > 0) 
    goto _jump2526;
    fail_assertion("non-positive loop bound");
    _jump2526:;
    // Computing bound for v
    _41.d1 = h;
    if (h > 0) 
    goto _jump2527;
    fail_assertion("non-positive loop bound");
    _jump2527:;
    // Computing bound for w
    int64_t _42 = -n.d1;
    _41.d2 = _42;
    if (_42 > 0) 
    goto _jump2528;
    fail_assertion("non-positive loop bound");
    _jump2528:;
    // Computing total size of heap memory to allocate
    int64_t _43 = 1;
    _43 *= l;
    _43 *= h;
    _43 *= _42;
    _43 *= sizeof(int64_t);
    _41.data = jpl_alloc(_43);
    int64_t _44 = 0; // w
    int64_t _45 = 0; // v
    int64_t _46 = 0; // u
    _jump2529:; // Begin body of loop
    int64_t _47 = 0;
    _47 *= _41.d0;
    _47 += _46;
    _47 *= _41.d1;
    _47 += _45;
    _47 *= _41.d2;
    _47 += _44;
    _41.data[_47] = j;
    _44++;
    if (_44 < _42)
    goto _jump2529;
    _44 = 0;
    _45++;
    if (_45 < h)
    goto _jump2529;
    _45 = 0;
    _46++;
    if (_46 < l)
    goto _jump2529;
    // End body of loop
    _33 = _41;
    _jump2525:;
    bool _48 = false;
    bool _49 = _0 != _48;
    bool _50 = !_49;
    double _51;
    if (!_50)
    goto _jump2530;
    double _52 = -c;
    _51 = _52;
    goto _jump2531;
    _jump2530:;
    bool _53 = n.d2 != j;
    double _54;
    if (!_53)
    goto _jump2532;
    double _55;
    // Computing bound for u
    if (h > 0) 
    goto _jump2533;
    fail_assertion("non-positive loop bound");
    _jump2533:;
    // Computing bound for v
    if (h > 0) 
    goto _jump2534;
    fail_assertion("non-positive loop bound");
    _jump2534:;
    _55 = 0;
    int64_t _56 = 0; // v
    int64_t _57 = 0; // u
    _jump2535:; // Begin body of loop
    _55 += c;
    _56++;
    if (_56 < h)
    goto _jump2535;
    _56 = 0;
    _57++;
    if (_57 < h)
    goto _jump2535;
    // End body of loop
    _54 = _55;
    goto _jump2536;
    _jump2532:;
    if (n.d1 >= 0)
    goto _jump2537;
    fail_assertion("negative array index");
    _jump2537:;
    if (n.d1 < g.d0)
    goto _jump2538;
    fail_assertion("index too large");
    _jump2538:;
    int64_t _58 = 0;
    _58 *= g.d0;
    _58 += n.d1;
    double _59 = g.data[_58];
    _54 = _59;
    _jump2536:;
    _51 = _54;
    _jump2531:;
    bool _60 = a(_33, _51);
    int64_t _61;
    if (!_60)
    goto _jump2539;
    _61 = n.d1;
    goto _jump2540;
    _jump2539:;
    _61 = h;
    _jump2540:;
    if (_61 >= 0)
    goto _jump2541;
    fail_assertion("negative array index");
    _jump2541:;
    if (_61 < i.d0)
    goto _jump2542;
    fail_assertion("index too large");
    _jump2542:;
    if (n.d0 >= 0)
    goto _jump2543;
    fail_assertion("negative array index");
    _jump2543:;
    if (n.d0 < i.d1)
    goto _jump2544;
    fail_assertion("index too large");
    _jump2544:;
    if (h >= 0)
    goto _jump2545;
    fail_assertion("negative array index");
    _jump2545:;
    if (h < i.d2)
    goto _jump2546;
    fail_assertion("index too large");
    _jump2546:;
    int64_t _62 = 0;
    _62 *= i.d0;
    _62 += _61;
    _62 *= i.d1;
    _62 += n.d0;
    _62 *= i.d2;
    _62 += h;
    double _63 = i.data[_62];
    double _64;
    // Computing bound for u
    if (j > 0) 
    goto _jump2547;
    fail_assertion("non-positive loop bound");
    _jump2547:;
    // Computing bound for v
    if (n.d2 > 0) 
    goto _jump2548;
    fail_assertion("non-positive loop bound");
    _jump2548:;
    _64 = 0;
    int64_t _65 = 0; // v
    int64_t _66 = 0; // u
    _jump2549:; // Begin body of loop
    _a2_double _67;
    // Computing bound for w
    _67.d0 = n.d0;
    if (n.d0 > 0) 
    goto _jump2550;
    fail_assertion("non-positive loop bound");
    _jump2550:;
    // Computing bound for x
    _67.d1 = n.d1;
    if (n.d1 > 0) 
    goto _jump2551;
    fail_assertion("non-positive loop bound");
    _jump2551:;
    // Computing total size of heap memory to allocate
    int64_t _68 = 1;
    _68 *= n.d0;
    _68 *= n.d1;
    _68 *= sizeof(double);
    _67.data = jpl_alloc(_68);
    int64_t _69 = 0; // x
    int64_t _70 = 0; // w
    _jump2552:; // Begin body of loop
    double _71 = 19.0;
    int64_t _72 = 0;
    _72 *= _67.d0;
    _72 += _70;
    _72 *= _67.d1;
    _72 += _69;
    _67.data[_72] = _71;
    _69++;
    if (_69 < n.d1)
    goto _jump2552;
    _69 = 0;
    _70++;
    if (_70 < n.d0)
    goto _jump2552;
    // End body of loop
    if (n.d1 >= 0)
    goto _jump2553;
    fail_assertion("negative array index");
    _jump2553:;
    if (n.d1 < _67.d0)
    goto _jump2554;
    fail_assertion("index too large");
    _jump2554:;
    if (_66 >= 0)
    goto _jump2555;
    fail_assertion("negative array index");
    _jump2555:;
    if (_66 < _67.d1)
    goto _jump2556;
    fail_assertion("index too large");
    _jump2556:;
    int64_t _73 = 0;
    _73 *= _67.d0;
    _73 += n.d1;
    _73 *= _67.d1;
    _73 += _66;
    double _74 = _67.data[_73];
    _64 += _74;
    _65++;
    if (_65 < n.d2)
    goto _jump2549;
    _65 = 0;
    _66++;
    if (_66 < j)
    goto _jump2549;
    // End body of loop
    double _75 = -_64;
    _a3__a2_double _76;
    // Computing bound for u
    int64_t _77 = 40;
    _76.d0 = _77;
    if (_77 > 0) 
    goto _jump2557;
    fail_assertion("non-positive loop bound");
    _jump2557:;
    // Computing bound for v
    _76.d1 = n.d1;
    if (n.d1 > 0) 
    goto _jump2558;
    fail_assertion("non-positive loop bound");
    _jump2558:;
    // Computing bound for w
    int64_t _78;
    if (!_0)
    goto _jump2559;
    _78 = l;
    goto _jump2560;
    _jump2559:;
    _78 = l;
    _jump2560:;
    _76.d2 = _78;
    if (_78 > 0) 
    goto _jump2561;
    fail_assertion("non-positive loop bound");
    _jump2561:;
    // Computing total size of heap memory to allocate
    int64_t _79 = 1;
    _79 *= _77;
    _79 *= n.d1;
    _79 *= _78;
    _79 *= sizeof(_a2_double);
    _76.data = jpl_alloc(_79);
    int64_t _80 = 0; // w
    int64_t _81 = 0; // v
    int64_t _82 = 0; // u
    _jump2562:; // Begin body of loop
    _a2_double _83;
    // Computing bound for x
    _83.d0 = h;
    if (h > 0) 
    goto _jump2563;
    fail_assertion("non-positive loop bound");
    _jump2563:;
    // Computing bound for y
    _83.d1 = j;
    if (j > 0) 
    goto _jump2564;
    fail_assertion("non-positive loop bound");
    _jump2564:;
    // Computing total size of heap memory to allocate
    int64_t _84 = 1;
    _84 *= h;
    _84 *= j;
    _84 *= sizeof(double);
    _83.data = jpl_alloc(_84);
    int64_t _85 = 0; // y
    int64_t _86 = 0; // x
    _jump2565:; // Begin body of loop
    int64_t _87 = 0;
    _87 *= _83.d0;
    _87 += _86;
    _87 *= _83.d1;
    _87 += _85;
    _83.data[_87] = c;
    _85++;
    if (_85 < j)
    goto _jump2565;
    _85 = 0;
    _86++;
    if (_86 < h)
    goto _jump2565;
    // End body of loop
    int64_t _88 = 0;
    _88 *= _76.d0;
    _88 += _82;
    _88 *= _76.d1;
    _88 += _81;
    _88 *= _76.d2;
    _88 += _80;
    _76.data[_88] = _83;
    _80++;
    if (_80 < _78)
    goto _jump2562;
    _80 = 0;
    _81++;
    if (_81 < n.d1)
    goto _jump2562;
    _81 = 0;
    _82++;
    if (_82 < _77)
    goto _jump2562;
    // End body of loop
    int64_t _89 = 4;
    if (_89 >= 0)
    goto _jump2566;
    fail_assertion("negative array index");
    _jump2566:;
    if (_89 < _76.d0)
    goto _jump2567;
    fail_assertion("index too large");
    _jump2567:;
    if (h >= 0)
    goto _jump2568;
    fail_assertion("negative array index");
    _jump2568:;
    if (h < _76.d1)
    goto _jump2569;
    fail_assertion("index too large");
    _jump2569:;
    if (n.d0 >= 0)
    goto _jump2570;
    fail_assertion("negative array index");
    _jump2570:;
    if (n.d0 < _76.d2)
    goto _jump2571;
    fail_assertion("index too large");
    _jump2571:;
    int64_t _90 = 0;
    _90 *= _76.d0;
    _90 += _89;
    _90 *= _76.d1;
    _90 += h;
    _90 *= _76.d2;
    _90 += n.d0;
    _a2_double _91 = _76.data[_90];
    if (n.d0 >= 0)
    goto _jump2572;
    fail_assertion("negative array index");
    _jump2572:;
    if (n.d0 < _91.d0)
    goto _jump2573;
    fail_assertion("index too large");
    _jump2573:;
    if (j >= 0)
    goto _jump2574;
    fail_assertion("negative array index");
    _jump2574:;
    if (j < _91.d1)
    goto _jump2575;
    fail_assertion("index too large");
    _jump2575:;
    int64_t _92 = 0;
    _92 *= _91.d0;
    _92 += n.d0;
    _92 *= _91.d1;
    _92 += j;
    double _93 = _91.data[_92];
    double _94 = _75 - _93;
    double _95 = -_94;
    rgba _96 = { _1, _2, _63, _95 };
    _a3_int64_t _97;
    // Computing bound for v
    _97.d0 = h;
    if (h > 0) 
    goto _jump2576;
    fail_assertion("non-positive loop bound");
    _jump2576:;
    // Computing bound for w
    _97.d1 = n.d2;
    if (n.d2 > 0) 
    goto _jump2577;
    fail_assertion("non-positive loop bound");
    _jump2577:;
    // Computing bound for x
    _97.d2 = j;
    if (j > 0) 
    goto _jump2578;
    fail_assertion("non-positive loop bound");
    _jump2578:;
    // Computing total size of heap memory to allocate
    int64_t _98 = 1;
    _98 *= h;
    _98 *= n.d2;
    _98 *= j;
    _98 *= sizeof(int64_t);
    _97.data = jpl_alloc(_98);
    int64_t _99 = 0; // x
    int64_t _100 = 0; // w
    int64_t _101 = 0; // v
    _jump2579:; // Begin body of loop
    bool _102 = true;
    bool _103 = !_102;
    int64_t _104;
    if (!_103)
    goto _jump2580;
    _104 = l;
    goto _jump2581;
    _jump2580:;
    int64_t _105 = 764;
    int64_t _106 = _105 - j;
    _104 = _106;
    _jump2581:;
    int64_t _107 = 0;
    _107 *= _97.d0;
    _107 += _101;
    _107 *= _97.d1;
    _107 += _100;
    _107 *= _97.d2;
    _107 += _99;
    _97.data[_107] = _104;
    _99++;
    if (_99 < j)
    goto _jump2579;
    _99 = 0;
    _100++;
    if (_100 < n.d2)
    goto _jump2579;
    _100 = 0;
    _101++;
    if (_101 < h)
    goto _jump2579;
    // End body of loop
    bool _108 = true;
    double _109;
    if (!_108)
    goto _jump2582;
    if (n.d0 >= 0)
    goto _jump2583;
    fail_assertion("negative array index");
    _jump2583:;
    if (n.d0 < g.d0)
    goto _jump2584;
    fail_assertion("index too large");
    _jump2584:;
    int64_t _110 = 0;
    _110 *= g.d0;
    _110 += n.d0;
    double _111 = g.data[_110];
    double _112 = -_111;
    double _113 = c / c;
    double _114 = fmod(_112, _113);
    _109 = _114;
    goto _jump2585;
    _jump2582:;
    _109 = c;
    _jump2585:;
    double _115 = 11.0;
    double _116 = -_115;
    double _117 = _109 - _116;
    bool _118 = a(_97, _117);
    bool _119 = !_0;
    int64_t _121;
    // Computing bound for v
    if (l > 0) 
    goto _jump2586;
    fail_assertion("non-positive loop bound");
    _jump2586:;
    _121 = 0;
    int64_t _122 = 0; // v
    _jump2587:; // Begin body of loop
    _121 += n.d1;
    _122++;
    if (_122 < l)
    goto _jump2587;
    // End body of loop
    bool _123 = _121 != h;
    bool _124 = !_123;
    bool _125 = !_124;
    bool _120 = _125;
    if (0 != _125)
    goto _jump2588;
    int64_t _126 = 121;
    int64_t _127 = -_126;
    bool _128 = h > _127;
    _120 = _128;
    _jump2588:;
    _a1_void_t _129;
    // Computing bound for v
    _129.d0 = j;
    if (j > 0) 
    goto _jump2589;
    fail_assertion("non-positive loop bound");
    _jump2589:;
    // Computing total size of heap memory to allocate
    int64_t _130 = 1;
    _130 *= j;
    _130 *= sizeof(void_t);
    _129.data = jpl_alloc(_130);
    int64_t _131 = 0; // v
    _jump2590:; // Begin body of loop
    if (l >= 0)
    goto _jump2591;
    fail_assertion("negative array index");
    _jump2591:;
    if (l < n.d0)
    goto _jump2592;
    fail_assertion("index too large");
    _jump2592:;
    if (j >= 0)
    goto _jump2593;
    fail_assertion("negative array index");
    _jump2593:;
    if (j < n.d1)
    goto _jump2594;
    fail_assertion("index too large");
    _jump2594:;
    if (k >= 0)
    goto _jump2595;
    fail_assertion("negative array index");
    _jump2595:;
    if (k < n.d2)
    goto _jump2596;
    fail_assertion("index too large");
    _jump2596:;
    int64_t _132 = 0;
    _132 *= n.d0;
    _132 += l;
    _132 *= n.d1;
    _132 += j;
    _132 *= n.d2;
    _132 += k;
    void_t _133 = n.data[_132];
    int64_t _134 = 0;
    _134 *= _129.d0;
    _134 += _131;
    _129.data[_134] = _133;
    _131++;
    if (_131 < j)
    goto _jump2590;
    // End body of loop
    _a1__a1_void_t _135;
    _135.d0 = 1;
    _135.data = jpl_alloc(sizeof(_a1_void_t) * 1);
    _135.data[0] = _129;
    int64_t _136;
    // Computing bound for v
    int64_t _137;
    // Computing bound for v
    if (k > 0) 
    goto _jump2597;
    fail_assertion("non-positive loop bound");
    _jump2597:;
    // Computing bound for w
    if (j > 0) 
    goto _jump2598;
    fail_assertion("non-positive loop bound");
    _jump2598:;
    _137 = 0;
    int64_t _138 = 0; // w
    int64_t _139 = 0; // v
    _jump2599:; // Begin body of loop
    _137 += n.d2;
    _138++;
    if (_138 < j)
    goto _jump2599;
    _138 = 0;
    _139++;
    if (_139 < k)
    goto _jump2599;
    // End body of loop
    int64_t _140 = _137 + n.d0;
    if (_140 > 0) 
    goto _jump2600;
    fail_assertion("non-positive loop bound");
    _jump2600:;
    _136 = 0;
    int64_t _141 = 0; // v
    _jump2601:; // Begin body of loop
    int64_t _142 = n.d1 * n.d1;
    int64_t _143 = -_142;
    _136 += _143;
    _141++;
    if (_141 < _140)
    goto _jump2601;
    // End body of loop
    if (_136 >= 0)
    goto _jump2602;
    fail_assertion("negative array index");
    _jump2602:;
    if (_136 < _135.d0)
    goto _jump2603;
    fail_assertion("index too large");
    _jump2603:;
    int64_t _144 = 0;
    _144 *= _135.d0;
    _144 += _136;
    _a1_void_t _145 = _135.data[_144];
    bool _146 = true;
    _a2_int64_t _147;
    if (!_146)
    goto _jump2604;
    bool _148 = h >= n.d0;
    _a2_int64_t _149;
    if (!_148)
    goto _jump2605;
    _a2_int64_t _150;
    // Computing bound for v
    _150.d0 = n.d1;
    if (n.d1 > 0) 
    goto _jump2606;
    fail_assertion("non-positive loop bound");
    _jump2606:;
    // Computing bound for w
    _150.d1 = n.d1;
    if (n.d1 > 0) 
    goto _jump2607;
    fail_assertion("non-positive loop bound");
    _jump2607:;
    // Computing total size of heap memory to allocate
    int64_t _151 = 1;
    _151 *= n.d1;
    _151 *= n.d1;
    _151 *= sizeof(int64_t);
    _150.data = jpl_alloc(_151);
    int64_t _152 = 0; // w
    int64_t _153 = 0; // v
    _jump2608:; // Begin body of loop
    int64_t _154 = 0;
    _154 *= _150.d0;
    _154 += _153;
    _154 *= _150.d1;
    _154 += _152;
    _150.data[_154] = _153;
    _152++;
    if (_152 < n.d1)
    goto _jump2608;
    _152 = 0;
    _153++;
    if (_153 < n.d1)
    goto _jump2608;
    // End body of loop
    _149 = _150;
    goto _jump2609;
    _jump2605:;
    _a2_int64_t _155;
    // Computing bound for v
    _155.d0 = n.d0;
    if (n.d0 > 0) 
    goto _jump2610;
    fail_assertion("non-positive loop bound");
    _jump2610:;
    // Computing bound for w
    _155.d1 = h;
    if (h > 0) 
    goto _jump2611;
    fail_assertion("non-positive loop bound");
    _jump2611:;
    // Computing total size of heap memory to allocate
    int64_t _156 = 1;
    _156 *= n.d0;
    _156 *= h;
    _156 *= sizeof(int64_t);
    _155.data = jpl_alloc(_156);
    int64_t _157 = 0; // w
    int64_t _158 = 0; // v
    _jump2612:; // Begin body of loop
    int64_t _159 = 0;
    _159 *= _155.d0;
    _159 += _158;
    _159 *= _155.d1;
    _159 += _157;
    _155.data[_159] = n.d1;
    _157++;
    if (_157 < h)
    goto _jump2612;
    _157 = 0;
    _158++;
    if (_158 < n.d0)
    goto _jump2612;
    // End body of loop
    _149 = _155;
    _jump2609:;
    _147 = _149;
    goto _jump2613;
    _jump2604:;
    _a2_int64_t _160;
    // Computing bound for v
    int64_t _161;
    if (!_0)
    goto _jump2614;
    _161 = l;
    goto _jump2615;
    _jump2614:;
    int64_t _162 = 341;
    _161 = _162;
    _jump2615:;
    _160.d0 = _161;
    if (_161 > 0) 
    goto _jump2616;
    fail_assertion("non-positive loop bound");
    _jump2616:;
    // Computing bound for w
    int64_t _163 = l + h;
    _160.d1 = _163;
    if (_163 > 0) 
    goto _jump2617;
    fail_assertion("non-positive loop bound");
    _jump2617:;
    // Computing total size of heap memory to allocate
    int64_t _164 = 1;
    _164 *= _161;
    _164 *= _163;
    _164 *= sizeof(int64_t);
    _160.data = jpl_alloc(_164);
    int64_t _165 = 0; // w
    int64_t _166 = 0; // v
    _jump2618:; // Begin body of loop
    int64_t _167 = 0;
    _167 *= _160.d0;
    _167 += _166;
    _167 *= _160.d1;
    _167 += _165;
    _160.data[_167] = j;
    _165++;
    if (_165 < _163)
    goto _jump2618;
    _165 = 0;
    _166++;
    if (_166 < _161)
    goto _jump2618;
    // End body of loop
    _147 = _160;
    _jump2613:;
    int64_t _168;
    // Computing bound for v
    if (j > 0) 
    goto _jump2619;
    fail_assertion("non-positive loop bound");
    _jump2619:;
    _168 = 0;
    int64_t _169 = 0; // v
    _jump2620:; // Begin body of loop
    _168 += n.d2;
    _169++;
    if (_169 < j)
    goto _jump2620;
    // End body of loop
    if (n.d1 >= 0)
    goto _jump2621;
    fail_assertion("negative array index");
    _jump2621:;
    if (n.d1 < _147.d0)
    goto _jump2622;
    fail_assertion("index too large");
    _jump2622:;
    if (_168 >= 0)
    goto _jump2623;
    fail_assertion("negative array index");
    _jump2623:;
    if (_168 < _147.d1)
    goto _jump2624;
    fail_assertion("index too large");
    _jump2624:;
    int64_t _170 = 0;
    _170 *= _147.d0;
    _170 += n.d1;
    _170 *= _147.d1;
    _170 += _168;
    int64_t _171 = _147.data[_170];
    if (_171 >= 0)
    goto _jump2625;
    fail_assertion("negative array index");
    _jump2625:;
    if (_171 < _145.d0)
    goto _jump2626;
    fail_assertion("index too large");
    _jump2626:;
    int64_t _172 = 0;
    _172 *= _145.d0;
    _172 += _171;
    void_t _173 = _145.data[_172];
    bool _174 = e(_120, _173);
    _a1_bool _175;
    _175.d0 = 3;
    _175.data = jpl_alloc(sizeof(bool) * 3);
    _175.data[0] = _118;
    _175.data[1] = _119;
    _175.data[2] = _174;
    _a3__a3__a3__a3_bool _176;
    // Computing bound for w
    int64_t _177 = -n.d0;
    int64_t _178 = -_177;
    _176.d0 = _178;
    if (_178 > 0) 
    goto _jump2627;
    fail_assertion("non-positive loop bound");
    _jump2627:;
    // Computing bound for x
    _176.d1 = k;
    if (k > 0) 
    goto _jump2628;
    fail_assertion("non-positive loop bound");
    _jump2628:;
    // Computing bound for y
    int64_t _179 = n.d1 * n.d0;
    _176.d2 = _179;
    if (_179 > 0) 
    goto _jump2629;
    fail_assertion("non-positive loop bound");
    _jump2629:;
    // Computing total size of heap memory to allocate
    int64_t _180 = 1;
    _180 *= _178;
    _180 *= k;
    _180 *= _179;
    _180 *= sizeof(_a3__a3__a3_bool);
    _176.data = jpl_alloc(_180);
    int64_t _181 = 0; // y
    int64_t _182 = 0; // x
    int64_t _183 = 0; // w
    _jump2630:; // Begin body of loop
    _a3__a3__a3_bool _184;
    // Computing bound for z
    _184.d0 = _181;
    if (_181 > 0) 
    goto _jump2631;
    fail_assertion("non-positive loop bound");
    _jump2631:;
    // Computing bound for A
    _184.d1 = h;
    if (h > 0) 
    goto _jump2632;
    fail_assertion("non-positive loop bound");
    _jump2632:;
    // Computing bound for B
    _184.d2 = _181;
    if (_181 > 0) 
    goto _jump2633;
    fail_assertion("non-positive loop bound");
    _jump2633:;
    // Computing total size of heap memory to allocate
    int64_t _185 = 1;
    _185 *= _181;
    _185 *= h;
    _185 *= _181;
    _185 *= sizeof(_a3__a3_bool);
    _184.data = jpl_alloc(_185);
    int64_t _186 = 0; // B
    int64_t _187 = 0; // A
    int64_t _188 = 0; // z
    _jump2634:; // Begin body of loop
    _a3__a3_bool _189;
    // Computing bound for C
    _189.d0 = _181;
    if (_181 > 0) 
    goto _jump2635;
    fail_assertion("non-positive loop bound");
    _jump2635:;
    // Computing bound for D
    int64_t _190 = -h;
    _189.d1 = _190;
    if (_190 > 0) 
    goto _jump2636;
    fail_assertion("non-positive loop bound");
    _jump2636:;
    // Computing bound for E
    _189.d2 = _181;
    if (_181 > 0) 
    goto _jump2637;
    fail_assertion("non-positive loop bound");
    _jump2637:;
    // Computing total size of heap memory to allocate
    int64_t _191 = 1;
    _191 *= _181;
    _191 *= _190;
    _191 *= _181;
    _191 *= sizeof(_a3_bool);
    _189.data = jpl_alloc(_191);
    int64_t _192 = 0; // E
    int64_t _193 = 0; // D
    int64_t _194 = 0; // C
    _jump2638:; // Begin body of loop
    _a3_bool _195 = m(n);
    int64_t _196 = 0;
    _196 *= _189.d0;
    _196 += _194;
    _196 *= _189.d1;
    _196 += _193;
    _196 *= _189.d2;
    _196 += _192;
    _189.data[_196] = _195;
    _192++;
    if (_192 < _181)
    goto _jump2638;
    _192 = 0;
    _193++;
    if (_193 < _190)
    goto _jump2638;
    _193 = 0;
    _194++;
    if (_194 < _181)
    goto _jump2638;
    // End body of loop
    int64_t _197 = 0;
    _197 *= _184.d0;
    _197 += _188;
    _197 *= _184.d1;
    _197 += _187;
    _197 *= _184.d2;
    _197 += _186;
    _184.data[_197] = _189;
    _186++;
    if (_186 < _181)
    goto _jump2634;
    _186 = 0;
    _187++;
    if (_187 < h)
    goto _jump2634;
    _187 = 0;
    _188++;
    if (_188 < _181)
    goto _jump2634;
    // End body of loop
    int64_t _198 = 0;
    _198 *= _176.d0;
    _198 += _183;
    _198 *= _176.d1;
    _198 += _182;
    _198 *= _176.d2;
    _198 += _181;
    _176.data[_198] = _184;
    _181++;
    if (_181 < _179)
    goto _jump2630;
    _181 = 0;
    _182++;
    if (_182 < k)
    goto _jump2630;
    _182 = 0;
    _183++;
    if (_183 < _178)
    goto _jump2630;
    // End body of loop
    _a3_bool _199;
    // Computing bound for w
    _199.d0 = n.d2;
    if (n.d2 > 0) 
    goto _jump2639;
    fail_assertion("non-positive loop bound");
    _jump2639:;
    // Computing bound for x
    _199.d1 = h;
    if (h > 0) 
    goto _jump2640;
    fail_assertion("non-positive loop bound");
    _jump2640:;
    // Computing bound for y
    _199.d2 = n.d1;
    if (n.d1 > 0) 
    goto _jump2641;
    fail_assertion("non-positive loop bound");
    _jump2641:;
    // Computing total size of heap memory to allocate
    int64_t _200 = 1;
    _200 *= n.d2;
    _200 *= h;
    _200 *= n.d1;
    _200 *= sizeof(bool);
    _199.data = jpl_alloc(_200);
    int64_t _201 = 0; // y
    int64_t _202 = 0; // x
    int64_t _203 = 0; // w
    _jump2642:; // Begin body of loop
    bool _204 = false;
    int64_t _205 = 0;
    _205 *= _199.d0;
    _205 += _203;
    _205 *= _199.d1;
    _205 += _202;
    _205 *= _199.d2;
    _205 += _201;
    _199.data[_205] = _204;
    _201++;
    if (_201 < n.d1)
    goto _jump2642;
    _201 = 0;
    _202++;
    if (_202 < h)
    goto _jump2642;
    _202 = 0;
    _203++;
    if (_203 < n.d2)
    goto _jump2642;
    // End body of loop
    int64_t _206 = -l;
    if (j >= 0)
    goto _jump2643;
    fail_assertion("negative array index");
    _jump2643:;
    if (j < _199.d0)
    goto _jump2644;
    fail_assertion("index too large");
    _jump2644:;
    if (k >= 0)
    goto _jump2645;
    fail_assertion("negative array index");
    _jump2645:;
    if (k < _199.d1)
    goto _jump2646;
    fail_assertion("index too large");
    _jump2646:;
    if (_206 >= 0)
    goto _jump2647;
    fail_assertion("negative array index");
    _jump2647:;
    if (_206 < _199.d2)
    goto _jump2648;
    fail_assertion("index too large");
    _jump2648:;
    int64_t _207 = 0;
    _207 *= _199.d0;
    _207 += j;
    _207 *= _199.d1;
    _207 += k;
    _207 *= _199.d2;
    _207 += _206;
    bool _208 = _199.data[_207];
    int64_t _209;
    if (!_208)
    goto _jump2649;
    int64_t _210;
    // Computing bound for w
    if (n.d1 > 0) 
    goto _jump2650;
    fail_assertion("non-positive loop bound");
    _jump2650:;
    _210 = 0;
    int64_t _211 = 0; // w
    _jump2651:; // Begin body of loop
    _210 += n.d0;
    _211++;
    if (_211 < n.d1)
    goto _jump2651;
    // End body of loop
    _209 = _210;
    goto _jump2652;
    _jump2649:;
    _209 = n.d1;
    _jump2652:;
    int64_t _212 = n.d2 % _209;
    if (n.d0 >= 0)
    goto _jump2653;
    fail_assertion("negative array index");
    _jump2653:;
    if (n.d0 < _176.d0)
    goto _jump2654;
    fail_assertion("index too large");
    _jump2654:;
    if (_212 >= 0)
    goto _jump2655;
    fail_assertion("negative array index");
    _jump2655:;
    if (_212 < _176.d1)
    goto _jump2656;
    fail_assertion("index too large");
    _jump2656:;
    if (n.d0 >= 0)
    goto _jump2657;
    fail_assertion("negative array index");
    _jump2657:;
    if (n.d0 < _176.d2)
    goto _jump2658;
    fail_assertion("index too large");
    _jump2658:;
    int64_t _213 = 0;
    _213 *= _176.d0;
    _213 += n.d0;
    _213 *= _176.d1;
    _213 += _212;
    _213 *= _176.d2;
    _213 += n.d0;
    _a3__a3__a3_bool _214 = _176.data[_213];
    int64_t _215 = -h;
    int64_t _216 = h % n.d1;
    int64_t _217 = _216 - n.d2;
    int64_t _218 = 348;
    int64_t _219 = -_218;
    int64_t _220 = -_219;
    if (_215 >= 0)
    goto _jump2659;
    fail_assertion("negative array index");
    _jump2659:;
    if (_215 < _214.d0)
    goto _jump2660;
    fail_assertion("index too large");
    _jump2660:;
    if (_217 >= 0)
    goto _jump2661;
    fail_assertion("negative array index");
    _jump2661:;
    if (_217 < _214.d1)
    goto _jump2662;
    fail_assertion("index too large");
    _jump2662:;
    if (_220 >= 0)
    goto _jump2663;
    fail_assertion("negative array index");
    _jump2663:;
    if (_220 < _214.d2)
    goto _jump2664;
    fail_assertion("index too large");
    _jump2664:;
    int64_t _221 = 0;
    _221 *= _214.d0;
    _221 += _215;
    _221 *= _214.d1;
    _221 += _217;
    _221 *= _214.d2;
    _221 += _220;
    _a3__a3_bool _222 = _214.data[_221];
    int64_t _223;
    // Computing bound for w
    if (n.d1 > 0) 
    goto _jump2665;
    fail_assertion("non-positive loop bound");
    _jump2665:;
    // Computing bound for x
    _a1_int64_t _224;
    // Computing bound for w
    _224.d0 = h;
    if (h > 0) 
    goto _jump2666;
    fail_assertion("non-positive loop bound");
    _jump2666:;
    // Computing total size of heap memory to allocate
    int64_t _225 = 1;
    _225 *= h;
    _225 *= sizeof(int64_t);
    _224.data = jpl_alloc(_225);
    int64_t _226 = 0; // w
    _jump2667:; // Begin body of loop
    int64_t _227;
    if (!_0)
    goto _jump2668;
    _227 = n.d1;
    goto _jump2669;
    _jump2668:;
    _227 = h;
    _jump2669:;
    int64_t _228 = 0;
    _228 *= _224.d0;
    _228 += _226;
    _224.data[_228] = _227;
    _226++;
    if (_226 < h)
    goto _jump2667;
    // End body of loop
    int64_t _229 = 576;
    if (_229 >= 0)
    goto _jump2670;
    fail_assertion("negative array index");
    _jump2670:;
    if (_229 < _224.d0)
    goto _jump2671;
    fail_assertion("index too large");
    _jump2671:;
    int64_t _230 = 0;
    _230 *= _224.d0;
    _230 += _229;
    int64_t _231 = _224.data[_230];
    if (_231 > 0) 
    goto _jump2672;
    fail_assertion("non-positive loop bound");
    _jump2672:;
    _223 = 0;
    int64_t _232 = 0; // x
    int64_t _233 = 0; // w
    _jump2673:; // Begin body of loop
    _223 += l;
    _232++;
    if (_232 < _231)
    goto _jump2673;
    _232 = 0;
    _233++;
    if (_233 < n.d1)
    goto _jump2673;
    // End body of loop
    if (n.d0 >= 0)
    goto _jump2674;
    fail_assertion("negative array index");
    _jump2674:;
    if (n.d0 < _222.d0)
    goto _jump2675;
    fail_assertion("index too large");
    _jump2675:;
    if (h >= 0)
    goto _jump2676;
    fail_assertion("negative array index");
    _jump2676:;
    if (h < _222.d1)
    goto _jump2677;
    fail_assertion("index too large");
    _jump2677:;
    if (_223 >= 0)
    goto _jump2678;
    fail_assertion("negative array index");
    _jump2678:;
    if (_223 < _222.d2)
    goto _jump2679;
    fail_assertion("index too large");
    _jump2679:;
    int64_t _234 = 0;
    _234 *= _222.d0;
    _234 += n.d0;
    _234 *= _222.d1;
    _234 += h;
    _234 *= _222.d2;
    _234 += _223;
    _a3_bool _235 = _222.data[_234];
    return _235;
    _a3__a3_int64_t _236;
    // Computing bound for w
    _236.d0 = n.d0;
    if (n.d0 > 0) 
    goto _jump2680;
    fail_assertion("non-positive loop bound");
    _jump2680:;
    // Computing bound for x
    _236.d1 = n.d0;
    if (n.d0 > 0) 
    goto _jump2681;
    fail_assertion("non-positive loop bound");
    _jump2681:;
    // Computing bound for y
    _236.d2 = n.d1;
    if (n.d1 > 0) 
    goto _jump2682;
    fail_assertion("non-positive loop bound");
    _jump2682:;
    // Computing total size of heap memory to allocate
    int64_t _237 = 1;
    _237 *= n.d0;
    _237 *= n.d0;
    _237 *= n.d1;
    _237 *= sizeof(_a3_int64_t);
    _236.data = jpl_alloc(_237);
    int64_t _238 = 0; // y
    int64_t _239 = 0; // x
    int64_t _240 = 0; // w
    _jump2683:; // Begin body of loop
    _a2__a3_int64_t _241;
    // Computing bound for z
    int64_t _242 = 664;
    _241.d0 = _242;
    if (_242 > 0) 
    goto _jump2684;
    fail_assertion("non-positive loop bound");
    _jump2684:;
    // Computing bound for A
    int64_t _243 = 610;
    _241.d1 = _243;
    if (_243 > 0) 
    goto _jump2685;
    fail_assertion("non-positive loop bound");
    _jump2685:;
    // Computing total size of heap memory to allocate
    int64_t _244 = 1;
    _244 *= _242;
    _244 *= _243;
    _244 *= sizeof(_a3_int64_t);
    _241.data = jpl_alloc(_244);
    int64_t _245 = 0; // A
    int64_t _246 = 0; // z
    _jump2686:; // Begin body of loop
    _a3_int64_t _247;
    // Computing bound for B
    _247.d0 = _245;
    if (_245 > 0) 
    goto _jump2687;
    fail_assertion("non-positive loop bound");
    _jump2687:;
    // Computing bound for C
    _247.d1 = _245;
    if (_245 > 0) 
    goto _jump2688;
    fail_assertion("non-positive loop bound");
    _jump2688:;
    // Computing bound for D
    _247.d2 = n.d0;
    if (n.d0 > 0) 
    goto _jump2689;
    fail_assertion("non-positive loop bound");
    _jump2689:;
    // Computing total size of heap memory to allocate
    int64_t _248 = 1;
    _248 *= _245;
    _248 *= _245;
    _248 *= n.d0;
    _248 *= sizeof(int64_t);
    _247.data = jpl_alloc(_248);
    int64_t _249 = 0; // D
    int64_t _250 = 0; // C
    int64_t _251 = 0; // B
    _jump2690:; // Begin body of loop
    int64_t _252 = 295;
    int64_t _253 = 0;
    _253 *= _247.d0;
    _253 += _251;
    _253 *= _247.d1;
    _253 += _250;
    _253 *= _247.d2;
    _253 += _249;
    _247.data[_253] = _252;
    _249++;
    if (_249 < n.d0)
    goto _jump2690;
    _249 = 0;
    _250++;
    if (_250 < _245)
    goto _jump2690;
    _250 = 0;
    _251++;
    if (_251 < _245)
    goto _jump2690;
    // End body of loop
    int64_t _254 = 0;
    _254 *= _241.d0;
    _254 += _246;
    _254 *= _241.d1;
    _254 += _245;
    _241.data[_254] = _247;
    _245++;
    if (_245 < _243)
    goto _jump2686;
    _245 = 0;
    _246++;
    if (_246 < _242)
    goto _jump2686;
    // End body of loop
    bool _255 = h <= h;
    int64_t _256;
    if (!_255)
    goto _jump2691;
    bool _257 = false;
    int64_t _258;
    if (!_257)
    goto _jump2692;
    _258 = j;
    goto _jump2693;
    _jump2692:;
    _258 = l;
    _jump2693:;
    _256 = _258;
    goto _jump2694;
    _jump2691:;
    _256 = j;
    _jump2694:;
    int64_t _259;
    // Computing bound for z
    if (n.d0 > 0) 
    goto _jump2695;
    fail_assertion("non-positive loop bound");
    _jump2695:;
    // Computing bound for A
    if (_238 > 0) 
    goto _jump2696;
    fail_assertion("non-positive loop bound");
    _jump2696:;
    // Computing bound for B
    if (n.d1 > 0) 
    goto _jump2697;
    fail_assertion("non-positive loop bound");
    _jump2697:;
    _259 = 0;
    int64_t _260 = 0; // B
    int64_t _261 = 0; // A
    int64_t _262 = 0; // z
    _jump2698:; // Begin body of loop
    _259 += n.d1;
    _260++;
    if (_260 < n.d1)
    goto _jump2698;
    _260 = 0;
    _261++;
    if (_261 < _238)
    goto _jump2698;
    _261 = 0;
    _262++;
    if (_262 < n.d0)
    goto _jump2698;
    // End body of loop
    int64_t _263 = h / _259;
    if (_256 >= 0)
    goto _jump2699;
    fail_assertion("negative array index");
    _jump2699:;
    if (_256 < _241.d0)
    goto _jump2700;
    fail_assertion("index too large");
    _jump2700:;
    if (_263 >= 0)
    goto _jump2701;
    fail_assertion("negative array index");
    _jump2701:;
    if (_263 < _241.d1)
    goto _jump2702;
    fail_assertion("index too large");
    _jump2702:;
    int64_t _264 = 0;
    _264 *= _241.d0;
    _264 += _256;
    _264 *= _241.d1;
    _264 += _263;
    _a3_int64_t _265 = _241.data[_264];
    int64_t _266 = 0;
    _266 *= _236.d0;
    _266 += _240;
    _266 *= _236.d1;
    _266 += _239;
    _266 *= _236.d2;
    _266 += _238;
    _236.data[_266] = _265;
    _238++;
    if (_238 < n.d1)
    goto _jump2683;
    _238 = 0;
    _239++;
    if (_239 < n.d0)
    goto _jump2683;
    _239 = 0;
    _240++;
    if (_240 < n.d0)
    goto _jump2683;
    // End body of loop
    int64_t _267;
    if (!_0)
    goto _jump2703;
    int64_t _268;
    // Computing bound for w
    if (n.d0 > 0) 
    goto _jump2704;
    fail_assertion("non-positive loop bound");
    _jump2704:;
    _268 = 0;
    int64_t _269 = 0; // w
    _jump2705:; // Begin body of loop
    _268 += j;
    _269++;
    if (_269 < n.d0)
    goto _jump2705;
    // End body of loop
    _267 = _268;
    goto _jump2706;
    _jump2703:;
    _267 = h;
    _jump2706:;
    int64_t _270;
    // Computing bound for w
    if (n.d1 > 0) 
    goto _jump2707;
    fail_assertion("non-positive loop bound");
    _jump2707:;
    _270 = 0;
    int64_t _271 = 0; // w
    _jump2708:; // Begin body of loop
    _a3_int64_t _272;
    // Computing bound for x
    int64_t _273 = -h;
    _272.d0 = _273;
    if (_273 > 0) 
    goto _jump2709;
    fail_assertion("non-positive loop bound");
    _jump2709:;
    // Computing bound for y
    _272.d1 = _271;
    if (_271 > 0) 
    goto _jump2710;
    fail_assertion("non-positive loop bound");
    _jump2710:;
    // Computing bound for z
    _272.d2 = j;
    if (j > 0) 
    goto _jump2711;
    fail_assertion("non-positive loop bound");
    _jump2711:;
    // Computing total size of heap memory to allocate
    int64_t _274 = 1;
    _274 *= _273;
    _274 *= _271;
    _274 *= j;
    _274 *= sizeof(int64_t);
    _272.data = jpl_alloc(_274);
    int64_t _275 = 0; // z
    int64_t _276 = 0; // y
    int64_t _277 = 0; // x
    _jump2712:; // Begin body of loop
    bool _278 = true;
    int64_t _279;
    if (!_278)
    goto _jump2713;
    _279 = h;
    goto _jump2714;
    _jump2713:;
    _279 = n.d1;
    _jump2714:;
    int64_t _280 = 0;
    _280 *= _272.d0;
    _280 += _277;
    _280 *= _272.d1;
    _280 += _276;
    _280 *= _272.d2;
    _280 += _275;
    _272.data[_280] = _279;
    _275++;
    if (_275 < j)
    goto _jump2712;
    _275 = 0;
    _276++;
    if (_276 < _271)
    goto _jump2712;
    _276 = 0;
    _277++;
    if (_277 < _273)
    goto _jump2712;
    // End body of loop
    int64_t _281 = 845;
    if (h >= 0)
    goto _jump2715;
    fail_assertion("negative array index");
    _jump2715:;
    if (h < _272.d0)
    goto _jump2716;
    fail_assertion("index too large");
    _jump2716:;
    if (_281 >= 0)
    goto _jump2717;
    fail_assertion("negative array index");
    _jump2717:;
    if (_281 < _272.d1)
    goto _jump2718;
    fail_assertion("index too large");
    _jump2718:;
    if (j >= 0)
    goto _jump2719;
    fail_assertion("negative array index");
    _jump2719:;
    if (j < _272.d2)
    goto _jump2720;
    fail_assertion("index too large");
    _jump2720:;
    int64_t _282 = 0;
    _282 *= _272.d0;
    _282 += h;
    _282 *= _272.d1;
    _282 += _281;
    _282 *= _272.d2;
    _282 += j;
    int64_t _283 = _272.data[_282];
    _270 += _283;
    _271++;
    if (_271 < n.d1)
    goto _jump2708;
    // End body of loop
    _a3_bool _284;
    // Computing bound for w
    _284.d0 = n.d1;
    if (n.d1 > 0) 
    goto _jump2721;
    fail_assertion("non-positive loop bound");
    _jump2721:;
    // Computing bound for x
    int64_t _285 = l - n.d1;
    _284.d1 = _285;
    if (_285 > 0) 
    goto _jump2722;
    fail_assertion("non-positive loop bound");
    _jump2722:;
    // Computing bound for y
    _284.d2 = j;
    if (j > 0) 
    goto _jump2723;
    fail_assertion("non-positive loop bound");
    _jump2723:;
    // Computing total size of heap memory to allocate
    int64_t _286 = 1;
    _286 *= n.d1;
    _286 *= _285;
    _286 *= j;
    _286 *= sizeof(bool);
    _284.data = jpl_alloc(_286);
    int64_t _287 = 0; // y
    int64_t _288 = 0; // x
    int64_t _289 = 0; // w
    _jump2724:; // Begin body of loop
    int64_t _290 = 774;
    int64_t _291 = 233;
    bool _292 = _290 != _291;
    int64_t _293 = 0;
    _293 *= _284.d0;
    _293 += _289;
    _293 *= _284.d1;
    _293 += _288;
    _293 *= _284.d2;
    _293 += _287;
    _284.data[_293] = _292;
    _287++;
    if (_287 < j)
    goto _jump2724;
    _287 = 0;
    _288++;
    if (_288 < _285)
    goto _jump2724;
    _288 = 0;
    _289++;
    if (_289 < n.d1)
    goto _jump2724;
    // End body of loop
    int64_t _294 = 170;
    if (_294 >= 0)
    goto _jump2725;
    fail_assertion("negative array index");
    _jump2725:;
    if (_294 < _284.d0)
    goto _jump2726;
    fail_assertion("index too large");
    _jump2726:;
    if (n.d1 >= 0)
    goto _jump2727;
    fail_assertion("negative array index");
    _jump2727:;
    if (n.d1 < _284.d1)
    goto _jump2728;
    fail_assertion("index too large");
    _jump2728:;
    if (l >= 0)
    goto _jump2729;
    fail_assertion("negative array index");
    _jump2729:;
    if (l < _284.d2)
    goto _jump2730;
    fail_assertion("index too large");
    _jump2730:;
    int64_t _295 = 0;
    _295 *= _284.d0;
    _295 += _294;
    _295 *= _284.d1;
    _295 += n.d1;
    _295 *= _284.d2;
    _295 += l;
    bool _296 = _284.data[_295];
    int64_t _297;
    if (!_296)
    goto _jump2731;
    int64_t _298 = 541;
    _297 = _298;
    goto _jump2732;
    _jump2731:;
    _297 = k;
    _jump2732:;
    if (_267 >= 0)
    goto _jump2733;
    fail_assertion("negative array index");
    _jump2733:;
    if (_267 < _236.d0)
    goto _jump2734;
    fail_assertion("index too large");
    _jump2734:;
    if (_270 >= 0)
    goto _jump2735;
    fail_assertion("negative array index");
    _jump2735:;
    if (_270 < _236.d1)
    goto _jump2736;
    fail_assertion("index too large");
    _jump2736:;
    if (_297 >= 0)
    goto _jump2737;
    fail_assertion("negative array index");
    _jump2737:;
    if (_297 < _236.d2)
    goto _jump2738;
    fail_assertion("index too large");
    _jump2738:;
    int64_t _299 = 0;
    _299 *= _236.d0;
    _299 += _267;
    _299 *= _236.d1;
    _299 += _270;
    _299 *= _236.d2;
    _299 += _297;
    _a3_int64_t _300 = _236.data[_299];
    _a3_double _301;
    if (!_0)
    goto _jump2739;
    _301 = i;
    goto _jump2740;
    _jump2739:;
    _301 = i;
    _jump2740:;
    if (l >= 0)
    goto _jump2741;
    fail_assertion("negative array index");
    _jump2741:;
    if (l < _301.d0)
    goto _jump2742;
    fail_assertion("index too large");
    _jump2742:;
    if (n.d1 >= 0)
    goto _jump2743;
    fail_assertion("negative array index");
    _jump2743:;
    if (n.d1 < _301.d1)
    goto _jump2744;
    fail_assertion("index too large");
    _jump2744:;
    if (n.d2 >= 0)
    goto _jump2745;
    fail_assertion("negative array index");
    _jump2745:;
    if (n.d2 < _301.d2)
    goto _jump2746;
    fail_assertion("index too large");
    _jump2746:;
    int64_t _302 = 0;
    _302 *= _301.d0;
    _302 += l;
    _302 *= _301.d1;
    _302 += n.d1;
    _302 *= _301.d2;
    _302 += n.d2;
    double _303 = _301.data[_302];
    double _304 = -_303;
    double _305 = c * c;
    double _306 = c - _305;
    double _307 = -_306;
    bool _308 = _304 > _307;
    double _309;
    if (!_308)
    goto _jump2747;
    double _310 = 63.0;
    double _311 = -_310;
    double _312;
    // Computing bound for w
    if (n.d0 > 0) 
    goto _jump2748;
    fail_assertion("non-positive loop bound");
    _jump2748:;
    // Computing bound for x
    if (j > 0) 
    goto _jump2749;
    fail_assertion("non-positive loop bound");
    _jump2749:;
    // Computing bound for y
    if (j > 0) 
    goto _jump2750;
    fail_assertion("non-positive loop bound");
    _jump2750:;
    _312 = 0;
    int64_t _313 = 0; // y
    int64_t _314 = 0; // x
    int64_t _315 = 0; // w
    _jump2751:; // Begin body of loop
    double _316 = 35.0;
    double _317 = -_316;
    _312 += _317;
    _313++;
    if (_313 < j)
    goto _jump2751;
    _313 = 0;
    _314++;
    if (_314 < j)
    goto _jump2751;
    _314 = 0;
    _315++;
    if (_315 < n.d0)
    goto _jump2751;
    // End body of loop
    int64_t _318;
    // Computing bound for w
    if (n.d2 > 0) 
    goto _jump2752;
    fail_assertion("non-positive loop bound");
    _jump2752:;
    // Computing bound for x
    if (h > 0) 
    goto _jump2753;
    fail_assertion("non-positive loop bound");
    _jump2753:;
    _318 = 0;
    int64_t _319 = 0; // x
    int64_t _320 = 0; // w
    _jump2754:; // Begin body of loop
    _318 += _320;
    _319++;
    if (_319 < h)
    goto _jump2754;
    _319 = 0;
    _320++;
    if (_320 < n.d2)
    goto _jump2754;
    // End body of loop
    if (k >= 0)
    goto _jump2755;
    fail_assertion("negative array index");
    _jump2755:;
    if (k < i.d0)
    goto _jump2756;
    fail_assertion("index too large");
    _jump2756:;
    if (h >= 0)
    goto _jump2757;
    fail_assertion("negative array index");
    _jump2757:;
    if (h < i.d1)
    goto _jump2758;
    fail_assertion("index too large");
    _jump2758:;
    if (_318 >= 0)
    goto _jump2759;
    fail_assertion("negative array index");
    _jump2759:;
    if (_318 < i.d2)
    goto _jump2760;
    fail_assertion("index too large");
    _jump2760:;
    int64_t _321 = 0;
    _321 *= i.d0;
    _321 += k;
    _321 *= i.d1;
    _321 += h;
    _321 *= i.d2;
    _321 += _318;
    double _322 = i.data[_321];
    double _323 = 78.0;
    rgba _324 = { _311, _312, _322, _323 };
    double _325 = _324.g;
    _309 = _325;
    goto _jump2761;
    _jump2747:;
    _309 = c;
    _jump2761:;
    bool _326 = a(_300, _309);
    _a3_bool _327;
    if (!_326)
    goto _jump2762;
    rgba _328 = { c, c, c, c };
    double _329 = _328.r;
    double _330 = -_329;
    bool _331 = c > _330;
    bool _332 = false;
    _a2_void_t _333;
    if (!_332)
    goto _jump2763;
    _a2_void_t _334;
    // Computing bound for w
    _334.d0 = k;
    if (k > 0) 
    goto _jump2764;
    fail_assertion("non-positive loop bound");
    _jump2764:;
    // Computing bound for x
    _334.d1 = h;
    if (h > 0) 
    goto _jump2765;
    fail_assertion("non-positive loop bound");
    _jump2765:;
    // Computing total size of heap memory to allocate
    int64_t _335 = 1;
    _335 *= k;
    _335 *= h;
    _335 *= sizeof(void_t);
    _334.data = jpl_alloc(_335);
    int64_t _336 = 0; // x
    int64_t _337 = 0; // w
    _jump2766:; // Begin body of loop
    if (n.d0 >= 0)
    goto _jump2767;
    fail_assertion("negative array index");
    _jump2767:;
    if (n.d0 < n.d0)
    goto _jump2768;
    fail_assertion("index too large");
    _jump2768:;
    if (n.d1 >= 0)
    goto _jump2769;
    fail_assertion("negative array index");
    _jump2769:;
    if (n.d1 < n.d1)
    goto _jump2770;
    fail_assertion("index too large");
    _jump2770:;
    if (j >= 0)
    goto _jump2771;
    fail_assertion("negative array index");
    _jump2771:;
    if (j < n.d2)
    goto _jump2772;
    fail_assertion("index too large");
    _jump2772:;
    int64_t _338 = 0;
    _338 *= n.d0;
    _338 += n.d0;
    _338 *= n.d1;
    _338 += n.d1;
    _338 *= n.d2;
    _338 += j;
    void_t _339 = n.data[_338];
    int64_t _340 = 0;
    _340 *= _334.d0;
    _340 += _337;
    _340 *= _334.d1;
    _340 += _336;
    _334.data[_340] = _339;
    _336++;
    if (_336 < h)
    goto _jump2766;
    _336 = 0;
    _337++;
    if (_337 < k)
    goto _jump2766;
    // End body of loop
    _333 = _334;
    goto _jump2773;
    _jump2763:;
    _a2_void_t _341;
    // Computing bound for w
    _341.d0 = n.d1;
    if (n.d1 > 0) 
    goto _jump2774;
    fail_assertion("non-positive loop bound");
    _jump2774:;
    // Computing bound for x
    int64_t _342;
    // Computing bound for w
    if (j > 0) 
    goto _jump2775;
    fail_assertion("non-positive loop bound");
    _jump2775:;
    _342 = 0;
    int64_t _343 = 0; // w
    _jump2776:; // Begin body of loop
    _342 += h;
    _343++;
    if (_343 < j)
    goto _jump2776;
    // End body of loop
    _341.d1 = _342;
    if (_342 > 0) 
    goto _jump2777;
    fail_assertion("non-positive loop bound");
    _jump2777:;
    // Computing total size of heap memory to allocate
    int64_t _344 = 1;
    _344 *= n.d1;
    _344 *= _342;
    _344 *= sizeof(void_t);
    _341.data = jpl_alloc(_344);
    int64_t _345 = 0; // x
    int64_t _346 = 0; // w
    _jump2778:; // Begin body of loop
    int64_t _347 = 676;
    if (k >= 0)
    goto _jump2779;
    fail_assertion("negative array index");
    _jump2779:;
    if (k < n.d0)
    goto _jump2780;
    fail_assertion("index too large");
    _jump2780:;
    if (_347 >= 0)
    goto _jump2781;
    fail_assertion("negative array index");
    _jump2781:;
    if (_347 < n.d1)
    goto _jump2782;
    fail_assertion("index too large");
    _jump2782:;
    if (h >= 0)
    goto _jump2783;
    fail_assertion("negative array index");
    _jump2783:;
    if (h < n.d2)
    goto _jump2784;
    fail_assertion("index too large");
    _jump2784:;
    int64_t _348 = 0;
    _348 *= n.d0;
    _348 += k;
    _348 *= n.d1;
    _348 += _347;
    _348 *= n.d2;
    _348 += h;
    void_t _349 = n.data[_348];
    int64_t _350 = 0;
    _350 *= _341.d0;
    _350 += _346;
    _350 *= _341.d1;
    _350 += _345;
    _341.data[_350] = _349;
    _345++;
    if (_345 < _342)
    goto _jump2778;
    _345 = 0;
    _346++;
    if (_346 < n.d1)
    goto _jump2778;
    // End body of loop
    _333 = _341;
    _jump2773:;
    int64_t _351;
    // Computing bound for w
    int64_t _352 = 129;
    if (_352 > 0) 
    goto _jump2785;
    fail_assertion("non-positive loop bound");
    _jump2785:;
    // Computing bound for x
    int64_t _353;
    // Computing bound for w
    if (l > 0) 
    goto _jump2786;
    fail_assertion("non-positive loop bound");
    _jump2786:;
    _353 = 0;
    int64_t _354 = 0; // w
    _jump2787:; // Begin body of loop
    _353 += j;
    _354++;
    if (_354 < l)
    goto _jump2787;
    // End body of loop
    if (_353 > 0) 
    goto _jump2788;
    fail_assertion("non-positive loop bound");
    _jump2788:;
    // Computing bound for y
    int64_t _355;
    // Computing bound for w
    int64_t _356 = h % h;
    if (_356 > 0) 
    goto _jump2789;
    fail_assertion("non-positive loop bound");
    _jump2789:;
    _355 = 0;
    int64_t _357 = 0; // w
    _jump2790:; // Begin body of loop
    _355 += k;
    _357++;
    if (_357 < _356)
    goto _jump2790;
    // End body of loop
    if (_355 > 0) 
    goto _jump2791;
    fail_assertion("non-positive loop bound");
    _jump2791:;
    _351 = 0;
    int64_t _358 = 0; // y
    int64_t _359 = 0; // x
    int64_t _360 = 0; // w
    _jump2792:; // Begin body of loop
    bool _361 = h < h;
    int64_t _362;
    if (!_361)
    goto _jump2793;
    _362 = n.d2;
    goto _jump2794;
    _jump2793:;
    _362 = _358;
    _jump2794:;
    _351 += _362;
    _358++;
    if (_358 < _355)
    goto _jump2792;
    _358 = 0;
    _359++;
    if (_359 < _353)
    goto _jump2792;
    _359 = 0;
    _360++;
    if (_360 < _352)
    goto _jump2792;
    // End body of loop
    int64_t _363;
    // Computing bound for w
    int64_t _364;
    // Computing bound for w
    if (n.d1 > 0) 
    goto _jump2795;
    fail_assertion("non-positive loop bound");
    _jump2795:;
    _364 = 0;
    int64_t _365 = 0; // w
    _jump2796:; // Begin body of loop
    _364 += n.d1;
    _365++;
    if (_365 < n.d1)
    goto _jump2796;
    // End body of loop
    if (_364 > 0) 
    goto _jump2797;
    fail_assertion("non-positive loop bound");
    _jump2797:;
    // Computing bound for x
    bool _366 = !_0;
    int64_t _367;
    if (!_366)
    goto _jump2798;
    int64_t _368 = k / n.d0;
    _367 = _368;
    goto _jump2799;
    _jump2798:;
    _367 = n.d1;
    _jump2799:;
    if (_367 > 0) 
    goto _jump2800;
    fail_assertion("non-positive loop bound");
    _jump2800:;
    // Computing bound for y
    if (h > 0) 
    goto _jump2801;
    fail_assertion("non-positive loop bound");
    _jump2801:;
    _363 = 0;
    int64_t _369 = 0; // y
    int64_t _370 = 0; // x
    int64_t _371 = 0; // w
    _jump2802:; // Begin body of loop
    _363 += n.d1;
    _369++;
    if (_369 < h)
    goto _jump2802;
    _369 = 0;
    _370++;
    if (_370 < _367)
    goto _jump2802;
    _370 = 0;
    _371++;
    if (_371 < _364)
    goto _jump2802;
    // End body of loop
    if (_351 >= 0)
    goto _jump2803;
    fail_assertion("negative array index");
    _jump2803:;
    if (_351 < _333.d0)
    goto _jump2804;
    fail_assertion("index too large");
    _jump2804:;
    if (_363 >= 0)
    goto _jump2805;
    fail_assertion("negative array index");
    _jump2805:;
    if (_363 < _333.d1)
    goto _jump2806;
    fail_assertion("index too large");
    _jump2806:;
    int64_t _372 = 0;
    _372 *= _333.d0;
    _372 += _351;
    _372 *= _333.d1;
    _372 += _363;
    void_t _373 = _333.data[_372];
    bool _374 = e(_331, _373);
    _a3_bool _375;
    if (!_374)
    goto _jump2807;
    _a3_int64_t _376;
    // Computing bound for w
    _376.d0 = k;
    if (k > 0) 
    goto _jump2808;
    fail_assertion("non-positive loop bound");
    _jump2808:;
    // Computing bound for x
    _376.d1 = n.d0;
    if (n.d0 > 0) 
    goto _jump2809;
    fail_assertion("non-positive loop bound");
    _jump2809:;
    // Computing bound for y
    int64_t _377 = h / k;
    _376.d2 = _377;
    if (_377 > 0) 
    goto _jump2810;
    fail_assertion("non-positive loop bound");
    _jump2810:;
    // Computing total size of heap memory to allocate
    int64_t _378 = 1;
    _378 *= k;
    _378 *= n.d0;
    _378 *= _377;
    _378 *= sizeof(int64_t);
    _376.data = jpl_alloc(_378);
    int64_t _379 = 0; // y
    int64_t _380 = 0; // x
    int64_t _381 = 0; // w
    _jump2811:; // Begin body of loop
    int64_t _382 = _381 + _381;
    int64_t _383 = 0;
    _383 *= _376.d0;
    _383 += _381;
    _383 *= _376.d1;
    _383 += _380;
    _383 *= _376.d2;
    _383 += _379;
    _376.data[_383] = _382;
    _379++;
    if (_379 < _377)
    goto _jump2811;
    _379 = 0;
    _380++;
    if (_380 < n.d0)
    goto _jump2811;
    _380 = 0;
    _381++;
    if (_381 < k)
    goto _jump2811;
    // End body of loop
    bool _384 = true;
    _a3_double _385;
    if (!_384)
    goto _jump2812;
    _385 = i;
    goto _jump2813;
    _jump2812:;
    _385 = i;
    _jump2813:;
    int64_t _386;
    if (!_0)
    goto _jump2814;
    _386 = n.d2;
    goto _jump2815;
    _jump2814:;
    _386 = n.d1;
    _jump2815:;
    if (n.d1 >= 0)
    goto _jump2816;
    fail_assertion("negative array index");
    _jump2816:;
    if (n.d1 < _385.d0)
    goto _jump2817;
    fail_assertion("index too large");
    _jump2817:;
    if (n.d1 >= 0)
    goto _jump2818;
    fail_assertion("negative array index");
    _jump2818:;
    if (n.d1 < _385.d1)
    goto _jump2819;
    fail_assertion("index too large");
    _jump2819:;
    if (_386 >= 0)
    goto _jump2820;
    fail_assertion("negative array index");
    _jump2820:;
    if (_386 < _385.d2)
    goto _jump2821;
    fail_assertion("index too large");
    _jump2821:;
    int64_t _387 = 0;
    _387 *= _385.d0;
    _387 += n.d1;
    _387 *= _385.d1;
    _387 += n.d1;
    _387 *= _385.d2;
    _387 += _386;
    double _388 = _385.data[_387];
    bool _389 = a(_376, _388);
    _a2__a3_bool _390;
    if (!_389)
    goto _jump2822;
    bool _391 = true;
    _a2__a3_bool _392;
    if (!_391)
    goto _jump2823;
    _a2__a3_bool _393;
    // Computing bound for w
    _393.d0 = j;
    if (j > 0) 
    goto _jump2824;
    fail_assertion("non-positive loop bound");
    _jump2824:;
    // Computing bound for x
    _393.d1 = h;
    if (h > 0) 
    goto _jump2825;
    fail_assertion("non-positive loop bound");
    _jump2825:;
    // Computing total size of heap memory to allocate
    int64_t _394 = 1;
    _394 *= j;
    _394 *= h;
    _394 *= sizeof(_a3_bool);
    _393.data = jpl_alloc(_394);
    int64_t _395 = 0; // x
    int64_t _396 = 0; // w
    _jump2826:; // Begin body of loop
    _a3_bool _397;
    // Computing bound for y
    _397.d0 = l;
    if (l > 0) 
    goto _jump2827;
    fail_assertion("non-positive loop bound");
    _jump2827:;
    // Computing bound for z
    _397.d1 = h;
    if (h > 0) 
    goto _jump2828;
    fail_assertion("non-positive loop bound");
    _jump2828:;
    // Computing bound for A
    _397.d2 = _395;
    if (_395 > 0) 
    goto _jump2829;
    fail_assertion("non-positive loop bound");
    _jump2829:;
    // Computing total size of heap memory to allocate
    int64_t _398 = 1;
    _398 *= l;
    _398 *= h;
    _398 *= _395;
    _398 *= sizeof(bool);
    _397.data = jpl_alloc(_398);
    int64_t _399 = 0; // A
    int64_t _400 = 0; // z
    int64_t _401 = 0; // y
    _jump2830:; // Begin body of loop
    bool _402 = false;
    int64_t _403 = 0;
    _403 *= _397.d0;
    _403 += _401;
    _403 *= _397.d1;
    _403 += _400;
    _403 *= _397.d2;
    _403 += _399;
    _397.data[_403] = _402;
    _399++;
    if (_399 < _395)
    goto _jump2830;
    _399 = 0;
    _400++;
    if (_400 < h)
    goto _jump2830;
    _400 = 0;
    _401++;
    if (_401 < l)
    goto _jump2830;
    // End body of loop
    int64_t _404 = 0;
    _404 *= _393.d0;
    _404 += _396;
    _404 *= _393.d1;
    _404 += _395;
    _393.data[_404] = _397;
    _395++;
    if (_395 < h)
    goto _jump2826;
    _395 = 0;
    _396++;
    if (_396 < j)
    goto _jump2826;
    // End body of loop
    _392 = _393;
    goto _jump2831;
    _jump2823:;
    _a2__a3_bool _405;
    // Computing bound for w
    _405.d0 = n.d0;
    if (n.d0 > 0) 
    goto _jump2832;
    fail_assertion("non-positive loop bound");
    _jump2832:;
    // Computing bound for x
    _405.d1 = n.d1;
    if (n.d1 > 0) 
    goto _jump2833;
    fail_assertion("non-positive loop bound");
    _jump2833:;
    // Computing total size of heap memory to allocate
    int64_t _406 = 1;
    _406 *= n.d0;
    _406 *= n.d1;
    _406 *= sizeof(_a3_bool);
    _405.data = jpl_alloc(_406);
    int64_t _407 = 0; // x
    int64_t _408 = 0; // w
    _jump2834:; // Begin body of loop
    _a3_bool _409 = m(n);
    int64_t _410 = 0;
    _410 *= _405.d0;
    _410 += _408;
    _410 *= _405.d1;
    _410 += _407;
    _405.data[_410] = _409;
    _407++;
    if (_407 < n.d1)
    goto _jump2834;
    _407 = 0;
    _408++;
    if (_408 < n.d0)
    goto _jump2834;
    // End body of loop
    _392 = _405;
    _jump2831:;
    _390 = _392;
    goto _jump2835;
    _jump2822:;
    _a2__a3_bool _411;
    // Computing bound for w
    _411.d0 = n.d1;
    if (n.d1 > 0) 
    goto _jump2836;
    fail_assertion("non-positive loop bound");
    _jump2836:;
    // Computing bound for x
    int64_t _412;
    // Computing bound for w
    if (k > 0) 
    goto _jump2837;
    fail_assertion("non-positive loop bound");
    _jump2837:;
    // Computing bound for x
    if (j > 0) 
    goto _jump2838;
    fail_assertion("non-positive loop bound");
    _jump2838:;
    // Computing bound for y
    int64_t _413;
    // Computing bound for w
    if (h > 0) 
    goto _jump2839;
    fail_assertion("non-positive loop bound");
    _jump2839:;
    // Computing bound for x
    if (h > 0) 
    goto _jump2840;
    fail_assertion("non-positive loop bound");
    _jump2840:;
    _413 = 0;
    int64_t _414 = 0; // x
    int64_t _415 = 0; // w
    _jump2841:; // Begin body of loop
    _413 += k;
    _414++;
    if (_414 < h)
    goto _jump2841;
    _414 = 0;
    _415++;
    if (_415 < h)
    goto _jump2841;
    // End body of loop
    if (_413 > 0) 
    goto _jump2842;
    fail_assertion("non-positive loop bound");
    _jump2842:;
    _412 = 0;
    int64_t _416 = 0; // y
    int64_t _417 = 0; // x
    int64_t _418 = 0; // w
    _jump2843:; // Begin body of loop
    _412 += _417;
    _416++;
    if (_416 < _413)
    goto _jump2843;
    _416 = 0;
    _417++;
    if (_417 < j)
    goto _jump2843;
    _417 = 0;
    _418++;
    if (_418 < k)
    goto _jump2843;
    // End body of loop
    _411.d1 = _412;
    if (_412 > 0) 
    goto _jump2844;
    fail_assertion("non-positive loop bound");
    _jump2844:;
    // Computing total size of heap memory to allocate
    int64_t _419 = 1;
    _419 *= n.d1;
    _419 *= _412;
    _419 *= sizeof(_a3_bool);
    _411.data = jpl_alloc(_419);
    int64_t _420 = 0; // x
    int64_t _421 = 0; // w
    _jump2845:; // Begin body of loop
    int64_t _422 = 425;
    bool _423 = l < _422;
    _a3_bool _424;
    if (!_423)
    goto _jump2846;
    _a3_bool _425;
    // Computing bound for y
    _425.d0 = _420;
    if (_420 > 0) 
    goto _jump2847;
    fail_assertion("non-positive loop bound");
    _jump2847:;
    // Computing bound for z
    _425.d1 = _421;
    if (_421 > 0) 
    goto _jump2848;
    fail_assertion("non-positive loop bound");
    _jump2848:;
    // Computing bound for A
    _425.d2 = j;
    if (j > 0) 
    goto _jump2849;
    fail_assertion("non-positive loop bound");
    _jump2849:;
    // Computing total size of heap memory to allocate
    int64_t _426 = 1;
    _426 *= _420;
    _426 *= _421;
    _426 *= j;
    _426 *= sizeof(bool);
    _425.data = jpl_alloc(_426);
    int64_t _427 = 0; // A
    int64_t _428 = 0; // z
    int64_t _429 = 0; // y
    _jump2850:; // Begin body of loop
    bool _430 = true;
    int64_t _431 = 0;
    _431 *= _425.d0;
    _431 += _429;
    _431 *= _425.d1;
    _431 += _428;
    _431 *= _425.d2;
    _431 += _427;
    _425.data[_431] = _430;
    _427++;
    if (_427 < j)
    goto _jump2850;
    _427 = 0;
    _428++;
    if (_428 < _421)
    goto _jump2850;
    _428 = 0;
    _429++;
    if (_429 < _420)
    goto _jump2850;
    // End body of loop
    _424 = _425;
    goto _jump2851;
    _jump2846:;
    _a3_bool _432;
    // Computing bound for y
    _432.d0 = _421;
    if (_421 > 0) 
    goto _jump2852;
    fail_assertion("non-positive loop bound");
    _jump2852:;
    // Computing bound for z
    _432.d1 = k;
    if (k > 0) 
    goto _jump2853;
    fail_assertion("non-positive loop bound");
    _jump2853:;
    // Computing bound for A
    _432.d2 = h;
    if (h > 0) 
    goto _jump2854;
    fail_assertion("non-positive loop bound");
    _jump2854:;
    // Computing total size of heap memory to allocate
    int64_t _433 = 1;
    _433 *= _421;
    _433 *= k;
    _433 *= h;
    _433 *= sizeof(bool);
    _432.data = jpl_alloc(_433);
    int64_t _434 = 0; // A
    int64_t _435 = 0; // z
    int64_t _436 = 0; // y
    _jump2855:; // Begin body of loop
    bool _437 = false;
    int64_t _438 = 0;
    _438 *= _432.d0;
    _438 += _436;
    _438 *= _432.d1;
    _438 += _435;
    _438 *= _432.d2;
    _438 += _434;
    _432.data[_438] = _437;
    _434++;
    if (_434 < h)
    goto _jump2855;
    _434 = 0;
    _435++;
    if (_435 < k)
    goto _jump2855;
    _435 = 0;
    _436++;
    if (_436 < _421)
    goto _jump2855;
    // End body of loop
    _424 = _432;
    _jump2851:;
    int64_t _439 = 0;
    _439 *= _411.d0;
    _439 += _421;
    _439 *= _411.d1;
    _439 += _420;
    _411.data[_439] = _424;
    _420++;
    if (_420 < _412)
    goto _jump2845;
    _420 = 0;
    _421++;
    if (_421 < n.d1)
    goto _jump2845;
    // End body of loop
    _390 = _411;
    _jump2835:;
    if (n.d0 >= 0)
    goto _jump2856;
    fail_assertion("negative array index");
    _jump2856:;
    if (n.d0 < _390.d0)
    goto _jump2857;
    fail_assertion("index too large");
    _jump2857:;
    if (h >= 0)
    goto _jump2858;
    fail_assertion("negative array index");
    _jump2858:;
    if (h < _390.d1)
    goto _jump2859;
    fail_assertion("index too large");
    _jump2859:;
    int64_t _440 = 0;
    _440 *= _390.d0;
    _440 += n.d0;
    _440 *= _390.d1;
    _440 += h;
    _a3_bool _441 = _390.data[_440];
    _375 = _441;
    goto _jump2860;
    _jump2807:;
    _a3__a3_bool _442;
    // Computing bound for w
    _442.d0 = k;
    if (k > 0) 
    goto _jump2861;
    fail_assertion("non-positive loop bound");
    _jump2861:;
    // Computing bound for x
    bool _444 = true;
    bool _443 = _444;
    if (0 != _444)
    goto _jump2862;
    _443 = _0;
    _jump2862:;
    bool _445;
    if (!_443)
    goto _jump2863;
    bool _446 = true;
    _445 = _446;
    goto _jump2864;
    _jump2863:;
    bool _447 = n.d0 >= n.d2;
    _445 = _447;
    _jump2864:;
    int64_t _448;
    if (!_445)
    goto _jump2865;
    int64_t _449 = -l;
    _448 = _449;
    goto _jump2866;
    _jump2865:;
    _448 = n.d1;
    _jump2866:;
    _442.d1 = _448;
    if (_448 > 0) 
    goto _jump2867;
    fail_assertion("non-positive loop bound");
    _jump2867:;
    // Computing bound for y
    _442.d2 = h;
    if (h > 0) 
    goto _jump2868;
    fail_assertion("non-positive loop bound");
    _jump2868:;
    // Computing total size of heap memory to allocate
    int64_t _450 = 1;
    _450 *= k;
    _450 *= _448;
    _450 *= h;
    _450 *= sizeof(_a3_bool);
    _442.data = jpl_alloc(_450);
    int64_t _451 = 0; // y
    int64_t _452 = 0; // x
    int64_t _453 = 0; // w
    _jump2869:; // Begin body of loop
    _a3_bool _454;
    // Computing bound for z
    _454.d0 = _452;
    if (_452 > 0) 
    goto _jump2870;
    fail_assertion("non-positive loop bound");
    _jump2870:;
    // Computing bound for A
    int64_t _455;
    // Computing bound for z
    if (_453 > 0) 
    goto _jump2871;
    fail_assertion("non-positive loop bound");
    _jump2871:;
    _455 = 0;
    int64_t _456 = 0; // z
    _jump2872:; // Begin body of loop
    int64_t _457;
    // Computing bound for A
    if (h > 0) 
    goto _jump2873;
    fail_assertion("non-positive loop bound");
    _jump2873:;
    _457 = 0;
    int64_t _458 = 0; // A
    _jump2874:; // Begin body of loop
    _457 += l;
    _458++;
    if (_458 < h)
    goto _jump2874;
    // End body of loop
    _455 += _457;
    _456++;
    if (_456 < _453)
    goto _jump2872;
    // End body of loop
    _454.d1 = _455;
    if (_455 > 0) 
    goto _jump2875;
    fail_assertion("non-positive loop bound");
    _jump2875:;
    // Computing bound for B
    _454.d2 = j;
    if (j > 0) 
    goto _jump2876;
    fail_assertion("non-positive loop bound");
    _jump2876:;
    // Computing total size of heap memory to allocate
    int64_t _459 = 1;
    _459 *= _452;
    _459 *= _455;
    _459 *= j;
    _459 *= sizeof(bool);
    _454.data = jpl_alloc(_459);
    int64_t _460 = 0; // B
    int64_t _461 = 0; // A
    int64_t _462 = 0; // z
    _jump2877:; // Begin body of loop
    _a3_int64_t _463;
    // Computing bound for C
    _463.d0 = k;
    if (k > 0) 
    goto _jump2878;
    fail_assertion("non-positive loop bound");
    _jump2878:;
    // Computing bound for D
    _463.d1 = j;
    if (j > 0) 
    goto _jump2879;
    fail_assertion("non-positive loop bound");
    _jump2879:;
    // Computing bound for E
    int64_t _464 = 3;
    _463.d2 = _464;
    if (_464 > 0) 
    goto _jump2880;
    fail_assertion("non-positive loop bound");
    _jump2880:;
    // Computing total size of heap memory to allocate
    int64_t _465 = 1;
    _465 *= k;
    _465 *= j;
    _465 *= _464;
    _465 *= sizeof(int64_t);
    _463.data = jpl_alloc(_465);
    int64_t _466 = 0; // E
    int64_t _467 = 0; // D
    int64_t _468 = 0; // C
    _jump2881:; // Begin body of loop
    int64_t _469 = 0;
    _469 *= _463.d0;
    _469 += _468;
    _469 *= _463.d1;
    _469 += _467;
    _469 *= _463.d2;
    _469 += _466;
    _463.data[_469] = _453;
    _466++;
    if (_466 < _464)
    goto _jump2881;
    _466 = 0;
    _467++;
    if (_467 < j)
    goto _jump2881;
    _467 = 0;
    _468++;
    if (_468 < k)
    goto _jump2881;
    // End body of loop
    double _470 = 44.0;
    double _471 = _470 / c;
    bool _472 = a(_463, _471);
    int64_t _473 = 0;
    _473 *= _454.d0;
    _473 += _462;
    _473 *= _454.d1;
    _473 += _461;
    _473 *= _454.d2;
    _473 += _460;
    _454.data[_473] = _472;
    _460++;
    if (_460 < j)
    goto _jump2877;
    _460 = 0;
    _461++;
    if (_461 < _455)
    goto _jump2877;
    _461 = 0;
    _462++;
    if (_462 < _452)
    goto _jump2877;
    // End body of loop
    int64_t _474 = 0;
    _474 *= _442.d0;
    _474 += _453;
    _474 *= _442.d1;
    _474 += _452;
    _474 *= _442.d2;
    _474 += _451;
    _442.data[_474] = _454;
    _451++;
    if (_451 < h)
    goto _jump2869;
    _451 = 0;
    _452++;
    if (_452 < _448)
    goto _jump2869;
    _452 = 0;
    _453++;
    if (_453 < k)
    goto _jump2869;
    // End body of loop
    bool _475 = true;
    int64_t _476;
    if (!_475)
    goto _jump2882;
    _476 = h;
    goto _jump2883;
    _jump2882:;
    _476 = l;
    _jump2883:;
    if (_476 >= 0)
    goto _jump2884;
    fail_assertion("negative array index");
    _jump2884:;
    if (_476 < _442.d0)
    goto _jump2885;
    fail_assertion("index too large");
    _jump2885:;
    if (l >= 0)
    goto _jump2886;
    fail_assertion("negative array index");
    _jump2886:;
    if (l < _442.d1)
    goto _jump2887;
    fail_assertion("index too large");
    _jump2887:;
    if (l >= 0)
    goto _jump2888;
    fail_assertion("negative array index");
    _jump2888:;
    if (l < _442.d2)
    goto _jump2889;
    fail_assertion("index too large");
    _jump2889:;
    int64_t _477 = 0;
    _477 *= _442.d0;
    _477 += _476;
    _477 *= _442.d1;
    _477 += l;
    _477 *= _442.d2;
    _477 += l;
    _a3_bool _478 = _442.data[_477];
    _375 = _478;
    _jump2860:;
    _327 = _375;
    goto _jump2890;
    _jump2762:;
    _a2__a3_void_t _479;
    // Computing bound for w
    _479.d0 = n.d2;
    if (n.d2 > 0) 
    goto _jump2891;
    fail_assertion("non-positive loop bound");
    _jump2891:;
    // Computing bound for x
    _479.d1 = n.d2;
    if (n.d2 > 0) 
    goto _jump2892;
    fail_assertion("non-positive loop bound");
    _jump2892:;
    // Computing total size of heap memory to allocate
    int64_t _480 = 1;
    _480 *= n.d2;
    _480 *= n.d2;
    _480 *= sizeof(_a3_void_t);
    _479.data = jpl_alloc(_480);
    int64_t _481 = 0; // x
    int64_t _482 = 0; // w
    _jump2893:; // Begin body of loop
    int64_t _483 = 0;
    _483 *= _479.d0;
    _483 += _482;
    _483 *= _479.d1;
    _483 += _481;
    _479.data[_483] = n;
    _481++;
    if (_481 < n.d2)
    goto _jump2893;
    _481 = 0;
    _482++;
    if (_482 < n.d2)
    goto _jump2893;
    // End body of loop
    int64_t _484 = -n.d1;
    if (h >= 0)
    goto _jump2894;
    fail_assertion("negative array index");
    _jump2894:;
    if (h < _479.d0)
    goto _jump2895;
    fail_assertion("index too large");
    _jump2895:;
    if (_484 >= 0)
    goto _jump2896;
    fail_assertion("negative array index");
    _jump2896:;
    if (_484 < _479.d1)
    goto _jump2897;
    fail_assertion("index too large");
    _jump2897:;
    int64_t _485 = 0;
    _485 *= _479.d0;
    _485 += h;
    _485 *= _479.d1;
    _485 += _484;
    _a3_void_t _486 = _479.data[_485];
    _a3_bool _487 = m(_486);
    _327 = _487;
    _jump2890:;
    return _327;
}

int64_t n(bool o) {
    int64_t _0 = k % k;
    _a1_int64_t _1;
    _1.d0 = 3;
    _1.data = jpl_alloc(sizeof(int64_t) * 3);
    _1.data[0] = _0;
    _1.data[1] = h;
    _1.data[2] = j;
    if (h >= 0)
    goto _jump2898;
    fail_assertion("negative array index");
    _jump2898:;
    if (h < _1.d0)
    goto _jump2899;
    fail_assertion("index too large");
    _jump2899:;
    int64_t _2 = 0;
    _2 *= _1.d0;
    _2 += h;
    int64_t _3 = _1.data[_2];
    int64_t _4;
    // Computing bound for q
    int64_t _5 = h % j;
    if (_5 > 0) 
    goto _jump2900;
    fail_assertion("non-positive loop bound");
    _jump2900:;
    // Computing bound for r
    if (h > 0) 
    goto _jump2901;
    fail_assertion("non-positive loop bound");
    _jump2901:;
    // Computing bound for s
    if (j > 0) 
    goto _jump2902;
    fail_assertion("non-positive loop bound");
    _jump2902:;
    _4 = 0;
    int64_t _6 = 0; // s
    int64_t _7 = 0; // r
    int64_t _8 = 0; // q
    _jump2903:; // Begin body of loop
    _4 += j;
    _6++;
    if (_6 < j)
    goto _jump2903;
    _6 = 0;
    _7++;
    if (_7 < h)
    goto _jump2903;
    _7 = 0;
    _8++;
    if (_8 < _5)
    goto _jump2903;
    // End body of loop
    int64_t _9 = n(o);
    int64_t _10 = _4 % _9;
    bool _11 = _3 == _10;
    bool _12 = true;
    bool _13;
    if (!_12)
    goto _jump2904;
    bool _14 = false;
    _13 = _14;
    goto _jump2905;
    _jump2904:;
    bool _15 = false;
    _13 = _15;
    _jump2905:;
    bool _16 = !_13;
    bool _17 = _11 != _16;
    bool _18 = !_17;
    _a1_double _19;
    if (!_18)
    goto _jump2906;
    _19 = g;
    goto _jump2907;
    _jump2906:;
    int64_t _20 = 847;
    bool _21 = h > _20;
    int64_t _22;
    if (!_21)
    goto _jump2908;
    _22 = j;
    goto _jump2909;
    _jump2908:;
    int64_t _23;
    // Computing bound for q
    int64_t _24 = 599;
    if (_24 > 0) 
    goto _jump2910;
    fail_assertion("non-positive loop bound");
    _jump2910:;
    _23 = 0;
    int64_t _25 = 0; // q
    _jump2911:; // Begin body of loop
    int64_t _26 = n(o);
    _23 += _26;
    _25++;
    if (_25 < _24)
    goto _jump2911;
    // End body of loop
    _22 = _23;
    _jump2909:;
    bool _27 = _22 > k;
    _a1_double _28;
    if (!_27)
    goto _jump2912;
    bool _29 = o;
    if (0 != o)
    goto _jump2913;
    _29 = o;
    _jump2913:;
    _a1_bool _30;
    if (!_29)
    goto _jump2914;
    _a1_bool _31;
    // Computing bound for q
    _31.d0 = j;
    if (j > 0) 
    goto _jump2915;
    fail_assertion("non-positive loop bound");
    _jump2915:;
    // Computing total size of heap memory to allocate
    int64_t _32 = 1;
    _32 *= j;
    _32 *= sizeof(bool);
    _31.data = jpl_alloc(_32);
    int64_t _33 = 0; // q
    _jump2916:; // Begin body of loop
    int64_t _34 = 0;
    _34 *= _31.d0;
    _34 += _33;
    _31.data[_34] = o;
    _33++;
    if (_33 < j)
    goto _jump2916;
    // End body of loop
    _30 = _31;
    goto _jump2917;
    _jump2914:;
    _a1_bool _35;
    // Computing bound for q
    _35.d0 = l;
    if (l > 0) 
    goto _jump2918;
    fail_assertion("non-positive loop bound");
    _jump2918:;
    // Computing total size of heap memory to allocate
    int64_t _36 = 1;
    _36 *= l;
    _36 *= sizeof(bool);
    _35.data = jpl_alloc(_36);
    int64_t _37 = 0; // q
    _jump2919:; // Begin body of loop
    int64_t _38 = 0;
    _38 *= _35.d0;
    _38 += _37;
    _35.data[_38] = o;
    _37++;
    if (_37 < l)
    goto _jump2919;
    // End body of loop
    _30 = _35;
    _jump2917:;
    int64_t _39 = 442;
    if (_39 >= 0)
    goto _jump2920;
    fail_assertion("negative array index");
    _jump2920:;
    if (_39 < _30.d0)
    goto _jump2921;
    fail_assertion("index too large");
    _jump2921:;
    int64_t _40 = 0;
    _40 *= _30.d0;
    _40 += _39;
    bool _41 = _30.data[_40];
    _a3__a1_double _42;
    if (!_41)
    goto _jump2922;
    _a3__a1_double _43;
    // Computing bound for q
    int64_t _44 = h % h;
    _43.d0 = _44;
    if (_44 > 0) 
    goto _jump2923;
    fail_assertion("non-positive loop bound");
    _jump2923:;
    // Computing bound for r
    _43.d1 = k;
    if (k > 0) 
    goto _jump2924;
    fail_assertion("non-positive loop bound");
    _jump2924:;
    // Computing bound for s
    _43.d2 = k;
    if (k > 0) 
    goto _jump2925;
    fail_assertion("non-positive loop bound");
    _jump2925:;
    // Computing total size of heap memory to allocate
    int64_t _45 = 1;
    _45 *= _44;
    _45 *= k;
    _45 *= k;
    _45 *= sizeof(_a1_double);
    _43.data = jpl_alloc(_45);
    int64_t _46 = 0; // s
    int64_t _47 = 0; // r
    int64_t _48 = 0; // q
    _jump2926:; // Begin body of loop
    _a1_double _49;
    if (!o)
    goto _jump2927;
    _a1_double _50;
    // Computing bound for t
    _50.d0 = k;
    if (k > 0) 
    goto _jump2928;
    fail_assertion("non-positive loop bound");
    _jump2928:;
    // Computing total size of heap memory to allocate
    int64_t _51 = 1;
    _51 *= k;
    _51 *= sizeof(double);
    _50.data = jpl_alloc(_51);
    int64_t _52 = 0; // t
    _jump2929:; // Begin body of loop
    double _53 = 44.0;
    int64_t _54 = 0;
    _54 *= _50.d0;
    _54 += _52;
    _50.data[_54] = _53;
    _52++;
    if (_52 < k)
    goto _jump2929;
    // End body of loop
    _49 = _50;
    goto _jump2930;
    _jump2927:;
    _a1_double _55;
    // Computing bound for t
    _55.d0 = _46;
    if (_46 > 0) 
    goto _jump2931;
    fail_assertion("non-positive loop bound");
    _jump2931:;
    // Computing total size of heap memory to allocate
    int64_t _56 = 1;
    _56 *= _46;
    _56 *= sizeof(double);
    _55.data = jpl_alloc(_56);
    int64_t _57 = 0; // t
    _jump2932:; // Begin body of loop
    int64_t _58 = 0;
    _58 *= _55.d0;
    _58 += _57;
    _55.data[_58] = c;
    _57++;
    if (_57 < _46)
    goto _jump2932;
    // End body of loop
    _49 = _55;
    _jump2930:;
    int64_t _59 = 0;
    _59 *= _43.d0;
    _59 += _48;
    _59 *= _43.d1;
    _59 += _47;
    _59 *= _43.d2;
    _59 += _46;
    _43.data[_59] = _49;
    _46++;
    if (_46 < k)
    goto _jump2926;
    _46 = 0;
    _47++;
    if (_47 < k)
    goto _jump2926;
    _47 = 0;
    _48++;
    if (_48 < _44)
    goto _jump2926;
    // End body of loop
    _42 = _43;
    goto _jump2933;
    _jump2922:;
    _a1__a3__a1_double _60;
    // Computing bound for q
    _60.d0 = h;
    if (h > 0) 
    goto _jump2934;
    fail_assertion("non-positive loop bound");
    _jump2934:;
    // Computing total size of heap memory to allocate
    int64_t _61 = 1;
    _61 *= h;
    _61 *= sizeof(_a3__a1_double);
    _60.data = jpl_alloc(_61);
    int64_t _62 = 0; // q
    _jump2935:; // Begin body of loop
    _a3__a1_double _63;
    // Computing bound for r
    _63.d0 = k;
    if (k > 0) 
    goto _jump2936;
    fail_assertion("non-positive loop bound");
    _jump2936:;
    // Computing bound for s
    int64_t _64 = 811;
    _63.d1 = _64;
    if (_64 > 0) 
    goto _jump2937;
    fail_assertion("non-positive loop bound");
    _jump2937:;
    // Computing bound for t
    _63.d2 = k;
    if (k > 0) 
    goto _jump2938;
    fail_assertion("non-positive loop bound");
    _jump2938:;
    // Computing total size of heap memory to allocate
    int64_t _65 = 1;
    _65 *= k;
    _65 *= _64;
    _65 *= k;
    _65 *= sizeof(_a1_double);
    _63.data = jpl_alloc(_65);
    int64_t _66 = 0; // t
    int64_t _67 = 0; // s
    int64_t _68 = 0; // r
    _jump2939:; // Begin body of loop
    int64_t _69 = 0;
    _69 *= _63.d0;
    _69 += _68;
    _69 *= _63.d1;
    _69 += _67;
    _69 *= _63.d2;
    _69 += _66;
    _63.data[_69] = g;
    _66++;
    if (_66 < k)
    goto _jump2939;
    _66 = 0;
    _67++;
    if (_67 < _64)
    goto _jump2939;
    _67 = 0;
    _68++;
    if (_68 < k)
    goto _jump2939;
    // End body of loop
    int64_t _70 = 0;
    _70 *= _60.d0;
    _70 += _62;
    _60.data[_70] = _63;
    _62++;
    if (_62 < h)
    goto _jump2935;
    // End body of loop
    _a2_int64_t _71;
    // Computing bound for q
    _71.d0 = k;
    if (k > 0) 
    goto _jump2940;
    fail_assertion("non-positive loop bound");
    _jump2940:;
    // Computing bound for r
    int64_t _72 = 995;
    _71.d1 = _72;
    if (_72 > 0) 
    goto _jump2941;
    fail_assertion("non-positive loop bound");
    _jump2941:;
    // Computing total size of heap memory to allocate
    int64_t _73 = 1;
    _73 *= k;
    _73 *= _72;
    _73 *= sizeof(int64_t);
    _71.data = jpl_alloc(_73);
    int64_t _74 = 0; // r
    int64_t _75 = 0; // q
    _jump2942:; // Begin body of loop
    int64_t _76 = 78;
    int64_t _77 = 0;
    _77 *= _71.d0;
    _77 += _75;
    _77 *= _71.d1;
    _77 += _74;
    _71.data[_77] = _76;
    _74++;
    if (_74 < _72)
    goto _jump2942;
    _74 = 0;
    _75++;
    if (_75 < k)
    goto _jump2942;
    // End body of loop
    bool _78 = false;
    int64_t _79 = n(_78);
    if (_79 >= 0)
    goto _jump2943;
    fail_assertion("negative array index");
    _jump2943:;
    if (_79 < _71.d0)
    goto _jump2944;
    fail_assertion("index too large");
    _jump2944:;
    if (k >= 0)
    goto _jump2945;
    fail_assertion("negative array index");
    _jump2945:;
    if (k < _71.d1)
    goto _jump2946;
    fail_assertion("index too large");
    _jump2946:;
    int64_t _80 = 0;
    _80 *= _71.d0;
    _80 += _79;
    _80 *= _71.d1;
    _80 += k;
    int64_t _81 = _71.data[_80];
    if (_81 >= 0)
    goto _jump2947;
    fail_assertion("negative array index");
    _jump2947:;
    if (_81 < _60.d0)
    goto _jump2948;
    fail_assertion("index too large");
    _jump2948:;
    int64_t _82 = 0;
    _82 *= _60.d0;
    _82 += _81;
    _a3__a1_double _83 = _60.data[_82];
    _42 = _83;
    _jump2933:;
    int64_t _84 = n(o);
    if (l >= 0)
    goto _jump2949;
    fail_assertion("negative array index");
    _jump2949:;
    if (l < _42.d0)
    goto _jump2950;
    fail_assertion("index too large");
    _jump2950:;
    if (h >= 0)
    goto _jump2951;
    fail_assertion("negative array index");
    _jump2951:;
    if (h < _42.d1)
    goto _jump2952;
    fail_assertion("index too large");
    _jump2952:;
    if (_84 >= 0)
    goto _jump2953;
    fail_assertion("negative array index");
    _jump2953:;
    if (_84 < _42.d2)
    goto _jump2954;
    fail_assertion("index too large");
    _jump2954:;
    int64_t _85 = 0;
    _85 *= _42.d0;
    _85 += l;
    _85 *= _42.d1;
    _85 += h;
    _85 *= _42.d2;
    _85 += _84;
    _a1_double _86 = _42.data[_85];
    _28 = _86;
    goto _jump2955;
    _jump2912:;
    double _87;
    // Computing bound for q
    if (h > 0) 
    goto _jump2956;
    fail_assertion("non-positive loop bound");
    _jump2956:;
    // Computing bound for r
    int64_t _88;
    // Computing bound for q
    if (h > 0) 
    goto _jump2957;
    fail_assertion("non-positive loop bound");
    _jump2957:;
    // Computing bound for r
    int64_t _89 = 273;
    if (_89 > 0) 
    goto _jump2958;
    fail_assertion("non-positive loop bound");
    _jump2958:;
    // Computing bound for s
    if (h > 0) 
    goto _jump2959;
    fail_assertion("non-positive loop bound");
    _jump2959:;
    _88 = 0;
    int64_t _90 = 0; // s
    int64_t _91 = 0; // r
    int64_t _92 = 0; // q
    _jump2960:; // Begin body of loop
    int64_t _93;
    // Computing bound for t
    if (_92 > 0) 
    goto _jump2961;
    fail_assertion("non-positive loop bound");
    _jump2961:;
    _93 = 0;
    int64_t _94 = 0; // t
    _jump2962:; // Begin body of loop
    _93 += k;
    _94++;
    if (_94 < _92)
    goto _jump2962;
    // End body of loop
    int64_t _95 = _93 / j;
    _88 += _95;
    _90++;
    if (_90 < h)
    goto _jump2960;
    _90 = 0;
    _91++;
    if (_91 < _89)
    goto _jump2960;
    _91 = 0;
    _92++;
    if (_92 < h)
    goto _jump2960;
    // End body of loop
    if (_88 > 0) 
    goto _jump2963;
    fail_assertion("non-positive loop bound");
    _jump2963:;
    // Computing bound for s
    bool _96 = true;
    bool _97 = !_96;
    int64_t _98;
    if (!_97)
    goto _jump2964;
    _a2_int64_t _99;
    // Computing bound for q
    _99.d0 = l;
    if (l > 0) 
    goto _jump2965;
    fail_assertion("non-positive loop bound");
    _jump2965:;
    // Computing bound for r
    _99.d1 = j;
    if (j > 0) 
    goto _jump2966;
    fail_assertion("non-positive loop bound");
    _jump2966:;
    // Computing total size of heap memory to allocate
    int64_t _100 = 1;
    _100 *= l;
    _100 *= j;
    _100 *= sizeof(int64_t);
    _99.data = jpl_alloc(_100);
    int64_t _101 = 0; // r
    int64_t _102 = 0; // q
    _jump2967:; // Begin body of loop
    int64_t _103 = 0;
    _103 *= _99.d0;
    _103 += _102;
    _103 *= _99.d1;
    _103 += _101;
    _99.data[_103] = _101;
    _101++;
    if (_101 < j)
    goto _jump2967;
    _101 = 0;
    _102++;
    if (_102 < l)
    goto _jump2967;
    // End body of loop
    if (j >= 0)
    goto _jump2968;
    fail_assertion("negative array index");
    _jump2968:;
    if (j < _99.d0)
    goto _jump2969;
    fail_assertion("index too large");
    _jump2969:;
    if (h >= 0)
    goto _jump2970;
    fail_assertion("negative array index");
    _jump2970:;
    if (h < _99.d1)
    goto _jump2971;
    fail_assertion("index too large");
    _jump2971:;
    int64_t _104 = 0;
    _104 *= _99.d0;
    _104 += j;
    _104 *= _99.d1;
    _104 += h;
    int64_t _105 = _99.data[_104];
    _98 = _105;
    goto _jump2972;
    _jump2964:;
    _98 = j;
    _jump2972:;
    if (_98 > 0) 
    goto _jump2973;
    fail_assertion("non-positive loop bound");
    _jump2973:;
    _87 = 0;
    int64_t _106 = 0; // s
    int64_t _107 = 0; // r
    int64_t _108 = 0; // q
    _jump2974:; // Begin body of loop
    _a2_double _109;
    // Computing bound for t
    _109.d0 = k;
    if (k > 0) 
    goto _jump2975;
    fail_assertion("non-positive loop bound");
    _jump2975:;
    // Computing bound for u
    _109.d1 = _107;
    if (_107 > 0) 
    goto _jump2976;
    fail_assertion("non-positive loop bound");
    _jump2976:;
    // Computing total size of heap memory to allocate
    int64_t _110 = 1;
    _110 *= k;
    _110 *= _107;
    _110 *= sizeof(double);
    _109.data = jpl_alloc(_110);
    int64_t _111 = 0; // u
    int64_t _112 = 0; // t
    _jump2977:; // Begin body of loop
    double _113 = 45.0;
    int64_t _114 = 0;
    _114 *= _109.d0;
    _114 += _112;
    _114 *= _109.d1;
    _114 += _111;
    _109.data[_114] = _113;
    _111++;
    if (_111 < _107)
    goto _jump2977;
    _111 = 0;
    _112++;
    if (_112 < k)
    goto _jump2977;
    // End body of loop
    int64_t _115 = _108 / _108;
    if (_115 >= 0)
    goto _jump2978;
    fail_assertion("negative array index");
    _jump2978:;
    if (_115 < _109.d0)
    goto _jump2979;
    fail_assertion("index too large");
    _jump2979:;
    if (h >= 0)
    goto _jump2980;
    fail_assertion("negative array index");
    _jump2980:;
    if (h < _109.d1)
    goto _jump2981;
    fail_assertion("index too large");
    _jump2981:;
    int64_t _116 = 0;
    _116 *= _109.d0;
    _116 += _115;
    _116 *= _109.d1;
    _116 += h;
    double _117 = _109.data[_116];
    double _118 = -_117;
    _87 += _118;
    _106++;
    if (_106 < _98)
    goto _jump2974;
    _106 = 0;
    _107++;
    if (_107 < _88)
    goto _jump2974;
    _107 = 0;
    _108++;
    if (_108 < h)
    goto _jump2974;
    // End body of loop
    double _119;
    // Computing bound for q
    if (k > 0) 
    goto _jump2982;
    fail_assertion("non-positive loop bound");
    _jump2982:;
    // Computing bound for r
    if (j > 0) 
    goto _jump2983;
    fail_assertion("non-positive loop bound");
    _jump2983:;
    // Computing bound for s
    int64_t _120 = -k;
    if (_120 > 0) 
    goto _jump2984;
    fail_assertion("non-positive loop bound");
    _jump2984:;
    _119 = 0;
    int64_t _121 = 0; // s
    int64_t _122 = 0; // r
    int64_t _123 = 0; // q
    _jump2985:; // Begin body of loop
    _119 += c;
    _121++;
    if (_121 < _120)
    goto _jump2985;
    _121 = 0;
    _122++;
    if (_122 < j)
    goto _jump2985;
    _122 = 0;
    _123++;
    if (_123 < k)
    goto _jump2985;
    // End body of loop
    double _124 = -c;
    double _125 = 65.0;
    double _126 = _125 + c;
    double _127 = _124 * _126;
    rgba _128 = { _119, _127, c, c };
    double _129 = _128.g;
    _a1_double _130;
    _130.d0 = 2;
    _130.data = jpl_alloc(sizeof(double) * 2);
    _130.data[0] = _87;
    _130.data[1] = _129;
    _28 = _130;
    _jump2955:;
    _19 = _28;
    _jump2907:;
    _a3_int64_t _132;
    // Computing bound for s
    int64_t _133 = -h;
    _132.d0 = _133;
    if (_133 > 0) 
    goto _jump2986;
    fail_assertion("non-positive loop bound");
    _jump2986:;
    // Computing bound for t
    _132.d1 = j;
    if (j > 0) 
    goto _jump2987;
    fail_assertion("non-positive loop bound");
    _jump2987:;
    // Computing bound for u
    int64_t _134 = n(o);
    _132.d2 = _134;
    if (_134 > 0) 
    goto _jump2988;
    fail_assertion("non-positive loop bound");
    _jump2988:;
    // Computing total size of heap memory to allocate
    int64_t _135 = 1;
    _135 *= _133;
    _135 *= j;
    _135 *= _134;
    _135 *= sizeof(int64_t);
    _132.data = jpl_alloc(_135);
    int64_t _136 = 0; // u
    int64_t _137 = 0; // t
    int64_t _138 = 0; // s
    _jump2989:; // Begin body of loop
    int64_t _139 = 0;
    _139 *= _132.d0;
    _139 += _138;
    _139 *= _132.d1;
    _139 += _137;
    _139 *= _132.d2;
    _139 += _136;
    _132.data[_139] = _137;
    _136++;
    if (_136 < _134)
    goto _jump2989;
    _136 = 0;
    _137++;
    if (_137 < j)
    goto _jump2989;
    _137 = 0;
    _138++;
    if (_138 < _133)
    goto _jump2989;
    // End body of loop
    bool _140 = a(_132, c);
    bool _141 = !_140;
    bool _142;
    if (!_141)
    goto _jump2990;
    _a3_int64_t _143;
    // Computing bound for s
    _143.d0 = j;
    if (j > 0) 
    goto _jump2991;
    fail_assertion("non-positive loop bound");
    _jump2991:;
    // Computing bound for t
    bool _144 = true;
    int64_t _145;
    if (!_144)
    goto _jump2992;
    _145 = _19.d0;
    goto _jump2993;
    _jump2992:;
    _145 = k;
    _jump2993:;
    _143.d1 = _145;
    if (_145 > 0) 
    goto _jump2994;
    fail_assertion("non-positive loop bound");
    _jump2994:;
    // Computing bound for u
    _143.d2 = j;
    if (j > 0) 
    goto _jump2995;
    fail_assertion("non-positive loop bound");
    _jump2995:;
    // Computing total size of heap memory to allocate
    int64_t _146 = 1;
    _146 *= j;
    _146 *= _145;
    _146 *= j;
    _146 *= sizeof(int64_t);
    _143.data = jpl_alloc(_146);
    int64_t _147 = 0; // u
    int64_t _148 = 0; // t
    int64_t _149 = 0; // s
    _jump2996:; // Begin body of loop
    int64_t _150 = 0;
    _150 *= _143.d0;
    _150 += _149;
    _150 *= _143.d1;
    _150 += _148;
    _150 *= _143.d2;
    _150 += _147;
    _143.data[_150] = _149;
    _147++;
    if (_147 < j)
    goto _jump2996;
    _147 = 0;
    _148++;
    if (_148 < _145)
    goto _jump2996;
    _148 = 0;
    _149++;
    if (_149 < j)
    goto _jump2996;
    // End body of loop
    bool _151 = a(_143, c);
    bool _152 = !_151;
    _142 = _152;
    goto _jump2997;
    _jump2990:;
    bool _153 = false;
    _142 = _153;
    _jump2997:;
    bool _131 = _142;
    if (0 != _142)
    goto _jump2998;
    bool _154;
    if (!o)
    goto _jump2999;
    int64_t _155 = -j;
    int64_t _156 = -l;
    bool _157 = _155 > _156;
    _154 = _157;
    goto _jump3000;
    _jump2999:;
    bool _159 = c < c;
    bool _158 = _159;
    if (0 != _159)
    goto _jump3001;
    bool _160 = c > c;
    _158 = _160;
    _jump3001:;
    _154 = _158;
    _jump3000:;
    _a3_int64_t _161;
    if (!_154)
    goto _jump3002;
    _a3_int64_t _162;
    // Computing bound for s
    bool _163 = true;
    int64_t _164 = n(_163);
    _162.d0 = _164;
    if (_164 > 0) 
    goto _jump3003;
    fail_assertion("non-positive loop bound");
    _jump3003:;
    // Computing bound for t
    _162.d1 = l;
    if (l > 0) 
    goto _jump3004;
    fail_assertion("non-positive loop bound");
    _jump3004:;
    // Computing bound for u
    int64_t _165 = -l;
    _162.d2 = _165;
    if (_165 > 0) 
    goto _jump3005;
    fail_assertion("non-positive loop bound");
    _jump3005:;
    // Computing total size of heap memory to allocate
    int64_t _166 = 1;
    _166 *= _164;
    _166 *= l;
    _166 *= _165;
    _166 *= sizeof(int64_t);
    _162.data = jpl_alloc(_166);
    int64_t _167 = 0; // u
    int64_t _168 = 0; // t
    int64_t _169 = 0; // s
    _jump3006:; // Begin body of loop
    int64_t _170 = 0;
    _170 *= _162.d0;
    _170 += _169;
    _170 *= _162.d1;
    _170 += _168;
    _170 *= _162.d2;
    _170 += _167;
    _162.data[_170] = _19.d0;
    _167++;
    if (_167 < _165)
    goto _jump3006;
    _167 = 0;
    _168++;
    if (_168 < l)
    goto _jump3006;
    _168 = 0;
    _169++;
    if (_169 < _164)
    goto _jump3006;
    // End body of loop
    _161 = _162;
    goto _jump3007;
    _jump3002:;
    _a3_int64_t _171;
    // Computing bound for s
    int64_t _172;
    if (!o)
    goto _jump3008;
    _172 = l;
    goto _jump3009;
    _jump3008:;
    _172 = h;
    _jump3009:;
    int64_t _173 = -_172;
    _171.d0 = _173;
    if (_173 > 0) 
    goto _jump3010;
    fail_assertion("non-positive loop bound");
    _jump3010:;
    // Computing bound for t
    _171.d1 = j;
    if (j > 0) 
    goto _jump3011;
    fail_assertion("non-positive loop bound");
    _jump3011:;
    // Computing bound for u
    int64_t _174 = 587;
    _171.d2 = _174;
    if (_174 > 0) 
    goto _jump3012;
    fail_assertion("non-positive loop bound");
    _jump3012:;
    // Computing total size of heap memory to allocate
    int64_t _175 = 1;
    _175 *= _173;
    _175 *= j;
    _175 *= _174;
    _175 *= sizeof(int64_t);
    _171.data = jpl_alloc(_175);
    int64_t _176 = 0; // u
    int64_t _177 = 0; // t
    int64_t _178 = 0; // s
    _jump3013:; // Begin body of loop
    int64_t _179 = 0;
    _179 *= _171.d0;
    _179 += _178;
    _179 *= _171.d1;
    _179 += _177;
    _179 *= _171.d2;
    _179 += _176;
    _171.data[_179] = _19.d0;
    _176++;
    if (_176 < _174)
    goto _jump3013;
    _176 = 0;
    _177++;
    if (_177 < j)
    goto _jump3013;
    _177 = 0;
    _178++;
    if (_178 < _173)
    goto _jump3013;
    // End body of loop
    _161 = _171;
    _jump3007:;
    int64_t _180;
    if (!o)
    goto _jump3014;
    _180 = _19.d0;
    goto _jump3015;
    _jump3014:;
    _180 = h;
    _jump3015:;
    bool _181 = _180 > j;
    _a3_double _182;
    if (!_181)
    goto _jump3016;
    _182 = i;
    goto _jump3017;
    _jump3016:;
    _a3_double _183;
    // Computing bound for s
    _183.d0 = h;
    if (h > 0) 
    goto _jump3018;
    fail_assertion("non-positive loop bound");
    _jump3018:;
    // Computing bound for t
    int64_t _184 = 613;
    int64_t _185 = _184 + h;
    _183.d1 = _185;
    if (_185 > 0) 
    goto _jump3019;
    fail_assertion("non-positive loop bound");
    _jump3019:;
    // Computing bound for u
    _183.d2 = j;
    if (j > 0) 
    goto _jump3020;
    fail_assertion("non-positive loop bound");
    _jump3020:;
    // Computing total size of heap memory to allocate
    int64_t _186 = 1;
    _186 *= h;
    _186 *= _185;
    _186 *= j;
    _186 *= sizeof(double);
    _183.data = jpl_alloc(_186);
    int64_t _187 = 0; // u
    int64_t _188 = 0; // t
    int64_t _189 = 0; // s
    _jump3021:; // Begin body of loop
    double _190 = 94.0;
    int64_t _191 = 0;
    _191 *= _183.d0;
    _191 += _189;
    _191 *= _183.d1;
    _191 += _188;
    _191 *= _183.d2;
    _191 += _187;
    _183.data[_191] = _190;
    _187++;
    if (_187 < j)
    goto _jump3021;
    _187 = 0;
    _188++;
    if (_188 < _185)
    goto _jump3021;
    _188 = 0;
    _189++;
    if (_189 < h)
    goto _jump3021;
    // End body of loop
    _182 = _183;
    _jump3017:;
    bool _192;
    if (!o)
    goto _jump3022;
    bool _193 = false;
    _192 = _193;
    goto _jump3023;
    _jump3022:;
    _192 = o;
    _jump3023:;
    bool _194 = !_192;
    int64_t _195 = n(_194);
    _a1_int64_t _196;
    if (!o)
    goto _jump3024;
    _a1_int64_t _197;
    // Computing bound for s
    _197.d0 = _19.d0;
    if (_19.d0 > 0) 
    goto _jump3025;
    fail_assertion("non-positive loop bound");
    _jump3025:;
    // Computing total size of heap memory to allocate
    int64_t _198 = 1;
    _198 *= _19.d0;
    _198 *= sizeof(int64_t);
    _197.data = jpl_alloc(_198);
    int64_t _199 = 0; // s
    _jump3026:; // Begin body of loop
    int64_t _200 = 0;
    _200 *= _197.d0;
    _200 += _199;
    _197.data[_200] = _19.d0;
    _199++;
    if (_199 < _19.d0)
    goto _jump3026;
    // End body of loop
    _196 = _197;
    goto _jump3027;
    _jump3024:;
    _a1_int64_t _201;
    // Computing bound for s
    _201.d0 = l;
    if (l > 0) 
    goto _jump3028;
    fail_assertion("non-positive loop bound");
    _jump3028:;
    // Computing total size of heap memory to allocate
    int64_t _202 = 1;
    _202 *= l;
    _202 *= sizeof(int64_t);
    _201.data = jpl_alloc(_202);
    int64_t _203 = 0; // s
    _jump3029:; // Begin body of loop
    int64_t _204 = 0;
    _204 *= _201.d0;
    _204 += _203;
    _201.data[_204] = k;
    _203++;
    if (_203 < l)
    goto _jump3029;
    // End body of loop
    _196 = _201;
    _jump3027:;
    bool _205 = false;
    int64_t _206;
    if (!_205)
    goto _jump3030;
    int64_t _207;
    // Computing bound for s
    if (l > 0) 
    goto _jump3031;
    fail_assertion("non-positive loop bound");
    _jump3031:;
    // Computing bound for t
    if (_19.d0 > 0) 
    goto _jump3032;
    fail_assertion("non-positive loop bound");
    _jump3032:;
    // Computing bound for u
    if (_19.d0 > 0) 
    goto _jump3033;
    fail_assertion("non-positive loop bound");
    _jump3033:;
    _207 = 0;
    int64_t _208 = 0; // u
    int64_t _209 = 0; // t
    int64_t _210 = 0; // s
    _jump3034:; // Begin body of loop
    _207 += h;
    _208++;
    if (_208 < _19.d0)
    goto _jump3034;
    _208 = 0;
    _209++;
    if (_209 < _19.d0)
    goto _jump3034;
    _209 = 0;
    _210++;
    if (_210 < l)
    goto _jump3034;
    // End body of loop
    _206 = _207;
    goto _jump3035;
    _jump3030:;
    _206 = h;
    _jump3035:;
    if (_206 >= 0)
    goto _jump3036;
    fail_assertion("negative array index");
    _jump3036:;
    if (_206 < _196.d0)
    goto _jump3037;
    fail_assertion("index too large");
    _jump3037:;
    int64_t _211 = 0;
    _211 *= _196.d0;
    _211 += _206;
    int64_t _212 = _196.data[_211];
    if (_195 >= 0)
    goto _jump3038;
    fail_assertion("negative array index");
    _jump3038:;
    if (_195 < _182.d0)
    goto _jump3039;
    fail_assertion("index too large");
    _jump3039:;
    if (h >= 0)
    goto _jump3040;
    fail_assertion("negative array index");
    _jump3040:;
    if (h < _182.d1)
    goto _jump3041;
    fail_assertion("index too large");
    _jump3041:;
    if (_212 >= 0)
    goto _jump3042;
    fail_assertion("negative array index");
    _jump3042:;
    if (_212 < _182.d2)
    goto _jump3043;
    fail_assertion("index too large");
    _jump3043:;
    int64_t _213 = 0;
    _213 *= _182.d0;
    _213 += _195;
    _213 *= _182.d1;
    _213 += h;
    _213 *= _182.d2;
    _213 += _212;
    double _214 = _182.data[_213];
    bool _215 = a(_161, _214);
    _131 = _215;
    _jump2998:;
    _a1_bool _216;
    if (!_131)
    goto _jump3044;
    bool _217 = !o;
    bool _218 = !_217;
    int64_t _219 = n(_218);
    bool _220 = false;
    int64_t _221 = n(_220);
    bool _222 = _219 >= _221;
    bool _223 = false;
    bool _224 = _222 == _223;
    _a1_bool _225;
    _225.d0 = 1;
    _225.data = jpl_alloc(sizeof(bool) * 1);
    _225.data[0] = _224;
    _216 = _225;
    goto _jump3045;
    _jump3044:;
    int64_t _226 = 698;
    bool _227 = h >= _226;
    int64_t _228;
    // Computing bound for s
    if (j > 0) 
    goto _jump3046;
    fail_assertion("non-positive loop bound");
    _jump3046:;
    // Computing bound for t
    if (j > 0) 
    goto _jump3047;
    fail_assertion("non-positive loop bound");
    _jump3047:;
    // Computing bound for u
    bool _229 = false;
    int64_t _230 = n(_229);
    if (_230 > 0) 
    goto _jump3048;
    fail_assertion("non-positive loop bound");
    _jump3048:;
    _228 = 0;
    int64_t _231 = 0; // u
    int64_t _232 = 0; // t
    int64_t _233 = 0; // s
    _jump3049:; // Begin body of loop
    _a1_int64_t _234;
    _234.d0 = 2;
    _234.data = jpl_alloc(sizeof(int64_t) * 2);
    _234.data[0] = h;
    _234.data[1] = h;
    int64_t _235 = -_233;
    if (_235 >= 0)
    goto _jump3050;
    fail_assertion("negative array index");
    _jump3050:;
    if (_235 < _234.d0)
    goto _jump3051;
    fail_assertion("index too large");
    _jump3051:;
    int64_t _236 = 0;
    _236 *= _234.d0;
    _236 += _235;
    int64_t _237 = _234.data[_236];
    _228 += _237;
    _231++;
    if (_231 < _230)
    goto _jump3049;
    _231 = 0;
    _232++;
    if (_232 < j)
    goto _jump3049;
    _232 = 0;
    _233++;
    if (_233 < j)
    goto _jump3049;
    // End body of loop
    int64_t _238 = 358;
    bool _239 = _228 != _238;
    _a1_bool _241;
    // Computing bound for s
    _241.d0 = k;
    if (k > 0) 
    goto _jump3052;
    fail_assertion("non-positive loop bound");
    _jump3052:;
    // Computing total size of heap memory to allocate
    int64_t _242 = 1;
    _242 *= k;
    _242 *= sizeof(bool);
    _241.data = jpl_alloc(_242);
    int64_t _243 = 0; // s
    _jump3053:; // Begin body of loop
    bool _244 = true;
    int64_t _245 = 0;
    _245 *= _241.d0;
    _245 += _243;
    _241.data[_245] = _244;
    _243++;
    if (_243 < k)
    goto _jump3053;
    // End body of loop
    int64_t _246;
    // Computing bound for s
    if (j > 0) 
    goto _jump3054;
    fail_assertion("non-positive loop bound");
    _jump3054:;
    // Computing bound for t
    if (h > 0) 
    goto _jump3055;
    fail_assertion("non-positive loop bound");
    _jump3055:;
    _246 = 0;
    int64_t _247 = 0; // t
    int64_t _248 = 0; // s
    _jump3056:; // Begin body of loop
    _246 += _248;
    _247++;
    if (_247 < h)
    goto _jump3056;
    _247 = 0;
    _248++;
    if (_248 < j)
    goto _jump3056;
    // End body of loop
    if (_246 >= 0)
    goto _jump3057;
    fail_assertion("negative array index");
    _jump3057:;
    if (_246 < _241.d0)
    goto _jump3058;
    fail_assertion("index too large");
    _jump3058:;
    int64_t _249 = 0;
    _249 *= _241.d0;
    _249 += _246;
    bool _250 = _241.data[_249];
    int64_t _251;
    if (!_250)
    goto _jump3059;
    int64_t _252;
    // Computing bound for s
    int64_t _253;
    // Computing bound for s
    int64_t _254 = 611;
    if (_254 > 0) 
    goto _jump3060;
    fail_assertion("non-positive loop bound");
    _jump3060:;
    _253 = 0;
    int64_t _255 = 0; // s
    _jump3061:; // Begin body of loop
    _253 += j;
    _255++;
    if (_255 < _254)
    goto _jump3061;
    // End body of loop
    if (_253 > 0) 
    goto _jump3062;
    fail_assertion("non-positive loop bound");
    _jump3062:;
    // Computing bound for t
    int64_t _256;
    // Computing bound for s
    if (j > 0) 
    goto _jump3063;
    fail_assertion("non-positive loop bound");
    _jump3063:;
    // Computing bound for t
    if (l > 0) 
    goto _jump3064;
    fail_assertion("non-positive loop bound");
    _jump3064:;
    // Computing bound for u
    if (j > 0) 
    goto _jump3065;
    fail_assertion("non-positive loop bound");
    _jump3065:;
    _256 = 0;
    int64_t _257 = 0; // u
    int64_t _258 = 0; // t
    int64_t _259 = 0; // s
    _jump3066:; // Begin body of loop
    int64_t _260 = 501;
    _256 += _260;
    _257++;
    if (_257 < j)
    goto _jump3066;
    _257 = 0;
    _258++;
    if (_258 < l)
    goto _jump3066;
    _258 = 0;
    _259++;
    if (_259 < j)
    goto _jump3066;
    // End body of loop
    if (_256 > 0) 
    goto _jump3067;
    fail_assertion("non-positive loop bound");
    _jump3067:;
    // Computing bound for u
    bool _261 = false;
    int64_t _262 = n(_261);
    if (_262 > 0) 
    goto _jump3068;
    fail_assertion("non-positive loop bound");
    _jump3068:;
    _252 = 0;
    int64_t _263 = 0; // u
    int64_t _264 = 0; // t
    int64_t _265 = 0; // s
    _jump3069:; // Begin body of loop
    int64_t _266 = 55;
    _252 += _266;
    _263++;
    if (_263 < _262)
    goto _jump3069;
    _263 = 0;
    _264++;
    if (_264 < _256)
    goto _jump3069;
    _264 = 0;
    _265++;
    if (_265 < _253)
    goto _jump3069;
    // End body of loop
    _251 = _252;
    goto _jump3070;
    _jump3059:;
    _251 = _19.d0;
    _jump3070:;
    int64_t _267 = 977;
    bool _268 = _251 == _267;
    bool _240 = _268;
    if (0 != _268)
    goto _jump3071;
    _a2_bool _269;
    // Computing bound for s
    int64_t _270 = 878;
    _269.d0 = _270;
    if (_270 > 0) 
    goto _jump3072;
    fail_assertion("non-positive loop bound");
    _jump3072:;
    // Computing bound for t
    bool _271 = true;
    int64_t _272;
    if (!_271)
    goto _jump3073;
    int64_t _273 = 744;
    _272 = _273;
    goto _jump3074;
    _jump3073:;
    _272 = j;
    _jump3074:;
    _269.d1 = _272;
    if (_272 > 0) 
    goto _jump3075;
    fail_assertion("non-positive loop bound");
    _jump3075:;
    // Computing total size of heap memory to allocate
    int64_t _274 = 1;
    _274 *= _270;
    _274 *= _272;
    _274 *= sizeof(bool);
    _269.data = jpl_alloc(_274);
    int64_t _275 = 0; // t
    int64_t _276 = 0; // s
    _jump3076:; // Begin body of loop
    bool _277 = true;
    int64_t _278 = 0;
    _278 *= _269.d0;
    _278 += _276;
    _278 *= _269.d1;
    _278 += _275;
    _269.data[_278] = _277;
    _275++;
    if (_275 < _272)
    goto _jump3076;
    _275 = 0;
    _276++;
    if (_276 < _270)
    goto _jump3076;
    // End body of loop
    bool _279 = true;
    int64_t _280 = n(_279);
    int64_t _281 = k % _280;
    int64_t _282 = 849;
    int64_t _283 = -_282;
    if (_281 >= 0)
    goto _jump3077;
    fail_assertion("negative array index");
    _jump3077:;
    if (_281 < _269.d0)
    goto _jump3078;
    fail_assertion("index too large");
    _jump3078:;
    if (_283 >= 0)
    goto _jump3079;
    fail_assertion("negative array index");
    _jump3079:;
    if (_283 < _269.d1)
    goto _jump3080;
    fail_assertion("index too large");
    _jump3080:;
    int64_t _284 = 0;
    _284 *= _269.d0;
    _284 += _281;
    _284 *= _269.d1;
    _284 += _283;
    bool _285 = _269.data[_284];
    bool _286;
    if (!_285)
    goto _jump3081;
    int64_t _287 = 738;
    int64_t _288 = -k;
    bool _289 = _287 > _288;
    _286 = _289;
    goto _jump3082;
    _jump3081:;
    _a3_int64_t _290;
    // Computing bound for s
    _290.d0 = j;
    if (j > 0) 
    goto _jump3083;
    fail_assertion("non-positive loop bound");
    _jump3083:;
    // Computing bound for t
    int64_t _291 = 695;
    _290.d1 = _291;
    if (_291 > 0) 
    goto _jump3084;
    fail_assertion("non-positive loop bound");
    _jump3084:;
    // Computing bound for u
    _290.d2 = k;
    if (k > 0) 
    goto _jump3085;
    fail_assertion("non-positive loop bound");
    _jump3085:;
    // Computing total size of heap memory to allocate
    int64_t _292 = 1;
    _292 *= j;
    _292 *= _291;
    _292 *= k;
    _292 *= sizeof(int64_t);
    _290.data = jpl_alloc(_292);
    int64_t _293 = 0; // u
    int64_t _294 = 0; // t
    int64_t _295 = 0; // s
    _jump3086:; // Begin body of loop
    int64_t _296 = 0;
    _296 *= _290.d0;
    _296 += _295;
    _296 *= _290.d1;
    _296 += _294;
    _296 *= _290.d2;
    _296 += _293;
    _290.data[_296] = h;
    _293++;
    if (_293 < k)
    goto _jump3086;
    _293 = 0;
    _294++;
    if (_294 < _291)
    goto _jump3086;
    _294 = 0;
    _295++;
    if (_295 < j)
    goto _jump3086;
    // End body of loop
    _a1_double _297;
    // Computing bound for s
    _297.d0 = l;
    if (l > 0) 
    goto _jump3087;
    fail_assertion("non-positive loop bound");
    _jump3087:;
    // Computing total size of heap memory to allocate
    int64_t _298 = 1;
    _298 *= l;
    _298 *= sizeof(double);
    _297.data = jpl_alloc(_298);
    int64_t _299 = 0; // s
    _jump3088:; // Begin body of loop
    double _300 = 42.0;
    int64_t _301 = 0;
    _301 *= _297.d0;
    _301 += _299;
    _297.data[_301] = _300;
    _299++;
    if (_299 < l)
    goto _jump3088;
    // End body of loop
    int64_t _302 = 872;
    if (_302 >= 0)
    goto _jump3089;
    fail_assertion("negative array index");
    _jump3089:;
    if (_302 < _297.d0)
    goto _jump3090;
    fail_assertion("index too large");
    _jump3090:;
    int64_t _303 = 0;
    _303 *= _297.d0;
    _303 += _302;
    double _304 = _297.data[_303];
    bool _305 = a(_290, _304);
    _286 = _305;
    _jump3082:;
    _240 = _286;
    _jump3071:;
    _a1_bool _306;
    _306.d0 = 3;
    _306.data = jpl_alloc(sizeof(bool) * 3);
    _306.data[0] = _227;
    _306.data[1] = _239;
    _306.data[2] = _240;
    _216 = _306;
    _jump3045:;
    int64_t _307;
    // Computing bound for v
    int64_t _308;
    // Computing bound for v
    int64_t _309;
    // Computing bound for v
    if (_19.d0 > 0) 
    goto _jump3091;
    fail_assertion("non-positive loop bound");
    _jump3091:;
    // Computing bound for w
    if (h > 0) 
    goto _jump3092;
    fail_assertion("non-positive loop bound");
    _jump3092:;
    _309 = 0;
    int64_t _310 = 0; // w
    int64_t _311 = 0; // v
    _jump3093:; // Begin body of loop
    _309 += l;
    _310++;
    if (_310 < h)
    goto _jump3093;
    _310 = 0;
    _311++;
    if (_311 < _19.d0)
    goto _jump3093;
    // End body of loop
    if (_309 > 0) 
    goto _jump3094;
    fail_assertion("non-positive loop bound");
    _jump3094:;
    // Computing bound for w
    if (_19.d0 > 0) 
    goto _jump3095;
    fail_assertion("non-positive loop bound");
    _jump3095:;
    _308 = 0;
    int64_t _312 = 0; // w
    int64_t _313 = 0; // v
    _jump3096:; // Begin body of loop
    _308 += h;
    _312++;
    if (_312 < _19.d0)
    goto _jump3096;
    _312 = 0;
    _313++;
    if (_313 < _309)
    goto _jump3096;
    // End body of loop
    if (_308 > 0) 
    goto _jump3097;
    fail_assertion("non-positive loop bound");
    _jump3097:;
    // Computing bound for w
    if (j > 0) 
    goto _jump3098;
    fail_assertion("non-positive loop bound");
    _jump3098:;
    _307 = 0;
    int64_t _314 = 0; // w
    int64_t _315 = 0; // v
    _jump3099:; // Begin body of loop
    int64_t _316 = 119;
    _307 += _316;
    _314++;
    if (_314 < j)
    goto _jump3099;
    _314 = 0;
    _315++;
    if (_315 < _308)
    goto _jump3099;
    // End body of loop
    double _317 = 48.0;
    if (k >= 0)
    goto _jump3100;
    fail_assertion("negative array index");
    _jump3100:;
    if (k < g.d0)
    goto _jump3101;
    fail_assertion("index too large");
    _jump3101:;
    int64_t _318 = 0;
    _318 *= g.d0;
    _318 += k;
    double _319 = g.data[_318];
    bool _320 = _317 < _319;
    bool _321 = !_320;
    _a2_int64_t _322;
    if (!_321)
    goto _jump3102;
    bool _324 = h != l;
    bool _323 = _324;
    if (0 != _324)
    goto _jump3103;
    _323 = o;
    _jump3103:;
    _a2_int64_t _325;
    if (!_323)
    goto _jump3104;
    _a2_int64_t _326;
    // Computing bound for w
    _326.d0 = _307;
    if (_307 > 0) 
    goto _jump3105;
    fail_assertion("non-positive loop bound");
    _jump3105:;
    // Computing bound for x
    _a1_int64_t _327;
    // Computing bound for w
    _327.d0 = j;
    if (j > 0) 
    goto _jump3106;
    fail_assertion("non-positive loop bound");
    _jump3106:;
    // Computing total size of heap memory to allocate
    int64_t _328 = 1;
    _328 *= j;
    _328 *= sizeof(int64_t);
    _327.data = jpl_alloc(_328);
    int64_t _329 = 0; // w
    _jump3107:; // Begin body of loop
    int64_t _330 = 0;
    _330 *= _327.d0;
    _330 += _329;
    _327.data[_330] = _307;
    _329++;
    if (_329 < j)
    goto _jump3107;
    // End body of loop
    int64_t _331 = n(o);
    if (_331 >= 0)
    goto _jump3108;
    fail_assertion("negative array index");
    _jump3108:;
    if (_331 < _327.d0)
    goto _jump3109;
    fail_assertion("index too large");
    _jump3109:;
    int64_t _332 = 0;
    _332 *= _327.d0;
    _332 += _331;
    int64_t _333 = _327.data[_332];
    _326.d1 = _333;
    if (_333 > 0) 
    goto _jump3110;
    fail_assertion("non-positive loop bound");
    _jump3110:;
    // Computing total size of heap memory to allocate
    int64_t _334 = 1;
    _334 *= _307;
    _334 *= _333;
    _334 *= sizeof(int64_t);
    _326.data = jpl_alloc(_334);
    int64_t _335 = 0; // x
    int64_t _336 = 0; // w
    _jump3111:; // Begin body of loop
    int64_t _337 = 0;
    _337 *= _326.d0;
    _337 += _336;
    _337 *= _326.d1;
    _337 += _335;
    _326.data[_337] = _307;
    _335++;
    if (_335 < _333)
    goto _jump3111;
    _335 = 0;
    _336++;
    if (_336 < _307)
    goto _jump3111;
    // End body of loop
    _325 = _326;
    goto _jump3112;
    _jump3104:;
    _a2_int64_t _338;
    // Computing bound for w
    _338.d0 = h;
    if (h > 0) 
    goto _jump3113;
    fail_assertion("non-positive loop bound");
    _jump3113:;
    // Computing bound for x
    _338.d1 = k;
    if (k > 0) 
    goto _jump3114;
    fail_assertion("non-positive loop bound");
    _jump3114:;
    // Computing total size of heap memory to allocate
    int64_t _339 = 1;
    _339 *= h;
    _339 *= k;
    _339 *= sizeof(int64_t);
    _338.data = jpl_alloc(_339);
    int64_t _340 = 0; // x
    int64_t _341 = 0; // w
    _jump3115:; // Begin body of loop
    int64_t _342 = 0;
    _342 *= _338.d0;
    _342 += _341;
    _342 *= _338.d1;
    _342 += _340;
    _338.data[_342] = _216.d0;
    _340++;
    if (_340 < k)
    goto _jump3115;
    _340 = 0;
    _341++;
    if (_341 < h)
    goto _jump3115;
    // End body of loop
    _325 = _338;
    _jump3112:;
    _322 = _325;
    goto _jump3116;
    _jump3102:;
    _a2_int64_t _343;
    // Computing bound for w
    int64_t _344 = j + _307;
    _343.d0 = _344;
    if (_344 > 0) 
    goto _jump3117;
    fail_assertion("non-positive loop bound");
    _jump3117:;
    // Computing bound for x
    _343.d1 = k;
    if (k > 0) 
    goto _jump3118;
    fail_assertion("non-positive loop bound");
    _jump3118:;
    // Computing total size of heap memory to allocate
    int64_t _345 = 1;
    _345 *= _344;
    _345 *= k;
    _345 *= sizeof(int64_t);
    _343.data = jpl_alloc(_345);
    int64_t _346 = 0; // x
    int64_t _347 = 0; // w
    _jump3119:; // Begin body of loop
    int64_t _348 = 0;
    _348 *= _343.d0;
    _348 += _347;
    _348 *= _343.d1;
    _348 += _346;
    _343.data[_348] = h;
    _346++;
    if (_346 < k)
    goto _jump3119;
    _346 = 0;
    _347++;
    if (_347 < _344)
    goto _jump3119;
    // End body of loop
    _322 = _343;
    _jump3116:;
    _a1_bool _349;
    // Computing bound for w
    int64_t _350 = -l;
    int64_t _351 = -_350;
    _349.d0 = _351;
    if (_351 > 0) 
    goto _jump3120;
    fail_assertion("non-positive loop bound");
    _jump3120:;
    // Computing total size of heap memory to allocate
    int64_t _352 = 1;
    _352 *= _351;
    _352 *= sizeof(bool);
    _349.data = jpl_alloc(_352);
    int64_t _353 = 0; // w
    _jump3121:; // Begin body of loop
    bool _354 = o;
    if (0 == o)
    goto _jump3122;
    bool _355 = false;
    bool _356 = o != _355;
    _354 = _356;
    _jump3122:;
    int64_t _357 = 0;
    _357 *= _349.d0;
    _357 += _353;
    _349.data[_357] = _354;
    _353++;
    if (_353 < _351)
    goto _jump3121;
    // End body of loop
    if (_216.d0 >= 0)
    goto _jump3123;
    fail_assertion("negative array index");
    _jump3123:;
    if (_216.d0 < _349.d0)
    goto _jump3124;
    fail_assertion("index too large");
    _jump3124:;
    int64_t _358 = 0;
    _358 *= _349.d0;
    _358 += _216.d0;
    bool _359 = _349.data[_358];
    int64_t _360;
    if (!_359)
    goto _jump3125;
    _360 = _307;
    goto _jump3126;
    _jump3125:;
    _360 = _19.d0;
    _jump3126:;
    if (_307 >= 0)
    goto _jump3127;
    fail_assertion("negative array index");
    _jump3127:;
    if (_307 < _322.d0)
    goto _jump3128;
    fail_assertion("index too large");
    _jump3128:;
    if (_360 >= 0)
    goto _jump3129;
    fail_assertion("negative array index");
    _jump3129:;
    if (_360 < _322.d1)
    goto _jump3130;
    fail_assertion("index too large");
    _jump3130:;
    int64_t _361 = 0;
    _361 *= _322.d0;
    _361 += _307;
    _361 *= _322.d1;
    _361 += _360;
    int64_t _362 = _322.data[_361];
    int64_t _363 = _362 - _307;
    return _363;
    int64_t _364 = 29;
    int64_t _365 = -_364;
    return _365;
}

void_t A(rgba B, _a3_void_t C) {
    int64_t _1 = v - q;
    bool _2 = _1 == z;
    bool _0 = _2;
    if (0 != _2)
    goto _jump3320;
    double _3;
    // Computing bound for G
    int64_t _4;
    // Computing bound for G
    bool _5 = w;
    if (0 != w)
    goto _jump3321;
    bool _6 = false;
    _5 = _6;
    _jump3321:;
    int64_t _7;
    if (!_5)
    goto _jump3322;
    _7 = C.d0;
    goto _jump3323;
    _jump3322:;
    _7 = z;
    _jump3323:;
    if (_7 > 0) 
    goto _jump3324;
    fail_assertion("non-positive loop bound");
    _jump3324:;
    // Computing bound for H
    if (u > 0) 
    goto _jump3325;
    fail_assertion("non-positive loop bound");
    _jump3325:;
    // Computing bound for I
    if (r > 0) 
    goto _jump3326;
    fail_assertion("non-positive loop bound");
    _jump3326:;
    _4 = 0;
    int64_t _8 = 0; // I
    int64_t _9 = 0; // H
    int64_t _10 = 0; // G
    _jump3327:; // Begin body of loop
    _4 += h;
    _8++;
    if (_8 < r)
    goto _jump3327;
    _8 = 0;
    _9++;
    if (_9 < u)
    goto _jump3327;
    _9 = 0;
    _10++;
    if (_10 < _7)
    goto _jump3327;
    // End body of loop
    if (_4 > 0) 
    goto _jump3328;
    fail_assertion("non-positive loop bound");
    _jump3328:;
    _3 = 0;
    int64_t _11 = 0; // G
    _jump3329:; // Begin body of loop
    bool _13 = true;
    bool _12 = _13;
    if (0 != _13)
    goto _jump3330;
    bool _14 = z > q;
    _12 = _14;
    _jump3330:;
    double _15;
    if (!_12)
    goto _jump3331;
    double _16 = B.b;
    _15 = _16;
    goto _jump3332;
    _jump3331:;
    double _17 = B.g;
    double _18;
    // Computing bound for H
    if (C.d1 > 0) 
    goto _jump3333;
    fail_assertion("non-positive loop bound");
    _jump3333:;
    _18 = 0;
    int64_t _19 = 0; // H
    _jump3334:; // Begin body of loop
    _18 += c;
    _19++;
    if (_19 < C.d1)
    goto _jump3334;
    // End body of loop
    double _20 = _17 / _18;
    _15 = _20;
    _jump3332:;
    _3 += _15;
    _11++;
    if (_11 < _4)
    goto _jump3329;
    // End body of loop
    double _21 = -c;
    bool _22 = _3 <= _21;
    _0 = _22;
    _jump3320:;
    _a3_bool _23;
    if (!_0)
    goto _jump3335;
    _a3_void_t _24;
    // Computing bound for G
    _24.d0 = C.d0;
    if (C.d0 > 0) 
    goto _jump3336;
    fail_assertion("non-positive loop bound");
    _jump3336:;
    // Computing bound for H
    _24.d1 = k;
    if (k > 0) 
    goto _jump3337;
    fail_assertion("non-positive loop bound");
    _jump3337:;
    // Computing bound for I
    int64_t _25 = r / h;
    _24.d2 = _25;
    if (_25 > 0) 
    goto _jump3338;
    fail_assertion("non-positive loop bound");
    _jump3338:;
    // Computing total size of heap memory to allocate
    int64_t _26 = 1;
    _26 *= C.d0;
    _26 *= k;
    _26 *= _25;
    _26 *= sizeof(void_t);
    _24.data = jpl_alloc(_26);
    int64_t _27 = 0; // I
    int64_t _28 = 0; // H
    int64_t _29 = 0; // G
    _jump3339:; // Begin body of loop
    rgba _30;
    if (!w)
    goto _jump3340;
    bool _31 = true;
    rgba _32;
    if (!_31)
    goto _jump3341;
    double _33 = 52.0;
    double _34 = 48.0;
    double _35 = 38.0;
    rgba _36 = { _33, c, _34, _35 };
    _32 = _36;
    goto _jump3342;
    _jump3341:;
    bool _37 = false;
    rgba _38;
    if (!_37)
    goto _jump3343;
    _38 = B;
    goto _jump3344;
    _jump3343:;
    _38 = B;
    _jump3344:;
    _32 = _38;
    _jump3342:;
    _30 = _32;
    goto _jump3345;
    _jump3340:;
    double _39;
    // Computing bound for J
    int64_t _40 = 616;
    if (_40 > 0) 
    goto _jump3346;
    fail_assertion("non-positive loop bound");
    _jump3346:;
    // Computing bound for K
    if (_29 > 0) 
    goto _jump3347;
    fail_assertion("non-positive loop bound");
    _jump3347:;
    // Computing bound for L
    if (q > 0) 
    goto _jump3348;
    fail_assertion("non-positive loop bound");
    _jump3348:;
    _39 = 0;
    int64_t _41 = 0; // L
    int64_t _42 = 0; // K
    int64_t _43 = 0; // J
    _jump3349:; // Begin body of loop
    _39 += c;
    _41++;
    if (_41 < q)
    goto _jump3349;
    _41 = 0;
    _42++;
    if (_42 < _29)
    goto _jump3349;
    _42 = 0;
    _43++;
    if (_43 < _40)
    goto _jump3349;
    // End body of loop
    double _44 = c - c;
    double _45 = 73.0;
    double _46 = 42.0;
    double _47 = _45 / _46;
    rgba _48 = { _39, _44, _47, c };
    _30 = _48;
    _jump3345:;
    void_t _49 = A(_30, C);
    int64_t _50 = 0;
    _50 *= _24.d0;
    _50 += _29;
    _50 *= _24.d1;
    _50 += _28;
    _50 *= _24.d2;
    _50 += _27;
    _24.data[_50] = _49;
    _27++;
    if (_27 < _25)
    goto _jump3339;
    _27 = 0;
    _28++;
    if (_28 < k)
    goto _jump3339;
    _28 = 0;
    _29++;
    if (_29 < C.d0)
    goto _jump3339;
    // End body of loop
    _a3_bool _51 = m(_24);
    _23 = _51;
    goto _jump3350;
    _jump3335:;
    int64_t _52 = 884;
    if (v >= 0)
    goto _jump3351;
    fail_assertion("negative array index");
    _jump3351:;
    if (v < i.d0)
    goto _jump3352;
    fail_assertion("index too large");
    _jump3352:;
    if (_52 >= 0)
    goto _jump3353;
    fail_assertion("negative array index");
    _jump3353:;
    if (_52 < i.d1)
    goto _jump3354;
    fail_assertion("index too large");
    _jump3354:;
    if (C.d1 >= 0)
    goto _jump3355;
    fail_assertion("negative array index");
    _jump3355:;
    if (C.d1 < i.d2)
    goto _jump3356;
    fail_assertion("index too large");
    _jump3356:;
    int64_t _53 = 0;
    _53 *= i.d0;
    _53 += v;
    _53 *= i.d1;
    _53 += _52;
    _53 *= i.d2;
    _53 += C.d1;
    double _54 = i.data[_53];
    bool _55 = _54 == c;
    _a3_void_t _56;
    if (!_55)
    goto _jump3357;
    _a3_void_t _57;
    // Computing bound for G
    _57.d0 = j;
    if (j > 0) 
    goto _jump3358;
    fail_assertion("non-positive loop bound");
    _jump3358:;
    // Computing bound for H
    int64_t _58 = 265;
    int64_t _59 = _58 - C.d2;
    _57.d1 = _59;
    if (_59 > 0) 
    goto _jump3359;
    fail_assertion("non-positive loop bound");
    _jump3359:;
    // Computing bound for I
    int64_t _60 = -y;
    _57.d2 = _60;
    if (_60 > 0) 
    goto _jump3360;
    fail_assertion("non-positive loop bound");
    _jump3360:;
    // Computing total size of heap memory to allocate
    int64_t _61 = 1;
    _61 *= j;
    _61 *= _59;
    _61 *= _60;
    _61 *= sizeof(void_t);
    _57.data = jpl_alloc(_61);
    int64_t _62 = 0; // I
    int64_t _63 = 0; // H
    int64_t _64 = 0; // G
    _jump3361:; // Begin body of loop
    bool _66;
    if (!w)
    goto _jump3362;
    _66 = w;
    goto _jump3363;
    _jump3362:;
    _66 = w;
    _jump3363:;
    bool _65 = _66;
    if (0 != _66)
    goto _jump3364;
    bool _67 = false;
    _65 = _67;
    _jump3364:;
    void_t _68;
    if (!_65)
    goto _jump3365;
    bool _69 = false;
    _a3_void_t _70;
    if (!_69)
    goto _jump3366;
    _70 = C;
    goto _jump3367;
    _jump3366:;
    _70 = C;
    _jump3367:;
    int64_t _71 = _62 / j;
    if (_64 >= 0)
    goto _jump3368;
    fail_assertion("negative array index");
    _jump3368:;
    if (_64 < _70.d0)
    goto _jump3369;
    fail_assertion("index too large");
    _jump3369:;
    if (_71 >= 0)
    goto _jump3370;
    fail_assertion("negative array index");
    _jump3370:;
    if (_71 < _70.d1)
    goto _jump3371;
    fail_assertion("index too large");
    _jump3371:;
    if (r >= 0)
    goto _jump3372;
    fail_assertion("negative array index");
    _jump3372:;
    if (r < _70.d2)
    goto _jump3373;
    fail_assertion("index too large");
    _jump3373:;
    int64_t _72 = 0;
    _72 *= _70.d0;
    _72 += _64;
    _72 *= _70.d1;
    _72 += _71;
    _72 *= _70.d2;
    _72 += r;
    void_t _73 = _70.data[_72];
    _68 = _73;
    goto _jump3374;
    _jump3365:;
    void_t _74 = A(B, C);
    _68 = _74;
    _jump3374:;
    int64_t _75 = 0;
    _75 *= _57.d0;
    _75 += _64;
    _75 *= _57.d1;
    _75 += _63;
    _75 *= _57.d2;
    _75 += _62;
    _57.data[_75] = _68;
    _62++;
    if (_62 < _60)
    goto _jump3361;
    _62 = 0;
    _63++;
    if (_63 < _59)
    goto _jump3361;
    _63 = 0;
    _64++;
    if (_64 < j)
    goto _jump3361;
    // End body of loop
    _56 = _57;
    goto _jump3375;
    _jump3357:;
    _56 = C;
    _jump3375:;
    _a3_bool _76 = m(_56);
    _23 = _76;
    _jump3350:;
    bool _77 = true;
    bool _78 = true;
    void_t _79;
    if (!_78)
    goto _jump3376;
    _a3_void_t _80;
    // Computing bound for K
    _80.d0 = u;
    if (u > 0) 
    goto _jump3377;
    fail_assertion("non-positive loop bound");
    _jump3377:;
    // Computing bound for L
    _80.d1 = o;
    if (o > 0) 
    goto _jump3378;
    fail_assertion("non-positive loop bound");
    _jump3378:;
    // Computing bound for M
    _80.d2 = _23.d0;
    if (_23.d0 > 0) 
    goto _jump3379;
    fail_assertion("non-positive loop bound");
    _jump3379:;
    // Computing total size of heap memory to allocate
    int64_t _81 = 1;
    _81 *= u;
    _81 *= o;
    _81 *= _23.d0;
    _81 *= sizeof(void_t);
    _80.data = jpl_alloc(_81);
    int64_t _82 = 0; // M
    int64_t _83 = 0; // L
    int64_t _84 = 0; // K
    _jump3380:; // Begin body of loop
    void_t _85 = A(B, C);
    int64_t _86 = 0;
    _86 *= _80.d0;
    _86 += _84;
    _86 *= _80.d1;
    _86 += _83;
    _86 *= _80.d2;
    _86 += _82;
    _80.data[_86] = _85;
    _82++;
    if (_82 < _23.d0)
    goto _jump3380;
    _82 = 0;
    _83++;
    if (_83 < o)
    goto _jump3380;
    _83 = 0;
    _84++;
    if (_84 < u)
    goto _jump3380;
    // End body of loop
    _a1_int64_t _87;
    _87.d0 = 1;
    _87.data = jpl_alloc(sizeof(int64_t) * 1);
    _87.data[0] = u;
    int64_t _88 = 211;
    int64_t _89 = C.d1 * _88;
    if (_89 >= 0)
    goto _jump3381;
    fail_assertion("negative array index");
    _jump3381:;
    if (_89 < _87.d0)
    goto _jump3382;
    fail_assertion("index too large");
    _jump3382:;
    int64_t _90 = 0;
    _90 *= _87.d0;
    _90 += _89;
    int64_t _91 = _87.data[_90];
    if (C.d2 >= 0)
    goto _jump3383;
    fail_assertion("negative array index");
    _jump3383:;
    if (C.d2 < _80.d0)
    goto _jump3384;
    fail_assertion("index too large");
    _jump3384:;
    if (_91 >= 0)
    goto _jump3385;
    fail_assertion("negative array index");
    _jump3385:;
    if (_91 < _80.d1)
    goto _jump3386;
    fail_assertion("index too large");
    _jump3386:;
    if (C.d0 >= 0)
    goto _jump3387;
    fail_assertion("negative array index");
    _jump3387:;
    if (C.d0 < _80.d2)
    goto _jump3388;
    fail_assertion("index too large");
    _jump3388:;
    int64_t _92 = 0;
    _92 *= _80.d0;
    _92 += C.d2;
    _92 *= _80.d1;
    _92 += _91;
    _92 *= _80.d2;
    _92 += C.d0;
    void_t _93 = _80.data[_92];
    _79 = _93;
    goto _jump3389;
    _jump3376:;
    _a3_void_t _94;
    if (!w)
    goto _jump3390;
    _a3_void_t _95;
    if (!w)
    goto _jump3391;
    _95 = C;
    goto _jump3392;
    _jump3391:;
    _95 = C;
    _jump3392:;
    _94 = _95;
    goto _jump3393;
    _jump3390:;
    _94 = C;
    _jump3393:;
    if (s >= 0)
    goto _jump3394;
    fail_assertion("negative array index");
    _jump3394:;
    if (s < _94.d0)
    goto _jump3395;
    fail_assertion("index too large");
    _jump3395:;
    if (r >= 0)
    goto _jump3396;
    fail_assertion("negative array index");
    _jump3396:;
    if (r < _94.d1)
    goto _jump3397;
    fail_assertion("index too large");
    _jump3397:;
    if (h >= 0)
    goto _jump3398;
    fail_assertion("negative array index");
    _jump3398:;
    if (h < _94.d2)
    goto _jump3399;
    fail_assertion("index too large");
    _jump3399:;
    int64_t _96 = 0;
    _96 *= _94.d0;
    _96 += s;
    _96 *= _94.d1;
    _96 += r;
    _96 *= _94.d2;
    _96 += h;
    void_t _97 = _94.data[_96];
    _79 = _97;
    _jump3389:;
    bool _98 = e(_77, _79);
    bool _99;
    if (!_98)
    goto _jump3400;
    bool _101 = false;
    bool _102 = !_101;
    bool _100 = _102;
    if (0 == _102)
    goto _jump3401;
    _100 = w;
    _jump3401:;
    _99 = _100;
    goto _jump3402;
    _jump3400:;
    _a3_int64_t _103;
    // Computing bound for K
    _103.d0 = j;
    if (j > 0) 
    goto _jump3403;
    fail_assertion("non-positive loop bound");
    _jump3403:;
    // Computing bound for L
    _103.d1 = y;
    if (y > 0) 
    goto _jump3404;
    fail_assertion("non-positive loop bound");
    _jump3404:;
    // Computing bound for M
    _103.d2 = r;
    if (r > 0) 
    goto _jump3405;
    fail_assertion("non-positive loop bound");
    _jump3405:;
    // Computing total size of heap memory to allocate
    int64_t _104 = 1;
    _104 *= j;
    _104 *= y;
    _104 *= r;
    _104 *= sizeof(int64_t);
    _103.data = jpl_alloc(_104);
    int64_t _105 = 0; // M
    int64_t _106 = 0; // L
    int64_t _107 = 0; // K
    _jump3406:; // Begin body of loop
    int64_t _108 = 0;
    _108 *= _103.d0;
    _108 += _107;
    _108 *= _103.d1;
    _108 += _106;
    _108 *= _103.d2;
    _108 += _105;
    _103.data[_108] = C.d1;
    _105++;
    if (_105 < r)
    goto _jump3406;
    _105 = 0;
    _106++;
    if (_106 < y)
    goto _jump3406;
    _106 = 0;
    _107++;
    if (_107 < j)
    goto _jump3406;
    // End body of loop
    double _109 = 17.0;
    double _110 = 56.0;
    double _111 = _109 * _110;
    bool _112 = a(_103, _111);
    _99 = _112;
    _jump3402:;
    bool _113 = !_99;
    if (0 != _113)
    goto _jump3407;
    fail_assertion("K");
    _jump3407:;
    bool _114 = false;
    _a1__a1_int64_t _115;
    if (!_114)
    goto _jump3408;
    bool _116 = false;
    double _117;
    if (!_116)
    goto _jump3409;
    double _118 = B.g;
    _117 = _118;
    goto _jump3410;
    _jump3409:;
    if (k >= 0)
    goto _jump3411;
    fail_assertion("negative array index");
    _jump3411:;
    if (k < g.d0)
    goto _jump3412;
    fail_assertion("index too large");
    _jump3412:;
    int64_t _119 = 0;
    _119 *= g.d0;
    _119 += k;
    double _120 = g.data[_119];
    _117 = _120;
    _jump3410:;
    double _121;
    // Computing bound for K
    if (o > 0) 
    goto _jump3413;
    fail_assertion("non-positive loop bound");
    _jump3413:;
    // Computing bound for L
    if (u > 0) 
    goto _jump3414;
    fail_assertion("non-positive loop bound");
    _jump3414:;
    _121 = 0;
    int64_t _122 = 0; // L
    int64_t _123 = 0; // K
    _jump3415:; // Begin body of loop
    _121 += c;
    _122++;
    if (_122 < u)
    goto _jump3415;
    _122 = 0;
    _123++;
    if (_123 < o)
    goto _jump3415;
    // End body of loop
    double _124 = -_121;
    double _125 = fmod(_117, _124);
    double _126 = fmod(c, c);
    double _127 = -_126;
    double _128 = -_127;
    bool _129 = _125 >= _128;
    _a1__a1_int64_t _130;
    if (!_129)
    goto _jump3416;
    _a3__a1__a1_int64_t _131;
    // Computing bound for K
    int64_t _132 = 104;
    _131.d0 = _132;
    if (_132 > 0) 
    goto _jump3417;
    fail_assertion("non-positive loop bound");
    _jump3417:;
    // Computing bound for L
    _131.d1 = q;
    if (q > 0) 
    goto _jump3418;
    fail_assertion("non-positive loop bound");
    _jump3418:;
    // Computing bound for M
    _131.d2 = q;
    if (q > 0) 
    goto _jump3419;
    fail_assertion("non-positive loop bound");
    _jump3419:;
    // Computing total size of heap memory to allocate
    int64_t _133 = 1;
    _133 *= _132;
    _133 *= q;
    _133 *= q;
    _133 *= sizeof(_a1__a1_int64_t);
    _131.data = jpl_alloc(_133);
    int64_t _134 = 0; // M
    int64_t _135 = 0; // L
    int64_t _136 = 0; // K
    _jump3420:; // Begin body of loop
    _a1__a1_int64_t _137;
    // Computing bound for N
    _137.d0 = v;
    if (v > 0) 
    goto _jump3421;
    fail_assertion("non-positive loop bound");
    _jump3421:;
    // Computing total size of heap memory to allocate
    int64_t _138 = 1;
    _138 *= v;
    _138 *= sizeof(_a1_int64_t);
    _137.data = jpl_alloc(_138);
    int64_t _139 = 0; // N
    _jump3422:; // Begin body of loop
    _a1_int64_t _140;
    _140.d0 = 3;
    _140.data = jpl_alloc(sizeof(int64_t) * 3);
    _140.data[0] = z;
    _140.data[1] = _23.d0;
    _140.data[2] = C.d0;
    int64_t _141 = 0;
    _141 *= _137.d0;
    _141 += _139;
    _137.data[_141] = _140;
    _139++;
    if (_139 < v)
    goto _jump3422;
    // End body of loop
    int64_t _142 = 0;
    _142 *= _131.d0;
    _142 += _136;
    _142 *= _131.d1;
    _142 += _135;
    _142 *= _131.d2;
    _142 += _134;
    _131.data[_142] = _137;
    _134++;
    if (_134 < q)
    goto _jump3420;
    _134 = 0;
    _135++;
    if (_135 < q)
    goto _jump3420;
    _135 = 0;
    _136++;
    if (_136 < _132)
    goto _jump3420;
    // End body of loop
    bool _143 = false;
    _a1_int64_t _144;
    if (!_143)
    goto _jump3423;
    _a1_int64_t _145;
    _145.d0 = 1;
    _145.data = jpl_alloc(sizeof(int64_t) * 1);
    _145.data[0] = C.d1;
    _144 = _145;
    goto _jump3424;
    _jump3423:;
    _a1_int64_t _146;
    _146.d0 = 1;
    _146.data = jpl_alloc(sizeof(int64_t) * 1);
    _146.data[0] = j;
    _144 = _146;
    _jump3424:;
    int64_t _147 = 563;
    if (_147 >= 0)
    goto _jump3425;
    fail_assertion("negative array index");
    _jump3425:;
    if (_147 < _144.d0)
    goto _jump3426;
    fail_assertion("index too large");
    _jump3426:;
    int64_t _148 = 0;
    _148 *= _144.d0;
    _148 += _147;
    int64_t _149 = _144.data[_148];
    if (C.d2 >= 0)
    goto _jump3427;
    fail_assertion("negative array index");
    _jump3427:;
    if (C.d2 < _131.d0)
    goto _jump3428;
    fail_assertion("index too large");
    _jump3428:;
    if (_149 >= 0)
    goto _jump3429;
    fail_assertion("negative array index");
    _jump3429:;
    if (_149 < _131.d1)
    goto _jump3430;
    fail_assertion("index too large");
    _jump3430:;
    if (k >= 0)
    goto _jump3431;
    fail_assertion("negative array index");
    _jump3431:;
    if (k < _131.d2)
    goto _jump3432;
    fail_assertion("index too large");
    _jump3432:;
    int64_t _150 = 0;
    _150 *= _131.d0;
    _150 += C.d2;
    _150 *= _131.d1;
    _150 += _149;
    _150 *= _131.d2;
    _150 += k;
    _a1__a1_int64_t _151 = _131.data[_150];
    _130 = _151;
    goto _jump3433;
    _jump3416:;
    _a3_int64_t _152;
    // Computing bound for K
    _152.d0 = C.d1;
    if (C.d1 > 0) 
    goto _jump3434;
    fail_assertion("non-positive loop bound");
    _jump3434:;
    // Computing bound for L
    _152.d1 = _23.d2;
    if (_23.d2 > 0) 
    goto _jump3435;
    fail_assertion("non-positive loop bound");
    _jump3435:;
    // Computing bound for M
    _152.d2 = _23.d0;
    if (_23.d0 > 0) 
    goto _jump3436;
    fail_assertion("non-positive loop bound");
    _jump3436:;
    // Computing total size of heap memory to allocate
    int64_t _153 = 1;
    _153 *= C.d1;
    _153 *= _23.d2;
    _153 *= _23.d0;
    _153 *= sizeof(int64_t);
    _152.data = jpl_alloc(_153);
    int64_t _154 = 0; // M
    int64_t _155 = 0; // L
    int64_t _156 = 0; // K
    _jump3437:; // Begin body of loop
    int64_t _157 = 0;
    _157 *= _152.d0;
    _157 += _156;
    _157 *= _152.d1;
    _157 += _155;
    _157 *= _152.d2;
    _157 += _154;
    _152.data[_157] = C.d1;
    _154++;
    if (_154 < _23.d0)
    goto _jump3437;
    _154 = 0;
    _155++;
    if (_155 < _23.d2)
    goto _jump3437;
    _155 = 0;
    _156++;
    if (_156 < C.d1)
    goto _jump3437;
    // End body of loop
    double _158 = 71.0;
    bool _159 = a(_152, _158);
    _a1_int64_t _160;
    if (!_159)
    goto _jump3438;
    _a1_int64_t _161;
    // Computing bound for K
    _161.d0 = o;
    if (o > 0) 
    goto _jump3439;
    fail_assertion("non-positive loop bound");
    _jump3439:;
    // Computing total size of heap memory to allocate
    int64_t _162 = 1;
    _162 *= o;
    _162 *= sizeof(int64_t);
    _161.data = jpl_alloc(_162);
    int64_t _163 = 0; // K
    _jump3440:; // Begin body of loop
    int64_t _164 = 0;
    _164 *= _161.d0;
    _164 += _163;
    _161.data[_164] = _23.d2;
    _163++;
    if (_163 < o)
    goto _jump3440;
    // End body of loop
    _160 = _161;
    goto _jump3441;
    _jump3438:;
    _a1_int64_t _165;
    // Computing bound for K
    int64_t _166;
    // Computing bound for K
    if (r > 0) 
    goto _jump3442;
    fail_assertion("non-positive loop bound");
    _jump3442:;
    _166 = 0;
    int64_t _167 = 0; // K
    _jump3443:; // Begin body of loop
    _166 += z;
    _167++;
    if (_167 < r)
    goto _jump3443;
    // End body of loop
    _165.d0 = _166;
    if (_166 > 0) 
    goto _jump3444;
    fail_assertion("non-positive loop bound");
    _jump3444:;
    // Computing total size of heap memory to allocate
    int64_t _168 = 1;
    _168 *= _166;
    _168 *= sizeof(int64_t);
    _165.data = jpl_alloc(_168);
    int64_t _169 = 0; // K
    _jump3445:; // Begin body of loop
    int64_t _170 = 0;
    _170 *= _165.d0;
    _170 += _169;
    _165.data[_170] = h;
    _169++;
    if (_169 < _166)
    goto _jump3445;
    // End body of loop
    _160 = _165;
    _jump3441:;
    _a1_int64_t _171;
    _171.d0 = 3;
    _171.data = jpl_alloc(sizeof(int64_t) * 3);
    _171.data[0] = h;
    _171.data[1] = o;
    _171.data[2] = q;
    _a1__a1_int64_t _172;
    _172.d0 = 2;
    _172.data = jpl_alloc(sizeof(_a1_int64_t) * 2);
    _172.data[0] = _160;
    _172.data[1] = _171;
    _130 = _172;
    _jump3433:;
    _115 = _130;
    goto _jump3446;
    _jump3408:;
    _a1__a1_int64_t _173;
    // Computing bound for K
    _173.d0 = s;
    if (s > 0) 
    goto _jump3447;
    fail_assertion("non-positive loop bound");
    _jump3447:;
    // Computing total size of heap memory to allocate
    int64_t _174 = 1;
    _174 *= s;
    _174 *= sizeof(_a1_int64_t);
    _173.data = jpl_alloc(_174);
    int64_t _175 = 0; // K
    _jump3448:; // Begin body of loop
    bool _176 = true;
    bool _177 = !_176;
    _a1_int64_t _178;
    if (!_177)
    goto _jump3449;
    _a1_int64_t _179;
    // Computing bound for L
    _179.d0 = k;
    if (k > 0) 
    goto _jump3450;
    fail_assertion("non-positive loop bound");
    _jump3450:;
    // Computing total size of heap memory to allocate
    int64_t _180 = 1;
    _180 *= k;
    _180 *= sizeof(int64_t);
    _179.data = jpl_alloc(_180);
    int64_t _181 = 0; // L
    _jump3451:; // Begin body of loop
    int64_t _182 = 0;
    _182 *= _179.d0;
    _182 += _181;
    _179.data[_182] = u;
    _181++;
    if (_181 < k)
    goto _jump3451;
    // End body of loop
    _178 = _179;
    goto _jump3452;
    _jump3449:;
    _a1_int64_t _183;
    // Computing bound for L
    _183.d0 = C.d1;
    if (C.d1 > 0) 
    goto _jump3453;
    fail_assertion("non-positive loop bound");
    _jump3453:;
    // Computing total size of heap memory to allocate
    int64_t _184 = 1;
    _184 *= C.d1;
    _184 *= sizeof(int64_t);
    _183.data = jpl_alloc(_184);
    int64_t _185 = 0; // L
    _jump3454:; // Begin body of loop
    int64_t _186 = 0;
    _186 *= _183.d0;
    _186 += _185;
    _183.data[_186] = u;
    _185++;
    if (_185 < C.d1)
    goto _jump3454;
    // End body of loop
    _178 = _183;
    _jump3452:;
    _a1_int64_t _187;
    // Computing bound for L
    int64_t _188 = 691;
    _187.d0 = _188;
    if (_188 > 0) 
    goto _jump3455;
    fail_assertion("non-positive loop bound");
    _jump3455:;
    // Computing total size of heap memory to allocate
    int64_t _189 = 1;
    _189 *= _188;
    _189 *= sizeof(int64_t);
    _187.data = jpl_alloc(_189);
    int64_t _190 = 0; // L
    _jump3456:; // Begin body of loop
    int64_t _191 = 0;
    _191 *= _187.d0;
    _191 += _190;
    _187.data[_191] = k;
    _190++;
    if (_190 < _188)
    goto _jump3456;
    // End body of loop
    _a1__a1_int64_t _192;
    _192.d0 = 2;
    _192.data = jpl_alloc(sizeof(_a1_int64_t) * 2);
    _192.data[0] = _178;
    _192.data[1] = _187;
    bool _193 = false;
    int64_t _194;
    if (!_193)
    goto _jump3457;
    _194 = v;
    goto _jump3458;
    _jump3457:;
    int64_t _195 = u % _23.d2;
    _194 = _195;
    _jump3458:;
    if (_194 >= 0)
    goto _jump3459;
    fail_assertion("negative array index");
    _jump3459:;
    if (_194 < _192.d0)
    goto _jump3460;
    fail_assertion("index too large");
    _jump3460:;
    int64_t _196 = 0;
    _196 *= _192.d0;
    _196 += _194;
    _a1_int64_t _197 = _192.data[_196];
    int64_t _198 = 0;
    _198 *= _173.d0;
    _198 += _175;
    _173.data[_198] = _197;
    _175++;
    if (_175 < s)
    goto _jump3448;
    // End body of loop
    _115 = _173;
    _jump3446:;
    if (_23.d0 >= 0)
    goto _jump3461;
    fail_assertion("negative array index");
    _jump3461:;
    if (_23.d0 < _115.d0)
    goto _jump3462;
    fail_assertion("index too large");
    _jump3462:;
    int64_t _199 = 0;
    _199 *= _115.d0;
    _199 += _23.d0;
    _a1_int64_t _200 = _115.data[_199];
    _a2_double _201;
    // Computing bound for M
    _201.d0 = _200.d0;
    if (_200.d0 > 0) 
    goto _jump3463;
    fail_assertion("non-positive loop bound");
    _jump3463:;
    // Computing bound for N
    _a1_int64_t _202;
    if (!w)
    goto _jump3464;
    bool _203 = true;
    _a1_int64_t _204;
    if (!_203)
    goto _jump3465;
    _a1_int64_t _205;
    // Computing bound for M
    _205.d0 = C.d0;
    if (C.d0 > 0) 
    goto _jump3466;
    fail_assertion("non-positive loop bound");
    _jump3466:;
    // Computing total size of heap memory to allocate
    int64_t _206 = 1;
    _206 *= C.d0;
    _206 *= sizeof(int64_t);
    _205.data = jpl_alloc(_206);
    int64_t _207 = 0; // M
    _jump3467:; // Begin body of loop
    int64_t _208 = 0;
    _208 *= _205.d0;
    _208 += _207;
    _205.data[_208] = h;
    _207++;
    if (_207 < C.d0)
    goto _jump3467;
    // End body of loop
    _204 = _205;
    goto _jump3468;
    _jump3465:;
    _a1_int64_t _209;
    // Computing bound for M
    _209.d0 = C.d2;
    if (C.d2 > 0) 
    goto _jump3469;
    fail_assertion("non-positive loop bound");
    _jump3469:;
    // Computing total size of heap memory to allocate
    int64_t _210 = 1;
    _210 *= C.d2;
    _210 *= sizeof(int64_t);
    _209.data = jpl_alloc(_210);
    int64_t _211 = 0; // M
    _jump3470:; // Begin body of loop
    int64_t _212 = 0;
    _212 *= _209.d0;
    _212 += _211;
    _209.data[_212] = _23.d2;
    _211++;
    if (_211 < C.d2)
    goto _jump3470;
    // End body of loop
    _204 = _209;
    _jump3468:;
    _202 = _204;
    goto _jump3471;
    _jump3464:;
    _a1_int64_t _213;
    // Computing bound for M
    int64_t _214 = n(w);
    _213.d0 = _214;
    if (_214 > 0) 
    goto _jump3472;
    fail_assertion("non-positive loop bound");
    _jump3472:;
    // Computing total size of heap memory to allocate
    int64_t _215 = 1;
    _215 *= _214;
    _215 *= sizeof(int64_t);
    _213.data = jpl_alloc(_215);
    int64_t _216 = 0; // M
    _jump3473:; // Begin body of loop
    int64_t _217 = 0;
    _217 *= _213.d0;
    _217 += _216;
    _213.data[_217] = r;
    _216++;
    if (_216 < _214)
    goto _jump3473;
    // End body of loop
    _202 = _213;
    _jump3471:;
    _a2_double _218;
    // Computing bound for M
    _218.d0 = q;
    if (q > 0) 
    goto _jump3474;
    fail_assertion("non-positive loop bound");
    _jump3474:;
    // Computing bound for N
    _218.d1 = y;
    if (y > 0) 
    goto _jump3475;
    fail_assertion("non-positive loop bound");
    _jump3475:;
    // Computing total size of heap memory to allocate
    int64_t _219 = 1;
    _219 *= q;
    _219 *= y;
    _219 *= sizeof(double);
    _218.data = jpl_alloc(_219);
    int64_t _220 = 0; // N
    int64_t _221 = 0; // M
    _jump3476:; // Begin body of loop
    int64_t _222 = 0;
    _222 *= _218.d0;
    _222 += _221;
    _222 *= _218.d1;
    _222 += _220;
    _218.data[_222] = c;
    _220++;
    if (_220 < y)
    goto _jump3476;
    _220 = 0;
    _221++;
    if (_221 < q)
    goto _jump3476;
    // End body of loop
    int64_t _223;
    // Computing bound for M
    if (q > 0) 
    goto _jump3477;
    fail_assertion("non-positive loop bound");
    _jump3477:;
    // Computing bound for N
    if (y > 0) 
    goto _jump3478;
    fail_assertion("non-positive loop bound");
    _jump3478:;
    // Computing bound for O
    if (q > 0) 
    goto _jump3479;
    fail_assertion("non-positive loop bound");
    _jump3479:;
    _223 = 0;
    int64_t _224 = 0; // O
    int64_t _225 = 0; // N
    int64_t _226 = 0; // M
    _jump3480:; // Begin body of loop
    _223 += _226;
    _224++;
    if (_224 < q)
    goto _jump3480;
    _224 = 0;
    _225++;
    if (_225 < y)
    goto _jump3480;
    _225 = 0;
    _226++;
    if (_226 < q)
    goto _jump3480;
    // End body of loop
    if (j >= 0)
    goto _jump3481;
    fail_assertion("negative array index");
    _jump3481:;
    if (j < _218.d0)
    goto _jump3482;
    fail_assertion("index too large");
    _jump3482:;
    if (_223 >= 0)
    goto _jump3483;
    fail_assertion("negative array index");
    _jump3483:;
    if (_223 < _218.d1)
    goto _jump3484;
    fail_assertion("index too large");
    _jump3484:;
    int64_t _227 = 0;
    _227 *= _218.d0;
    _227 += j;
    _227 *= _218.d1;
    _227 += _223;
    double _228 = _218.data[_227];
    double _229 = -_228;
    double _230;
    // Computing bound for M
    if (_23.d2 > 0) 
    goto _jump3485;
    fail_assertion("non-positive loop bound");
    _jump3485:;
    _230 = 0;
    int64_t _231 = 0; // M
    _jump3486:; // Begin body of loop
    double _232 = 3.0;
    _230 += _232;
    _231++;
    if (_231 < _23.d2)
    goto _jump3486;
    // End body of loop
    double _233 = c + _230;
    double _234 = 45.0;
    double _235 = _233 * _234;
    bool _236 = _229 == _235;
    int64_t _237;
    if (!_236)
    goto _jump3487;
    _237 = h;
    goto _jump3488;
    _jump3487:;
    _237 = s;
    _jump3488:;
    if (_237 >= 0)
    goto _jump3489;
    fail_assertion("negative array index");
    _jump3489:;
    if (_237 < _202.d0)
    goto _jump3490;
    fail_assertion("index too large");
    _jump3490:;
    int64_t _238 = 0;
    _238 *= _202.d0;
    _238 += _237;
    int64_t _239 = _202.data[_238];
    _201.d1 = _239;
    if (_239 > 0) 
    goto _jump3491;
    fail_assertion("non-positive loop bound");
    _jump3491:;
    // Computing total size of heap memory to allocate
    int64_t _240 = 1;
    _240 *= _200.d0;
    _240 *= _239;
    _240 *= sizeof(double);
    _201.data = jpl_alloc(_240);
    int64_t _241 = 0; // N
    int64_t _242 = 0; // M
    _jump3492:; // Begin body of loop
    double _243 = -c;
    int64_t _244 = 0;
    _244 *= _201.d0;
    _244 += _242;
    _244 *= _201.d1;
    _244 += _241;
    _201.data[_244] = _243;
    _241++;
    if (_241 < _239)
    goto _jump3492;
    _241 = 0;
    _242++;
    if (_242 < _200.d0)
    goto _jump3492;
    // End body of loop
    bool _245 = true;
    _a1_double _246;
    if (!_245)
    goto _jump3493;
    _246 = g;
    goto _jump3494;
    _jump3493:;
    double _247 = -c;
    double _248 = 82.0;
    double _249 = -_248;
    double _250 = -_249;
    bool _251 = _247 == _250;
    _a1_double _252;
    if (!_251)
    goto _jump3495;
    bool _253 = C.d1 == _23.d0;
    _a3__a1_double _254;
    if (!_253)
    goto _jump3496;
    _a3__a1_double _255;
    // Computing bound for R
    _255.d0 = r;
    if (r > 0) 
    goto _jump3497;
    fail_assertion("non-positive loop bound");
    _jump3497:;
    // Computing bound for S
    if (_23.d0 >= 0)
    goto _jump3498;
    fail_assertion("negative array index");
    _jump3498:;
    if (_23.d0 < _200.d0)
    goto _jump3499;
    fail_assertion("index too large");
    _jump3499:;
    int64_t _256 = 0;
    _256 *= _200.d0;
    _256 += _23.d0;
    int64_t _257 = _200.data[_256];
    _255.d1 = _257;
    if (_257 > 0) 
    goto _jump3500;
    fail_assertion("non-positive loop bound");
    _jump3500:;
    // Computing bound for T
    _255.d2 = _23.d0;
    if (_23.d0 > 0) 
    goto _jump3501;
    fail_assertion("non-positive loop bound");
    _jump3501:;
    // Computing total size of heap memory to allocate
    int64_t _258 = 1;
    _258 *= r;
    _258 *= _257;
    _258 *= _23.d0;
    _258 *= sizeof(_a1_double);
    _255.data = jpl_alloc(_258);
    int64_t _259 = 0; // T
    int64_t _260 = 0; // S
    int64_t _261 = 0; // R
    _jump3502:; // Begin body of loop
    double _262 = 27.0;
    _a1_double _263;
    _263.d0 = 1;
    _263.data = jpl_alloc(sizeof(double) * 1);
    _263.data[0] = _262;
    int64_t _264 = 0;
    _264 *= _255.d0;
    _264 += _261;
    _264 *= _255.d1;
    _264 += _260;
    _264 *= _255.d2;
    _264 += _259;
    _255.data[_264] = _263;
    _259++;
    if (_259 < _23.d0)
    goto _jump3502;
    _259 = 0;
    _260++;
    if (_260 < _257)
    goto _jump3502;
    _260 = 0;
    _261++;
    if (_261 < r)
    goto _jump3502;
    // End body of loop
    _254 = _255;
    goto _jump3503;
    _jump3496:;
    _a3__a1_double _265;
    if (!w)
    goto _jump3504;
    _a3__a1_double _266;
    // Computing bound for R
    _266.d0 = _23.d1;
    if (_23.d1 > 0) 
    goto _jump3505;
    fail_assertion("non-positive loop bound");
    _jump3505:;
    // Computing bound for S
    _266.d1 = C.d2;
    if (C.d2 > 0) 
    goto _jump3506;
    fail_assertion("non-positive loop bound");
    _jump3506:;
    // Computing bound for T
    _266.d2 = _23.d0;
    if (_23.d0 > 0) 
    goto _jump3507;
    fail_assertion("non-positive loop bound");
    _jump3507:;
    // Computing total size of heap memory to allocate
    int64_t _267 = 1;
    _267 *= _23.d1;
    _267 *= C.d2;
    _267 *= _23.d0;
    _267 *= sizeof(_a1_double);
    _266.data = jpl_alloc(_267);
    int64_t _268 = 0; // T
    int64_t _269 = 0; // S
    int64_t _270 = 0; // R
    _jump3508:; // Begin body of loop
    int64_t _271 = 0;
    _271 *= _266.d0;
    _271 += _270;
    _271 *= _266.d1;
    _271 += _269;
    _271 *= _266.d2;
    _271 += _268;
    _266.data[_271] = g;
    _268++;
    if (_268 < _23.d0)
    goto _jump3508;
    _268 = 0;
    _269++;
    if (_269 < C.d2)
    goto _jump3508;
    _269 = 0;
    _270++;
    if (_270 < _23.d1)
    goto _jump3508;
    // End body of loop
    _265 = _266;
    goto _jump3509;
    _jump3504:;
    _a3__a1_double _272;
    // Computing bound for R
    int64_t _273 = -q;
    _272.d0 = _273;
    if (_273 > 0) 
    goto _jump3510;
    fail_assertion("non-positive loop bound");
    _jump3510:;
    // Computing bound for S
    int64_t _274 = 184;
    _272.d1 = _274;
    if (_274 > 0) 
    goto _jump3511;
    fail_assertion("non-positive loop bound");
    _jump3511:;
    // Computing bound for T
    _272.d2 = y;
    if (y > 0) 
    goto _jump3512;
    fail_assertion("non-positive loop bound");
    _jump3512:;
    // Computing total size of heap memory to allocate
    int64_t _275 = 1;
    _275 *= _273;
    _275 *= _274;
    _275 *= y;
    _275 *= sizeof(_a1_double);
    _272.data = jpl_alloc(_275);
    int64_t _276 = 0; // T
    int64_t _277 = 0; // S
    int64_t _278 = 0; // R
    _jump3513:; // Begin body of loop
    int64_t _279 = 0;
    _279 *= _272.d0;
    _279 += _278;
    _279 *= _272.d1;
    _279 += _277;
    _279 *= _272.d2;
    _279 += _276;
    _272.data[_279] = g;
    _276++;
    if (_276 < y)
    goto _jump3513;
    _276 = 0;
    _277++;
    if (_277 < _274)
    goto _jump3513;
    _277 = 0;
    _278++;
    if (_278 < _273)
    goto _jump3513;
    // End body of loop
    _265 = _272;
    _jump3509:;
    _254 = _265;
    _jump3503:;
    if (k >= 0)
    goto _jump3514;
    fail_assertion("negative array index");
    _jump3514:;
    if (k < _254.d0)
    goto _jump3515;
    fail_assertion("index too large");
    _jump3515:;
    if (v >= 0)
    goto _jump3516;
    fail_assertion("negative array index");
    _jump3516:;
    if (v < _254.d1)
    goto _jump3517;
    fail_assertion("index too large");
    _jump3517:;
    if (o >= 0)
    goto _jump3518;
    fail_assertion("negative array index");
    _jump3518:;
    if (o < _254.d2)
    goto _jump3519;
    fail_assertion("index too large");
    _jump3519:;
    int64_t _280 = 0;
    _280 *= _254.d0;
    _280 += k;
    _280 *= _254.d1;
    _280 += v;
    _280 *= _254.d2;
    _280 += o;
    _a1_double _281 = _254.data[_280];
    _252 = _281;
    goto _jump3520;
    _jump3495:;
    _a1_double _282;
    // Computing bound for R
    int64_t _283;
    // Computing bound for R
    if (l > 0) 
    goto _jump3521;
    fail_assertion("non-positive loop bound");
    _jump3521:;
    // Computing bound for S
    if (o > 0) 
    goto _jump3522;
    fail_assertion("non-positive loop bound");
    _jump3522:;
    // Computing bound for T
    if (s > 0) 
    goto _jump3523;
    fail_assertion("non-positive loop bound");
    _jump3523:;
    _283 = 0;
    int64_t _284 = 0; // T
    int64_t _285 = 0; // S
    int64_t _286 = 0; // R
    _jump3524:; // Begin body of loop
    _283 += _286;
    _284++;
    if (_284 < s)
    goto _jump3524;
    _284 = 0;
    _285++;
    if (_285 < o)
    goto _jump3524;
    _285 = 0;
    _286++;
    if (_286 < l)
    goto _jump3524;
    // End body of loop
    _282.d0 = _283;
    if (_283 > 0) 
    goto _jump3525;
    fail_assertion("non-positive loop bound");
    _jump3525:;
    // Computing total size of heap memory to allocate
    int64_t _287 = 1;
    _287 *= _283;
    _287 *= sizeof(double);
    _282.data = jpl_alloc(_287);
    int64_t _288 = 0; // R
    _jump3526:; // Begin body of loop
    bool _289 = true;
    double _290;
    if (!_289)
    goto _jump3527;
    double _291 = -c;
    double _292 = -_291;
    _290 = _292;
    goto _jump3528;
    _jump3527:;
    double _293 = 86.0;
    _290 = _293;
    _jump3528:;
    int64_t _294 = 0;
    _294 *= _282.d0;
    _294 += _288;
    _282.data[_294] = _290;
    _288++;
    if (_288 < _283)
    goto _jump3526;
    // End body of loop
    _252 = _282;
    _jump3520:;
    _246 = _252;
    _jump3494:;
    void_t _295 = {};
    return _295;
}

bool E(rgba F, _a1_void_t G) {
    bool _1 = w;
    if (0 != w)
    goto _jump3529;
    _1 = w;
    _jump3529:;
    bool _0 = _1;
    if (0 == _1)
    goto _jump3530;
    bool _2 = v >= j;
    _0 = _2;
    _jump3530:;
    bool _3 = true;
    rgba _4;
    if (!_3)
    goto _jump3531;
    if (y >= 0)
    goto _jump3532;
    fail_assertion("negative array index");
    _jump3532:;
    if (y < f.d0)
    goto _jump3533;
    fail_assertion("index too large");
    _jump3533:;
    if (j >= 0)
    goto _jump3534;
    fail_assertion("negative array index");
    _jump3534:;
    if (j < f.d1)
    goto _jump3535;
    fail_assertion("index too large");
    _jump3535:;
    int64_t _5 = 0;
    _5 *= f.d0;
    _5 += y;
    _5 *= f.d1;
    _5 += j;
    rgba _6 = f.data[_5];
    _4 = _6;
    goto _jump3536;
    _jump3531:;
    _4 = F;
    _jump3536:;
    _a3_void_t _7;
    // Computing bound for O
    _7.d0 = C;
    if (C > 0) 
    goto _jump3537;
    fail_assertion("non-positive loop bound");
    _jump3537:;
    // Computing bound for P
    _7.d1 = z;
    if (z > 0) 
    goto _jump3538;
    fail_assertion("non-positive loop bound");
    _jump3538:;
    // Computing bound for Q
    _7.d2 = G.d0;
    if (G.d0 > 0) 
    goto _jump3539;
    fail_assertion("non-positive loop bound");
    _jump3539:;
    // Computing total size of heap memory to allocate
    int64_t _8 = 1;
    _8 *= C;
    _8 *= z;
    _8 *= G.d0;
    _8 *= sizeof(void_t);
    _7.data = jpl_alloc(_8);
    int64_t _9 = 0; // Q
    int64_t _10 = 0; // P
    int64_t _11 = 0; // O
    _jump3540:; // Begin body of loop
    if (_11 >= 0)
    goto _jump3541;
    fail_assertion("negative array index");
    _jump3541:;
    if (_11 < G.d0)
    goto _jump3542;
    fail_assertion("index too large");
    _jump3542:;
    int64_t _12 = 0;
    _12 *= G.d0;
    _12 += _11;
    void_t _13 = G.data[_12];
    int64_t _14 = 0;
    _14 *= _7.d0;
    _14 += _11;
    _14 *= _7.d1;
    _14 += _10;
    _14 *= _7.d2;
    _14 += _9;
    _7.data[_14] = _13;
    _9++;
    if (_9 < G.d0)
    goto _jump3540;
    _9 = 0;
    _10++;
    if (_10 < z)
    goto _jump3540;
    _10 = 0;
    _11++;
    if (_11 < C)
    goto _jump3540;
    // End body of loop
    void_t _15 = A(_4, _7);
    bool _16 = e(_0, _15);
    rgba _17;
    if (!_16)
    goto _jump3543;
    _a3_rgba _18;
    // Computing bound for O
    _18.d0 = s;
    if (s > 0) 
    goto _jump3544;
    fail_assertion("non-positive loop bound");
    _jump3544:;
    // Computing bound for P
    _18.d1 = h;
    if (h > 0) 
    goto _jump3545;
    fail_assertion("non-positive loop bound");
    _jump3545:;
    // Computing bound for Q
    _18.d2 = p.d0;
    if (p.d0 > 0) 
    goto _jump3546;
    fail_assertion("non-positive loop bound");
    _jump3546:;
    // Computing total size of heap memory to allocate
    int64_t _19 = 1;
    _19 *= s;
    _19 *= h;
    _19 *= p.d0;
    _19 *= sizeof(rgba);
    _18.data = jpl_alloc(_19);
    int64_t _20 = 0; // Q
    int64_t _21 = 0; // P
    int64_t _22 = 0; // O
    _jump3547:; // Begin body of loop
    int64_t _23 = 0;
    _23 *= _18.d0;
    _23 += _22;
    _23 *= _18.d1;
    _23 += _21;
    _23 *= _18.d2;
    _23 += _20;
    _18.data[_23] = F;
    _20++;
    if (_20 < p.d0)
    goto _jump3547;
    _20 = 0;
    _21++;
    if (_21 < h)
    goto _jump3547;
    _21 = 0;
    _22++;
    if (_22 < s)
    goto _jump3547;
    // End body of loop
    if (y >= 0)
    goto _jump3548;
    fail_assertion("negative array index");
    _jump3548:;
    if (y < _18.d0)
    goto _jump3549;
    fail_assertion("index too large");
    _jump3549:;
    if (l >= 0)
    goto _jump3550;
    fail_assertion("negative array index");
    _jump3550:;
    if (l < _18.d1)
    goto _jump3551;
    fail_assertion("index too large");
    _jump3551:;
    if (v >= 0)
    goto _jump3552;
    fail_assertion("negative array index");
    _jump3552:;
    if (v < _18.d2)
    goto _jump3553;
    fail_assertion("index too large");
    _jump3553:;
    int64_t _24 = 0;
    _24 *= _18.d0;
    _24 += y;
    _24 *= _18.d1;
    _24 += l;
    _24 *= _18.d2;
    _24 += v;
    rgba _25 = _18.data[_24];
    bool _26 = E(_25, G);
    rgba _27;
    if (!_26)
    goto _jump3554;
    double _28 = 91.0;
    double _29;
    // Computing bound for O
    if (v > 0) 
    goto _jump3555;
    fail_assertion("non-positive loop bound");
    _jump3555:;
    // Computing bound for P
    if (v > 0) 
    goto _jump3556;
    fail_assertion("non-positive loop bound");
    _jump3556:;
    _29 = 0;
    int64_t _30 = 0; // P
    int64_t _31 = 0; // O
    _jump3557:; // Begin body of loop
    double _32;
    // Computing bound for Q
    if (_31 > 0) 
    goto _jump3558;
    fail_assertion("non-positive loop bound");
    _jump3558:;
    // Computing bound for R
    if (h > 0) 
    goto _jump3559;
    fail_assertion("non-positive loop bound");
    _jump3559:;
    _32 = 0;
    int64_t _33 = 0; // R
    int64_t _34 = 0; // Q
    _jump3560:; // Begin body of loop
    _32 += c;
    _33++;
    if (_33 < h)
    goto _jump3560;
    _33 = 0;
    _34++;
    if (_34 < _31)
    goto _jump3560;
    // End body of loop
    _29 += _32;
    _30++;
    if (_30 < v)
    goto _jump3557;
    _30 = 0;
    _31++;
    if (_31 < v)
    goto _jump3557;
    // End body of loop
    double _35 = 99.0;
    rgba _36 = { _28, c, _29, _35 };
    _27 = _36;
    goto _jump3561;
    _jump3554:;
    double _37 = 93.0;
    if (v >= 0)
    goto _jump3562;
    fail_assertion("negative array index");
    _jump3562:;
    if (v < i.d0)
    goto _jump3563;
    fail_assertion("index too large");
    _jump3563:;
    if (u >= 0)
    goto _jump3564;
    fail_assertion("negative array index");
    _jump3564:;
    if (u < i.d1)
    goto _jump3565;
    fail_assertion("index too large");
    _jump3565:;
    if (o >= 0)
    goto _jump3566;
    fail_assertion("negative array index");
    _jump3566:;
    if (o < i.d2)
    goto _jump3567;
    fail_assertion("index too large");
    _jump3567:;
    int64_t _38 = 0;
    _38 *= i.d0;
    _38 += v;
    _38 *= i.d1;
    _38 += u;
    _38 *= i.d2;
    _38 += o;
    double _39 = i.data[_38];
    if (D >= 0)
    goto _jump3568;
    fail_assertion("negative array index");
    _jump3568:;
    if (D < i.d0)
    goto _jump3569;
    fail_assertion("index too large");
    _jump3569:;
    if (q >= 0)
    goto _jump3570;
    fail_assertion("negative array index");
    _jump3570:;
    if (q < i.d1)
    goto _jump3571;
    fail_assertion("index too large");
    _jump3571:;
    if (z >= 0)
    goto _jump3572;
    fail_assertion("negative array index");
    _jump3572:;
    if (z < i.d2)
    goto _jump3573;
    fail_assertion("index too large");
    _jump3573:;
    int64_t _40 = 0;
    _40 *= i.d0;
    _40 += D;
    _40 *= i.d1;
    _40 += q;
    _40 *= i.d2;
    _40 += z;
    double _41 = i.data[_40];
    double _42 = _39 / _41;
    double _43;
    // Computing bound for O
    int64_t _44 = z + o;
    if (_44 > 0) 
    goto _jump3574;
    fail_assertion("non-positive loop bound");
    _jump3574:;
    // Computing bound for P
    if (p.d1 > 0) 
    goto _jump3575;
    fail_assertion("non-positive loop bound");
    _jump3575:;
    // Computing bound for Q
    int64_t _45 = 159;
    int64_t _46 = p.d0 * _45;
    if (_46 > 0) 
    goto _jump3576;
    fail_assertion("non-positive loop bound");
    _jump3576:;
    _43 = 0;
    int64_t _47 = 0; // Q
    int64_t _48 = 0; // P
    int64_t _49 = 0; // O
    _jump3577:; // Begin body of loop
    double _50 = F.r;
    _43 += _50;
    _47++;
    if (_47 < _46)
    goto _jump3577;
    _47 = 0;
    _48++;
    if (_48 < p.d1)
    goto _jump3577;
    _48 = 0;
    _49++;
    if (_49 < _44)
    goto _jump3577;
    // End body of loop
    double _51 = F.g;
    double _52 = 39.0;
    double _53 = _51 - _52;
    rgba _54 = { _37, _42, _43, _53 };
    _27 = _54;
    _jump3561:;
    _17 = _27;
    goto _jump3578;
    _jump3543:;
    _a1__a3_rgba _55;
    // Computing bound for O
    _55.d0 = q;
    if (q > 0) 
    goto _jump3579;
    fail_assertion("non-positive loop bound");
    _jump3579:;
    // Computing total size of heap memory to allocate
    int64_t _56 = 1;
    _56 *= q;
    _56 *= sizeof(_a3_rgba);
    _55.data = jpl_alloc(_56);
    int64_t _57 = 0; // O
    _jump3580:; // Begin body of loop
    _a3_rgba _58;
    // Computing bound for P
    _58.d0 = u;
    if (u > 0) 
    goto _jump3581;
    fail_assertion("non-positive loop bound");
    _jump3581:;
    // Computing bound for Q
    _58.d1 = D;
    if (D > 0) 
    goto _jump3582;
    fail_assertion("non-positive loop bound");
    _jump3582:;
    // Computing bound for R
    _58.d2 = q;
    if (q > 0) 
    goto _jump3583;
    fail_assertion("non-positive loop bound");
    _jump3583:;
    // Computing total size of heap memory to allocate
    int64_t _59 = 1;
    _59 *= u;
    _59 *= D;
    _59 *= q;
    _59 *= sizeof(rgba);
    _58.data = jpl_alloc(_59);
    int64_t _60 = 0; // R
    int64_t _61 = 0; // Q
    int64_t _62 = 0; // P
    _jump3584:; // Begin body of loop
    int64_t _63 = 0;
    _63 *= _58.d0;
    _63 += _62;
    _63 *= _58.d1;
    _63 += _61;
    _63 *= _58.d2;
    _63 += _60;
    _58.data[_63] = F;
    _60++;
    if (_60 < q)
    goto _jump3584;
    _60 = 0;
    _61++;
    if (_61 < D)
    goto _jump3584;
    _61 = 0;
    _62++;
    if (_62 < u)
    goto _jump3584;
    // End body of loop
    int64_t _64 = 0;
    _64 *= _55.d0;
    _64 += _57;
    _55.data[_64] = _58;
    _57++;
    if (_57 < q)
    goto _jump3580;
    // End body of loop
    if (u >= 0)
    goto _jump3585;
    fail_assertion("negative array index");
    _jump3585:;
    if (u < _55.d0)
    goto _jump3586;
    fail_assertion("index too large");
    _jump3586:;
    int64_t _65 = 0;
    _65 *= _55.d0;
    _65 += u;
    _a3_rgba _66 = _55.data[_65];
    double _67 = 89.0;
    double _68 = -_67;
    bool _69 = _68 == c;
    rgba _70 = d(_66, _69);
    _17 = _70;
    _jump3578:;
    double _71 = _17.b;
    _a3__a3_double _72;
    // Computing bound for O
    _72.d0 = j;
    if (j > 0) 
    goto _jump3587;
    fail_assertion("non-positive loop bound");
    _jump3587:;
    // Computing bound for P
    _72.d1 = k;
    if (k > 0) 
    goto _jump3588;
    fail_assertion("non-positive loop bound");
    _jump3588:;
    // Computing bound for Q
    _72.d2 = D;
    if (D > 0) 
    goto _jump3589;
    fail_assertion("non-positive loop bound");
    _jump3589:;
    // Computing total size of heap memory to allocate
    int64_t _73 = 1;
    _73 *= j;
    _73 *= k;
    _73 *= D;
    _73 *= sizeof(_a3_double);
    _72.data = jpl_alloc(_73);
    int64_t _74 = 0; // Q
    int64_t _75 = 0; // P
    int64_t _76 = 0; // O
    _jump3590:; // Begin body of loop
    int64_t _77 = 0;
    _77 *= _72.d0;
    _77 += _76;
    _77 *= _72.d1;
    _77 += _75;
    _77 *= _72.d2;
    _77 += _74;
    _72.data[_77] = i;
    _74++;
    if (_74 < D)
    goto _jump3590;
    _74 = 0;
    _75++;
    if (_75 < k)
    goto _jump3590;
    _75 = 0;
    _76++;
    if (_76 < j)
    goto _jump3590;
    // End body of loop
    int64_t _78 = -k;
    if (o >= 0)
    goto _jump3591;
    fail_assertion("negative array index");
    _jump3591:;
    if (o < _72.d0)
    goto _jump3592;
    fail_assertion("index too large");
    _jump3592:;
    if (_78 >= 0)
    goto _jump3593;
    fail_assertion("negative array index");
    _jump3593:;
    if (_78 < _72.d1)
    goto _jump3594;
    fail_assertion("index too large");
    _jump3594:;
    if (r >= 0)
    goto _jump3595;
    fail_assertion("negative array index");
    _jump3595:;
    if (r < _72.d2)
    goto _jump3596;
    fail_assertion("index too large");
    _jump3596:;
    int64_t _79 = 0;
    _79 *= _72.d0;
    _79 += o;
    _79 *= _72.d1;
    _79 += _78;
    _79 *= _72.d2;
    _79 += r;
    _a3_double _80 = _72.data[_79];
    if (z >= 0)
    goto _jump3597;
    fail_assertion("negative array index");
    _jump3597:;
    if (z < _80.d0)
    goto _jump3598;
    fail_assertion("index too large");
    _jump3598:;
    if (s >= 0)
    goto _jump3599;
    fail_assertion("negative array index");
    _jump3599:;
    if (s < _80.d1)
    goto _jump3600;
    fail_assertion("index too large");
    _jump3600:;
    if (s >= 0)
    goto _jump3601;
    fail_assertion("negative array index");
    _jump3601:;
    if (s < _80.d2)
    goto _jump3602;
    fail_assertion("index too large");
    _jump3602:;
    int64_t _81 = 0;
    _81 *= _80.d0;
    _81 += z;
    _81 *= _80.d1;
    _81 += s;
    _81 *= _80.d2;
    _81 += s;
    double _82 = _80.data[_81];
    bool _83 = c > _82;
    rgba _84;
    if (!_83)
    goto _jump3603;
    _a2__a3_rgba _85;
    // Computing bound for O
    _85.d0 = k;
    if (k > 0) 
    goto _jump3604;
    fail_assertion("non-positive loop bound");
    _jump3604:;
    // Computing bound for P
    _85.d1 = p.d2;
    if (p.d2 > 0) 
    goto _jump3605;
    fail_assertion("non-positive loop bound");
    _jump3605:;
    // Computing total size of heap memory to allocate
    int64_t _86 = 1;
    _86 *= k;
    _86 *= p.d2;
    _86 *= sizeof(_a3_rgba);
    _85.data = jpl_alloc(_86);
    int64_t _87 = 0; // P
    int64_t _88 = 0; // O
    _jump3606:; // Begin body of loop
    _a3_rgba _89;
    // Computing bound for Q
    _89.d0 = j;
    if (j > 0) 
    goto _jump3607;
    fail_assertion("non-positive loop bound");
    _jump3607:;
    // Computing bound for R
    _89.d1 = p.d1;
    if (p.d1 > 0) 
    goto _jump3608;
    fail_assertion("non-positive loop bound");
    _jump3608:;
    // Computing bound for S
    _89.d2 = v;
    if (v > 0) 
    goto _jump3609;
    fail_assertion("non-positive loop bound");
    _jump3609:;
    // Computing total size of heap memory to allocate
    int64_t _90 = 1;
    _90 *= j;
    _90 *= p.d1;
    _90 *= v;
    _90 *= sizeof(rgba);
    _89.data = jpl_alloc(_90);
    int64_t _91 = 0; // S
    int64_t _92 = 0; // R
    int64_t _93 = 0; // Q
    _jump3610:; // Begin body of loop
    int64_t _94 = 0;
    _94 *= _89.d0;
    _94 += _93;
    _94 *= _89.d1;
    _94 += _92;
    _94 *= _89.d2;
    _94 += _91;
    _89.data[_94] = F;
    _91++;
    if (_91 < v)
    goto _jump3610;
    _91 = 0;
    _92++;
    if (_92 < p.d1)
    goto _jump3610;
    _92 = 0;
    _93++;
    if (_93 < j)
    goto _jump3610;
    // End body of loop
    int64_t _95 = 0;
    _95 *= _85.d0;
    _95 += _88;
    _95 *= _85.d1;
    _95 += _87;
    _85.data[_95] = _89;
    _87++;
    if (_87 < p.d2)
    goto _jump3606;
    _87 = 0;
    _88++;
    if (_88 < k)
    goto _jump3606;
    // End body of loop
    if (v >= 0)
    goto _jump3611;
    fail_assertion("negative array index");
    _jump3611:;
    if (v < _85.d0)
    goto _jump3612;
    fail_assertion("index too large");
    _jump3612:;
    if (l >= 0)
    goto _jump3613;
    fail_assertion("negative array index");
    _jump3613:;
    if (l < _85.d1)
    goto _jump3614;
    fail_assertion("index too large");
    _jump3614:;
    int64_t _96 = 0;
    _96 *= _85.d0;
    _96 += v;
    _96 *= _85.d1;
    _96 += l;
    _a3_rgba _97 = _85.data[_96];
    _a2_double _98;
    // Computing bound for O
    _98.d0 = h;
    if (h > 0) 
    goto _jump3615;
    fail_assertion("non-positive loop bound");
    _jump3615:;
    // Computing bound for P
    _98.d1 = l;
    if (l > 0) 
    goto _jump3616;
    fail_assertion("non-positive loop bound");
    _jump3616:;
    // Computing total size of heap memory to allocate
    int64_t _99 = 1;
    _99 *= h;
    _99 *= l;
    _99 *= sizeof(double);
    _98.data = jpl_alloc(_99);
    int64_t _100 = 0; // P
    int64_t _101 = 0; // O
    _jump3617:; // Begin body of loop
    double _102 = 62.0;
    int64_t _103 = 0;
    _103 *= _98.d0;
    _103 += _101;
    _103 *= _98.d1;
    _103 += _100;
    _98.data[_103] = _102;
    _100++;
    if (_100 < l)
    goto _jump3617;
    _100 = 0;
    _101++;
    if (_101 < h)
    goto _jump3617;
    // End body of loop
    if (v >= 0)
    goto _jump3618;
    fail_assertion("negative array index");
    _jump3618:;
    if (v < _98.d0)
    goto _jump3619;
    fail_assertion("index too large");
    _jump3619:;
    if (u >= 0)
    goto _jump3620;
    fail_assertion("negative array index");
    _jump3620:;
    if (u < _98.d1)
    goto _jump3621;
    fail_assertion("index too large");
    _jump3621:;
    int64_t _104 = 0;
    _104 *= _98.d0;
    _104 += v;
    _104 *= _98.d1;
    _104 += u;
    double _105 = _98.data[_104];
    _a1_double _106;
    // Computing bound for O
    _106.d0 = p.d0;
    if (p.d0 > 0) 
    goto _jump3622;
    fail_assertion("non-positive loop bound");
    _jump3622:;
    // Computing total size of heap memory to allocate
    int64_t _107 = 1;
    _107 *= p.d0;
    _107 *= sizeof(double);
    _106.data = jpl_alloc(_107);
    int64_t _108 = 0; // O
    _jump3623:; // Begin body of loop
    double _109 = 68.0;
    int64_t _110 = 0;
    _110 *= _106.d0;
    _110 += _108;
    _106.data[_110] = _109;
    _108++;
    if (_108 < p.d0)
    goto _jump3623;
    // End body of loop
    if (s >= 0)
    goto _jump3624;
    fail_assertion("negative array index");
    _jump3624:;
    if (s < _106.d0)
    goto _jump3625;
    fail_assertion("index too large");
    _jump3625:;
    int64_t _111 = 0;
    _111 *= _106.d0;
    _111 += s;
    double _112 = _106.data[_111];
    bool _113 = _105 <= _112;
    rgba _114 = d(_97, _113);
    _84 = _114;
    goto _jump3626;
    _jump3603:;
    _84 = F;
    _jump3626:;
    double _115 = _84.b;
    bool _116 = _71 != _115;
    if (0 != _116)
    goto _jump3627;
    fail_assertion("O");
    _jump3627:;
    if (0 != w)
    goto _jump3628;
    fail_assertion("O");
    _jump3628:;
    bool _117 = p.d1 >= p.d2;
    return _117;
}

void jpl_main(struct args args) {
    double _0 = get_time();
    _a2_rgba _1;
    // Computing bound for a
    bool _2 = false;
    int64_t _3;
    if (!_2)
    goto _jump1;
    int64_t _4 = 700;
    _3 = _4;
    goto _jump2;
    _jump1:;
    int64_t _5 = 666;
    _3 = _5;
    _jump2:;
    int64_t _6 = -_3;
    _1.d0 = _6;
    if (_6 > 0) 
    goto _jump3;
    fail_assertion("non-positive loop bound");
    _jump3:;
    // Computing bound for b
    int64_t _7;
    // Computing bound for a
    bool _8 = true;
    int64_t _9;
    if (!_8)
    goto _jump4;
    int64_t _10;
    // Computing bound for a
    int64_t _11 = 793;
    if (_11 > 0) 
    goto _jump5;
    fail_assertion("non-positive loop bound");
    _jump5:;
    _10 = 0;
    int64_t _12 = 0; // a
    _jump6:; // Begin body of loop
    int64_t _13 = 475;
    _10 += _13;
    _12++;
    if (_12 < _11)
    goto _jump6;
    // End body of loop
    _9 = _10;
    goto _jump7;
    _jump4:;
    int64_t _14 = 608;
    _9 = _14;
    _jump7:;
    if (_9 > 0) 
    goto _jump8;
    fail_assertion("non-positive loop bound");
    _jump8:;
    _7 = 0;
    int64_t _15 = 0; // a
    _jump9:; // Begin body of loop
    int64_t _16 = 706;
    int64_t _17 = 120;
    int64_t _18 = _15 - _17;
    int64_t _19 = _16 - _18;
    _7 += _19;
    _15++;
    if (_15 < _9)
    goto _jump9;
    // End body of loop
    int64_t _20;
    // Computing bound for a
    int64_t _21 = 864;
    int64_t _22 = -_21;
    int64_t _23 = -_22;
    if (_23 > 0) 
    goto _jump10;
    fail_assertion("non-positive loop bound");
    _jump10:;
    // Computing bound for b
    int64_t _24 = 957;
    int64_t _25 = -_24;
    if (_25 > 0) 
    goto _jump11;
    fail_assertion("non-positive loop bound");
    _jump11:;
    // Computing bound for c
    int64_t _26;
    // Computing bound for a
    int64_t _27 = 469;
    if (_27 > 0) 
    goto _jump12;
    fail_assertion("non-positive loop bound");
    _jump12:;
    _26 = 0;
    int64_t _28 = 0; // a
    _jump13:; // Begin body of loop
    int64_t _29 = 331;
    int64_t _30 = -_29;
    _26 += _30;
    _28++;
    if (_28 < _27)
    goto _jump13;
    // End body of loop
    if (_26 > 0) 
    goto _jump14;
    fail_assertion("non-positive loop bound");
    _jump14:;
    _20 = 0;
    int64_t _31 = 0; // c
    int64_t _32 = 0; // b
    int64_t _33 = 0; // a
    _jump15:; // Begin body of loop
    _20 += _32;
    _31++;
    if (_31 < _26)
    goto _jump15;
    _31 = 0;
    _32++;
    if (_32 < _25)
    goto _jump15;
    _32 = 0;
    _33++;
    if (_33 < _23)
    goto _jump15;
    // End body of loop
    int64_t _34 = _7 + _20;
    int64_t _35 = -_34;
    _1.d1 = _35;
    if (_35 > 0) 
    goto _jump16;
    fail_assertion("non-positive loop bound");
    _jump16:;
    // Computing total size of heap memory to allocate
    int64_t _36 = 1;
    _36 *= _6;
    _36 *= _35;
    _36 *= sizeof(rgba);
    _1.data = jpl_alloc(_36);
    int64_t _37 = 0; // b
    int64_t _38 = 0; // a
    _jump17:; // Begin body of loop
    double _39;
    // Computing bound for c
    int64_t _40;
    // Computing bound for c
    int64_t _41 = _37 - _38;
    int64_t _42 = -_41;
    if (_42 > 0) 
    goto _jump18;
    fail_assertion("non-positive loop bound");
    _jump18:;
    _40 = 0;
    int64_t _43 = 0; // c
    _jump19:; // Begin body of loop
    int64_t _44 = -_38;
    _40 += _44;
    _43++;
    if (_43 < _42)
    goto _jump19;
    // End body of loop
    if (_40 > 0) 
    goto _jump20;
    fail_assertion("non-positive loop bound");
    _jump20:;
    // Computing bound for d
    int64_t _45;
    // Computing bound for c
    int64_t _46;
    // Computing bound for c
    if (_37 > 0) 
    goto _jump21;
    fail_assertion("non-positive loop bound");
    _jump21:;
    _46 = 0;
    int64_t _47 = 0; // c
    _jump22:; // Begin body of loop
    _46 += _37;
    _47++;
    if (_47 < _37)
    goto _jump22;
    // End body of loop
    if (_46 > 0) 
    goto _jump23;
    fail_assertion("non-positive loop bound");
    _jump23:;
    _45 = 0;
    int64_t _48 = 0; // c
    _jump24:; // Begin body of loop
    int64_t _49 = 834;
    int64_t _50 = _37 + _49;
    _45 += _50;
    _48++;
    if (_48 < _46)
    goto _jump24;
    // End body of loop
    int64_t _51 = -_38;
    int64_t _52 = 379;
    int64_t _53 = _51 - _52;
    int64_t _54 = _45 + _53;
    if (_54 > 0) 
    goto _jump25;
    fail_assertion("non-positive loop bound");
    _jump25:;
    // Computing bound for e
    if (_37 > 0) 
    goto _jump26;
    fail_assertion("non-positive loop bound");
    _jump26:;
    _39 = 0;
    int64_t _55 = 0; // e
    int64_t _56 = 0; // d
    int64_t _57 = 0; // c
    _jump27:; // Begin body of loop
    double _58;
    // Computing bound for f
    if (_56 > 0) 
    goto _jump28;
    fail_assertion("non-positive loop bound");
    _jump28:;
    // Computing bound for g
    int64_t _59;
    // Computing bound for f
    if (_55 > 0) 
    goto _jump29;
    fail_assertion("non-positive loop bound");
    _jump29:;
    // Computing bound for g
    if (_57 > 0) 
    goto _jump30;
    fail_assertion("non-positive loop bound");
    _jump30:;
    // Computing bound for h
    if (_56 > 0) 
    goto _jump31;
    fail_assertion("non-positive loop bound");
    _jump31:;
    _59 = 0;
    int64_t _60 = 0; // h
    int64_t _61 = 0; // g
    int64_t _62 = 0; // f
    _jump32:; // Begin body of loop
    _59 += _61;
    _60++;
    if (_60 < _56)
    goto _jump32;
    _60 = 0;
    _61++;
    if (_61 < _57)
    goto _jump32;
    _61 = 0;
    _62++;
    if (_62 < _55)
    goto _jump32;
    // End body of loop
    if (_59 > 0) 
    goto _jump33;
    fail_assertion("non-positive loop bound");
    _jump33:;
    // Computing bound for h
    if (_56 > 0) 
    goto _jump34;
    fail_assertion("non-positive loop bound");
    _jump34:;
    _58 = 0;
    int64_t _63 = 0; // h
    int64_t _64 = 0; // g
    int64_t _65 = 0; // f
    _jump35:; // Begin body of loop
    double _66 = 60.0;
    _58 += _66;
    _63++;
    if (_63 < _56)
    goto _jump35;
    _63 = 0;
    _64++;
    if (_64 < _59)
    goto _jump35;
    _64 = 0;
    _65++;
    if (_65 < _56)
    goto _jump35;
    // End body of loop
    _a2_double _67;
    // Computing bound for f
    _67.d0 = _38;
    if (_38 > 0) 
    goto _jump36;
    fail_assertion("non-positive loop bound");
    _jump36:;
    // Computing bound for g
    _67.d1 = _38;
    if (_38 > 0) 
    goto _jump37;
    fail_assertion("non-positive loop bound");
    _jump37:;
    // Computing total size of heap memory to allocate
    int64_t _68 = 1;
    _68 *= _38;
    _68 *= _38;
    _68 *= sizeof(double);
    _67.data = jpl_alloc(_68);
    int64_t _69 = 0; // g
    int64_t _70 = 0; // f
    _jump38:; // Begin body of loop
    double _71 = 24.0;
    int64_t _72 = 0;
    _72 *= _67.d0;
    _72 += _70;
    _72 *= _67.d1;
    _72 += _69;
    _67.data[_72] = _71;
    _69++;
    if (_69 < _38)
    goto _jump38;
    _69 = 0;
    _70++;
    if (_70 < _38)
    goto _jump38;
    // End body of loop
    int64_t _73 = 538;
    if (_55 >= 0)
    goto _jump39;
    fail_assertion("negative array index");
    _jump39:;
    if (_55 < _67.d0)
    goto _jump40;
    fail_assertion("index too large");
    _jump40:;
    if (_73 >= 0)
    goto _jump41;
    fail_assertion("negative array index");
    _jump41:;
    if (_73 < _67.d1)
    goto _jump42;
    fail_assertion("index too large");
    _jump42:;
    int64_t _74 = 0;
    _74 *= _67.d0;
    _74 += _55;
    _74 *= _67.d1;
    _74 += _73;
    double _75 = _67.data[_74];
    double _76 = fmod(_58, _75);
    _39 += _76;
    _55++;
    if (_55 < _37)
    goto _jump27;
    _55 = 0;
    _56++;
    if (_56 < _54)
    goto _jump27;
    _56 = 0;
    _57++;
    if (_57 < _40)
    goto _jump27;
    // End body of loop
    double _77;
    // Computing bound for c
    _a3_int64_t _78;
    // Computing bound for c
    _78.d0 = _38;
    if (_38 > 0) 
    goto _jump43;
    fail_assertion("non-positive loop bound");
    _jump43:;
    // Computing bound for d
    int64_t _79 = 566;
    _78.d1 = _79;
    if (_79 > 0) 
    goto _jump44;
    fail_assertion("non-positive loop bound");
    _jump44:;
    // Computing bound for e
    _78.d2 = _38;
    if (_38 > 0) 
    goto _jump45;
    fail_assertion("non-positive loop bound");
    _jump45:;
    // Computing total size of heap memory to allocate
    int64_t _80 = 1;
    _80 *= _38;
    _80 *= _79;
    _80 *= _38;
    _80 *= sizeof(int64_t);
    _78.data = jpl_alloc(_80);
    int64_t _81 = 0; // e
    int64_t _82 = 0; // d
    int64_t _83 = 0; // c
    _jump46:; // Begin body of loop
    int64_t _84 = 0;
    _84 *= _78.d0;
    _84 += _83;
    _84 *= _78.d1;
    _84 += _82;
    _84 *= _78.d2;
    _84 += _81;
    _78.data[_84] = _83;
    _81++;
    if (_81 < _38)
    goto _jump46;
    _81 = 0;
    _82++;
    if (_82 < _79)
    goto _jump46;
    _82 = 0;
    _83++;
    if (_83 < _38)
    goto _jump46;
    // End body of loop
    int64_t _85 = 534;
    int64_t _86 = _38 + _38;
    if (_85 >= 0)
    goto _jump47;
    fail_assertion("negative array index");
    _jump47:;
    if (_85 < _78.d0)
    goto _jump48;
    fail_assertion("index too large");
    _jump48:;
    if (_37 >= 0)
    goto _jump49;
    fail_assertion("negative array index");
    _jump49:;
    if (_37 < _78.d1)
    goto _jump50;
    fail_assertion("index too large");
    _jump50:;
    if (_86 >= 0)
    goto _jump51;
    fail_assertion("negative array index");
    _jump51:;
    if (_86 < _78.d2)
    goto _jump52;
    fail_assertion("index too large");
    _jump52:;
    int64_t _87 = 0;
    _87 *= _78.d0;
    _87 += _85;
    _87 *= _78.d1;
    _87 += _37;
    _87 *= _78.d2;
    _87 += _86;
    int64_t _88 = _78.data[_87];
    if (_88 > 0) 
    goto _jump53;
    fail_assertion("non-positive loop bound");
    _jump53:;
    // Computing bound for d
    int64_t _89 = 286;
    int64_t _90 = -_89;
    if (_90 > 0) 
    goto _jump54;
    fail_assertion("non-positive loop bound");
    _jump54:;
    _77 = 0;
    int64_t _91 = 0; // d
    int64_t _92 = 0; // c
    _jump55:; // Begin body of loop
    double _93 = 6.0;
    _77 += _93;
    _91++;
    if (_91 < _90)
    goto _jump55;
    _91 = 0;
    _92++;
    if (_92 < _88)
    goto _jump55;
    // End body of loop
    double _94 = -_77;
    double _95 = 39.0;
    double _96 = -_95;
    double _97;
    // Computing bound for c
    if (_38 > 0) 
    goto _jump56;
    fail_assertion("non-positive loop bound");
    _jump56:;
    // Computing bound for d
    if (_38 > 0) 
    goto _jump57;
    fail_assertion("non-positive loop bound");
    _jump57:;
    _97 = 0;
    int64_t _98 = 0; // d
    int64_t _99 = 0; // c
    _jump58:; // Begin body of loop
    double _100;
    // Computing bound for e
    if (_99 > 0) 
    goto _jump59;
    fail_assertion("non-positive loop bound");
    _jump59:;
    // Computing bound for f
    if (_37 > 0) 
    goto _jump60;
    fail_assertion("non-positive loop bound");
    _jump60:;
    _100 = 0;
    int64_t _101 = 0; // f
    int64_t _102 = 0; // e
    _jump61:; // Begin body of loop
    double _103 = 85.0;
    _100 += _103;
    _101++;
    if (_101 < _37)
    goto _jump61;
    _101 = 0;
    _102++;
    if (_102 < _99)
    goto _jump61;
    // End body of loop
    _97 += _100;
    _98++;
    if (_98 < _38)
    goto _jump58;
    _98 = 0;
    _99++;
    if (_99 < _38)
    goto _jump58;
    // End body of loop
    double _104 = 32.0;
    double _105 = 35.0;
    double _106 = _104 / _105;
    double _107 = 55.0;
    rgba _108 = { _96, _97, _106, _107 };
    double _109 = _108.r;
    double _110;
    // Computing bound for c
    int64_t _111 = 770;
    if (_111 > 0) 
    goto _jump62;
    fail_assertion("non-positive loop bound");
    _jump62:;
    // Computing bound for d
    if (_38 > 0) 
    goto _jump63;
    fail_assertion("non-positive loop bound");
    _jump63:;
    _110 = 0;
    int64_t _112 = 0; // d
    int64_t _113 = 0; // c
    _jump64:; // Begin body of loop
    double _114 = 88.0;
    _110 += _114;
    _112++;
    if (_112 < _38)
    goto _jump64;
    _112 = 0;
    _113++;
    if (_113 < _111)
    goto _jump64;
    // End body of loop
    double _115 = 40.0;
    double _116 = 76.0;
    _a2_double _117;
    // Computing bound for c
    _117.d0 = _38;
    if (_38 > 0) 
    goto _jump65;
    fail_assertion("non-positive loop bound");
    _jump65:;
    // Computing bound for d
    _117.d1 = _37;
    if (_37 > 0) 
    goto _jump66;
    fail_assertion("non-positive loop bound");
    _jump66:;
    // Computing total size of heap memory to allocate
    int64_t _118 = 1;
    _118 *= _38;
    _118 *= _37;
    _118 *= sizeof(double);
    _117.data = jpl_alloc(_118);
    int64_t _119 = 0; // d
    int64_t _120 = 0; // c
    _jump67:; // Begin body of loop
    double _121 = 44.0;
    int64_t _122 = 0;
    _122 *= _117.d0;
    _122 += _120;
    _122 *= _117.d1;
    _122 += _119;
    _117.data[_122] = _121;
    _119++;
    if (_119 < _37)
    goto _jump67;
    _119 = 0;
    _120++;
    if (_120 < _38)
    goto _jump67;
    // End body of loop
    bool _123 = false;
    int64_t _124;
    if (!_123)
    goto _jump68;
    _124 = _37;
    goto _jump69;
    _jump68:;
    int64_t _125 = 375;
    _124 = _125;
    _jump69:;
    if (_37 >= 0)
    goto _jump70;
    fail_assertion("negative array index");
    _jump70:;
    if (_37 < _117.d0)
    goto _jump71;
    fail_assertion("index too large");
    _jump71:;
    if (_124 >= 0)
    goto _jump72;
    fail_assertion("negative array index");
    _jump72:;
    if (_124 < _117.d1)
    goto _jump73;
    fail_assertion("index too large");
    _jump73:;
    int64_t _126 = 0;
    _126 *= _117.d0;
    _126 += _37;
    _126 *= _117.d1;
    _126 += _124;
    double _127 = _117.data[_126];
    rgba _128 = { _110, _115, _116, _127 };
    double _129 = _128.a;
    rgba _130 = { _39, _94, _109, _129 };
    int64_t _131 = 0;
    _131 *= _1.d0;
    _131 += _38;
    _131 *= _1.d1;
    _131 += _37;
    _1.data[_131] = _130;
    _37++;
    if (_37 < _35)
    goto _jump17;
    _37 = 0;
    _38++;
    if (_38 < _6)
    goto _jump17;
    // End body of loop
    write_image(_1, "a.png");
    double _132 = get_time();
    print_time(_132 - _0);
    _a3_int64_t _134;
    // Computing bound for c
    int64_t _135 = 957;
    int64_t _136 = -_135;
    int64_t _137 = 121;
    int64_t _138 = -_137;
    int64_t _139 = _136 * _138;
    _134.d0 = _139;
    if (_139 > 0) 
    goto _jump757;
    fail_assertion("non-positive loop bound");
    _jump757:;
    // Computing bound for d
    int64_t _140 = 221;
    int64_t _141 = 644;
    int64_t _142 = -_141;
    int64_t _143 = _140 - _142;
    _134.d1 = _143;
    if (_143 > 0) 
    goto _jump758;
    fail_assertion("non-positive loop bound");
    _jump758:;
    // Computing bound for e
    int64_t _144;
    // Computing bound for c
    int64_t _145;
    // Computing bound for c
    int64_t _146 = 836;
    if (_146 > 0) 
    goto _jump759;
    fail_assertion("non-positive loop bound");
    _jump759:;
    _145 = 0;
    int64_t _147 = 0; // c
    _jump760:; // Begin body of loop
    int64_t _148 = 686;
    _145 += _148;
    _147++;
    if (_147 < _146)
    goto _jump760;
    // End body of loop
    if (_145 > 0) 
    goto _jump761;
    fail_assertion("non-positive loop bound");
    _jump761:;
    _144 = 0;
    int64_t _149 = 0; // c
    _jump762:; // Begin body of loop
    int64_t _150 = 68;
    _144 += _150;
    _149++;
    if (_149 < _145)
    goto _jump762;
    // End body of loop
    _134.d2 = _144;
    if (_144 > 0) 
    goto _jump763;
    fail_assertion("non-positive loop bound");
    _jump763:;
    // Computing total size of heap memory to allocate
    int64_t _151 = 1;
    _151 *= _139;
    _151 *= _143;
    _151 *= _144;
    _151 *= sizeof(int64_t);
    _134.data = jpl_alloc(_151);
    int64_t _152 = 0; // e
    int64_t _153 = 0; // d
    int64_t _154 = 0; // c
    _jump764:; // Begin body of loop
    int64_t _155 = 0;
    _155 *= _134.d0;
    _155 += _154;
    _155 *= _134.d1;
    _155 += _153;
    _155 *= _134.d2;
    _155 += _152;
    _134.data[_155] = _153;
    _152++;
    if (_152 < _144)
    goto _jump764;
    _152 = 0;
    _153++;
    if (_153 < _143)
    goto _jump764;
    _153 = 0;
    _154++;
    if (_154 < _139)
    goto _jump764;
    // End body of loop
    double _156 = 81.0;
    double _157 = -_156;
    bool _158 = a(_134, _157);
    _a3_bool _159;
    if (!_158)
    goto _jump765;
    _a3_bool _160;
    // Computing bound for c
    int64_t _161;
    // Computing bound for c
    int64_t _162 = 638;
    if (_162 > 0) 
    goto _jump766;
    fail_assertion("non-positive loop bound");
    _jump766:;
    // Computing bound for d
    int64_t _163 = 441;
    if (_163 > 0) 
    goto _jump767;
    fail_assertion("non-positive loop bound");
    _jump767:;
    _161 = 0;
    int64_t _164 = 0; // d
    int64_t _165 = 0; // c
    _jump768:; // Begin body of loop
    int64_t _166;
    // Computing bound for e
    if (_164 > 0) 
    goto _jump769;
    fail_assertion("non-positive loop bound");
    _jump769:;
    // Computing bound for f
    int64_t _167 = 244;
    if (_167 > 0) 
    goto _jump770;
    fail_assertion("non-positive loop bound");
    _jump770:;
    // Computing bound for g
    int64_t _168 = 567;
    if (_168 > 0) 
    goto _jump771;
    fail_assertion("non-positive loop bound");
    _jump771:;
    _166 = 0;
    int64_t _169 = 0; // g
    int64_t _170 = 0; // f
    int64_t _171 = 0; // e
    _jump772:; // Begin body of loop
    _166 += _171;
    _169++;
    if (_169 < _168)
    goto _jump772;
    _169 = 0;
    _170++;
    if (_170 < _167)
    goto _jump772;
    _170 = 0;
    _171++;
    if (_171 < _164)
    goto _jump772;
    // End body of loop
    _161 += _166;
    _164++;
    if (_164 < _163)
    goto _jump768;
    _164 = 0;
    _165++;
    if (_165 < _162)
    goto _jump768;
    // End body of loop
    int64_t _172 = -_161;
    _160.d0 = _172;
    if (_172 > 0) 
    goto _jump773;
    fail_assertion("non-positive loop bound");
    _jump773:;
    // Computing bound for d
    bool _173 = false;
    bool _174 = !_173;
    int64_t _175;
    if (!_174)
    goto _jump774;
    int64_t _176 = 245;
    int64_t _177 = -_176;
    _175 = _177;
    goto _jump775;
    _jump774:;
    int64_t _178;
    // Computing bound for c
    int64_t _179 = 314;
    if (_179 > 0) 
    goto _jump776;
    fail_assertion("non-positive loop bound");
    _jump776:;
    _178 = 0;
    int64_t _180 = 0; // c
    _jump777:; // Begin body of loop
    int64_t _181 = 17;
    int64_t _182 = 340;
    int64_t _183 = _181 % _182;
    _178 += _183;
    _180++;
    if (_180 < _179)
    goto _jump777;
    // End body of loop
    _175 = _178;
    _jump775:;
    _160.d1 = _175;
    if (_175 > 0) 
    goto _jump778;
    fail_assertion("non-positive loop bound");
    _jump778:;
    // Computing bound for e
    int64_t _184 = 285;
    int64_t _185 = 314;
    int64_t _186 = _184 / _185;
    int64_t _187 = 855;
    int64_t _188 = -_187;
    int64_t _189 = _186 % _188;
    int64_t _190 = -_189;
    _160.d2 = _190;
    if (_190 > 0) 
    goto _jump779;
    fail_assertion("non-positive loop bound");
    _jump779:;
    // Computing total size of heap memory to allocate
    int64_t _191 = 1;
    _191 *= _172;
    _191 *= _175;
    _191 *= _190;
    _191 *= sizeof(bool);
    _160.data = jpl_alloc(_191);
    int64_t _192 = 0; // e
    int64_t _193 = 0; // d
    int64_t _194 = 0; // c
    _jump780:; // Begin body of loop
    bool _196 = _192 >= _193;
    bool _197 = !_196;
    bool _195 = _197;
    if (0 == _197)
    goto _jump781;
    bool _198 = true;
    _195 = _198;
    _jump781:;
    int64_t _199 = 0;
    _199 *= _160.d0;
    _199 += _194;
    _199 *= _160.d1;
    _199 += _193;
    _199 *= _160.d2;
    _199 += _192;
    _160.data[_199] = _195;
    _192++;
    if (_192 < _190)
    goto _jump780;
    _192 = 0;
    _193++;
    if (_193 < _175)
    goto _jump780;
    _193 = 0;
    _194++;
    if (_194 < _172)
    goto _jump780;
    // End body of loop
    _159 = _160;
    goto _jump782;
    _jump765:;
    _a3_bool _200;
    // Computing bound for c
    int64_t _201;
    // Computing bound for c
    _a3_int64_t _202;
    // Computing bound for c
    int64_t _203 = 589;
    _202.d0 = _203;
    if (_203 > 0) 
    goto _jump783;
    fail_assertion("non-positive loop bound");
    _jump783:;
    // Computing bound for d
    int64_t _204 = 968;
    _202.d1 = _204;
    if (_204 > 0) 
    goto _jump784;
    fail_assertion("non-positive loop bound");
    _jump784:;
    // Computing bound for e
    int64_t _205 = 883;
    _202.d2 = _205;
    if (_205 > 0) 
    goto _jump785;
    fail_assertion("non-positive loop bound");
    _jump785:;
    // Computing total size of heap memory to allocate
    int64_t _206 = 1;
    _206 *= _203;
    _206 *= _204;
    _206 *= _205;
    _206 *= sizeof(int64_t);
    _202.data = jpl_alloc(_206);
    int64_t _207 = 0; // e
    int64_t _208 = 0; // d
    int64_t _209 = 0; // c
    _jump786:; // Begin body of loop
    int64_t _210 = 561;
    int64_t _211 = 0;
    _211 *= _202.d0;
    _211 += _209;
    _211 *= _202.d1;
    _211 += _208;
    _211 *= _202.d2;
    _211 += _207;
    _202.data[_211] = _210;
    _207++;
    if (_207 < _205)
    goto _jump786;
    _207 = 0;
    _208++;
    if (_208 < _204)
    goto _jump786;
    _208 = 0;
    _209++;
    if (_209 < _203)
    goto _jump786;
    // End body of loop
    int64_t _212 = 394;
    int64_t _213 = 735;
    int64_t _214 = -_213;
    int64_t _215;
    // Computing bound for c
    int64_t _216 = 125;
    if (_216 > 0) 
    goto _jump787;
    fail_assertion("non-positive loop bound");
    _jump787:;
    _215 = 0;
    int64_t _217 = 0; // c
    _jump788:; // Begin body of loop
    int64_t _218 = 7;
    _215 += _218;
    _217++;
    if (_217 < _216)
    goto _jump788;
    // End body of loop
    if (_212 >= 0)
    goto _jump789;
    fail_assertion("negative array index");
    _jump789:;
    if (_212 < _202.d0)
    goto _jump790;
    fail_assertion("index too large");
    _jump790:;
    if (_214 >= 0)
    goto _jump791;
    fail_assertion("negative array index");
    _jump791:;
    if (_214 < _202.d1)
    goto _jump792;
    fail_assertion("index too large");
    _jump792:;
    if (_215 >= 0)
    goto _jump793;
    fail_assertion("negative array index");
    _jump793:;
    if (_215 < _202.d2)
    goto _jump794;
    fail_assertion("index too large");
    _jump794:;
    int64_t _219 = 0;
    _219 *= _202.d0;
    _219 += _212;
    _219 *= _202.d1;
    _219 += _214;
    _219 *= _202.d2;
    _219 += _215;
    int64_t _220 = _202.data[_219];
    if (_220 > 0) 
    goto _jump795;
    fail_assertion("non-positive loop bound");
    _jump795:;
    // Computing bound for d
    int64_t _221 = 587;
    if (_221 > 0) 
    goto _jump796;
    fail_assertion("non-positive loop bound");
    _jump796:;
    _201 = 0;
    int64_t _222 = 0; // d
    int64_t _223 = 0; // c
    _jump797:; // Begin body of loop
    int64_t _224 = 524;
    int64_t _225 = -_224;
    int64_t _226;
    // Computing bound for e
    if (_222 > 0) 
    goto _jump798;
    fail_assertion("non-positive loop bound");
    _jump798:;
    _226 = 0;
    int64_t _227 = 0; // e
    _jump799:; // Begin body of loop
    _226 += _223;
    _227++;
    if (_227 < _222)
    goto _jump799;
    // End body of loop
    int64_t _228 = _225 / _226;
    _201 += _228;
    _222++;
    if (_222 < _221)
    goto _jump797;
    _222 = 0;
    _223++;
    if (_223 < _220)
    goto _jump797;
    // End body of loop
    _200.d0 = _201;
    if (_201 > 0) 
    goto _jump800;
    fail_assertion("non-positive loop bound");
    _jump800:;
    // Computing bound for d
    int64_t _229;
    // Computing bound for c
    int64_t _230 = 569;
    if (_230 > 0) 
    goto _jump801;
    fail_assertion("non-positive loop bound");
    _jump801:;
    _229 = 0;
    int64_t _231 = 0; // c
    _jump802:; // Begin body of loop
    _229 += _231;
    _231++;
    if (_231 < _230)
    goto _jump802;
    // End body of loop
    int64_t _232 = 209;
    _a1_int64_t _233;
    _233.d0 = 2;
    _233.data = jpl_alloc(sizeof(int64_t) * 2);
    _233.data[0] = _229;
    _233.data[1] = _232;
    int64_t _234 = 669;
    int64_t _235 = -_234;
    int64_t _236 = -_235;
    if (_236 >= 0)
    goto _jump803;
    fail_assertion("negative array index");
    _jump803:;
    if (_236 < _233.d0)
    goto _jump804;
    fail_assertion("index too large");
    _jump804:;
    int64_t _237 = 0;
    _237 *= _233.d0;
    _237 += _236;
    int64_t _238 = _233.data[_237];
    _200.d1 = _238;
    if (_238 > 0) 
    goto _jump805;
    fail_assertion("non-positive loop bound");
    _jump805:;
    // Computing bound for e
    int64_t _239 = 132;
    int64_t _240 = -_239;
    _200.d2 = _240;
    if (_240 > 0) 
    goto _jump806;
    fail_assertion("non-positive loop bound");
    _jump806:;
    // Computing total size of heap memory to allocate
    int64_t _241 = 1;
    _241 *= _201;
    _241 *= _238;
    _241 *= _240;
    _241 *= sizeof(bool);
    _200.data = jpl_alloc(_241);
    int64_t _242 = 0; // e
    int64_t _243 = 0; // d
    int64_t _244 = 0; // c
    _jump807:; // Begin body of loop
    bool _245 = false;
    bool _246;
    if (!_245)
    goto _jump808;
    bool _247 = false;
    _246 = _247;
    goto _jump809;
    _jump808:;
    bool _248 = false;
    _246 = _248;
    _jump809:;
    bool _249 = !_246;
    bool _250 = !_249;
    int64_t _251 = 0;
    _251 *= _200.d0;
    _251 += _244;
    _251 *= _200.d1;
    _251 += _243;
    _251 *= _200.d2;
    _251 += _242;
    _200.data[_251] = _250;
    _242++;
    if (_242 < _240)
    goto _jump807;
    _242 = 0;
    _243++;
    if (_243 < _238)
    goto _jump807;
    _243 = 0;
    _244++;
    if (_244 < _201)
    goto _jump807;
    // End body of loop
    _159 = _200;
    _jump782:;
    int64_t _252 = 749;
    int64_t _253 = 18;
    _a1_int64_t _254;
    _254.d0 = 2;
    _254.data = jpl_alloc(sizeof(int64_t) * 2);
    _254.data[0] = _252;
    _254.data[1] = _253;
    int64_t _255 = 154;
    if (_255 >= 0)
    goto _jump810;
    fail_assertion("negative array index");
    _jump810:;
    if (_255 < _254.d0)
    goto _jump811;
    fail_assertion("index too large");
    _jump811:;
    int64_t _256 = 0;
    _256 *= _254.d0;
    _256 += _255;
    int64_t _257 = _254.data[_256];
    int64_t _258;
    // Computing bound for c
    int64_t _259 = 688;
    int64_t _260 = 845;
    int64_t _261 = -_260;
    int64_t _262 = _259 - _261;
    if (_262 > 0) 
    goto _jump812;
    fail_assertion("non-positive loop bound");
    _jump812:;
    // Computing bound for d
    int64_t _263 = 581;
    _a1_int64_t _264;
    _264.d0 = 1;
    _264.data = jpl_alloc(sizeof(int64_t) * 1);
    _264.data[0] = _263;
    int64_t _265 = 639;
    int64_t _266 = -_265;
    if (_266 >= 0)
    goto _jump813;
    fail_assertion("negative array index");
    _jump813:;
    if (_266 < _264.d0)
    goto _jump814;
    fail_assertion("index too large");
    _jump814:;
    int64_t _267 = 0;
    _267 *= _264.d0;
    _267 += _266;
    int64_t _268 = _264.data[_267];
    int64_t _269 = -_268;
    if (_269 > 0) 
    goto _jump815;
    fail_assertion("non-positive loop bound");
    _jump815:;
    // Computing bound for e
    int64_t _270 = 727;
    if (_270 > 0) 
    goto _jump816;
    fail_assertion("non-positive loop bound");
    _jump816:;
    _258 = 0;
    int64_t _271 = 0; // e
    int64_t _272 = 0; // d
    int64_t _273 = 0; // c
    _jump817:; // Begin body of loop
    _258 += _272;
    _271++;
    if (_271 < _270)
    goto _jump817;
    _271 = 0;
    _272++;
    if (_272 < _269)
    goto _jump817;
    _272 = 0;
    _273++;
    if (_273 < _262)
    goto _jump817;
    // End body of loop
    int64_t _274 = _257 * _258;
    int64_t _275;
    // Computing bound for c
    int64_t _276 = 351;
    int64_t _277 = -_276;
    int64_t _278 = 100;
    bool _279 = _277 > _278;
    _a1_int64_t _280;
    if (!_279)
    goto _jump818;
    int64_t _281 = 348;
    int64_t _282 = 343;
    int64_t _283 = 8;
    _a1_int64_t _284;
    _284.d0 = 3;
    _284.data = jpl_alloc(sizeof(int64_t) * 3);
    _284.data[0] = _281;
    _284.data[1] = _282;
    _284.data[2] = _283;
    _280 = _284;
    goto _jump819;
    _jump818:;
    _a1_int64_t _285;
    // Computing bound for c
    int64_t _286 = 410;
    int64_t _287 = -_286;
    _285.d0 = _287;
    if (_287 > 0) 
    goto _jump820;
    fail_assertion("non-positive loop bound");
    _jump820:;
    // Computing total size of heap memory to allocate
    int64_t _288 = 1;
    _288 *= _287;
    _288 *= sizeof(int64_t);
    _285.data = jpl_alloc(_288);
    int64_t _289 = 0; // c
    _jump821:; // Begin body of loop
    int64_t _290 = 0;
    _290 *= _285.d0;
    _290 += _289;
    _285.data[_290] = _289;
    _289++;
    if (_289 < _287)
    goto _jump821;
    // End body of loop
    _280 = _285;
    _jump819:;
    int64_t _291 = 655;
    if (_291 >= 0)
    goto _jump822;
    fail_assertion("negative array index");
    _jump822:;
    if (_291 < _280.d0)
    goto _jump823;
    fail_assertion("index too large");
    _jump823:;
    int64_t _292 = 0;
    _292 *= _280.d0;
    _292 += _291;
    int64_t _293 = _280.data[_292];
    if (_293 > 0) 
    goto _jump824;
    fail_assertion("non-positive loop bound");
    _jump824:;
    _275 = 0;
    int64_t _294 = 0; // c
    _jump825:; // Begin body of loop
    bool _295 = false;
    int64_t _296;
    if (!_295)
    goto _jump826;
    int64_t _297 = 92;
    _296 = _297;
    goto _jump827;
    _jump826:;
    int64_t _298 = 779;
    int64_t _299 = -_298;
    int64_t _300;
    // Computing bound for d
    int64_t _301 = 644;
    if (_301 > 0) 
    goto _jump828;
    fail_assertion("non-positive loop bound");
    _jump828:;
    // Computing bound for e
    if (_294 > 0) 
    goto _jump829;
    fail_assertion("non-positive loop bound");
    _jump829:;
    // Computing bound for f
    if (_294 > 0) 
    goto _jump830;
    fail_assertion("non-positive loop bound");
    _jump830:;
    _300 = 0;
    int64_t _302 = 0; // f
    int64_t _303 = 0; // e
    int64_t _304 = 0; // d
    _jump831:; // Begin body of loop
    _300 += _294;
    _302++;
    if (_302 < _294)
    goto _jump831;
    _302 = 0;
    _303++;
    if (_303 < _294)
    goto _jump831;
    _303 = 0;
    _304++;
    if (_304 < _301)
    goto _jump831;
    // End body of loop
    bool _305 = _299 < _300;
    int64_t _306;
    if (!_305)
    goto _jump832;
    int64_t _307 = 640;
    _306 = _307;
    goto _jump833;
    _jump832:;
    int64_t _308 = 819;
    int64_t _309 = _308 - _294;
    _306 = _309;
    _jump833:;
    _296 = _306;
    _jump827:;
    _275 += _296;
    _294++;
    if (_294 < _293)
    goto _jump825;
    // End body of loop
    _a2_int64_t _310;
    // Computing bound for c
    bool _311 = true;
    int64_t _312;
    if (!_311)
    goto _jump834;
    int64_t _313;
    // Computing bound for c
    int64_t _314 = 390;
    if (_314 > 0) 
    goto _jump835;
    fail_assertion("non-positive loop bound");
    _jump835:;
    _313 = 0;
    int64_t _315 = 0; // c
    _jump836:; // Begin body of loop
    _313 += _315;
    _315++;
    if (_315 < _314)
    goto _jump836;
    // End body of loop
    _312 = _313;
    goto _jump837;
    _jump834:;
    int64_t _316 = 663;
    _312 = _316;
    _jump837:;
    int64_t _317 = 956;
    int64_t _318 = _312 - _317;
    _310.d0 = _318;
    if (_318 > 0) 
    goto _jump838;
    fail_assertion("non-positive loop bound");
    _jump838:;
    // Computing bound for d
    int64_t _319 = 133;
    int64_t _320 = 512;
    int64_t _321 = _319 * _320;
    _310.d1 = _321;
    if (_321 > 0) 
    goto _jump839;
    fail_assertion("non-positive loop bound");
    _jump839:;
    // Computing total size of heap memory to allocate
    int64_t _322 = 1;
    _322 *= _318;
    _322 *= _321;
    _322 *= sizeof(int64_t);
    _310.data = jpl_alloc(_322);
    int64_t _323 = 0; // d
    int64_t _324 = 0; // c
    _jump840:; // Begin body of loop
    int64_t _325;
    // Computing bound for e
    if (_323 > 0) 
    goto _jump841;
    fail_assertion("non-positive loop bound");
    _jump841:;
    _325 = 0;
    int64_t _326 = 0; // e
    _jump842:; // Begin body of loop
    int64_t _327;
    // Computing bound for f
    int64_t _328 = 136;
    if (_328 > 0) 
    goto _jump843;
    fail_assertion("non-positive loop bound");
    _jump843:;
    // Computing bound for g
    if (_324 > 0) 
    goto _jump844;
    fail_assertion("non-positive loop bound");
    _jump844:;
    // Computing bound for h
    if (_326 > 0) 
    goto _jump845;
    fail_assertion("non-positive loop bound");
    _jump845:;
    _327 = 0;
    int64_t _329 = 0; // h
    int64_t _330 = 0; // g
    int64_t _331 = 0; // f
    _jump846:; // Begin body of loop
    _327 += _330;
    _329++;
    if (_329 < _326)
    goto _jump846;
    _329 = 0;
    _330++;
    if (_330 < _324)
    goto _jump846;
    _330 = 0;
    _331++;
    if (_331 < _328)
    goto _jump846;
    // End body of loop
    int64_t _332;
    // Computing bound for f
    if (_326 > 0) 
    goto _jump847;
    fail_assertion("non-positive loop bound");
    _jump847:;
    _332 = 0;
    int64_t _333 = 0; // f
    _jump848:; // Begin body of loop
    _332 += _324;
    _333++;
    if (_333 < _326)
    goto _jump848;
    // End body of loop
    int64_t _334 = _327 % _332;
    _325 += _334;
    _326++;
    if (_326 < _323)
    goto _jump842;
    // End body of loop
    int64_t _335 = 0;
    _335 *= _310.d0;
    _335 += _324;
    _335 *= _310.d1;
    _335 += _323;
    _310.data[_335] = _325;
    _323++;
    if (_323 < _321)
    goto _jump840;
    _323 = 0;
    _324++;
    if (_324 < _318)
    goto _jump840;
    // End body of loop
    int64_t _336 = 616;
    int64_t _337;
    // Computing bound for c
    _a1_int64_t _338;
    // Computing bound for c
    int64_t _339 = 230;
    int64_t _340 = -_339;
    _338.d0 = _340;
    if (_340 > 0) 
    goto _jump849;
    fail_assertion("non-positive loop bound");
    _jump849:;
    // Computing total size of heap memory to allocate
    int64_t _341 = 1;
    _341 *= _340;
    _341 *= sizeof(int64_t);
    _338.data = jpl_alloc(_341);
    int64_t _342 = 0; // c
    _jump850:; // Begin body of loop
    int64_t _343 = 480;
    int64_t _344 = 0;
    _344 *= _338.d0;
    _344 += _342;
    _338.data[_344] = _343;
    _342++;
    if (_342 < _340)
    goto _jump850;
    // End body of loop
    int64_t _345;
    // Computing bound for c
    int64_t _346 = 222;
    int64_t _347 = 939;
    int64_t _348 = _346 / _347;
    if (_348 > 0) 
    goto _jump851;
    fail_assertion("non-positive loop bound");
    _jump851:;
    // Computing bound for d
    int64_t _349 = 52;
    if (_349 > 0) 
    goto _jump852;
    fail_assertion("non-positive loop bound");
    _jump852:;
    _345 = 0;
    int64_t _350 = 0; // d
    int64_t _351 = 0; // c
    _jump853:; // Begin body of loop
    int64_t _352 = 909;
    int64_t _353 = -_352;
    _345 += _353;
    _350++;
    if (_350 < _349)
    goto _jump853;
    _350 = 0;
    _351++;
    if (_351 < _348)
    goto _jump853;
    // End body of loop
    if (_345 >= 0)
    goto _jump854;
    fail_assertion("negative array index");
    _jump854:;
    if (_345 < _338.d0)
    goto _jump855;
    fail_assertion("index too large");
    _jump855:;
    int64_t _354 = 0;
    _354 *= _338.d0;
    _354 += _345;
    int64_t _355 = _338.data[_354];
    if (_355 > 0) 
    goto _jump856;
    fail_assertion("non-positive loop bound");
    _jump856:;
    _337 = 0;
    int64_t _356 = 0; // c
    _jump857:; // Begin body of loop
    int64_t _357 = 539;
    _337 += _357;
    _356++;
    if (_356 < _355)
    goto _jump857;
    // End body of loop
    if (_336 >= 0)
    goto _jump858;
    fail_assertion("negative array index");
    _jump858:;
    if (_336 < _310.d0)
    goto _jump859;
    fail_assertion("index too large");
    _jump859:;
    if (_337 >= 0)
    goto _jump860;
    fail_assertion("negative array index");
    _jump860:;
    if (_337 < _310.d1)
    goto _jump861;
    fail_assertion("index too large");
    _jump861:;
    int64_t _358 = 0;
    _358 *= _310.d0;
    _358 += _336;
    _358 *= _310.d1;
    _358 += _337;
    int64_t _359 = _310.data[_358];
    if (_274 >= 0)
    goto _jump862;
    fail_assertion("negative array index");
    _jump862:;
    if (_274 < _159.d0)
    goto _jump863;
    fail_assertion("index too large");
    _jump863:;
    if (_275 >= 0)
    goto _jump864;
    fail_assertion("negative array index");
    _jump864:;
    if (_275 < _159.d1)
    goto _jump865;
    fail_assertion("index too large");
    _jump865:;
    if (_359 >= 0)
    goto _jump866;
    fail_assertion("negative array index");
    _jump866:;
    if (_359 < _159.d2)
    goto _jump867;
    fail_assertion("index too large");
    _jump867:;
    int64_t _360 = 0;
    _360 *= _159.d0;
    _360 += _274;
    _360 *= _159.d1;
    _360 += _275;
    _360 *= _159.d2;
    _360 += _359;
    bool _361 = _159.data[_360];
    bool _133 = _361;
    if (0 == _361)
    goto _jump868;
    bool _364 = false;
    bool _363 = _364;
    if (0 != _364)
    goto _jump869;
    bool _365 = true;
    _363 = _365;
    _jump869:;
    bool _362 = _363;
    if (0 == _363)
    goto _jump870;
    bool _366 = true;
    _362 = _366;
    _jump870:;
    _a1_bool _367;
    if (!_362)
    goto _jump871;
    _a1__a1_bool _368;
    // Computing bound for c
    int64_t _369 = 203;
    _368.d0 = _369;
    if (_369 > 0) 
    goto _jump872;
    fail_assertion("non-positive loop bound");
    _jump872:;
    // Computing total size of heap memory to allocate
    int64_t _370 = 1;
    _370 *= _369;
    _370 *= sizeof(_a1_bool);
    _368.data = jpl_alloc(_370);
    int64_t _371 = 0; // c
    _jump873:; // Begin body of loop
    _a1_bool _372;
    // Computing bound for d
    _372.d0 = _371;
    if (_371 > 0) 
    goto _jump874;
    fail_assertion("non-positive loop bound");
    _jump874:;
    // Computing total size of heap memory to allocate
    int64_t _373 = 1;
    _373 *= _371;
    _373 *= sizeof(bool);
    _372.data = jpl_alloc(_373);
    int64_t _374 = 0; // d
    _jump875:; // Begin body of loop
    bool _375 = false;
    int64_t _376 = 0;
    _376 *= _372.d0;
    _376 += _374;
    _372.data[_376] = _375;
    _374++;
    if (_374 < _371)
    goto _jump875;
    // End body of loop
    int64_t _377 = 0;
    _377 *= _368.d0;
    _377 += _371;
    _368.data[_377] = _372;
    _371++;
    if (_371 < _369)
    goto _jump873;
    // End body of loop
    int64_t _378 = 521;
    int64_t _379 = -_378;
    int64_t _380 = -_379;
    if (_380 >= 0)
    goto _jump876;
    fail_assertion("negative array index");
    _jump876:;
    if (_380 < _368.d0)
    goto _jump877;
    fail_assertion("index too large");
    _jump877:;
    int64_t _381 = 0;
    _381 *= _368.d0;
    _381 += _380;
    _a1_bool _382 = _368.data[_381];
    _367 = _382;
    goto _jump878;
    _jump871:;
    _a1_bool _383;
    // Computing bound for c
    bool _384 = false;
    int64_t _385;
    if (!_384)
    goto _jump879;
    int64_t _386 = 185;
    _385 = _386;
    goto _jump880;
    _jump879:;
    int64_t _387;
    // Computing bound for c
    int64_t _388 = 961;
    if (_388 > 0) 
    goto _jump881;
    fail_assertion("non-positive loop bound");
    _jump881:;
    // Computing bound for d
    int64_t _389 = 933;
    if (_389 > 0) 
    goto _jump882;
    fail_assertion("non-positive loop bound");
    _jump882:;
    // Computing bound for e
    int64_t _390 = 964;
    if (_390 > 0) 
    goto _jump883;
    fail_assertion("non-positive loop bound");
    _jump883:;
    _387 = 0;
    int64_t _391 = 0; // e
    int64_t _392 = 0; // d
    int64_t _393 = 0; // c
    _jump884:; // Begin body of loop
    int64_t _394 = 681;
    _387 += _394;
    _391++;
    if (_391 < _390)
    goto _jump884;
    _391 = 0;
    _392++;
    if (_392 < _389)
    goto _jump884;
    _392 = 0;
    _393++;
    if (_393 < _388)
    goto _jump884;
    // End body of loop
    _385 = _387;
    _jump880:;
    _383.d0 = _385;
    if (_385 > 0) 
    goto _jump885;
    fail_assertion("non-positive loop bound");
    _jump885:;
    // Computing total size of heap memory to allocate
    int64_t _395 = 1;
    _395 *= _385;
    _395 *= sizeof(bool);
    _383.data = jpl_alloc(_395);
    int64_t _396 = 0; // c
    _jump886:; // Begin body of loop
    bool _397 = false;
    bool _398 = !_397;
    int64_t _399 = 0;
    _399 *= _383.d0;
    _399 += _396;
    _383.data[_399] = _398;
    _396++;
    if (_396 < _385)
    goto _jump886;
    // End body of loop
    _367 = _383;
    _jump878:;
    int64_t _400 = 553;
    int64_t _401 = -_400;
    int64_t _402 = -_401;
    int64_t _403 = -_402;
    if (_403 >= 0)
    goto _jump887;
    fail_assertion("negative array index");
    _jump887:;
    if (_403 < _367.d0)
    goto _jump888;
    fail_assertion("index too large");
    _jump888:;
    int64_t _404 = 0;
    _404 *= _367.d0;
    _404 += _403;
    bool _405 = _367.data[_404];
    bool _406 = !_405;
    _133 = _406;
    _jump868:;
    if (0 != _133)
    goto _jump889;
    fail_assertion("c");
    _jump889:;
    double _407;
    // Computing bound for c
    _a3_bool _408;
    // Computing bound for c
    int64_t _409 = 235;
    _408.d0 = _409;
    if (_409 > 0) 
    goto _jump890;
    fail_assertion("non-positive loop bound");
    _jump890:;
    // Computing bound for d
    int64_t _410;
    // Computing bound for c
    int64_t _411 = 271;
    if (_411 > 0) 
    goto _jump891;
    fail_assertion("non-positive loop bound");
    _jump891:;
    // Computing bound for d
    int64_t _412 = 542;
    int64_t _413 = 46;
    int64_t _414 = -_413;
    int64_t _415 = _412 + _414;
    if (_415 > 0) 
    goto _jump892;
    fail_assertion("non-positive loop bound");
    _jump892:;
    // Computing bound for e
    int64_t _416 = 66;
    int64_t _417 = 884;
    int64_t _418 = _416 / _417;
    if (_418 > 0) 
    goto _jump893;
    fail_assertion("non-positive loop bound");
    _jump893:;
    _410 = 0;
    int64_t _419 = 0; // e
    int64_t _420 = 0; // d
    int64_t _421 = 0; // c
    _jump894:; // Begin body of loop
    _410 += _420;
    _419++;
    if (_419 < _418)
    goto _jump894;
    _419 = 0;
    _420++;
    if (_420 < _415)
    goto _jump894;
    _420 = 0;
    _421++;
    if (_421 < _411)
    goto _jump894;
    // End body of loop
    _408.d1 = _410;
    if (_410 > 0) 
    goto _jump895;
    fail_assertion("non-positive loop bound");
    _jump895:;
    // Computing bound for e
    int64_t _422 = 288;
    int64_t _423 = -_422;
    int64_t _424 = -_423;
    _408.d2 = _424;
    if (_424 > 0) 
    goto _jump896;
    fail_assertion("non-positive loop bound");
    _jump896:;
    // Computing total size of heap memory to allocate
    int64_t _425 = 1;
    _425 *= _409;
    _425 *= _410;
    _425 *= _424;
    _425 *= sizeof(bool);
    _408.data = jpl_alloc(_425);
    int64_t _426 = 0; // e
    int64_t _427 = 0; // d
    int64_t _428 = 0; // c
    _jump897:; // Begin body of loop
    double _429 = 62.0;
    double _430 = 81.0;
    bool _431 = _429 <= _430;
    int64_t _432 = 0;
    _432 *= _408.d0;
    _432 += _428;
    _432 *= _408.d1;
    _432 += _427;
    _432 *= _408.d2;
    _432 += _426;
    _408.data[_432] = _431;
    _426++;
    if (_426 < _424)
    goto _jump897;
    _426 = 0;
    _427++;
    if (_427 < _410)
    goto _jump897;
    _427 = 0;
    _428++;
    if (_428 < _409)
    goto _jump897;
    // End body of loop
    int64_t _433 = 902;
    bool _434 = false;
    bool _435 = !_434;
    bool _436 = !_435;
    bool _437 = !_436;
    int64_t _438;
    if (!_437)
    goto _jump898;
    int64_t _439 = 28;
    int64_t _440 = -_439;
    _438 = _440;
    goto _jump899;
    _jump898:;
    double _441 = 38.0;
    double _442 = -_441;
    double _443 = 15.0;
    double _444 = -_443;
    bool _445 = _442 > _444;
    int64_t _446;
    if (!_445)
    goto _jump900;
    int64_t _447;
    // Computing bound for c
    int64_t _448 = 799;
    if (_448 > 0) 
    goto _jump901;
    fail_assertion("non-positive loop bound");
    _jump901:;
    // Computing bound for d
    int64_t _449 = 986;
    int64_t _450 = -_449;
    if (_450 > 0) 
    goto _jump902;
    fail_assertion("non-positive loop bound");
    _jump902:;
    // Computing bound for e
    int64_t _451;
    // Computing bound for c
    int64_t _452 = 356;
    if (_452 > 0) 
    goto _jump903;
    fail_assertion("non-positive loop bound");
    _jump903:;
    _451 = 0;
    int64_t _453 = 0; // c
    _jump904:; // Begin body of loop
    int64_t _454 = 798;
    _451 += _454;
    _453++;
    if (_453 < _452)
    goto _jump904;
    // End body of loop
    if (_451 > 0) 
    goto _jump905;
    fail_assertion("non-positive loop bound");
    _jump905:;
    _447 = 0;
    int64_t _455 = 0; // e
    int64_t _456 = 0; // d
    int64_t _457 = 0; // c
    _jump906:; // Begin body of loop
    int64_t _458 = _455 % _457;
    _447 += _458;
    _455++;
    if (_455 < _451)
    goto _jump906;
    _455 = 0;
    _456++;
    if (_456 < _450)
    goto _jump906;
    _456 = 0;
    _457++;
    if (_457 < _448)
    goto _jump906;
    // End body of loop
    _446 = _447;
    goto _jump907;
    _jump900:;
    int64_t _459 = 902;
    int64_t _460 = -_459;
    _446 = _460;
    _jump907:;
    _438 = _446;
    _jump899:;
    int64_t _461;
    // Computing bound for c
    int64_t _462;
    // Computing bound for c
    int64_t _463 = 611;
    if (_463 > 0) 
    goto _jump908;
    fail_assertion("non-positive loop bound");
    _jump908:;
    // Computing bound for d
    int64_t _464 = 726;
    if (_464 > 0) 
    goto _jump909;
    fail_assertion("non-positive loop bound");
    _jump909:;
    _462 = 0;
    int64_t _465 = 0; // d
    int64_t _466 = 0; // c
    _jump910:; // Begin body of loop
    _462 += _465;
    _465++;
    if (_465 < _464)
    goto _jump910;
    _465 = 0;
    _466++;
    if (_466 < _463)
    goto _jump910;
    // End body of loop
    if (_462 > 0) 
    goto _jump911;
    fail_assertion("non-positive loop bound");
    _jump911:;
    _461 = 0;
    int64_t _467 = 0; // c
    _jump912:; // Begin body of loop
    int64_t _468;
    // Computing bound for d
    int64_t _469 = 655;
    if (_469 > 0) 
    goto _jump913;
    fail_assertion("non-positive loop bound");
    _jump913:;
    // Computing bound for e
    int64_t _470 = 601;
    int64_t _471 = _470 * _467;
    if (_471 > 0) 
    goto _jump914;
    fail_assertion("non-positive loop bound");
    _jump914:;
    _468 = 0;
    int64_t _472 = 0; // e
    int64_t _473 = 0; // d
    _jump915:; // Begin body of loop
    int64_t _474 = _467 / _473;
    _468 += _474;
    _472++;
    if (_472 < _471)
    goto _jump915;
    _472 = 0;
    _473++;
    if (_473 < _469)
    goto _jump915;
    // End body of loop
    int64_t _475;
    // Computing bound for d
    int64_t _476 = 472;
    if (_476 > 0) 
    goto _jump916;
    fail_assertion("non-positive loop bound");
    _jump916:;
    _475 = 0;
    int64_t _477 = 0; // d
    _jump917:; // Begin body of loop
    int64_t _478 = 481;
    _475 += _478;
    _477++;
    if (_477 < _476)
    goto _jump917;
    // End body of loop
    int64_t _479 = 152;
    int64_t _480 = _467 * _479;
    int64_t _481 = _475 - _480;
    int64_t _482 = _468 % _481;
    _461 += _482;
    _467++;
    if (_467 < _462)
    goto _jump912;
    // End body of loop
    if (_433 >= 0)
    goto _jump918;
    fail_assertion("negative array index");
    _jump918:;
    if (_433 < _408.d0)
    goto _jump919;
    fail_assertion("index too large");
    _jump919:;
    if (_438 >= 0)
    goto _jump920;
    fail_assertion("negative array index");
    _jump920:;
    if (_438 < _408.d1)
    goto _jump921;
    fail_assertion("index too large");
    _jump921:;
    if (_461 >= 0)
    goto _jump922;
    fail_assertion("negative array index");
    _jump922:;
    if (_461 < _408.d2)
    goto _jump923;
    fail_assertion("index too large");
    _jump923:;
    int64_t _483 = 0;
    _483 *= _408.d0;
    _483 += _433;
    _483 *= _408.d1;
    _483 += _438;
    _483 *= _408.d2;
    _483 += _461;
    bool _484 = _408.data[_483];
    int64_t _485;
    if (!_484)
    goto _jump924;
    _a2_int64_t _486;
    // Computing bound for c
    int64_t _487 = 256;
    int64_t _488 = 163;
    int64_t _489 = _487 % _488;
    int64_t _490 = -_489;
    _486.d0 = _490;
    if (_490 > 0) 
    goto _jump925;
    fail_assertion("non-positive loop bound");
    _jump925:;
    // Computing bound for d
    int64_t _491;
    // Computing bound for c
    int64_t _492 = 394;
    if (_492 > 0) 
    goto _jump926;
    fail_assertion("non-positive loop bound");
    _jump926:;
    // Computing bound for d
    int64_t _493 = 78;
    int64_t _494 = -_493;
    int64_t _495 = -_494;
    if (_495 > 0) 
    goto _jump927;
    fail_assertion("non-positive loop bound");
    _jump927:;
    _491 = 0;
    int64_t _496 = 0; // d
    int64_t _497 = 0; // c
    _jump928:; // Begin body of loop
    int64_t _498 = 665;
    _491 += _498;
    _496++;
    if (_496 < _495)
    goto _jump928;
    _496 = 0;
    _497++;
    if (_497 < _492)
    goto _jump928;
    // End body of loop
    _486.d1 = _491;
    if (_491 > 0) 
    goto _jump929;
    fail_assertion("non-positive loop bound");
    _jump929:;
    // Computing total size of heap memory to allocate
    int64_t _499 = 1;
    _499 *= _490;
    _499 *= _491;
    _499 *= sizeof(int64_t);
    _486.data = jpl_alloc(_499);
    int64_t _500 = 0; // d
    int64_t _501 = 0; // c
    _jump930:; // Begin body of loop
    _a3_int64_t _502;
    // Computing bound for e
    int64_t _503 = 328;
    _502.d0 = _503;
    if (_503 > 0) 
    goto _jump931;
    fail_assertion("non-positive loop bound");
    _jump931:;
    // Computing bound for f
    _502.d1 = _501;
    if (_501 > 0) 
    goto _jump932;
    fail_assertion("non-positive loop bound");
    _jump932:;
    // Computing bound for g
    int64_t _504;
    // Computing bound for e
    int64_t _505 = 943;
    if (_505 > 0) 
    goto _jump933;
    fail_assertion("non-positive loop bound");
    _jump933:;
    // Computing bound for f
    if (_501 > 0) 
    goto _jump934;
    fail_assertion("non-positive loop bound");
    _jump934:;
    _504 = 0;
    int64_t _506 = 0; // f
    int64_t _507 = 0; // e
    _jump935:; // Begin body of loop
    _504 += _501;
    _506++;
    if (_506 < _501)
    goto _jump935;
    _506 = 0;
    _507++;
    if (_507 < _505)
    goto _jump935;
    // End body of loop
    _502.d2 = _504;
    if (_504 > 0) 
    goto _jump936;
    fail_assertion("non-positive loop bound");
    _jump936:;
    // Computing total size of heap memory to allocate
    int64_t _508 = 1;
    _508 *= _503;
    _508 *= _501;
    _508 *= _504;
    _508 *= sizeof(int64_t);
    _502.data = jpl_alloc(_508);
    int64_t _509 = 0; // g
    int64_t _510 = 0; // f
    int64_t _511 = 0; // e
    _jump937:; // Begin body of loop
    int64_t _512 = 0;
    _512 *= _502.d0;
    _512 += _511;
    _512 *= _502.d1;
    _512 += _510;
    _512 *= _502.d2;
    _512 += _509;
    _502.data[_512] = _509;
    _509++;
    if (_509 < _504)
    goto _jump937;
    _509 = 0;
    _510++;
    if (_510 < _501)
    goto _jump937;
    _510 = 0;
    _511++;
    if (_511 < _503)
    goto _jump937;
    // End body of loop
    int64_t _513;
    // Computing bound for e
    bool _514 = false;
    int64_t _515;
    if (!_514)
    goto _jump938;
    int64_t _516 = 825;
    _515 = _516;
    goto _jump939;
    _jump938:;
    _515 = _500;
    _jump939:;
    if (_515 > 0) 
    goto _jump940;
    fail_assertion("non-positive loop bound");
    _jump940:;
    // Computing bound for f
    int64_t _517 = _501 / _500;
    if (_517 > 0) 
    goto _jump941;
    fail_assertion("non-positive loop bound");
    _jump941:;
    _513 = 0;
    int64_t _518 = 0; // f
    int64_t _519 = 0; // e
    _jump942:; // Begin body of loop
    int64_t _520 = _501 + _501;
    _513 += _520;
    _518++;
    if (_518 < _517)
    goto _jump942;
    _518 = 0;
    _519++;
    if (_519 < _515)
    goto _jump942;
    // End body of loop
    int64_t _521 = 947;
    if (_501 >= 0)
    goto _jump943;
    fail_assertion("negative array index");
    _jump943:;
    if (_501 < _502.d0)
    goto _jump944;
    fail_assertion("index too large");
    _jump944:;
    if (_513 >= 0)
    goto _jump945;
    fail_assertion("negative array index");
    _jump945:;
    if (_513 < _502.d1)
    goto _jump946;
    fail_assertion("index too large");
    _jump946:;
    if (_521 >= 0)
    goto _jump947;
    fail_assertion("negative array index");
    _jump947:;
    if (_521 < _502.d2)
    goto _jump948;
    fail_assertion("index too large");
    _jump948:;
    int64_t _522 = 0;
    _522 *= _502.d0;
    _522 += _501;
    _522 *= _502.d1;
    _522 += _513;
    _522 *= _502.d2;
    _522 += _521;
    int64_t _523 = _502.data[_522];
    int64_t _524 = 0;
    _524 *= _486.d0;
    _524 += _501;
    _524 *= _486.d1;
    _524 += _500;
    _486.data[_524] = _523;
    _500++;
    if (_500 < _491)
    goto _jump930;
    _500 = 0;
    _501++;
    if (_501 < _490)
    goto _jump930;
    // End body of loop
    int64_t _525;
    // Computing bound for c
    int64_t _526;
    // Computing bound for c
    int64_t _527 = 959;
    int64_t _528 = -_527;
    if (_528 > 0) 
    goto _jump949;
    fail_assertion("non-positive loop bound");
    _jump949:;
    _526 = 0;
    int64_t _529 = 0; // c
    _jump950:; // Begin body of loop
    int64_t _530 = 363;
    int64_t _531 = _529 + _530;
    _526 += _531;
    _529++;
    if (_529 < _528)
    goto _jump950;
    // End body of loop
    if (_526 > 0) 
    goto _jump951;
    fail_assertion("non-positive loop bound");
    _jump951:;
    // Computing bound for d
    int64_t _532 = 717;
    if (_532 > 0) 
    goto _jump952;
    fail_assertion("non-positive loop bound");
    _jump952:;
    // Computing bound for e
    int64_t _533 = 472;
    int64_t _534;
    // Computing bound for c
    int64_t _535 = 692;
    if (_535 > 0) 
    goto _jump953;
    fail_assertion("non-positive loop bound");
    _jump953:;
    // Computing bound for d
    int64_t _536 = 981;
    if (_536 > 0) 
    goto _jump954;
    fail_assertion("non-positive loop bound");
    _jump954:;
    _534 = 0;
    int64_t _537 = 0; // d
    int64_t _538 = 0; // c
    _jump955:; // Begin body of loop
    _534 += _537;
    _537++;
    if (_537 < _536)
    goto _jump955;
    _537 = 0;
    _538++;
    if (_538 < _535)
    goto _jump955;
    // End body of loop
    int64_t _539 = _533 / _534;
    if (_539 > 0) 
    goto _jump956;
    fail_assertion("non-positive loop bound");
    _jump956:;
    _525 = 0;
    int64_t _540 = 0; // e
    int64_t _541 = 0; // d
    int64_t _542 = 0; // c
    _jump957:; // Begin body of loop
    int64_t _543;
    // Computing bound for f
    int64_t _544 = _540 % _541;
    if (_544 > 0) 
    goto _jump958;
    fail_assertion("non-positive loop bound");
    _jump958:;
    // Computing bound for g
    int64_t _545 = -_540;
    if (_545 > 0) 
    goto _jump959;
    fail_assertion("non-positive loop bound");
    _jump959:;
    // Computing bound for h
    if (_542 > 0) 
    goto _jump960;
    fail_assertion("non-positive loop bound");
    _jump960:;
    _543 = 0;
    int64_t _546 = 0; // h
    int64_t _547 = 0; // g
    int64_t _548 = 0; // f
    _jump961:; // Begin body of loop
    _543 += _546;
    _546++;
    if (_546 < _542)
    goto _jump961;
    _546 = 0;
    _547++;
    if (_547 < _545)
    goto _jump961;
    _547 = 0;
    _548++;
    if (_548 < _544)
    goto _jump961;
    // End body of loop
    _525 += _543;
    _540++;
    if (_540 < _539)
    goto _jump957;
    _540 = 0;
    _541++;
    if (_541 < _532)
    goto _jump957;
    _541 = 0;
    _542++;
    if (_542 < _526)
    goto _jump957;
    // End body of loop
    int64_t _549 = -_525;
    int64_t _550 = 407;
    int64_t _551 = -_550;
    int64_t _552 = -_551;
    int64_t _553 = -_552;
    if (_549 >= 0)
    goto _jump962;
    fail_assertion("negative array index");
    _jump962:;
    if (_549 < _486.d0)
    goto _jump963;
    fail_assertion("index too large");
    _jump963:;
    if (_553 >= 0)
    goto _jump964;
    fail_assertion("negative array index");
    _jump964:;
    if (_553 < _486.d1)
    goto _jump965;
    fail_assertion("index too large");
    _jump965:;
    int64_t _554 = 0;
    _554 *= _486.d0;
    _554 += _549;
    _554 *= _486.d1;
    _554 += _553;
    int64_t _555 = _486.data[_554];
    _485 = _555;
    goto _jump966;
    _jump924:;
    bool _556 = true;
    bool _557;
    if (!_556)
    goto _jump967;
    bool _558 = false;
    bool _559 = !_558;
    _557 = _559;
    goto _jump968;
    _jump967:;
    double _560 = 36.0;
    double _561 = 35.0;
    bool _562 = _560 < _561;
    _557 = _562;
    _jump968:;
    int64_t _563;
    if (!_557)
    goto _jump969;
    int64_t _564 = 115;
    int64_t _565 = 673;
    int64_t _566 = -_565;
    int64_t _567 = _564 / _566;
    _563 = _567;
    goto _jump970;
    _jump969:;
    int64_t _568;
    // Computing bound for c
    int64_t _569 = 400;
    int64_t _570 = -_569;
    if (_570 > 0) 
    goto _jump971;
    fail_assertion("non-positive loop bound");
    _jump971:;
    _568 = 0;
    int64_t _571 = 0; // c
    _jump972:; // Begin body of loop
    _568 += _571;
    _571++;
    if (_571 < _570)
    goto _jump972;
    // End body of loop
    _563 = _568;
    _jump970:;
    int64_t _572 = 424;
    int64_t _573 = 889;
    int64_t _574 = -_573;
    bool _575 = _572 > _574;
    int64_t _576;
    if (!_575)
    goto _jump973;
    int64_t _577 = 269;
    int64_t _578 = -_577;
    int64_t _579 = -_578;
    _576 = _579;
    goto _jump974;
    _jump973:;
    int64_t _580;
    // Computing bound for c
    int64_t _581 = 336;
    int64_t _582 = 867;
    int64_t _583 = _581 / _582;
    if (_583 > 0) 
    goto _jump975;
    fail_assertion("non-positive loop bound");
    _jump975:;
    _580 = 0;
    int64_t _584 = 0; // c
    _jump976:; // Begin body of loop
    _580 += _584;
    _584++;
    if (_584 < _583)
    goto _jump976;
    // End body of loop
    _576 = _580;
    _jump974:;
    int64_t _585 = _563 - _576;
    int64_t _586;
    // Computing bound for c
    int64_t _587 = 480;
    int64_t _588 = -_587;
    if (_588 > 0) 
    goto _jump977;
    fail_assertion("non-positive loop bound");
    _jump977:;
    // Computing bound for d
    _a1_int64_t _589;
    // Computing bound for c
    int64_t _590 = 715;
    int64_t _591 = -_590;
    _589.d0 = _591;
    if (_591 > 0) 
    goto _jump978;
    fail_assertion("non-positive loop bound");
    _jump978:;
    // Computing total size of heap memory to allocate
    int64_t _592 = 1;
    _592 *= _591;
    _592 *= sizeof(int64_t);
    _589.data = jpl_alloc(_592);
    int64_t _593 = 0; // c
    _jump979:; // Begin body of loop
    int64_t _594 = 0;
    _594 *= _589.d0;
    _594 += _593;
    _589.data[_594] = _593;
    _593++;
    if (_593 < _591)
    goto _jump979;
    // End body of loop
    int64_t _595 = 939;
    int64_t _596 = -_595;
    int64_t _597 = -_596;
    if (_597 >= 0)
    goto _jump980;
    fail_assertion("negative array index");
    _jump980:;
    if (_597 < _589.d0)
    goto _jump981;
    fail_assertion("index too large");
    _jump981:;
    int64_t _598 = 0;
    _598 *= _589.d0;
    _598 += _597;
    int64_t _599 = _589.data[_598];
    if (_599 > 0) 
    goto _jump982;
    fail_assertion("non-positive loop bound");
    _jump982:;
    // Computing bound for e
    int64_t _600 = 891;
    int64_t _601 = -_600;
    if (_601 > 0) 
    goto _jump983;
    fail_assertion("non-positive loop bound");
    _jump983:;
    _586 = 0;
    int64_t _602 = 0; // e
    int64_t _603 = 0; // d
    int64_t _604 = 0; // c
    _jump984:; // Begin body of loop
    _586 += _603;
    _602++;
    if (_602 < _601)
    goto _jump984;
    _602 = 0;
    _603++;
    if (_603 < _599)
    goto _jump984;
    _603 = 0;
    _604++;
    if (_604 < _588)
    goto _jump984;
    // End body of loop
    int64_t _605 = _585 - _586;
    _485 = _605;
    _jump966:;
    if (_485 > 0) 
    goto _jump985;
    fail_assertion("non-positive loop bound");
    _jump985:;
    // Computing bound for d
    bool _606 = true;
    _a2_int64_t _607;
    if (!_606)
    goto _jump986;
    _a2_int64_t _608;
    // Computing bound for c
    int64_t _609 = 372;
    int64_t _610 = -_609;
    _608.d0 = _610;
    if (_610 > 0) 
    goto _jump987;
    fail_assertion("non-positive loop bound");
    _jump987:;
    // Computing bound for d
    int64_t _611 = 851;
    _608.d1 = _611;
    if (_611 > 0) 
    goto _jump988;
    fail_assertion("non-positive loop bound");
    _jump988:;
    // Computing total size of heap memory to allocate
    int64_t _612 = 1;
    _612 *= _610;
    _612 *= _611;
    _612 *= sizeof(int64_t);
    _608.data = jpl_alloc(_612);
    int64_t _613 = 0; // d
    int64_t _614 = 0; // c
    _jump989:; // Begin body of loop
    int64_t _615 = 439;
    int64_t _616 = 0;
    _616 *= _608.d0;
    _616 += _614;
    _616 *= _608.d1;
    _616 += _613;
    _608.data[_616] = _615;
    _613++;
    if (_613 < _611)
    goto _jump989;
    _613 = 0;
    _614++;
    if (_614 < _610)
    goto _jump989;
    // End body of loop
    _a1__a2_int64_t _617;
    _617.d0 = 1;
    _617.data = jpl_alloc(sizeof(_a2_int64_t) * 1);
    _617.data[0] = _608;
    _a2_int64_t _618;
    // Computing bound for c
    bool _619 = false;
    int64_t _620;
    if (!_619)
    goto _jump990;
    int64_t _621 = 443;
    _620 = _621;
    goto _jump991;
    _jump990:;
    int64_t _622 = 119;
    _620 = _622;
    _jump991:;
    _618.d0 = _620;
    if (_620 > 0) 
    goto _jump992;
    fail_assertion("non-positive loop bound");
    _jump992:;
    // Computing bound for d
    int64_t _623;
    // Computing bound for c
    int64_t _624 = 718;
    if (_624 > 0) 
    goto _jump993;
    fail_assertion("non-positive loop bound");
    _jump993:;
    _623 = 0;
    int64_t _625 = 0; // c
    _jump994:; // Begin body of loop
    int64_t _626 = 832;
    _623 += _626;
    _625++;
    if (_625 < _624)
    goto _jump994;
    // End body of loop
    _618.d1 = _623;
    if (_623 > 0) 
    goto _jump995;
    fail_assertion("non-positive loop bound");
    _jump995:;
    // Computing total size of heap memory to allocate
    int64_t _627 = 1;
    _627 *= _620;
    _627 *= _623;
    _627 *= sizeof(int64_t);
    _618.data = jpl_alloc(_627);
    int64_t _628 = 0; // d
    int64_t _629 = 0; // c
    _jump996:; // Begin body of loop
    int64_t _630 = 342;
    int64_t _631 = -_630;
    int64_t _632 = 0;
    _632 *= _618.d0;
    _632 += _629;
    _632 *= _618.d1;
    _632 += _628;
    _618.data[_632] = _631;
    _628++;
    if (_628 < _623)
    goto _jump996;
    _628 = 0;
    _629++;
    if (_629 < _620)
    goto _jump996;
    // End body of loop
    int64_t _633 = 55;
    int64_t _634;
    // Computing bound for c
    int64_t _635 = 302;
    if (_635 > 0) 
    goto _jump997;
    fail_assertion("non-positive loop bound");
    _jump997:;
    // Computing bound for d
    int64_t _636 = 154;
    if (_636 > 0) 
    goto _jump998;
    fail_assertion("non-positive loop bound");
    _jump998:;
    _634 = 0;
    int64_t _637 = 0; // d
    int64_t _638 = 0; // c
    _jump999:; // Begin body of loop
    _634 += _637;
    _637++;
    if (_637 < _636)
    goto _jump999;
    _637 = 0;
    _638++;
    if (_638 < _635)
    goto _jump999;
    // End body of loop
    if (_633 >= 0)
    goto _jump1000;
    fail_assertion("negative array index");
    _jump1000:;
    if (_633 < _618.d0)
    goto _jump1001;
    fail_assertion("index too large");
    _jump1001:;
    if (_634 >= 0)
    goto _jump1002;
    fail_assertion("negative array index");
    _jump1002:;
    if (_634 < _618.d1)
    goto _jump1003;
    fail_assertion("index too large");
    _jump1003:;
    int64_t _639 = 0;
    _639 *= _618.d0;
    _639 += _633;
    _639 *= _618.d1;
    _639 += _634;
    int64_t _640 = _618.data[_639];
    if (_640 >= 0)
    goto _jump1004;
    fail_assertion("negative array index");
    _jump1004:;
    if (_640 < _617.d0)
    goto _jump1005;
    fail_assertion("index too large");
    _jump1005:;
    int64_t _641 = 0;
    _641 *= _617.d0;
    _641 += _640;
    _a2_int64_t _642 = _617.data[_641];
    _607 = _642;
    goto _jump1006;
    _jump986:;
    _a3__a2_int64_t _643;
    // Computing bound for c
    int64_t _644 = 36;
    int64_t _645 = 118;
    int64_t _646 = 269;
    int64_t _647 = _645 / _646;
    int64_t _648 = _644 % _647;
    _643.d0 = _648;
    if (_648 > 0) 
    goto _jump1007;
    fail_assertion("non-positive loop bound");
    _jump1007:;
    // Computing bound for d
    int64_t _649 = 274;
    _643.d1 = _649;
    if (_649 > 0) 
    goto _jump1008;
    fail_assertion("non-positive loop bound");
    _jump1008:;
    // Computing bound for e
    int64_t _650;
    // Computing bound for c
    int64_t _651 = 480;
    if (_651 > 0) 
    goto _jump1009;
    fail_assertion("non-positive loop bound");
    _jump1009:;
    _650 = 0;
    int64_t _652 = 0; // c
    _jump1010:; // Begin body of loop
    int64_t _653 = 699;
    _650 += _653;
    _652++;
    if (_652 < _651)
    goto _jump1010;
    // End body of loop
    _643.d2 = _650;
    if (_650 > 0) 
    goto _jump1011;
    fail_assertion("non-positive loop bound");
    _jump1011:;
    // Computing total size of heap memory to allocate
    int64_t _654 = 1;
    _654 *= _648;
    _654 *= _649;
    _654 *= _650;
    _654 *= sizeof(_a2_int64_t);
    _643.data = jpl_alloc(_654);
    int64_t _655 = 0; // e
    int64_t _656 = 0; // d
    int64_t _657 = 0; // c
    _jump1012:; // Begin body of loop
    _a2_int64_t _658;
    // Computing bound for f
    int64_t _659 = _656 % _656;
    _658.d0 = _659;
    if (_659 > 0) 
    goto _jump1013;
    fail_assertion("non-positive loop bound");
    _jump1013:;
    // Computing bound for g
    _658.d1 = _655;
    if (_655 > 0) 
    goto _jump1014;
    fail_assertion("non-positive loop bound");
    _jump1014:;
    // Computing total size of heap memory to allocate
    int64_t _660 = 1;
    _660 *= _659;
    _660 *= _655;
    _660 *= sizeof(int64_t);
    _658.data = jpl_alloc(_660);
    int64_t _661 = 0; // g
    int64_t _662 = 0; // f
    _jump1015:; // Begin body of loop
    int64_t _663 = 0;
    _663 *= _658.d0;
    _663 += _662;
    _663 *= _658.d1;
    _663 += _661;
    _658.data[_663] = _661;
    _661++;
    if (_661 < _655)
    goto _jump1015;
    _661 = 0;
    _662++;
    if (_662 < _659)
    goto _jump1015;
    // End body of loop
    int64_t _664 = 0;
    _664 *= _643.d0;
    _664 += _657;
    _664 *= _643.d1;
    _664 += _656;
    _664 *= _643.d2;
    _664 += _655;
    _643.data[_664] = _658;
    _655++;
    if (_655 < _650)
    goto _jump1012;
    _655 = 0;
    _656++;
    if (_656 < _649)
    goto _jump1012;
    _656 = 0;
    _657++;
    if (_657 < _648)
    goto _jump1012;
    // End body of loop
    int64_t _665 = 708;
    int64_t _666 = 303;
    int64_t _667 = 336;
    if (_665 >= 0)
    goto _jump1016;
    fail_assertion("negative array index");
    _jump1016:;
    if (_665 < _643.d0)
    goto _jump1017;
    fail_assertion("index too large");
    _jump1017:;
    if (_666 >= 0)
    goto _jump1018;
    fail_assertion("negative array index");
    _jump1018:;
    if (_666 < _643.d1)
    goto _jump1019;
    fail_assertion("index too large");
    _jump1019:;
    if (_667 >= 0)
    goto _jump1020;
    fail_assertion("negative array index");
    _jump1020:;
    if (_667 < _643.d2)
    goto _jump1021;
    fail_assertion("index too large");
    _jump1021:;
    int64_t _668 = 0;
    _668 *= _643.d0;
    _668 += _665;
    _668 *= _643.d1;
    _668 += _666;
    _668 *= _643.d2;
    _668 += _667;
    _a2_int64_t _669 = _643.data[_668];
    _607 = _669;
    _jump1006:;
    double _670 = 73.0;
    double _671 = 65.0;
    double _672 = -_671;
    double _673 = 86.0;
    double _674 = -_673;
    double _675 = fmod(_672, _674);
    double _676 = _670 * _675;
    double _677 = 84.0;
    bool _678 = _676 == _677;
    int64_t _679;
    if (!_678)
    goto _jump1022;
    int64_t _680;
    // Computing bound for c
    bool _681 = true;
    int64_t _682;
    if (!_681)
    goto _jump1023;
    int64_t _683;
    // Computing bound for c
    int64_t _684 = 600;
    if (_684 > 0) 
    goto _jump1024;
    fail_assertion("non-positive loop bound");
    _jump1024:;
    // Computing bound for d
    int64_t _685 = 743;
    if (_685 > 0) 
    goto _jump1025;
    fail_assertion("non-positive loop bound");
    _jump1025:;
    // Computing bound for e
    int64_t _686 = 352;
    if (_686 > 0) 
    goto _jump1026;
    fail_assertion("non-positive loop bound");
    _jump1026:;
    _683 = 0;
    int64_t _687 = 0; // e
    int64_t _688 = 0; // d
    int64_t _689 = 0; // c
    _jump1027:; // Begin body of loop
    _683 += _687;
    _687++;
    if (_687 < _686)
    goto _jump1027;
    _687 = 0;
    _688++;
    if (_688 < _685)
    goto _jump1027;
    _688 = 0;
    _689++;
    if (_689 < _684)
    goto _jump1027;
    // End body of loop
    _682 = _683;
    goto _jump1028;
    _jump1023:;
    int64_t _690 = 558;
    int64_t _691 = -_690;
    _682 = _691;
    _jump1028:;
    if (_682 > 0) 
    goto _jump1029;
    fail_assertion("non-positive loop bound");
    _jump1029:;
    // Computing bound for d
    int64_t _692 = 24;
    int64_t _693 = -_692;
    int64_t _694 = -_693;
    if (_694 > 0) 
    goto _jump1030;
    fail_assertion("non-positive loop bound");
    _jump1030:;
    // Computing bound for e
    _a2_int64_t _695;
    // Computing bound for c
    int64_t _696 = 988;
    _695.d0 = _696;
    if (_696 > 0) 
    goto _jump1031;
    fail_assertion("non-positive loop bound");
    _jump1031:;
    // Computing bound for d
    int64_t _697 = 905;
    _695.d1 = _697;
    if (_697 > 0) 
    goto _jump1032;
    fail_assertion("non-positive loop bound");
    _jump1032:;
    // Computing total size of heap memory to allocate
    int64_t _698 = 1;
    _698 *= _696;
    _698 *= _697;
    _698 *= sizeof(int64_t);
    _695.data = jpl_alloc(_698);
    int64_t _699 = 0; // d
    int64_t _700 = 0; // c
    _jump1033:; // Begin body of loop
    int64_t _701 = 0;
    _701 *= _695.d0;
    _701 += _700;
    _701 *= _695.d1;
    _701 += _699;
    _695.data[_701] = _700;
    _699++;
    if (_699 < _697)
    goto _jump1033;
    _699 = 0;
    _700++;
    if (_700 < _696)
    goto _jump1033;
    // End body of loop
    int64_t _702 = 865;
    int64_t _703;
    // Computing bound for c
    int64_t _704 = 50;
    int64_t _705 = 217;
    int64_t _706 = _704 * _705;
    if (_706 > 0) 
    goto _jump1034;
    fail_assertion("non-positive loop bound");
    _jump1034:;
    // Computing bound for d
    int64_t _707 = 787;
    if (_707 > 0) 
    goto _jump1035;
    fail_assertion("non-positive loop bound");
    _jump1035:;
    _703 = 0;
    int64_t _708 = 0; // d
    int64_t _709 = 0; // c
    _jump1036:; // Begin body of loop
    bool _710 = true;
    int64_t _711;
    if (!_710)
    goto _jump1037;
    int64_t _712 = 640;
    _711 = _712;
    goto _jump1038;
    _jump1037:;
    _711 = _708;
    _jump1038:;
    _703 += _711;
    _708++;
    if (_708 < _707)
    goto _jump1036;
    _708 = 0;
    _709++;
    if (_709 < _706)
    goto _jump1036;
    // End body of loop
    if (_702 >= 0)
    goto _jump1039;
    fail_assertion("negative array index");
    _jump1039:;
    if (_702 < _695.d0)
    goto _jump1040;
    fail_assertion("index too large");
    _jump1040:;
    if (_703 >= 0)
    goto _jump1041;
    fail_assertion("negative array index");
    _jump1041:;
    if (_703 < _695.d1)
    goto _jump1042;
    fail_assertion("index too large");
    _jump1042:;
    int64_t _713 = 0;
    _713 *= _695.d0;
    _713 += _702;
    _713 *= _695.d1;
    _713 += _703;
    int64_t _714 = _695.data[_713];
    if (_714 > 0) 
    goto _jump1043;
    fail_assertion("non-positive loop bound");
    _jump1043:;
    _680 = 0;
    int64_t _715 = 0; // e
    int64_t _716 = 0; // d
    int64_t _717 = 0; // c
    _jump1044:; // Begin body of loop
    int64_t _718 = 551;
    _680 += _718;
    _715++;
    if (_715 < _714)
    goto _jump1044;
    _715 = 0;
    _716++;
    if (_716 < _694)
    goto _jump1044;
    _716 = 0;
    _717++;
    if (_717 < _682)
    goto _jump1044;
    // End body of loop
    _679 = _680;
    goto _jump1045;
    _jump1022:;
    int64_t _719;
    // Computing bound for c
    int64_t _720 = 993;
    if (_720 > 0) 
    goto _jump1046;
    fail_assertion("non-positive loop bound");
    _jump1046:;
    // Computing bound for d
    int64_t _721;
    // Computing bound for c
    int64_t _722 = 188;
    if (_722 > 0) 
    goto _jump1047;
    fail_assertion("non-positive loop bound");
    _jump1047:;
    // Computing bound for d
    int64_t _723 = 957;
    int64_t _724 = -_723;
    if (_724 > 0) 
    goto _jump1048;
    fail_assertion("non-positive loop bound");
    _jump1048:;
    _721 = 0;
    int64_t _725 = 0; // d
    int64_t _726 = 0; // c
    _jump1049:; // Begin body of loop
    _721 += _725;
    _725++;
    if (_725 < _724)
    goto _jump1049;
    _725 = 0;
    _726++;
    if (_726 < _722)
    goto _jump1049;
    // End body of loop
    if (_721 > 0) 
    goto _jump1050;
    fail_assertion("non-positive loop bound");
    _jump1050:;
    // Computing bound for e
    int64_t _727 = 699;
    int64_t _728 = -_727;
    if (_728 > 0) 
    goto _jump1051;
    fail_assertion("non-positive loop bound");
    _jump1051:;
    _719 = 0;
    int64_t _729 = 0; // e
    int64_t _730 = 0; // d
    int64_t _731 = 0; // c
    _jump1052:; // Begin body of loop
    _719 += _730;
    _729++;
    if (_729 < _728)
    goto _jump1052;
    _729 = 0;
    _730++;
    if (_730 < _721)
    goto _jump1052;
    _730 = 0;
    _731++;
    if (_731 < _720)
    goto _jump1052;
    // End body of loop
    int64_t _732 = -_719;
    _679 = _732;
    _jump1045:;
    bool _733 = false;
    bool _734;
    if (!_733)
    goto _jump1053;
    bool _735 = false;
    bool _736 = !_735;
    _734 = _736;
    goto _jump1054;
    _jump1053:;
    int64_t _737;
    // Computing bound for c
    int64_t _738 = 438;
    if (_738 > 0) 
    goto _jump1055;
    fail_assertion("non-positive loop bound");
    _jump1055:;
    // Computing bound for d
    int64_t _739 = 586;
    if (_739 > 0) 
    goto _jump1056;
    fail_assertion("non-positive loop bound");
    _jump1056:;
    _737 = 0;
    int64_t _740 = 0; // d
    int64_t _741 = 0; // c
    _jump1057:; // Begin body of loop
    int64_t _742 = 246;
    _737 += _742;
    _740++;
    if (_740 < _739)
    goto _jump1057;
    _740 = 0;
    _741++;
    if (_741 < _738)
    goto _jump1057;
    // End body of loop
    int64_t _743 = 325;
    bool _744 = _737 < _743;
    _734 = _744;
    _jump1054:;
    bool _745 = !_734;
    int64_t _746;
    if (!_745)
    goto _jump1058;
    int64_t _747 = 622;
    _746 = _747;
    goto _jump1059;
    _jump1058:;
    int64_t _748;
    // Computing bound for c
    int64_t _749;
    // Computing bound for c
    _a1_int64_t _750;
    // Computing bound for c
    int64_t _751 = 80;
    _750.d0 = _751;
    if (_751 > 0) 
    goto _jump1060;
    fail_assertion("non-positive loop bound");
    _jump1060:;
    // Computing total size of heap memory to allocate
    int64_t _752 = 1;
    _752 *= _751;
    _752 *= sizeof(int64_t);
    _750.data = jpl_alloc(_752);
    int64_t _753 = 0; // c
    _jump1061:; // Begin body of loop
    int64_t _754 = 898;
    int64_t _755 = 0;
    _755 *= _750.d0;
    _755 += _753;
    _750.data[_755] = _754;
    _753++;
    if (_753 < _751)
    goto _jump1061;
    // End body of loop
    int64_t _756 = 895;
    if (_756 >= 0)
    goto _jump1062;
    fail_assertion("negative array index");
    _jump1062:;
    if (_756 < _750.d0)
    goto _jump1063;
    fail_assertion("index too large");
    _jump1063:;
    int64_t _757 = 0;
    _757 *= _750.d0;
    _757 += _756;
    int64_t _758 = _750.data[_757];
    if (_758 > 0) 
    goto _jump1064;
    fail_assertion("non-positive loop bound");
    _jump1064:;
    // Computing bound for d
    int64_t _759 = 601;
    int64_t _760 = -_759;
    int64_t _761;
    // Computing bound for c
    int64_t _762 = 922;
    if (_762 > 0) 
    goto _jump1065;
    fail_assertion("non-positive loop bound");
    _jump1065:;
    _761 = 0;
    int64_t _763 = 0; // c
    _jump1066:; // Begin body of loop
    int64_t _764 = 515;
    _761 += _764;
    _763++;
    if (_763 < _762)
    goto _jump1066;
    // End body of loop
    int64_t _765 = _760 % _761;
    if (_765 > 0) 
    goto _jump1067;
    fail_assertion("non-positive loop bound");
    _jump1067:;
    // Computing bound for e
    int64_t _766 = 28;
    int64_t _767 = -_766;
    if (_767 > 0) 
    goto _jump1068;
    fail_assertion("non-positive loop bound");
    _jump1068:;
    _749 = 0;
    int64_t _768 = 0; // e
    int64_t _769 = 0; // d
    int64_t _770 = 0; // c
    _jump1069:; // Begin body of loop
    int64_t _771;
    // Computing bound for f
    if (_769 > 0) 
    goto _jump1070;
    fail_assertion("non-positive loop bound");
    _jump1070:;
    _771 = 0;
    int64_t _772 = 0; // f
    _jump1071:; // Begin body of loop
    _771 += _769;
    _772++;
    if (_772 < _769)
    goto _jump1071;
    // End body of loop
    int64_t _773 = -_771;
    _749 += _773;
    _768++;
    if (_768 < _767)
    goto _jump1069;
    _768 = 0;
    _769++;
    if (_769 < _765)
    goto _jump1069;
    _769 = 0;
    _770++;
    if (_770 < _758)
    goto _jump1069;
    // End body of loop
    if (_749 > 0) 
    goto _jump1072;
    fail_assertion("non-positive loop bound");
    _jump1072:;
    _748 = 0;
    int64_t _774 = 0; // c
    _jump1073:; // Begin body of loop
    int64_t _775 = 579;
    int64_t _776 = 612;
    _a1_int64_t _777;
    _777.d0 = 3;
    _777.data = jpl_alloc(sizeof(int64_t) * 3);
    _777.data[0] = _774;
    _777.data[1] = _775;
    _777.data[2] = _776;
    int64_t _778 = -_774;
    if (_778 >= 0)
    goto _jump1074;
    fail_assertion("negative array index");
    _jump1074:;
    if (_778 < _777.d0)
    goto _jump1075;
    fail_assertion("index too large");
    _jump1075:;
    int64_t _779 = 0;
    _779 *= _777.d0;
    _779 += _778;
    int64_t _780 = _777.data[_779];
    int64_t _781 = -_780;
    _748 += _781;
    _774++;
    if (_774 < _749)
    goto _jump1073;
    // End body of loop
    _746 = _748;
    _jump1059:;
    if (_679 >= 0)
    goto _jump1076;
    fail_assertion("negative array index");
    _jump1076:;
    if (_679 < _607.d0)
    goto _jump1077;
    fail_assertion("index too large");
    _jump1077:;
    if (_746 >= 0)
    goto _jump1078;
    fail_assertion("negative array index");
    _jump1078:;
    if (_746 < _607.d1)
    goto _jump1079;
    fail_assertion("index too large");
    _jump1079:;
    int64_t _782 = 0;
    _782 *= _607.d0;
    _782 += _679;
    _782 *= _607.d1;
    _782 += _746;
    int64_t _783 = _607.data[_782];
    if (_783 > 0) 
    goto _jump1080;
    fail_assertion("non-positive loop bound");
    _jump1080:;
    // Computing bound for e
    int64_t _784;
    // Computing bound for c
    bool _786 = false;
    bool _785 = _786;
    if (0 == _786)
    goto _jump1081;
    bool _789 = false;
    bool _788 = _789;
    if (0 != _789)
    goto _jump1082;
    bool _790 = false;
    _788 = _790;
    _jump1082:;
    bool _787 = _788;
    if (0 != _788)
    goto _jump1083;
    bool _791 = true;
    bool _792;
    if (!_791)
    goto _jump1084;
    double _793 = 84.0;
    double _794 = 65.0;
    bool _795 = _793 == _794;
    _792 = _795;
    goto _jump1085;
    _jump1084:;
    int64_t _796 = 228;
    int64_t _797 = 292;
    bool _798 = _796 != _797;
    _792 = _798;
    _jump1085:;
    _787 = _792;
    _jump1083:;
    _785 = _787;
    _jump1081:;
    int64_t _799;
    if (!_785)
    goto _jump1086;
    int64_t _800 = 529;
    _799 = _800;
    goto _jump1087;
    _jump1086:;
    double _801;
    // Computing bound for c
    int64_t _802 = 620;
    int64_t _803 = -_802;
    if (_803 > 0) 
    goto _jump1088;
    fail_assertion("non-positive loop bound");
    _jump1088:;
    _801 = 0;
    int64_t _804 = 0; // c
    _jump1089:; // Begin body of loop
    double _805;
    // Computing bound for d
    if (_804 > 0) 
    goto _jump1090;
    fail_assertion("non-positive loop bound");
    _jump1090:;
    // Computing bound for e
    if (_804 > 0) 
    goto _jump1091;
    fail_assertion("non-positive loop bound");
    _jump1091:;
    _805 = 0;
    int64_t _806 = 0; // e
    int64_t _807 = 0; // d
    _jump1092:; // Begin body of loop
    double _808 = 42.0;
    _805 += _808;
    _806++;
    if (_806 < _804)
    goto _jump1092;
    _806 = 0;
    _807++;
    if (_807 < _804)
    goto _jump1092;
    // End body of loop
    _801 += _805;
    _804++;
    if (_804 < _803)
    goto _jump1089;
    // End body of loop
    double _809 = 61.0;
    bool _810 = _801 <= _809;
    int64_t _811;
    if (!_810)
    goto _jump1093;
    int64_t _812 = 175;
    int64_t _813 = 385;
    int64_t _814 = _812 % _813;
    _811 = _814;
    goto _jump1094;
    _jump1093:;
    int64_t _815;
    // Computing bound for c
    int64_t _816 = 388;
    int64_t _817 = -_816;
    int64_t _818 = -_817;
    if (_818 > 0) 
    goto _jump1095;
    fail_assertion("non-positive loop bound");
    _jump1095:;
    // Computing bound for d
    int64_t _819 = 192;
    if (_819 > 0) 
    goto _jump1096;
    fail_assertion("non-positive loop bound");
    _jump1096:;
    // Computing bound for e
    int64_t _820 = 313;
    if (_820 > 0) 
    goto _jump1097;
    fail_assertion("non-positive loop bound");
    _jump1097:;
    _815 = 0;
    int64_t _821 = 0; // e
    int64_t _822 = 0; // d
    int64_t _823 = 0; // c
    _jump1098:; // Begin body of loop
    int64_t _824 = 708;
    int64_t _825 = _824 % _823;
    int64_t _826 = _823 % _825;
    _815 += _826;
    _821++;
    if (_821 < _820)
    goto _jump1098;
    _821 = 0;
    _822++;
    if (_822 < _819)
    goto _jump1098;
    _822 = 0;
    _823++;
    if (_823 < _818)
    goto _jump1098;
    // End body of loop
    _811 = _815;
    _jump1094:;
    _799 = _811;
    _jump1087:;
    if (_799 > 0) 
    goto _jump1099;
    fail_assertion("non-positive loop bound");
    _jump1099:;
    // Computing bound for d
    int64_t _827 = 712;
    if (_827 > 0) 
    goto _jump1100;
    fail_assertion("non-positive loop bound");
    _jump1100:;
    // Computing bound for e
    int64_t _828 = 98;
    _a1_int64_t _829;
    _829.d0 = 1;
    _829.data = jpl_alloc(sizeof(int64_t) * 1);
    _829.data[0] = _828;
    bool _831 = true;
    bool _830 = _831;
    if (0 != _831)
    goto _jump1101;
    bool _832 = true;
    _830 = _832;
    _jump1101:;
    int64_t _833;
    if (!_830)
    goto _jump1102;
    int64_t _834 = 513;
    _833 = _834;
    goto _jump1103;
    _jump1102:;
    int64_t _835 = 138;
    int64_t _836 = -_835;
    _833 = _836;
    _jump1103:;
    if (_833 >= 0)
    goto _jump1104;
    fail_assertion("negative array index");
    _jump1104:;
    if (_833 < _829.d0)
    goto _jump1105;
    fail_assertion("index too large");
    _jump1105:;
    int64_t _837 = 0;
    _837 *= _829.d0;
    _837 += _833;
    int64_t _838 = _829.data[_837];
    if (_838 > 0) 
    goto _jump1106;
    fail_assertion("non-positive loop bound");
    _jump1106:;
    _784 = 0;
    int64_t _839 = 0; // e
    int64_t _840 = 0; // d
    int64_t _841 = 0; // c
    _jump1107:; // Begin body of loop
    _784 += _840;
    _839++;
    if (_839 < _838)
    goto _jump1107;
    _839 = 0;
    _840++;
    if (_840 < _827)
    goto _jump1107;
    _840 = 0;
    _841++;
    if (_841 < _799)
    goto _jump1107;
    // End body of loop
    if (_784 > 0) 
    goto _jump1108;
    fail_assertion("non-positive loop bound");
    _jump1108:;
    _407 = 0;
    int64_t _842 = 0; // e
    int64_t _843 = 0; // d
    int64_t _844 = 0; // c
    _jump1109:; // Begin body of loop
    double _845 = 98.0;
    _407 += _845;
    _842++;
    if (_842 < _784)
    goto _jump1109;
    _842 = 0;
    _843++;
    if (_843 < _783)
    goto _jump1109;
    _843 = 0;
    _844++;
    if (_844 < _485)
    goto _jump1109;
    // End body of loop
    _a2_rgba _846 = read_image("f.png");
    bool _848 = true;
    bool _847 = _848;
    if (0 != _848)
    goto _jump2299;
    _a1_double _849;
    // Computing bound for g
    int64_t _850 = 681;
    int64_t _851 = -_850;
    _849.d0 = _851;
    if (_851 > 0) 
    goto _jump2300;
    fail_assertion("non-positive loop bound");
    _jump2300:;
    // Computing total size of heap memory to allocate
    int64_t _852 = 1;
    _852 *= _851;
    _852 *= sizeof(double);
    _849.data = jpl_alloc(_852);
    int64_t _853 = 0; // g
    _jump2301:; // Begin body of loop
    double _854;
    // Computing bound for h
    if (_853 > 0) 
    goto _jump2302;
    fail_assertion("non-positive loop bound");
    _jump2302:;
    // Computing bound for i
    int64_t _855;
    // Computing bound for h
    int64_t _856 = 991;
    if (_856 > 0) 
    goto _jump2303;
    fail_assertion("non-positive loop bound");
    _jump2303:;
    // Computing bound for i
    if (_853 > 0) 
    goto _jump2304;
    fail_assertion("non-positive loop bound");
    _jump2304:;
    // Computing bound for j
    if (_853 > 0) 
    goto _jump2305;
    fail_assertion("non-positive loop bound");
    _jump2305:;
    _855 = 0;
    int64_t _857 = 0; // j
    int64_t _858 = 0; // i
    int64_t _859 = 0; // h
    _jump2306:; // Begin body of loop
    _855 += _853;
    _857++;
    if (_857 < _853)
    goto _jump2306;
    _857 = 0;
    _858++;
    if (_858 < _853)
    goto _jump2306;
    _858 = 0;
    _859++;
    if (_859 < _856)
    goto _jump2306;
    // End body of loop
    if (_855 > 0) 
    goto _jump2307;
    fail_assertion("non-positive loop bound");
    _jump2307:;
    // Computing bound for j
    if (_853 > 0) 
    goto _jump2308;
    fail_assertion("non-positive loop bound");
    _jump2308:;
    _854 = 0;
    int64_t _860 = 0; // j
    int64_t _861 = 0; // i
    int64_t _862 = 0; // h
    _jump2309:; // Begin body of loop
    _854 += _407;
    _860++;
    if (_860 < _853)
    goto _jump2309;
    _860 = 0;
    _861++;
    if (_861 < _855)
    goto _jump2309;
    _861 = 0;
    _862++;
    if (_862 < _853)
    goto _jump2309;
    // End body of loop
    int64_t _863 = 0;
    _863 *= _849.d0;
    _863 += _853;
    _849.data[_863] = _854;
    _853++;
    if (_853 < _851)
    goto _jump2301;
    // End body of loop
    int64_t _864 = 125;
    if (_864 >= 0)
    goto _jump2310;
    fail_assertion("negative array index");
    _jump2310:;
    if (_864 < _849.d0)
    goto _jump2311;
    fail_assertion("index too large");
    _jump2311:;
    int64_t _865 = 0;
    _865 *= _849.d0;
    _865 += _864;
    double _866 = _849.data[_865];
    double _867 = 67.0;
    double _868 = -_867;
    bool _869 = _866 == _868;
    _847 = _869;
    _jump2299:;
    _a1_double _870;
    if (!_847)
    goto _jump2312;
    _a1_double _871;
    // Computing bound for g
    int64_t _872;
    // Computing bound for g
    _a2_int64_t _873;
    // Computing bound for g
    int64_t _874 = 703;
    int64_t _875 = -_874;
    int64_t _876 = -_875;
    _873.d0 = _876;
    if (_876 > 0) 
    goto _jump2313;
    fail_assertion("non-positive loop bound");
    _jump2313:;
    // Computing bound for h
    int64_t _877 = 607;
    _873.d1 = _877;
    if (_877 > 0) 
    goto _jump2314;
    fail_assertion("non-positive loop bound");
    _jump2314:;
    // Computing total size of heap memory to allocate
    int64_t _878 = 1;
    _878 *= _876;
    _878 *= _877;
    _878 *= sizeof(int64_t);
    _873.data = jpl_alloc(_878);
    int64_t _879 = 0; // h
    int64_t _880 = 0; // g
    _jump2315:; // Begin body of loop
    int64_t _881 = 0;
    _881 *= _873.d0;
    _881 += _880;
    _881 *= _873.d1;
    _881 += _879;
    _873.data[_881] = _879;
    _879++;
    if (_879 < _877)
    goto _jump2315;
    _879 = 0;
    _880++;
    if (_880 < _876)
    goto _jump2315;
    // End body of loop
    bool _883 = true;
    bool _882 = _883;
    if (0 == _883)
    goto _jump2316;
    bool _884 = false;
    _882 = _884;
    _jump2316:;
    int64_t _885;
    if (!_882)
    goto _jump2317;
    int64_t _886;
    // Computing bound for g
    int64_t _887 = 861;
    if (_887 > 0) 
    goto _jump2318;
    fail_assertion("non-positive loop bound");
    _jump2318:;
    // Computing bound for h
    int64_t _888 = 240;
    if (_888 > 0) 
    goto _jump2319;
    fail_assertion("non-positive loop bound");
    _jump2319:;
    _886 = 0;
    int64_t _889 = 0; // h
    int64_t _890 = 0; // g
    _jump2320:; // Begin body of loop
    _886 += _889;
    _889++;
    if (_889 < _888)
    goto _jump2320;
    _889 = 0;
    _890++;
    if (_890 < _887)
    goto _jump2320;
    // End body of loop
    _885 = _886;
    goto _jump2321;
    _jump2317:;
    int64_t _891 = 168;
    int64_t _892 = -_891;
    _885 = _892;
    _jump2321:;
    int64_t _893;
    // Computing bound for g
    int64_t _894 = 443;
    if (_894 > 0) 
    goto _jump2322;
    fail_assertion("non-positive loop bound");
    _jump2322:;
    // Computing bound for h
    bool _895 = false;
    int64_t _896;
    if (!_895)
    goto _jump2323;
    int64_t _897 = 932;
    _896 = _897;
    goto _jump2324;
    _jump2323:;
    int64_t _898 = 785;
    _896 = _898;
    _jump2324:;
    if (_896 > 0) 
    goto _jump2325;
    fail_assertion("non-positive loop bound");
    _jump2325:;
    // Computing bound for i
    int64_t _899 = 354;
    if (_899 > 0) 
    goto _jump2326;
    fail_assertion("non-positive loop bound");
    _jump2326:;
    _893 = 0;
    int64_t _900 = 0; // i
    int64_t _901 = 0; // h
    int64_t _902 = 0; // g
    _jump2327:; // Begin body of loop
    bool _903 = true;
    int64_t _904;
    if (!_903)
    goto _jump2328;
    int64_t _905 = 807;
    _904 = _905;
    goto _jump2329;
    _jump2328:;
    _904 = _902;
    _jump2329:;
    _893 += _904;
    _900++;
    if (_900 < _899)
    goto _jump2327;
    _900 = 0;
    _901++;
    if (_901 < _896)
    goto _jump2327;
    _901 = 0;
    _902++;
    if (_902 < _894)
    goto _jump2327;
    // End body of loop
    int64_t _906 = -_893;
    if (_885 >= 0)
    goto _jump2330;
    fail_assertion("negative array index");
    _jump2330:;
    if (_885 < _873.d0)
    goto _jump2331;
    fail_assertion("index too large");
    _jump2331:;
    if (_906 >= 0)
    goto _jump2332;
    fail_assertion("negative array index");
    _jump2332:;
    if (_906 < _873.d1)
    goto _jump2333;
    fail_assertion("index too large");
    _jump2333:;
    int64_t _907 = 0;
    _907 *= _873.d0;
    _907 += _885;
    _907 *= _873.d1;
    _907 += _906;
    int64_t _908 = _873.data[_907];
    if (_908 > 0) 
    goto _jump2334;
    fail_assertion("non-positive loop bound");
    _jump2334:;
    // Computing bound for h
    bool _909 = false;
    int64_t _910;
    if (!_909)
    goto _jump2335;
    int64_t _911 = 89;
    _910 = _911;
    goto _jump2336;
    _jump2335:;
    int64_t _912 = 771;
    _910 = _912;
    _jump2336:;
    int64_t _913 = -_910;
    int64_t _914 = -_913;
    int64_t _915 = -_914;
    if (_915 > 0) 
    goto _jump2337;
    fail_assertion("non-positive loop bound");
    _jump2337:;
    // Computing bound for i
    _a1_int64_t _916;
    // Computing bound for g
    int64_t _917 = 205;
    _916.d0 = _917;
    if (_917 > 0) 
    goto _jump2338;
    fail_assertion("non-positive loop bound");
    _jump2338:;
    // Computing total size of heap memory to allocate
    int64_t _918 = 1;
    _918 *= _917;
    _918 *= sizeof(int64_t);
    _916.data = jpl_alloc(_918);
    int64_t _919 = 0; // g
    _jump2339:; // Begin body of loop
    int64_t _920 = 42;
    int64_t _921 = -_920;
    int64_t _922 = _921 - _919;
    int64_t _923 = 0;
    _923 *= _916.d0;
    _923 += _919;
    _916.data[_923] = _922;
    _919++;
    if (_919 < _917)
    goto _jump2339;
    // End body of loop
    int64_t _924;
    // Computing bound for g
    int64_t _925 = 422;
    int64_t _926 = 18;
    int64_t _927 = _925 * _926;
    int64_t _928 = 191;
    int64_t _929 = _927 - _928;
    if (_929 > 0) 
    goto _jump2340;
    fail_assertion("non-positive loop bound");
    _jump2340:;
    // Computing bound for h
    int64_t _930 = 676;
    if (_930 > 0) 
    goto _jump2341;
    fail_assertion("non-positive loop bound");
    _jump2341:;
    // Computing bound for i
    int64_t _931 = 202;
    int64_t _932 = 425;
    int64_t _933 = -_932;
    int64_t _934 = _931 / _933;
    if (_934 > 0) 
    goto _jump2342;
    fail_assertion("non-positive loop bound");
    _jump2342:;
    _924 = 0;
    int64_t _935 = 0; // i
    int64_t _936 = 0; // h
    int64_t _937 = 0; // g
    _jump2343:; // Begin body of loop
    _a3_int64_t _938;
    // Computing bound for j
    int64_t _939 = 531;
    _938.d0 = _939;
    if (_939 > 0) 
    goto _jump2344;
    fail_assertion("non-positive loop bound");
    _jump2344:;
    // Computing bound for k
    _938.d1 = _935;
    if (_935 > 0) 
    goto _jump2345;
    fail_assertion("non-positive loop bound");
    _jump2345:;
    // Computing bound for l
    int64_t _940 = 772;
    _938.d2 = _940;
    if (_940 > 0) 
    goto _jump2346;
    fail_assertion("non-positive loop bound");
    _jump2346:;
    // Computing total size of heap memory to allocate
    int64_t _941 = 1;
    _941 *= _939;
    _941 *= _935;
    _941 *= _940;
    _941 *= sizeof(int64_t);
    _938.data = jpl_alloc(_941);
    int64_t _942 = 0; // l
    int64_t _943 = 0; // k
    int64_t _944 = 0; // j
    _jump2347:; // Begin body of loop
    int64_t _945 = 0;
    _945 *= _938.d0;
    _945 += _944;
    _945 *= _938.d1;
    _945 += _943;
    _945 *= _938.d2;
    _945 += _942;
    _938.data[_945] = _943;
    _942++;
    if (_942 < _940)
    goto _jump2347;
    _942 = 0;
    _943++;
    if (_943 < _935)
    goto _jump2347;
    _943 = 0;
    _944++;
    if (_944 < _939)
    goto _jump2347;
    // End body of loop
    int64_t _946;
    // Computing bound for j
    int64_t _947 = 307;
    if (_947 > 0) 
    goto _jump2348;
    fail_assertion("non-positive loop bound");
    _jump2348:;
    // Computing bound for k
    if (_937 > 0) 
    goto _jump2349;
    fail_assertion("non-positive loop bound");
    _jump2349:;
    _946 = 0;
    int64_t _948 = 0; // k
    int64_t _949 = 0; // j
    _jump2350:; // Begin body of loop
    _946 += _949;
    _948++;
    if (_948 < _937)
    goto _jump2350;
    _948 = 0;
    _949++;
    if (_949 < _947)
    goto _jump2350;
    // End body of loop
    bool _950 = true;
    int64_t _951;
    if (!_950)
    goto _jump2351;
    int64_t _952 = 699;
    _951 = _952;
    goto _jump2352;
    _jump2351:;
    _951 = _936;
    _jump2352:;
    if (_937 >= 0)
    goto _jump2353;
    fail_assertion("negative array index");
    _jump2353:;
    if (_937 < _938.d0)
    goto _jump2354;
    fail_assertion("index too large");
    _jump2354:;
    if (_946 >= 0)
    goto _jump2355;
    fail_assertion("negative array index");
    _jump2355:;
    if (_946 < _938.d1)
    goto _jump2356;
    fail_assertion("index too large");
    _jump2356:;
    if (_951 >= 0)
    goto _jump2357;
    fail_assertion("negative array index");
    _jump2357:;
    if (_951 < _938.d2)
    goto _jump2358;
    fail_assertion("index too large");
    _jump2358:;
    int64_t _953 = 0;
    _953 *= _938.d0;
    _953 += _937;
    _953 *= _938.d1;
    _953 += _946;
    _953 *= _938.d2;
    _953 += _951;
    int64_t _954 = _938.data[_953];
    _924 += _954;
    _935++;
    if (_935 < _934)
    goto _jump2343;
    _935 = 0;
    _936++;
    if (_936 < _930)
    goto _jump2343;
    _936 = 0;
    _937++;
    if (_937 < _929)
    goto _jump2343;
    // End body of loop
    if (_924 >= 0)
    goto _jump2359;
    fail_assertion("negative array index");
    _jump2359:;
    if (_924 < _916.d0)
    goto _jump2360;
    fail_assertion("index too large");
    _jump2360:;
    int64_t _955 = 0;
    _955 *= _916.d0;
    _955 += _924;
    int64_t _956 = _916.data[_955];
    if (_956 > 0) 
    goto _jump2361;
    fail_assertion("non-positive loop bound");
    _jump2361:;
    _872 = 0;
    int64_t _957 = 0; // i
    int64_t _958 = 0; // h
    int64_t _959 = 0; // g
    _jump2362:; // Begin body of loop
    int64_t _960;
    // Computing bound for j
    if (_958 > 0) 
    goto _jump2363;
    fail_assertion("non-positive loop bound");
    _jump2363:;
    _960 = 0;
    int64_t _961 = 0; // j
    _jump2364:; // Begin body of loop
    _960 += _957;
    _961++;
    if (_961 < _958)
    goto _jump2364;
    // End body of loop
    _872 += _960;
    _957++;
    if (_957 < _956)
    goto _jump2362;
    _957 = 0;
    _958++;
    if (_958 < _915)
    goto _jump2362;
    _958 = 0;
    _959++;
    if (_959 < _908)
    goto _jump2362;
    // End body of loop
    _871.d0 = _872;
    if (_872 > 0) 
    goto _jump2365;
    fail_assertion("non-positive loop bound");
    _jump2365:;
    // Computing total size of heap memory to allocate
    int64_t _962 = 1;
    _962 *= _872;
    _962 *= sizeof(double);
    _871.data = jpl_alloc(_962);
    int64_t _963 = 0; // g
    _jump2366:; // Begin body of loop
    double _964 = 91.0;
    int64_t _965 = 0;
    _965 *= _871.d0;
    _965 += _963;
    _871.data[_965] = _964;
    _963++;
    if (_963 < _872)
    goto _jump2366;
    // End body of loop
    _870 = _871;
    goto _jump2367;
    _jump2312:;
    bool _966 = false;
    _a1_double _967;
    if (!_966)
    goto _jump2368;
    _a2__a1_double _968;
    // Computing bound for g
    bool _969 = true;
    int64_t _970;
    if (!_969)
    goto _jump2369;
    int64_t _971 = 757;
    int64_t _972 = -_971;
    int64_t _973 = -_972;
    _970 = _973;
    goto _jump2370;
    _jump2369:;
    int64_t _974 = 219;
    int64_t _975 = -_974;
    _970 = _975;
    _jump2370:;
    _968.d0 = _970;
    if (_970 > 0) 
    goto _jump2371;
    fail_assertion("non-positive loop bound");
    _jump2371:;
    // Computing bound for h
    int64_t _976;
    // Computing bound for g
    int64_t _977 = 475;
    int64_t _978 = -_977;
    if (_978 > 0) 
    goto _jump2372;
    fail_assertion("non-positive loop bound");
    _jump2372:;
    _976 = 0;
    int64_t _979 = 0; // g
    _jump2373:; // Begin body of loop
    int64_t _980 = 103;
    _976 += _980;
    _979++;
    if (_979 < _978)
    goto _jump2373;
    // End body of loop
    int64_t _981 = 949;
    int64_t _982 = _976 * _981;
    _968.d1 = _982;
    if (_982 > 0) 
    goto _jump2374;
    fail_assertion("non-positive loop bound");
    _jump2374:;
    // Computing total size of heap memory to allocate
    int64_t _983 = 1;
    _983 *= _970;
    _983 *= _982;
    _983 *= sizeof(_a1_double);
    _968.data = jpl_alloc(_983);
    int64_t _984 = 0; // h
    int64_t _985 = 0; // g
    _jump2375:; // Begin body of loop
    double _986;
    // Computing bound for i
    if (_984 > 0) 
    goto _jump2376;
    fail_assertion("non-positive loop bound");
    _jump2376:;
    _986 = 0;
    int64_t _987 = 0; // i
    _jump2377:; // Begin body of loop
    double _988 = -_407;
    _986 += _988;
    _987++;
    if (_987 < _984)
    goto _jump2377;
    // End body of loop
    _a1_double _989;
    _989.d0 = 2;
    _989.data = jpl_alloc(sizeof(double) * 2);
    _989.data[0] = _407;
    _989.data[1] = _986;
    int64_t _990 = 0;
    _990 *= _968.d0;
    _990 += _985;
    _990 *= _968.d1;
    _990 += _984;
    _968.data[_990] = _989;
    _984++;
    if (_984 < _982)
    goto _jump2375;
    _984 = 0;
    _985++;
    if (_985 < _970)
    goto _jump2375;
    // End body of loop
    int64_t _991 = 94;
    int64_t _992 = 836;
    int64_t _993 = _991 - _992;
    int64_t _994 = 674;
    if (_993 >= 0)
    goto _jump2378;
    fail_assertion("negative array index");
    _jump2378:;
    if (_993 < _968.d0)
    goto _jump2379;
    fail_assertion("index too large");
    _jump2379:;
    if (_994 >= 0)
    goto _jump2380;
    fail_assertion("negative array index");
    _jump2380:;
    if (_994 < _968.d1)
    goto _jump2381;
    fail_assertion("index too large");
    _jump2381:;
    int64_t _995 = 0;
    _995 *= _968.d0;
    _995 += _993;
    _995 *= _968.d1;
    _995 += _994;
    _a1_double _996 = _968.data[_995];
    _967 = _996;
    goto _jump2382;
    _jump2368:;
    _a1_double _997;
    // Computing bound for g
    _a1_int64_t _998;
    // Computing bound for g
    int64_t _999 = 404;
    int64_t _1000 = 808;
    int64_t _1001 = _999 % _1000;
    int64_t _1002 = -_1001;
    _998.d0 = _1002;
    if (_1002 > 0) 
    goto _jump2383;
    fail_assertion("non-positive loop bound");
    _jump2383:;
    // Computing total size of heap memory to allocate
    int64_t _1003 = 1;
    _1003 *= _1002;
    _1003 *= sizeof(int64_t);
    _998.data = jpl_alloc(_1003);
    int64_t _1004 = 0; // g
    _jump2384:; // Begin body of loop
    int64_t _1005;
    // Computing bound for h
    int64_t _1006 = 677;
    if (_1006 > 0) 
    goto _jump2385;
    fail_assertion("non-positive loop bound");
    _jump2385:;
    // Computing bound for i
    int64_t _1007;
    // Computing bound for h
    if (_1004 > 0) 
    goto _jump2386;
    fail_assertion("non-positive loop bound");
    _jump2386:;
    _1007 = 0;
    int64_t _1008 = 0; // h
    _jump2387:; // Begin body of loop
    _1007 += _1004;
    _1008++;
    if (_1008 < _1004)
    goto _jump2387;
    // End body of loop
    if (_1007 > 0) 
    goto _jump2388;
    fail_assertion("non-positive loop bound");
    _jump2388:;
    _1005 = 0;
    int64_t _1009 = 0; // i
    int64_t _1010 = 0; // h
    _jump2389:; // Begin body of loop
    int64_t _1011 = 156;
    _1005 += _1011;
    _1009++;
    if (_1009 < _1007)
    goto _jump2389;
    _1009 = 0;
    _1010++;
    if (_1010 < _1006)
    goto _jump2389;
    // End body of loop
    int64_t _1012 = 0;
    _1012 *= _998.d0;
    _1012 += _1004;
    _998.data[_1012] = _1005;
    _1004++;
    if (_1004 < _1002)
    goto _jump2384;
    // End body of loop
    int64_t _1013;
    // Computing bound for g
    int64_t _1014 = 961;
    if (_1014 > 0) 
    goto _jump2390;
    fail_assertion("non-positive loop bound");
    _jump2390:;
    // Computing bound for h
    int64_t _1015;
    // Computing bound for g
    int64_t _1016 = 254;
    if (_1016 > 0) 
    goto _jump2391;
    fail_assertion("non-positive loop bound");
    _jump2391:;
    // Computing bound for h
    int64_t _1017 = 245;
    if (_1017 > 0) 
    goto _jump2392;
    fail_assertion("non-positive loop bound");
    _jump2392:;
    _1015 = 0;
    int64_t _1018 = 0; // h
    int64_t _1019 = 0; // g
    _jump2393:; // Begin body of loop
    _1015 += _1018;
    _1018++;
    if (_1018 < _1017)
    goto _jump2393;
    _1018 = 0;
    _1019++;
    if (_1019 < _1016)
    goto _jump2393;
    // End body of loop
    int64_t _1020 = -_1015;
    if (_1020 > 0) 
    goto _jump2394;
    fail_assertion("non-positive loop bound");
    _jump2394:;
    _1013 = 0;
    int64_t _1021 = 0; // h
    int64_t _1022 = 0; // g
    _jump2395:; // Begin body of loop
    int64_t _1023 = 646;
    _1013 += _1023;
    _1021++;
    if (_1021 < _1020)
    goto _jump2395;
    _1021 = 0;
    _1022++;
    if (_1022 < _1014)
    goto _jump2395;
    // End body of loop
    if (_1013 >= 0)
    goto _jump2396;
    fail_assertion("negative array index");
    _jump2396:;
    if (_1013 < _998.d0)
    goto _jump2397;
    fail_assertion("index too large");
    _jump2397:;
    int64_t _1024 = 0;
    _1024 *= _998.d0;
    _1024 += _1013;
    int64_t _1025 = _998.data[_1024];
    _997.d0 = _1025;
    if (_1025 > 0) 
    goto _jump2398;
    fail_assertion("non-positive loop bound");
    _jump2398:;
    // Computing total size of heap memory to allocate
    int64_t _1026 = 1;
    _1026 *= _1025;
    _1026 *= sizeof(double);
    _997.data = jpl_alloc(_1026);
    int64_t _1027 = 0; // g
    _jump2399:; // Begin body of loop
    bool _1028 = true;
    _a2_double _1029;
    if (!_1028)
    goto _jump2400;
    _a2_double _1030;
    // Computing bound for h
    int64_t _1031 = 85;
    _1030.d0 = _1031;
    if (_1031 > 0) 
    goto _jump2401;
    fail_assertion("non-positive loop bound");
    _jump2401:;
    // Computing bound for i
    _1030.d1 = _1027;
    if (_1027 > 0) 
    goto _jump2402;
    fail_assertion("non-positive loop bound");
    _jump2402:;
    // Computing total size of heap memory to allocate
    int64_t _1032 = 1;
    _1032 *= _1031;
    _1032 *= _1027;
    _1032 *= sizeof(double);
    _1030.data = jpl_alloc(_1032);
    int64_t _1033 = 0; // i
    int64_t _1034 = 0; // h
    _jump2403:; // Begin body of loop
    int64_t _1035 = 0;
    _1035 *= _1030.d0;
    _1035 += _1034;
    _1035 *= _1030.d1;
    _1035 += _1033;
    _1030.data[_1035] = _407;
    _1033++;
    if (_1033 < _1027)
    goto _jump2403;
    _1033 = 0;
    _1034++;
    if (_1034 < _1031)
    goto _jump2403;
    // End body of loop
    _1029 = _1030;
    goto _jump2404;
    _jump2400:;
    _a2_double _1036;
    // Computing bound for h
    _1036.d0 = _1027;
    if (_1027 > 0) 
    goto _jump2405;
    fail_assertion("non-positive loop bound");
    _jump2405:;
    // Computing bound for i
    int64_t _1037;
    // Computing bound for h
    int64_t _1038 = 22;
    if (_1038 > 0) 
    goto _jump2406;
    fail_assertion("non-positive loop bound");
    _jump2406:;
    _1037 = 0;
    int64_t _1039 = 0; // h
    _jump2407:; // Begin body of loop
    _1037 += _1039;
    _1039++;
    if (_1039 < _1038)
    goto _jump2407;
    // End body of loop
    _1036.d1 = _1037;
    if (_1037 > 0) 
    goto _jump2408;
    fail_assertion("non-positive loop bound");
    _jump2408:;
    // Computing total size of heap memory to allocate
    int64_t _1040 = 1;
    _1040 *= _1027;
    _1040 *= _1037;
    _1040 *= sizeof(double);
    _1036.data = jpl_alloc(_1040);
    int64_t _1041 = 0; // i
    int64_t _1042 = 0; // h
    _jump2409:; // Begin body of loop
    double _1043 = 92.0;
    int64_t _1044 = 0;
    _1044 *= _1036.d0;
    _1044 += _1042;
    _1044 *= _1036.d1;
    _1044 += _1041;
    _1036.data[_1044] = _1043;
    _1041++;
    if (_1041 < _1037)
    goto _jump2409;
    _1041 = 0;
    _1042++;
    if (_1042 < _1027)
    goto _jump2409;
    // End body of loop
    _1029 = _1036;
    _jump2404:;
    int64_t _1045;
    // Computing bound for h
    int64_t _1046 = 150;
    if (_1046 > 0) 
    goto _jump2410;
    fail_assertion("non-positive loop bound");
    _jump2410:;
    // Computing bound for i
    int64_t _1047 = -_1027;
    int64_t _1048 = -_1047;
    if (_1048 > 0) 
    goto _jump2411;
    fail_assertion("non-positive loop bound");
    _jump2411:;
    // Computing bound for j
    int64_t _1049 = 285;
    if (_1049 > 0) 
    goto _jump2412;
    fail_assertion("non-positive loop bound");
    _jump2412:;
    _1045 = 0;
    int64_t _1050 = 0; // j
    int64_t _1051 = 0; // i
    int64_t _1052 = 0; // h
    _jump2413:; // Begin body of loop
    bool _1053 = _1027 < _1051;
    int64_t _1054;
    if (!_1053)
    goto _jump2414;
    int64_t _1055;
    // Computing bound for k
    if (_1052 > 0) 
    goto _jump2415;
    fail_assertion("non-positive loop bound");
    _jump2415:;
    // Computing bound for l
    if (_1052 > 0) 
    goto _jump2416;
    fail_assertion("non-positive loop bound");
    _jump2416:;
    _1055 = 0;
    int64_t _1056 = 0; // l
    int64_t _1057 = 0; // k
    _jump2417:; // Begin body of loop
    _1055 += _1056;
    _1056++;
    if (_1056 < _1052)
    goto _jump2417;
    _1056 = 0;
    _1057++;
    if (_1057 < _1052)
    goto _jump2417;
    // End body of loop
    _1054 = _1055;
    goto _jump2418;
    _jump2414:;
    int64_t _1058 = -_1050;
    _1054 = _1058;
    _jump2418:;
    _1045 += _1054;
    _1050++;
    if (_1050 < _1049)
    goto _jump2413;
    _1050 = 0;
    _1051++;
    if (_1051 < _1048)
    goto _jump2413;
    _1051 = 0;
    _1052++;
    if (_1052 < _1046)
    goto _jump2413;
    // End body of loop
    if (_1045 >= 0)
    goto _jump2419;
    fail_assertion("negative array index");
    _jump2419:;
    if (_1045 < _1029.d0)
    goto _jump2420;
    fail_assertion("index too large");
    _jump2420:;
    if (_1027 >= 0)
    goto _jump2421;
    fail_assertion("negative array index");
    _jump2421:;
    if (_1027 < _1029.d1)
    goto _jump2422;
    fail_assertion("index too large");
    _jump2422:;
    int64_t _1059 = 0;
    _1059 *= _1029.d0;
    _1059 += _1045;
    _1059 *= _1029.d1;
    _1059 += _1027;
    double _1060 = _1029.data[_1059];
    int64_t _1061 = 0;
    _1061 *= _997.d0;
    _1061 += _1027;
    _997.data[_1061] = _1060;
    _1027++;
    if (_1027 < _1025)
    goto _jump2399;
    // End body of loop
    _967 = _997;
    _jump2382:;
    _870 = _967;
    _jump2367:;
    _a3_double _1062;
    // Computing bound for i
    _a3__a3_int64_t _1063;
    // Computing bound for i
    double _1064 = 14.0;
    bool _1065 = _1064 < _407;
    int64_t _1066;
    if (!_1065)
    goto _jump2423;
    bool _1067 = false;
    int64_t _1068;
    if (!_1067)
    goto _jump2424;
    _1068 = _870.d0;
    goto _jump2425;
    _jump2424:;
    int64_t _1069 = 923;
    _1068 = _1069;
    _jump2425:;
    _1066 = _1068;
    goto _jump2426;
    _jump2423:;
    int64_t _1070 = 715;
    int64_t _1071 = -_1070;
    _1066 = _1071;
    _jump2426:;
    _1063.d0 = _1066;
    if (_1066 > 0) 
    goto _jump2427;
    fail_assertion("non-positive loop bound");
    _jump2427:;
    // Computing bound for j
    _1063.d1 = _870.d0;
    if (_870.d0 > 0) 
    goto _jump2428;
    fail_assertion("non-positive loop bound");
    _jump2428:;
    // Computing bound for k
    int64_t _1072;
    // Computing bound for i
    int64_t _1073 = 310;
    if (_1073 > 0) 
    goto _jump2429;
    fail_assertion("non-positive loop bound");
    _jump2429:;
    // Computing bound for j
    int64_t _1074 = 442;
    if (_1074 > 0) 
    goto _jump2430;
    fail_assertion("non-positive loop bound");
    _jump2430:;
    // Computing bound for k
    if (_870.d0 > 0) 
    goto _jump2431;
    fail_assertion("non-positive loop bound");
    _jump2431:;
    _1072 = 0;
    int64_t _1075 = 0; // k
    int64_t _1076 = 0; // j
    int64_t _1077 = 0; // i
    _jump2432:; // Begin body of loop
    int64_t _1078 = 78;
    _1072 += _1078;
    _1075++;
    if (_1075 < _870.d0)
    goto _jump2432;
    _1075 = 0;
    _1076++;
    if (_1076 < _1074)
    goto _jump2432;
    _1076 = 0;
    _1077++;
    if (_1077 < _1073)
    goto _jump2432;
    // End body of loop
    int64_t _1079 = _1072 % _870.d0;
    _1063.d2 = _1079;
    if (_1079 > 0) 
    goto _jump2433;
    fail_assertion("non-positive loop bound");
    _jump2433:;
    // Computing total size of heap memory to allocate
    int64_t _1080 = 1;
    _1080 *= _1066;
    _1080 *= _870.d0;
    _1080 *= _1079;
    _1080 *= sizeof(_a3_int64_t);
    _1063.data = jpl_alloc(_1080);
    int64_t _1081 = 0; // k
    int64_t _1082 = 0; // j
    int64_t _1083 = 0; // i
    _jump2434:; // Begin body of loop
    _a3_int64_t _1084;
    // Computing bound for l
    _1084.d0 = _1081;
    if (_1081 > 0) 
    goto _jump2435;
    fail_assertion("non-positive loop bound");
    _jump2435:;
    // Computing bound for m
    _1084.d1 = _1081;
    if (_1081 > 0) 
    goto _jump2436;
    fail_assertion("non-positive loop bound");
    _jump2436:;
    // Computing bound for n
    _1084.d2 = _1083;
    if (_1083 > 0) 
    goto _jump2437;
    fail_assertion("non-positive loop bound");
    _jump2437:;
    // Computing total size of heap memory to allocate
    int64_t _1085 = 1;
    _1085 *= _1081;
    _1085 *= _1081;
    _1085 *= _1083;
    _1085 *= sizeof(int64_t);
    _1084.data = jpl_alloc(_1085);
    int64_t _1086 = 0; // n
    int64_t _1087 = 0; // m
    int64_t _1088 = 0; // l
    _jump2438:; // Begin body of loop
    int64_t _1089 = 0;
    _1089 *= _1084.d0;
    _1089 += _1088;
    _1089 *= _1084.d1;
    _1089 += _1087;
    _1089 *= _1084.d2;
    _1089 += _1086;
    _1084.data[_1089] = _1083;
    _1086++;
    if (_1086 < _1083)
    goto _jump2438;
    _1086 = 0;
    _1087++;
    if (_1087 < _1081)
    goto _jump2438;
    _1087 = 0;
    _1088++;
    if (_1088 < _1081)
    goto _jump2438;
    // End body of loop
    int64_t _1090 = 0;
    _1090 *= _1063.d0;
    _1090 += _1083;
    _1090 *= _1063.d1;
    _1090 += _1082;
    _1090 *= _1063.d2;
    _1090 += _1081;
    _1063.data[_1090] = _1084;
    _1081++;
    if (_1081 < _1079)
    goto _jump2434;
    _1081 = 0;
    _1082++;
    if (_1082 < _870.d0)
    goto _jump2434;
    _1082 = 0;
    _1083++;
    if (_1083 < _1066)
    goto _jump2434;
    // End body of loop
    int64_t _1091;
    // Computing bound for i
    int64_t _1092;
    // Computing bound for i
    if (_870.d0 > 0) 
    goto _jump2439;
    fail_assertion("non-positive loop bound");
    _jump2439:;
    _1092 = 0;
    int64_t _1093 = 0; // i
    _jump2440:; // Begin body of loop
    _1092 += _1093;
    _1093++;
    if (_1093 < _870.d0)
    goto _jump2440;
    // End body of loop
    if (_1092 > 0) 
    goto _jump2441;
    fail_assertion("non-positive loop bound");
    _jump2441:;
    // Computing bound for j
    if (_870.d0 > 0) 
    goto _jump2442;
    fail_assertion("non-positive loop bound");
    _jump2442:;
    // Computing bound for k
    int64_t _1094 = 65;
    if (_1094 > 0) 
    goto _jump2443;
    fail_assertion("non-positive loop bound");
    _jump2443:;
    _1091 = 0;
    int64_t _1095 = 0; // k
    int64_t _1096 = 0; // j
    int64_t _1097 = 0; // i
    _jump2444:; // Begin body of loop
    bool _1098 = true;
    int64_t _1099;
    if (!_1098)
    goto _jump2445;
    int64_t _1100 = 774;
    _1099 = _1100;
    goto _jump2446;
    _jump2445:;
    _1099 = _870.d0;
    _jump2446:;
    _1091 += _1099;
    _1095++;
    if (_1095 < _1094)
    goto _jump2444;
    _1095 = 0;
    _1096++;
    if (_1096 < _870.d0)
    goto _jump2444;
    _1096 = 0;
    _1097++;
    if (_1097 < _1092)
    goto _jump2444;
    // End body of loop
    int64_t _1101;
    // Computing bound for i
    bool _1102 = false;
    int64_t _1103;
    if (!_1102)
    goto _jump2447;
    _1103 = _870.d0;
    goto _jump2448;
    _jump2447:;
    int64_t _1104 = 868;
    _1103 = _1104;
    _jump2448:;
    if (_1103 > 0) 
    goto _jump2449;
    fail_assertion("non-positive loop bound");
    _jump2449:;
    // Computing bound for j
    if (_870.d0 > 0) 
    goto _jump2450;
    fail_assertion("non-positive loop bound");
    _jump2450:;
    // Computing bound for k
    int64_t _1105;
    // Computing bound for i
    if (_870.d0 > 0) 
    goto _jump2451;
    fail_assertion("non-positive loop bound");
    _jump2451:;
    _1105 = 0;
    int64_t _1106 = 0; // i
    _jump2452:; // Begin body of loop
    int64_t _1107 = 701;
    _1105 += _1107;
    _1106++;
    if (_1106 < _870.d0)
    goto _jump2452;
    // End body of loop
    if (_1105 > 0) 
    goto _jump2453;
    fail_assertion("non-positive loop bound");
    _jump2453:;
    _1101 = 0;
    int64_t _1108 = 0; // k
    int64_t _1109 = 0; // j
    int64_t _1110 = 0; // i
    _jump2454:; // Begin body of loop
    _1101 += _1109;
    _1108++;
    if (_1108 < _1105)
    goto _jump2454;
    _1108 = 0;
    _1109++;
    if (_1109 < _870.d0)
    goto _jump2454;
    _1109 = 0;
    _1110++;
    if (_1110 < _1103)
    goto _jump2454;
    // End body of loop
    int64_t _1111 = _1091 - _1101;
    int64_t _1112;
    // Computing bound for i
    int64_t _1113;
    // Computing bound for i
    int64_t _1114 = 659;
    int64_t _1115 = _870.d0 * _1114;
    if (_1115 > 0) 
    goto _jump2455;
    fail_assertion("non-positive loop bound");
    _jump2455:;
    _1113 = 0;
    int64_t _1116 = 0; // i
    _jump2456:; // Begin body of loop
    _1113 += _870.d0;
    _1116++;
    if (_1116 < _1115)
    goto _jump2456;
    // End body of loop
    if (_1113 > 0) 
    goto _jump2457;
    fail_assertion("non-positive loop bound");
    _jump2457:;
    // Computing bound for j
    int64_t _1117;
    // Computing bound for i
    int64_t _1118 = 4;
    if (_1118 > 0) 
    goto _jump2458;
    fail_assertion("non-positive loop bound");
    _jump2458:;
    // Computing bound for j
    if (_870.d0 > 0) 
    goto _jump2459;
    fail_assertion("non-positive loop bound");
    _jump2459:;
    // Computing bound for k
    if (_870.d0 > 0) 
    goto _jump2460;
    fail_assertion("non-positive loop bound");
    _jump2460:;
    _1117 = 0;
    int64_t _1119 = 0; // k
    int64_t _1120 = 0; // j
    int64_t _1121 = 0; // i
    _jump2461:; // Begin body of loop
    _1117 += _1119;
    _1119++;
    if (_1119 < _870.d0)
    goto _jump2461;
    _1119 = 0;
    _1120++;
    if (_1120 < _870.d0)
    goto _jump2461;
    _1120 = 0;
    _1121++;
    if (_1121 < _1118)
    goto _jump2461;
    // End body of loop
    int64_t _1122 = 272;
    int64_t _1123 = _1117 + _1122;
    if (_1123 > 0) 
    goto _jump2462;
    fail_assertion("non-positive loop bound");
    _jump2462:;
    // Computing bound for k
    int64_t _1124 = _870.d0 % _870.d0;
    int64_t _1125 = -_1124;
    if (_1125 > 0) 
    goto _jump2463;
    fail_assertion("non-positive loop bound");
    _jump2463:;
    _1112 = 0;
    int64_t _1126 = 0; // k
    int64_t _1127 = 0; // j
    int64_t _1128 = 0; // i
    _jump2464:; // Begin body of loop
    bool _1129 = _1126 > _870.d0;
    int64_t _1130;
    if (!_1129)
    goto _jump2465;
    _1130 = _1127;
    goto _jump2466;
    _jump2465:;
    _1130 = _1128;
    _jump2466:;
    _1112 += _1130;
    _1126++;
    if (_1126 < _1125)
    goto _jump2464;
    _1126 = 0;
    _1127++;
    if (_1127 < _1123)
    goto _jump2464;
    _1127 = 0;
    _1128++;
    if (_1128 < _1113)
    goto _jump2464;
    // End body of loop
    int64_t _1131 = 32;
    int64_t _1132 = -_1131;
    if (_1111 >= 0)
    goto _jump2467;
    fail_assertion("negative array index");
    _jump2467:;
    if (_1111 < _1063.d0)
    goto _jump2468;
    fail_assertion("index too large");
    _jump2468:;
    if (_1112 >= 0)
    goto _jump2469;
    fail_assertion("negative array index");
    _jump2469:;
    if (_1112 < _1063.d1)
    goto _jump2470;
    fail_assertion("index too large");
    _jump2470:;
    if (_1132 >= 0)
    goto _jump2471;
    fail_assertion("negative array index");
    _jump2471:;
    if (_1132 < _1063.d2)
    goto _jump2472;
    fail_assertion("index too large");
    _jump2472:;
    int64_t _1133 = 0;
    _1133 *= _1063.d0;
    _1133 += _1111;
    _1133 *= _1063.d1;
    _1133 += _1112;
    _1133 *= _1063.d2;
    _1133 += _1132;
    _a3_int64_t _1134 = _1063.data[_1133];
    _a1__a1_double _1135;
    // Computing bound for i
    int64_t _1136 = -_870.d0;
    _1135.d0 = _1136;
    if (_1136 > 0) 
    goto _jump2473;
    fail_assertion("non-positive loop bound");
    _jump2473:;
    // Computing total size of heap memory to allocate
    int64_t _1137 = 1;
    _1137 *= _1136;
    _1137 *= sizeof(_a1_double);
    _1135.data = jpl_alloc(_1137);
    int64_t _1138 = 0; // i
    _jump2474:; // Begin body of loop
    double _1139 = 82.0;
    _a1_double _1140;
    _1140.d0 = 2;
    _1140.data = jpl_alloc(sizeof(double) * 2);
    _1140.data[0] = _407;
    _1140.data[1] = _1139;
    int64_t _1141 = 0;
    _1141 *= _1135.d0;
    _1141 += _1138;
    _1135.data[_1141] = _1140;
    _1138++;
    if (_1138 < _1136)
    goto _jump2474;
    // End body of loop
    bool _1142 = true;
    int64_t _1143;
    if (!_1142)
    goto _jump2475;
    int64_t _1144 = 260;
    _1143 = _1144;
    goto _jump2476;
    _jump2475:;
    int64_t _1145 = -_870.d0;
    _1143 = _1145;
    _jump2476:;
    if (_1143 >= 0)
    goto _jump2477;
    fail_assertion("negative array index");
    _jump2477:;
    if (_1143 < _1135.d0)
    goto _jump2478;
    fail_assertion("index too large");
    _jump2478:;
    int64_t _1146 = 0;
    _1146 *= _1135.d0;
    _1146 += _1143;
    _a1_double _1147 = _1135.data[_1146];
    int64_t _1148 = 848;
    if (_1148 >= 0)
    goto _jump2479;
    fail_assertion("negative array index");
    _jump2479:;
    if (_1148 < _1147.d0)
    goto _jump2480;
    fail_assertion("index too large");
    _jump2480:;
    int64_t _1149 = 0;
    _1149 *= _1147.d0;
    _1149 += _1148;
    double _1150 = _1147.data[_1149];
    bool _1151 = a(_1134, _1150);
    int64_t _1152;
    if (!_1151)
    goto _jump2481;
    int64_t _1153 = 577;
    _1152 = _1153;
    goto _jump2482;
    _jump2481:;
    int64_t _1154 = 394;
    _1152 = _1154;
    _jump2482:;
    _1062.d0 = _1152;
    if (_1152 > 0) 
    goto _jump2483;
    fail_assertion("non-positive loop bound");
    _jump2483:;
    // Computing bound for j
    int64_t _1155 = 189;
    _1062.d1 = _1155;
    if (_1155 > 0) 
    goto _jump2484;
    fail_assertion("non-positive loop bound");
    _jump2484:;
    // Computing bound for k
    int64_t _1156 = 773;
    int64_t _1157 = -_1156;
    int64_t _1158 = -_1157;
    _1062.d2 = _1158;
    if (_1158 > 0) 
    goto _jump2485;
    fail_assertion("non-positive loop bound");
    _jump2485:;
    // Computing total size of heap memory to allocate
    int64_t _1159 = 1;
    _1159 *= _1152;
    _1159 *= _1155;
    _1159 *= _1158;
    _1159 *= sizeof(double);
    _1062.data = jpl_alloc(_1159);
    int64_t _1160 = 0; // k
    int64_t _1161 = 0; // j
    int64_t _1162 = 0; // i
    _jump2486:; // Begin body of loop
    double _1163;
    // Computing bound for l
    if (_870.d0 > 0) 
    goto _jump2487;
    fail_assertion("non-positive loop bound");
    _jump2487:;
    // Computing bound for m
    if (_1160 > 0) 
    goto _jump2488;
    fail_assertion("non-positive loop bound");
    _jump2488:;
    _1163 = 0;
    int64_t _1164 = 0; // m
    int64_t _1165 = 0; // l
    _jump2489:; // Begin body of loop
    _1163 += _407;
    _1164++;
    if (_1164 < _1160)
    goto _jump2489;
    _1164 = 0;
    _1165++;
    if (_1165 < _870.d0)
    goto _jump2489;
    // End body of loop
    int64_t _1166 = 0;
    _1166 *= _1062.d0;
    _1166 += _1162;
    _1166 *= _1062.d1;
    _1166 += _1161;
    _1166 *= _1062.d2;
    _1166 += _1160;
    _1062.data[_1166] = _1163;
    _1160++;
    if (_1160 < _1158)
    goto _jump2486;
    _1160 = 0;
    _1161++;
    if (_1161 < _1155)
    goto _jump2486;
    _1161 = 0;
    _1162++;
    if (_1162 < _1152)
    goto _jump2486;
    // End body of loop
    write_image(_846, "n.png");
    double _1167;
    // Computing bound for o
    if (_870.d0 > 0) 
    goto _jump3131;
    fail_assertion("non-positive loop bound");
    _jump3131:;
    _1167 = 0;
    int64_t _1168 = 0; // o
    _jump3132:; // Begin body of loop
    double _1169 = 24.0;
    bool _1170 = _407 != _1169;
    double _1171;
    if (!_1170)
    goto _jump3133;
    double _1172;
    // Computing bound for p
    int64_t _1173;
    // Computing bound for p
    if (_1062.d0 > 0) 
    goto _jump3134;
    fail_assertion("non-positive loop bound");
    _jump3134:;
    // Computing bound for q
    if (_1062.d2 > 0) 
    goto _jump3135;
    fail_assertion("non-positive loop bound");
    _jump3135:;
    // Computing bound for r
    if (_1062.d1 > 0) 
    goto _jump3136;
    fail_assertion("non-positive loop bound");
    _jump3136:;
    _1173 = 0;
    int64_t _1174 = 0; // r
    int64_t _1175 = 0; // q
    int64_t _1176 = 0; // p
    _jump3137:; // Begin body of loop
    _1173 += _1062.d0;
    _1174++;
    if (_1174 < _1062.d1)
    goto _jump3137;
    _1174 = 0;
    _1175++;
    if (_1175 < _1062.d2)
    goto _jump3137;
    _1175 = 0;
    _1176++;
    if (_1176 < _1062.d0)
    goto _jump3137;
    // End body of loop
    if (_1173 > 0) 
    goto _jump3138;
    fail_assertion("non-positive loop bound");
    _jump3138:;
    _1172 = 0;
    int64_t _1177 = 0; // p
    _jump3139:; // Begin body of loop
    double _1178;
    // Computing bound for q
    if (_1062.d0 > 0) 
    goto _jump3140;
    fail_assertion("non-positive loop bound");
    _jump3140:;
    // Computing bound for r
    if (_1177 > 0) 
    goto _jump3141;
    fail_assertion("non-positive loop bound");
    _jump3141:;
    // Computing bound for s
    if (_1062.d1 > 0) 
    goto _jump3142;
    fail_assertion("non-positive loop bound");
    _jump3142:;
    _1178 = 0;
    int64_t _1179 = 0; // s
    int64_t _1180 = 0; // r
    int64_t _1181 = 0; // q
    _jump3143:; // Begin body of loop
    double _1182 = 49.0;
    _1178 += _1182;
    _1179++;
    if (_1179 < _1062.d1)
    goto _jump3143;
    _1179 = 0;
    _1180++;
    if (_1180 < _1177)
    goto _jump3143;
    _1180 = 0;
    _1181++;
    if (_1181 < _1062.d0)
    goto _jump3143;
    // End body of loop
    _1172 += _1178;
    _1177++;
    if (_1177 < _1173)
    goto _jump3139;
    // End body of loop
    _1171 = _1172;
    goto _jump3144;
    _jump3133:;
    double _1183;
    // Computing bound for p
    int64_t _1184 = _1062.d1 % _1062.d0;
    if (_1184 > 0) 
    goto _jump3145;
    fail_assertion("non-positive loop bound");
    _jump3145:;
    // Computing bound for q
    int64_t _1185 = 804;
    int64_t _1186 = _1185 * _1062.d2;
    if (_1186 > 0) 
    goto _jump3146;
    fail_assertion("non-positive loop bound");
    _jump3146:;
    // Computing bound for r
    int64_t _1187 = 35;
    int64_t _1188 = _1187 * _1062.d0;
    if (_1188 > 0) 
    goto _jump3147;
    fail_assertion("non-positive loop bound");
    _jump3147:;
    _1183 = 0;
    int64_t _1189 = 0; // r
    int64_t _1190 = 0; // q
    int64_t _1191 = 0; // p
    _jump3148:; // Begin body of loop
    double _1192 = -_407;
    _1183 += _1192;
    _1189++;
    if (_1189 < _1188)
    goto _jump3148;
    _1189 = 0;
    _1190++;
    if (_1190 < _1186)
    goto _jump3148;
    _1190 = 0;
    _1191++;
    if (_1191 < _1184)
    goto _jump3148;
    // End body of loop
    _1171 = _1183;
    _jump3144:;
    _1167 += _1171;
    _1168++;
    if (_1168 < _870.d0)
    goto _jump3132;
    // End body of loop
    double _1193 = 6.0;
    bool _1194 = _1193 != _407;
    bool _1195 = !_1194;
    _a2_double _1196;
    if (!_1195)
    goto _jump3149;
    _a2_double _1197;
    // Computing bound for o
    bool _1198 = true;
    int64_t _1199;
    if (!_1198)
    goto _jump3150;
    int64_t _1200 = 672;
    _1199 = _1200;
    goto _jump3151;
    _jump3150:;
    _1199 = _1062.d2;
    _jump3151:;
    _1197.d0 = _1199;
    if (_1199 > 0) 
    goto _jump3152;
    fail_assertion("non-positive loop bound");
    _jump3152:;
    // Computing bound for p
    int64_t _1201 = 323;
    int64_t _1202 = _1201 % _1062.d1;
    _1197.d1 = _1202;
    if (_1202 > 0) 
    goto _jump3153;
    fail_assertion("non-positive loop bound");
    _jump3153:;
    // Computing total size of heap memory to allocate
    int64_t _1203 = 1;
    _1203 *= _1199;
    _1203 *= _1202;
    _1203 *= sizeof(double);
    _1197.data = jpl_alloc(_1203);
    int64_t _1204 = 0; // p
    int64_t _1205 = 0; // o
    _jump3154:; // Begin body of loop
    double _1206 = 30.0;
    int64_t _1207 = 0;
    _1207 *= _1197.d0;
    _1207 += _1205;
    _1207 *= _1197.d1;
    _1207 += _1204;
    _1197.data[_1207] = _1206;
    _1204++;
    if (_1204 < _1202)
    goto _jump3154;
    _1204 = 0;
    _1205++;
    if (_1205 < _1199)
    goto _jump3154;
    // End body of loop
    _1196 = _1197;
    goto _jump3155;
    _jump3149:;
    _a2_double _1208;
    // Computing bound for o
    _1208.d0 = _1062.d1;
    if (_1062.d1 > 0) 
    goto _jump3156;
    fail_assertion("non-positive loop bound");
    _jump3156:;
    // Computing bound for p
    _1208.d1 = _1062.d0;
    if (_1062.d0 > 0) 
    goto _jump3157;
    fail_assertion("non-positive loop bound");
    _jump3157:;
    // Computing total size of heap memory to allocate
    int64_t _1209 = 1;
    _1209 *= _1062.d1;
    _1209 *= _1062.d0;
    _1209 *= sizeof(double);
    _1208.data = jpl_alloc(_1209);
    int64_t _1210 = 0; // p
    int64_t _1211 = 0; // o
    _jump3158:; // Begin body of loop
    int64_t _1212 = 0;
    _1212 *= _1208.d0;
    _1212 += _1211;
    _1212 *= _1208.d1;
    _1212 += _1210;
    _1208.data[_1212] = _407;
    _1210++;
    if (_1210 < _1062.d0)
    goto _jump3158;
    _1210 = 0;
    _1211++;
    if (_1211 < _1062.d1)
    goto _jump3158;
    // End body of loop
    _1196 = _1208;
    _jump3155:;
    int64_t _1213 = _1062.d1 - _1062.d2;
    int64_t _1214 = 919;
    int64_t _1215 = -_1214;
    bool _1216 = _1213 <= _1215;
    int64_t _1217 = n(_1216);
    if (_1217 >= 0)
    goto _jump3159;
    fail_assertion("negative array index");
    _jump3159:;
    if (_1217 < _1196.d0)
    goto _jump3160;
    fail_assertion("index too large");
    _jump3160:;
    if (_1062.d2 >= 0)
    goto _jump3161;
    fail_assertion("negative array index");
    _jump3161:;
    if (_1062.d2 < _1196.d1)
    goto _jump3162;
    fail_assertion("index too large");
    _jump3162:;
    int64_t _1218 = 0;
    _1218 *= _1196.d0;
    _1218 += _1217;
    _1218 *= _1196.d1;
    _1218 += _1062.d2;
    double _1219 = _1196.data[_1218];
    bool _1220 = _1167 > _1219;
    bool _1221 = !_1220;
    int64_t _1222;
    if (!_1221)
    goto _jump3163;
    int64_t _1223 = -_870.d0;
    int64_t _1224 = 337;
    bool _1225 = _1223 > _1224;
    bool _1226 = !_1225;
    _a3_int64_t _1227;
    if (!_1226)
    goto _jump3164;
    bool _1229 = _1062.d1 < _870.d0;
    bool _1228 = _1229;
    if (0 != _1229)
    goto _jump3165;
    bool _1230 = true;
    _1228 = _1230;
    _jump3165:;
    _a3_int64_t _1231;
    if (!_1228)
    goto _jump3166;
    _a3_int64_t _1232;
    // Computing bound for o
    bool _1233 = true;
    int64_t _1234;
    if (!_1233)
    goto _jump3167;
    int64_t _1235 = 498;
    _1234 = _1235;
    goto _jump3168;
    _jump3167:;
    int64_t _1236 = 785;
    _1234 = _1236;
    _jump3168:;
    _1232.d0 = _1234;
    if (_1234 > 0) 
    goto _jump3169;
    fail_assertion("non-positive loop bound");
    _jump3169:;
    // Computing bound for p
    _1232.d1 = _1062.d0;
    if (_1062.d0 > 0) 
    goto _jump3170;
    fail_assertion("non-positive loop bound");
    _jump3170:;
    // Computing bound for q
    int64_t _1237 = _1062.d1 * _1062.d1;
    _1232.d2 = _1237;
    if (_1237 > 0) 
    goto _jump3171;
    fail_assertion("non-positive loop bound");
    _jump3171:;
    // Computing total size of heap memory to allocate
    int64_t _1238 = 1;
    _1238 *= _1234;
    _1238 *= _1062.d0;
    _1238 *= _1237;
    _1238 *= sizeof(int64_t);
    _1232.data = jpl_alloc(_1238);
    int64_t _1239 = 0; // q
    int64_t _1240 = 0; // p
    int64_t _1241 = 0; // o
    _jump3172:; // Begin body of loop
    int64_t _1242 = 26;
    int64_t _1243 = -_1242;
    int64_t _1244 = 0;
    _1244 *= _1232.d0;
    _1244 += _1241;
    _1244 *= _1232.d1;
    _1244 += _1240;
    _1244 *= _1232.d2;
    _1244 += _1239;
    _1232.data[_1244] = _1243;
    _1239++;
    if (_1239 < _1237)
    goto _jump3172;
    _1239 = 0;
    _1240++;
    if (_1240 < _1062.d0)
    goto _jump3172;
    _1240 = 0;
    _1241++;
    if (_1241 < _1234)
    goto _jump3172;
    // End body of loop
    _1231 = _1232;
    goto _jump3173;
    _jump3166:;
    _a3_int64_t _1245;
    // Computing bound for o
    _1245.d0 = _1062.d0;
    if (_1062.d0 > 0) 
    goto _jump3174;
    fail_assertion("non-positive loop bound");
    _jump3174:;
    // Computing bound for p
    int64_t _1246 = 339;
    int64_t _1247 = -_1246;
    _1245.d1 = _1247;
    if (_1247 > 0) 
    goto _jump3175;
    fail_assertion("non-positive loop bound");
    _jump3175:;
    // Computing bound for q
    _1245.d2 = _1062.d2;
    if (_1062.d2 > 0) 
    goto _jump3176;
    fail_assertion("non-positive loop bound");
    _jump3176:;
    // Computing total size of heap memory to allocate
    int64_t _1248 = 1;
    _1248 *= _1062.d0;
    _1248 *= _1247;
    _1248 *= _1062.d2;
    _1248 *= sizeof(int64_t);
    _1245.data = jpl_alloc(_1248);
    int64_t _1249 = 0; // q
    int64_t _1250 = 0; // p
    int64_t _1251 = 0; // o
    _jump3177:; // Begin body of loop
    int64_t _1252 = 0;
    _1252 *= _1245.d0;
    _1252 += _1251;
    _1252 *= _1245.d1;
    _1252 += _1250;
    _1252 *= _1245.d2;
    _1252 += _1249;
    _1245.data[_1252] = _1062.d1;
    _1249++;
    if (_1249 < _1062.d2)
    goto _jump3177;
    _1249 = 0;
    _1250++;
    if (_1250 < _1247)
    goto _jump3177;
    _1250 = 0;
    _1251++;
    if (_1251 < _1062.d0)
    goto _jump3177;
    // End body of loop
    _1231 = _1245;
    _jump3173:;
    _1227 = _1231;
    goto _jump3178;
    _jump3164:;
    double _1253 = 12.0;
    double _1254 = _407 - _1253;
    double _1255 = 40.0;
    bool _1256 = _1254 <= _1255;
    _a3_int64_t _1257;
    if (!_1256)
    goto _jump3179;
    bool _1258 = false;
    _a3_int64_t _1259;
    if (!_1258)
    goto _jump3180;
    _a3_int64_t _1260;
    // Computing bound for o
    _1260.d0 = _1062.d0;
    if (_1062.d0 > 0) 
    goto _jump3181;
    fail_assertion("non-positive loop bound");
    _jump3181:;
    // Computing bound for p
    _1260.d1 = _1062.d2;
    if (_1062.d2 > 0) 
    goto _jump3182;
    fail_assertion("non-positive loop bound");
    _jump3182:;
    // Computing bound for q
    _1260.d2 = _1062.d0;
    if (_1062.d0 > 0) 
    goto _jump3183;
    fail_assertion("non-positive loop bound");
    _jump3183:;
    // Computing total size of heap memory to allocate
    int64_t _1261 = 1;
    _1261 *= _1062.d0;
    _1261 *= _1062.d2;
    _1261 *= _1062.d0;
    _1261 *= sizeof(int64_t);
    _1260.data = jpl_alloc(_1261);
    int64_t _1262 = 0; // q
    int64_t _1263 = 0; // p
    int64_t _1264 = 0; // o
    _jump3184:; // Begin body of loop
    int64_t _1265 = 0;
    _1265 *= _1260.d0;
    _1265 += _1264;
    _1265 *= _1260.d1;
    _1265 += _1263;
    _1265 *= _1260.d2;
    _1265 += _1262;
    _1260.data[_1265] = _1062.d1;
    _1262++;
    if (_1262 < _1062.d0)
    goto _jump3184;
    _1262 = 0;
    _1263++;
    if (_1263 < _1062.d2)
    goto _jump3184;
    _1263 = 0;
    _1264++;
    if (_1264 < _1062.d0)
    goto _jump3184;
    // End body of loop
    _1259 = _1260;
    goto _jump3185;
    _jump3180:;
    _a3_int64_t _1266;
    // Computing bound for o
    _1266.d0 = _1062.d2;
    if (_1062.d2 > 0) 
    goto _jump3186;
    fail_assertion("non-positive loop bound");
    _jump3186:;
    // Computing bound for p
    _1266.d1 = _1062.d0;
    if (_1062.d0 > 0) 
    goto _jump3187;
    fail_assertion("non-positive loop bound");
    _jump3187:;
    // Computing bound for q
    _1266.d2 = _870.d0;
    if (_870.d0 > 0) 
    goto _jump3188;
    fail_assertion("non-positive loop bound");
    _jump3188:;
    // Computing total size of heap memory to allocate
    int64_t _1267 = 1;
    _1267 *= _1062.d2;
    _1267 *= _1062.d0;
    _1267 *= _870.d0;
    _1267 *= sizeof(int64_t);
    _1266.data = jpl_alloc(_1267);
    int64_t _1268 = 0; // q
    int64_t _1269 = 0; // p
    int64_t _1270 = 0; // o
    _jump3189:; // Begin body of loop
    int64_t _1271 = 0;
    _1271 *= _1266.d0;
    _1271 += _1270;
    _1271 *= _1266.d1;
    _1271 += _1269;
    _1271 *= _1266.d2;
    _1271 += _1268;
    _1266.data[_1271] = _1062.d1;
    _1268++;
    if (_1268 < _870.d0)
    goto _jump3189;
    _1268 = 0;
    _1269++;
    if (_1269 < _1062.d0)
    goto _jump3189;
    _1269 = 0;
    _1270++;
    if (_1270 < _1062.d2)
    goto _jump3189;
    // End body of loop
    _1259 = _1266;
    _jump3185:;
    _1257 = _1259;
    goto _jump3190;
    _jump3179:;
    _a3_int64_t _1272;
    // Computing bound for o
    int64_t _1273 = -_870.d0;
    _1272.d0 = _1273;
    if (_1273 > 0) 
    goto _jump3191;
    fail_assertion("non-positive loop bound");
    _jump3191:;
    // Computing bound for p
    int64_t _1274 = 879;
    _1272.d1 = _1274;
    if (_1274 > 0) 
    goto _jump3192;
    fail_assertion("non-positive loop bound");
    _jump3192:;
    // Computing bound for q
    _1272.d2 = _870.d0;
    if (_870.d0 > 0) 
    goto _jump3193;
    fail_assertion("non-positive loop bound");
    _jump3193:;
    // Computing total size of heap memory to allocate
    int64_t _1275 = 1;
    _1275 *= _1273;
    _1275 *= _1274;
    _1275 *= _870.d0;
    _1275 *= sizeof(int64_t);
    _1272.data = jpl_alloc(_1275);
    int64_t _1276 = 0; // q
    int64_t _1277 = 0; // p
    int64_t _1278 = 0; // o
    _jump3194:; // Begin body of loop
    int64_t _1279 = 0;
    _1279 *= _1272.d0;
    _1279 += _1278;
    _1279 *= _1272.d1;
    _1279 += _1277;
    _1279 *= _1272.d2;
    _1279 += _1276;
    _1272.data[_1279] = _1062.d2;
    _1276++;
    if (_1276 < _870.d0)
    goto _jump3194;
    _1276 = 0;
    _1277++;
    if (_1277 < _1274)
    goto _jump3194;
    _1277 = 0;
    _1278++;
    if (_1278 < _1273)
    goto _jump3194;
    // End body of loop
    _1257 = _1272;
    _jump3190:;
    _1227 = _1257;
    _jump3178:;
    bool _1280 = false;
    bool _1281 = !_1280;
    int64_t _1282;
    if (!_1281)
    goto _jump3195;
    _1282 = _1062.d2;
    goto _jump3196;
    _jump3195:;
    _a3_int64_t _1283;
    // Computing bound for o
    int64_t _1284 = _1062.d1 % _870.d0;
    _1283.d0 = _1284;
    if (_1284 > 0) 
    goto _jump3197;
    fail_assertion("non-positive loop bound");
    _jump3197:;
    // Computing bound for p
    int64_t _1285 = _870.d0 * _1062.d1;
    _1283.d1 = _1285;
    if (_1285 > 0) 
    goto _jump3198;
    fail_assertion("non-positive loop bound");
    _jump3198:;
    // Computing bound for q
    int64_t _1286;
    // Computing bound for o
    if (_870.d0 > 0) 
    goto _jump3199;
    fail_assertion("non-positive loop bound");
    _jump3199:;
    // Computing bound for p
    if (_1062.d0 > 0) 
    goto _jump3200;
    fail_assertion("non-positive loop bound");
    _jump3200:;
    // Computing bound for q
    if (_1062.d2 > 0) 
    goto _jump3201;
    fail_assertion("non-positive loop bound");
    _jump3201:;
    _1286 = 0;
    int64_t _1287 = 0; // q
    int64_t _1288 = 0; // p
    int64_t _1289 = 0; // o
    _jump3202:; // Begin body of loop
    _1286 += _870.d0;
    _1287++;
    if (_1287 < _1062.d2)
    goto _jump3202;
    _1287 = 0;
    _1288++;
    if (_1288 < _1062.d0)
    goto _jump3202;
    _1288 = 0;
    _1289++;
    if (_1289 < _870.d0)
    goto _jump3202;
    // End body of loop
    _1283.d2 = _1286;
    if (_1286 > 0) 
    goto _jump3203;
    fail_assertion("non-positive loop bound");
    _jump3203:;
    // Computing total size of heap memory to allocate
    int64_t _1290 = 1;
    _1290 *= _1284;
    _1290 *= _1285;
    _1290 *= _1286;
    _1290 *= sizeof(int64_t);
    _1283.data = jpl_alloc(_1290);
    int64_t _1291 = 0; // q
    int64_t _1292 = 0; // p
    int64_t _1293 = 0; // o
    _jump3204:; // Begin body of loop
    int64_t _1294 = 590;
    int64_t _1295 = 0;
    _1295 *= _1283.d0;
    _1295 += _1293;
    _1295 *= _1283.d1;
    _1295 += _1292;
    _1295 *= _1283.d2;
    _1295 += _1291;
    _1283.data[_1295] = _1294;
    _1291++;
    if (_1291 < _1286)
    goto _jump3204;
    _1291 = 0;
    _1292++;
    if (_1292 < _1285)
    goto _jump3204;
    _1292 = 0;
    _1293++;
    if (_1293 < _1284)
    goto _jump3204;
    // End body of loop
    int64_t _1296 = 854;
    int64_t _1297 = _1062.d0 % _1296;
    int64_t _1298 = -_1297;
    int64_t _1299;
    // Computing bound for o
    if (_1062.d2 > 0) 
    goto _jump3205;
    fail_assertion("non-positive loop bound");
    _jump3205:;
    // Computing bound for p
    if (_1062.d0 > 0) 
    goto _jump3206;
    fail_assertion("non-positive loop bound");
    _jump3206:;
    // Computing bound for q
    int64_t _1300 = 928;
    if (_1300 > 0) 
    goto _jump3207;
    fail_assertion("non-positive loop bound");
    _jump3207:;
    _1299 = 0;
    int64_t _1301 = 0; // q
    int64_t _1302 = 0; // p
    int64_t _1303 = 0; // o
    _jump3208:; // Begin body of loop
    _1299 += _1303;
    _1301++;
    if (_1301 < _1300)
    goto _jump3208;
    _1301 = 0;
    _1302++;
    if (_1302 < _1062.d0)
    goto _jump3208;
    _1302 = 0;
    _1303++;
    if (_1303 < _1062.d2)
    goto _jump3208;
    // End body of loop
    int64_t _1304 = _1299 + _1062.d0;
    if (_1298 >= 0)
    goto _jump3209;
    fail_assertion("negative array index");
    _jump3209:;
    if (_1298 < _1283.d0)
    goto _jump3210;
    fail_assertion("index too large");
    _jump3210:;
    if (_1304 >= 0)
    goto _jump3211;
    fail_assertion("negative array index");
    _jump3211:;
    if (_1304 < _1283.d1)
    goto _jump3212;
    fail_assertion("index too large");
    _jump3212:;
    if (_1062.d2 >= 0)
    goto _jump3213;
    fail_assertion("negative array index");
    _jump3213:;
    if (_1062.d2 < _1283.d2)
    goto _jump3214;
    fail_assertion("index too large");
    _jump3214:;
    int64_t _1305 = 0;
    _1305 *= _1283.d0;
    _1305 += _1298;
    _1305 *= _1283.d1;
    _1305 += _1304;
    _1305 *= _1283.d2;
    _1305 += _1062.d2;
    int64_t _1306 = _1283.data[_1305];
    _1282 = _1306;
    _jump3196:;
    int64_t _1307 = 914;
    if (_1062.d2 >= 0)
    goto _jump3215;
    fail_assertion("negative array index");
    _jump3215:;
    if (_1062.d2 < _1227.d0)
    goto _jump3216;
    fail_assertion("index too large");
    _jump3216:;
    if (_1282 >= 0)
    goto _jump3217;
    fail_assertion("negative array index");
    _jump3217:;
    if (_1282 < _1227.d1)
    goto _jump3218;
    fail_assertion("index too large");
    _jump3218:;
    if (_1307 >= 0)
    goto _jump3219;
    fail_assertion("negative array index");
    _jump3219:;
    if (_1307 < _1227.d2)
    goto _jump3220;
    fail_assertion("index too large");
    _jump3220:;
    int64_t _1308 = 0;
    _1308 *= _1227.d0;
    _1308 += _1062.d2;
    _1308 *= _1227.d1;
    _1308 += _1282;
    _1308 *= _1227.d2;
    _1308 += _1307;
    int64_t _1309 = _1227.data[_1308];
    int64_t _1310 = _1062.d1 - _1309;
    _1222 = _1310;
    goto _jump3221;
    _jump3163:;
    _a2_bool _1311;
    // Computing bound for o
    _1311.d0 = _1062.d0;
    if (_1062.d0 > 0) 
    goto _jump3222;
    fail_assertion("non-positive loop bound");
    _jump3222:;
    // Computing bound for p
    int64_t _1312;
    // Computing bound for o
    int64_t _1313 = 293;
    if (_1313 > 0) 
    goto _jump3223;
    fail_assertion("non-positive loop bound");
    _jump3223:;
    // Computing bound for p
    int64_t _1314 = -_870.d0;
    if (_1314 > 0) 
    goto _jump3224;
    fail_assertion("non-positive loop bound");
    _jump3224:;
    _1312 = 0;
    int64_t _1315 = 0; // p
    int64_t _1316 = 0; // o
    _jump3225:; // Begin body of loop
    _1312 += _1062.d1;
    _1315++;
    if (_1315 < _1314)
    goto _jump3225;
    _1315 = 0;
    _1316++;
    if (_1316 < _1313)
    goto _jump3225;
    // End body of loop
    _1311.d1 = _1312;
    if (_1312 > 0) 
    goto _jump3226;
    fail_assertion("non-positive loop bound");
    _jump3226:;
    // Computing total size of heap memory to allocate
    int64_t _1317 = 1;
    _1317 *= _1062.d0;
    _1317 *= _1312;
    _1317 *= sizeof(bool);
    _1311.data = jpl_alloc(_1317);
    int64_t _1318 = 0; // p
    int64_t _1319 = 0; // o
    _jump3227:; // Begin body of loop
    bool _1320 = true;
    int64_t _1321 = 0;
    _1321 *= _1311.d0;
    _1321 += _1319;
    _1321 *= _1311.d1;
    _1321 += _1318;
    _1311.data[_1321] = _1320;
    _1318++;
    if (_1318 < _1312)
    goto _jump3227;
    _1318 = 0;
    _1319++;
    if (_1319 < _1062.d0)
    goto _jump3227;
    // End body of loop
    bool _1322 = true;
    double _1323;
    if (!_1322)
    goto _jump3228;
    _1323 = _407;
    goto _jump3229;
    _jump3228:;
    double _1324 = 18.0;
    _1323 = _1324;
    _jump3229:;
    bool _1325 = _407 == _1323;
    int64_t _1326;
    if (!_1325)
    goto _jump3230;
    bool _1327 = true;
    int64_t _1328;
    if (!_1327)
    goto _jump3231;
    bool _1329 = true;
    int64_t _1330 = n(_1329);
    _1328 = _1330;
    goto _jump3232;
    _jump3231:;
    _1328 = _1062.d0;
    _jump3232:;
    _1326 = _1328;
    goto _jump3233;
    _jump3230:;
    int64_t _1331;
    // Computing bound for o
    if (_1062.d0 > 0) 
    goto _jump3234;
    fail_assertion("non-positive loop bound");
    _jump3234:;
    // Computing bound for p
    if (_1062.d2 > 0) 
    goto _jump3235;
    fail_assertion("non-positive loop bound");
    _jump3235:;
    // Computing bound for q
    if (_870.d0 > 0) 
    goto _jump3236;
    fail_assertion("non-positive loop bound");
    _jump3236:;
    _1331 = 0;
    int64_t _1332 = 0; // q
    int64_t _1333 = 0; // p
    int64_t _1334 = 0; // o
    _jump3237:; // Begin body of loop
    int64_t _1335 = 100;
    _1331 += _1335;
    _1332++;
    if (_1332 < _870.d0)
    goto _jump3237;
    _1332 = 0;
    _1333++;
    if (_1333 < _1062.d2)
    goto _jump3237;
    _1333 = 0;
    _1334++;
    if (_1334 < _1062.d0)
    goto _jump3237;
    // End body of loop
    int64_t _1336 = _1331 % _1062.d0;
    _1326 = _1336;
    _jump3233:;
    if (_1062.d2 >= 0)
    goto _jump3238;
    fail_assertion("negative array index");
    _jump3238:;
    if (_1062.d2 < _1311.d0)
    goto _jump3239;
    fail_assertion("index too large");
    _jump3239:;
    if (_1326 >= 0)
    goto _jump3240;
    fail_assertion("negative array index");
    _jump3240:;
    if (_1326 < _1311.d1)
    goto _jump3241;
    fail_assertion("index too large");
    _jump3241:;
    int64_t _1337 = 0;
    _1337 *= _1311.d0;
    _1337 += _1062.d2;
    _1337 *= _1311.d1;
    _1337 += _1326;
    bool _1338 = _1311.data[_1337];
    int64_t _1339;
    if (!_1338)
    goto _jump3242;
    int64_t _1340;
    // Computing bound for o
    int64_t _1341 = -_1062.d2;
    if (_1341 > 0) 
    goto _jump3243;
    fail_assertion("non-positive loop bound");
    _jump3243:;
    _1340 = 0;
    int64_t _1342 = 0; // o
    _jump3244:; // Begin body of loop
    _1340 += _1342;
    _1342++;
    if (_1342 < _1341)
    goto _jump3244;
    // End body of loop
    _1339 = _1340;
    goto _jump3245;
    _jump3242:;
    _1339 = _1062.d2;
    _jump3245:;
    int64_t _1343 = -_1339;
    _1222 = _1343;
    _jump3221:;
    _a3__a2_rgba _1344;
    // Computing bound for p
    _1344.d0 = _870.d0;
    if (_870.d0 > 0) 
    goto _jump3246;
    fail_assertion("non-positive loop bound");
    _jump3246:;
    // Computing bound for q
    _1344.d1 = _1222;
    if (_1222 > 0) 
    goto _jump3247;
    fail_assertion("non-positive loop bound");
    _jump3247:;
    // Computing bound for r
    int64_t _1345 = 69;
    _1344.d2 = _1345;
    if (_1345 > 0) 
    goto _jump3248;
    fail_assertion("non-positive loop bound");
    _jump3248:;
    // Computing total size of heap memory to allocate
    int64_t _1346 = 1;
    _1346 *= _870.d0;
    _1346 *= _1222;
    _1346 *= _1345;
    _1346 *= sizeof(_a2_rgba);
    _1344.data = jpl_alloc(_1346);
    int64_t _1347 = 0; // r
    int64_t _1348 = 0; // q
    int64_t _1349 = 0; // p
    _jump3249:; // Begin body of loop
    int64_t _1350 = 0;
    _1350 *= _1344.d0;
    _1350 += _1349;
    _1350 *= _1344.d1;
    _1350 += _1348;
    _1350 *= _1344.d2;
    _1350 += _1347;
    _1344.data[_1350] = _846;
    _1347++;
    if (_1347 < _1345)
    goto _jump3249;
    _1347 = 0;
    _1348++;
    if (_1348 < _1222)
    goto _jump3249;
    _1348 = 0;
    _1349++;
    if (_1349 < _870.d0)
    goto _jump3249;
    // End body of loop
    double _1352 = 8.0;
    double _1353 = 99.0;
    double _1354 = -_1353;
    double _1355 = -_1354;
    double _1356 = _1352 * _1355;
    double _1357 = _1356 - _407;
    bool _1358 = _1357 != _407;
    bool _1351 = _1358;
    if (0 == _1358)
    goto _jump3250;
    bool _1359 = false;
    bool _1360 = !_1359;
    _1351 = _1360;
    _jump3250:;
    bool _1361 = !_1351;
    if (0 != _1361)
    goto _jump3251;
    fail_assertion("t");
    _jump3251:;
    double _1362 = get_time();
    double _1363 = get_time();
    _a3__a2__a2_rgba _1364;
    // Computing bound for t
    _1364.d0 = _1062.d0;
    if (_1062.d0 > 0) 
    goto _jump3252;
    fail_assertion("non-positive loop bound");
    _jump3252:;
    // Computing bound for u
    int64_t _1365;
    // Computing bound for t
    bool _1366 = true;
    int64_t _1367 = n(_1366);
    if (_1367 > 0) 
    goto _jump3253;
    fail_assertion("non-positive loop bound");
    _jump3253:;
    _1365 = 0;
    int64_t _1368 = 0; // t
    _jump3254:; // Begin body of loop
    _1365 += _1368;
    _1368++;
    if (_1368 < _1367)
    goto _jump3254;
    // End body of loop
    _1364.d1 = _1365;
    if (_1365 > 0) 
    goto _jump3255;
    fail_assertion("non-positive loop bound");
    _jump3255:;
    // Computing bound for v
    _1364.d2 = _1344.d0;
    if (_1344.d0 > 0) 
    goto _jump3256;
    fail_assertion("non-positive loop bound");
    _jump3256:;
    // Computing total size of heap memory to allocate
    int64_t _1369 = 1;
    _1369 *= _1062.d0;
    _1369 *= _1365;
    _1369 *= _1344.d0;
    _1369 *= sizeof(_a2__a2_rgba);
    _1364.data = jpl_alloc(_1369);
    int64_t _1370 = 0; // v
    int64_t _1371 = 0; // u
    int64_t _1372 = 0; // t
    _jump3257:; // Begin body of loop
    _a2__a2_rgba _1373;
    // Computing bound for w
    _1373.d0 = _1370;
    if (_1370 > 0) 
    goto _jump3258;
    fail_assertion("non-positive loop bound");
    _jump3258:;
    // Computing bound for x
    int64_t _1374 = -_1371;
    _1373.d1 = _1374;
    if (_1374 > 0) 
    goto _jump3259;
    fail_assertion("non-positive loop bound");
    _jump3259:;
    // Computing total size of heap memory to allocate
    int64_t _1375 = 1;
    _1375 *= _1370;
    _1375 *= _1374;
    _1375 *= sizeof(_a2_rgba);
    _1373.data = jpl_alloc(_1375);
    int64_t _1376 = 0; // x
    int64_t _1377 = 0; // w
    _jump3260:; // Begin body of loop
    int64_t _1378 = 0;
    _1378 *= _1373.d0;
    _1378 += _1377;
    _1378 *= _1373.d1;
    _1378 += _1376;
    _1373.data[_1378] = _846;
    _1376++;
    if (_1376 < _1374)
    goto _jump3260;
    _1376 = 0;
    _1377++;
    if (_1377 < _1370)
    goto _jump3260;
    // End body of loop
    int64_t _1379 = 0;
    _1379 *= _1364.d0;
    _1379 += _1372;
    _1379 *= _1364.d1;
    _1379 += _1371;
    _1379 *= _1364.d2;
    _1379 += _1370;
    _1364.data[_1379] = _1373;
    _1370++;
    if (_1370 < _1344.d0)
    goto _jump3257;
    _1370 = 0;
    _1371++;
    if (_1371 < _1365)
    goto _jump3257;
    _1371 = 0;
    _1372++;
    if (_1372 < _1062.d0)
    goto _jump3257;
    // End body of loop
    int64_t _1380 = 253;
    if (_870.d0 >= 0)
    goto _jump3261;
    fail_assertion("negative array index");
    _jump3261:;
    if (_870.d0 < _1364.d0)
    goto _jump3262;
    fail_assertion("index too large");
    _jump3262:;
    if (_1380 >= 0)
    goto _jump3263;
    fail_assertion("negative array index");
    _jump3263:;
    if (_1380 < _1364.d1)
    goto _jump3264;
    fail_assertion("index too large");
    _jump3264:;
    if (_1222 >= 0)
    goto _jump3265;
    fail_assertion("negative array index");
    _jump3265:;
    if (_1222 < _1364.d2)
    goto _jump3266;
    fail_assertion("index too large");
    _jump3266:;
    int64_t _1381 = 0;
    _1381 *= _1364.d0;
    _1381 += _870.d0;
    _1381 *= _1364.d1;
    _1381 += _1380;
    _1381 *= _1364.d2;
    _1381 += _1222;
    _a2__a2_rgba _1382 = _1364.data[_1381];
    bool _1383 = false;
    double _1384;
    if (!_1383)
    goto _jump3267;
    _1384 = _407;
    goto _jump3268;
    _jump3267:;
    _1384 = _407;
    _jump3268:;
    bool _1385 = _407 == _1384;
    bool _1386 = _1344.d2 < _1062.d1;
    bool _1387 = _1385 == _1386;
    int64_t _1388 = n(_1387);
    int64_t _1389 = -_1062.d0;
    if (_1388 >= 0)
    goto _jump3269;
    fail_assertion("negative array index");
    _jump3269:;
    if (_1388 < _1382.d0)
    goto _jump3270;
    fail_assertion("index too large");
    _jump3270:;
    if (_1389 >= 0)
    goto _jump3271;
    fail_assertion("negative array index");
    _jump3271:;
    if (_1389 < _1382.d1)
    goto _jump3272;
    fail_assertion("index too large");
    _jump3272:;
    int64_t _1390 = 0;
    _1390 *= _1382.d0;
    _1390 += _1388;
    _1390 *= _1382.d1;
    _1390 += _1389;
    _a2_rgba _1391 = _1382.data[_1390];
    double _1392 = get_time();
    print_time(_1392 - _1363);
    double _1393 = get_time();
    print_time(_1393 - _1362);
    bool _1394 = _1062.d2 <= _1344.d2;
    bool _1395;
    if (!_1394)
    goto _jump3273;
    bool _1396 = false;
    _1395 = _1396;
    goto _jump3274;
    _jump3273:;
    bool _1397 = true;
    _a3_bool _1398;
    if (!_1397)
    goto _jump3275;
    bool _1400 = true;
    bool _1399 = _1400;
    if (0 == _1400)
    goto _jump3276;
    bool _1401 = _1344.d2 != _1391.d0;
    _1399 = _1401;
    _jump3276:;
    _a3_bool _1402;
    if (!_1399)
    goto _jump3277;
    _a3_bool _1403;
    // Computing bound for w
    _1403.d0 = _870.d0;
    if (_870.d0 > 0) 
    goto _jump3278;
    fail_assertion("non-positive loop bound");
    _jump3278:;
    // Computing bound for x
    _1403.d1 = _1062.d0;
    if (_1062.d0 > 0) 
    goto _jump3279;
    fail_assertion("non-positive loop bound");
    _jump3279:;
    // Computing bound for y
    _1403.d2 = _1391.d1;
    if (_1391.d1 > 0) 
    goto _jump3280;
    fail_assertion("non-positive loop bound");
    _jump3280:;
    // Computing total size of heap memory to allocate
    int64_t _1404 = 1;
    _1404 *= _870.d0;
    _1404 *= _1062.d0;
    _1404 *= _1391.d1;
    _1404 *= sizeof(bool);
    _1403.data = jpl_alloc(_1404);
    int64_t _1405 = 0; // y
    int64_t _1406 = 0; // x
    int64_t _1407 = 0; // w
    _jump3281:; // Begin body of loop
    bool _1408 = _1062.d1 == _1405;
    int64_t _1409 = 0;
    _1409 *= _1403.d0;
    _1409 += _1407;
    _1409 *= _1403.d1;
    _1409 += _1406;
    _1409 *= _1403.d2;
    _1409 += _1405;
    _1403.data[_1409] = _1408;
    _1405++;
    if (_1405 < _1391.d1)
    goto _jump3281;
    _1405 = 0;
    _1406++;
    if (_1406 < _1062.d0)
    goto _jump3281;
    _1406 = 0;
    _1407++;
    if (_1407 < _870.d0)
    goto _jump3281;
    // End body of loop
    _1402 = _1403;
    goto _jump3282;
    _jump3277:;
    _a3_bool _1410;
    // Computing bound for w
    _1410.d0 = _1062.d2;
    if (_1062.d2 > 0) 
    goto _jump3283;
    fail_assertion("non-positive loop bound");
    _jump3283:;
    // Computing bound for x
    _1410.d1 = _1062.d0;
    if (_1062.d0 > 0) 
    goto _jump3284;
    fail_assertion("non-positive loop bound");
    _jump3284:;
    // Computing bound for y
    _1410.d2 = _1062.d1;
    if (_1062.d1 > 0) 
    goto _jump3285;
    fail_assertion("non-positive loop bound");
    _jump3285:;
    // Computing total size of heap memory to allocate
    int64_t _1411 = 1;
    _1411 *= _1062.d2;
    _1411 *= _1062.d0;
    _1411 *= _1062.d1;
    _1411 *= sizeof(bool);
    _1410.data = jpl_alloc(_1411);
    int64_t _1412 = 0; // y
    int64_t _1413 = 0; // x
    int64_t _1414 = 0; // w
    _jump3286:; // Begin body of loop
    bool _1415 = _1222 == _1222;
    int64_t _1416 = 0;
    _1416 *= _1410.d0;
    _1416 += _1414;
    _1416 *= _1410.d1;
    _1416 += _1413;
    _1416 *= _1410.d2;
    _1416 += _1412;
    _1410.data[_1416] = _1415;
    _1412++;
    if (_1412 < _1062.d1)
    goto _jump3286;
    _1412 = 0;
    _1413++;
    if (_1413 < _1062.d0)
    goto _jump3286;
    _1413 = 0;
    _1414++;
    if (_1414 < _1062.d2)
    goto _jump3286;
    // End body of loop
    _1402 = _1410;
    _jump3282:;
    _1398 = _1402;
    goto _jump3287;
    _jump3275:;
    _a3_bool _1417;
    // Computing bound for w
    double _1418 = 68.0;
    bool _1419 = _1418 >= _407;
    int64_t _1420 = n(_1419);
    _1417.d0 = _1420;
    if (_1420 > 0) 
    goto _jump3288;
    fail_assertion("non-positive loop bound");
    _jump3288:;
    // Computing bound for x
    _1417.d1 = _1391.d1;
    if (_1391.d1 > 0) 
    goto _jump3289;
    fail_assertion("non-positive loop bound");
    _jump3289:;
    // Computing bound for y
    _1417.d2 = _1344.d0;
    if (_1344.d0 > 0) 
    goto _jump3290;
    fail_assertion("non-positive loop bound");
    _jump3290:;
    // Computing total size of heap memory to allocate
    int64_t _1421 = 1;
    _1421 *= _1420;
    _1421 *= _1391.d1;
    _1421 *= _1344.d0;
    _1421 *= sizeof(bool);
    _1417.data = jpl_alloc(_1421);
    int64_t _1422 = 0; // y
    int64_t _1423 = 0; // x
    int64_t _1424 = 0; // w
    _jump3291:; // Begin body of loop
    _a3_int64_t _1425;
    // Computing bound for z
    _1425.d0 = _1344.d0;
    if (_1344.d0 > 0) 
    goto _jump3292;
    fail_assertion("non-positive loop bound");
    _jump3292:;
    // Computing bound for A
    _1425.d1 = _1344.d2;
    if (_1344.d2 > 0) 
    goto _jump3293;
    fail_assertion("non-positive loop bound");
    _jump3293:;
    // Computing bound for B
    _1425.d2 = _1062.d1;
    if (_1062.d1 > 0) 
    goto _jump3294;
    fail_assertion("non-positive loop bound");
    _jump3294:;
    // Computing total size of heap memory to allocate
    int64_t _1426 = 1;
    _1426 *= _1344.d0;
    _1426 *= _1344.d2;
    _1426 *= _1062.d1;
    _1426 *= sizeof(int64_t);
    _1425.data = jpl_alloc(_1426);
    int64_t _1427 = 0; // B
    int64_t _1428 = 0; // A
    int64_t _1429 = 0; // z
    _jump3295:; // Begin body of loop
    int64_t _1430 = 0;
    _1430 *= _1425.d0;
    _1430 += _1429;
    _1430 *= _1425.d1;
    _1430 += _1428;
    _1430 *= _1425.d2;
    _1430 += _1427;
    _1425.data[_1430] = _1427;
    _1427++;
    if (_1427 < _1062.d1)
    goto _jump3295;
    _1427 = 0;
    _1428++;
    if (_1428 < _1344.d2)
    goto _jump3295;
    _1428 = 0;
    _1429++;
    if (_1429 < _1344.d0)
    goto _jump3295;
    // End body of loop
    double _1431 = _407 + _407;
    bool _1432 = a(_1425, _1431);
    int64_t _1433 = 0;
    _1433 *= _1417.d0;
    _1433 += _1424;
    _1433 *= _1417.d1;
    _1433 += _1423;
    _1433 *= _1417.d2;
    _1433 += _1422;
    _1417.data[_1433] = _1432;
    _1422++;
    if (_1422 < _1344.d0)
    goto _jump3291;
    _1422 = 0;
    _1423++;
    if (_1423 < _1391.d1)
    goto _jump3291;
    _1423 = 0;
    _1424++;
    if (_1424 < _1420)
    goto _jump3291;
    // End body of loop
    _1398 = _1417;
    _jump3287:;
    _a2_bool _1434;
    // Computing bound for w
    _1434.d0 = _1062.d1;
    if (_1062.d1 > 0) 
    goto _jump3296;
    fail_assertion("non-positive loop bound");
    _jump3296:;
    // Computing bound for x
    _1434.d1 = _1062.d0;
    if (_1062.d0 > 0) 
    goto _jump3297;
    fail_assertion("non-positive loop bound");
    _jump3297:;
    // Computing total size of heap memory to allocate
    int64_t _1435 = 1;
    _1435 *= _1062.d1;
    _1435 *= _1062.d0;
    _1435 *= sizeof(bool);
    _1434.data = jpl_alloc(_1435);
    int64_t _1436 = 0; // x
    int64_t _1437 = 0; // w
    _jump3298:; // Begin body of loop
    bool _1438 = true;
    int64_t _1439 = 0;
    _1439 *= _1434.d0;
    _1439 += _1437;
    _1439 *= _1434.d1;
    _1439 += _1436;
    _1434.data[_1439] = _1438;
    _1436++;
    if (_1436 < _1062.d0)
    goto _jump3298;
    _1436 = 0;
    _1437++;
    if (_1437 < _1062.d1)
    goto _jump3298;
    // End body of loop
    _a1_int64_t _1440;
    _1440.d0 = 2;
    _1440.data = jpl_alloc(sizeof(int64_t) * 2);
    _1440.data[0] = _870.d0;
    _1440.data[1] = _1344.d2;
    if (_1344.d1 >= 0)
    goto _jump3299;
    fail_assertion("negative array index");
    _jump3299:;
    if (_1344.d1 < _1440.d0)
    goto _jump3300;
    fail_assertion("index too large");
    _jump3300:;
    int64_t _1441 = 0;
    _1441 *= _1440.d0;
    _1441 += _1344.d1;
    int64_t _1442 = _1440.data[_1441];
    if (_1442 >= 0)
    goto _jump3301;
    fail_assertion("negative array index");
    _jump3301:;
    if (_1442 < _1434.d0)
    goto _jump3302;
    fail_assertion("index too large");
    _jump3302:;
    if (_1344.d0 >= 0)
    goto _jump3303;
    fail_assertion("negative array index");
    _jump3303:;
    if (_1344.d0 < _1434.d1)
    goto _jump3304;
    fail_assertion("index too large");
    _jump3304:;
    int64_t _1443 = 0;
    _1443 *= _1434.d0;
    _1443 += _1442;
    _1443 *= _1434.d1;
    _1443 += _1344.d0;
    bool _1444 = _1434.data[_1443];
    int64_t _1445 = n(_1444);
    int64_t _1446;
    // Computing bound for w
    if (_1062.d2 > 0) 
    goto _jump3305;
    fail_assertion("non-positive loop bound");
    _jump3305:;
    // Computing bound for x
    int64_t _1447;
    // Computing bound for w
    if (_1344.d2 > 0) 
    goto _jump3306;
    fail_assertion("non-positive loop bound");
    _jump3306:;
    // Computing bound for x
    if (_1062.d0 > 0) 
    goto _jump3307;
    fail_assertion("non-positive loop bound");
    _jump3307:;
    _1447 = 0;
    int64_t _1448 = 0; // x
    int64_t _1449 = 0; // w
    _jump3308:; // Begin body of loop
    int64_t _1450;
    // Computing bound for y
    if (_1448 > 0) 
    goto _jump3309;
    fail_assertion("non-positive loop bound");
    _jump3309:;
    // Computing bound for z
    if (_1062.d0 > 0) 
    goto _jump3310;
    fail_assertion("non-positive loop bound");
    _jump3310:;
    _1450 = 0;
    int64_t _1451 = 0; // z
    int64_t _1452 = 0; // y
    _jump3311:; // Begin body of loop
    _1450 += _1391.d1;
    _1451++;
    if (_1451 < _1062.d0)
    goto _jump3311;
    _1451 = 0;
    _1452++;
    if (_1452 < _1448)
    goto _jump3311;
    // End body of loop
    _1447 += _1450;
    _1448++;
    if (_1448 < _1062.d0)
    goto _jump3308;
    _1448 = 0;
    _1449++;
    if (_1449 < _1344.d2)
    goto _jump3308;
    // End body of loop
    if (_1447 > 0) 
    goto _jump3312;
    fail_assertion("non-positive loop bound");
    _jump3312:;
    _1446 = 0;
    int64_t _1453 = 0; // x
    int64_t _1454 = 0; // w
    _jump3313:; // Begin body of loop
    _1446 += _1391.d1;
    _1453++;
    if (_1453 < _1447)
    goto _jump3313;
    _1453 = 0;
    _1454++;
    if (_1454 < _1062.d2)
    goto _jump3313;
    // End body of loop
    int64_t _1455 = _1446 * _1391.d0;
    if (_1445 >= 0)
    goto _jump3314;
    fail_assertion("negative array index");
    _jump3314:;
    if (_1445 < _1398.d0)
    goto _jump3315;
    fail_assertion("index too large");
    _jump3315:;
    if (_1455 >= 0)
    goto _jump3316;
    fail_assertion("negative array index");
    _jump3316:;
    if (_1455 < _1398.d1)
    goto _jump3317;
    fail_assertion("index too large");
    _jump3317:;
    if (_1391.d0 >= 0)
    goto _jump3318;
    fail_assertion("negative array index");
    _jump3318:;
    if (_1391.d0 < _1398.d2)
    goto _jump3319;
    fail_assertion("index too large");
    _jump3319:;
    int64_t _1456 = 0;
    _1456 *= _1398.d0;
    _1456 += _1445;
    _1456 *= _1398.d1;
    _1456 += _1455;
    _1456 *= _1398.d2;
    _1456 += _1391.d0;
    bool _1457 = _1398.data[_1456];
    _1395 = _1457;
    _jump3274:;
    bool _1458 = !_1395;
    write_image(_846, "A.png");
}

