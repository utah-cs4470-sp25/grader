global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 5
const1: db `non-positive loop bound`, 0
const2: dq 4
const3: dq 3
const4: dq 2
const5: db `overflow computing array size`, 0
const6: dq 0.0
const7: dq 10
const8: dq 0
const9: db `(TupleType (ArrayType (IntType) 3) (ArrayType (FloatType) 4))`, 0

section .text
f:
_f:
	push rbp
	mov rbp, rsp
	push rdi
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'd'
	mov rax, [rel const0] ; 5
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump1:
	; Computing bound for 'c'
	mov rax, [rel const2] ; 4
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump2
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump2:
	; Computing bound for 'b'
	mov rax, [rel const3] ; 3
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump3
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump3:
	; Computing bound for 'a'
	mov rax, [rel const4] ; 2
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump4
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump4:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float 
	imul rdi, [rsp + 0 + 0] ; multiply by 2 
	jno .jump5
	lea rdi, [rel const5] ; 'overflow computing array size'
	call _fail_assertion
.jump5:
	imul rdi, [rsp + 0 + 8] ; multiply by 3 
	jno .jump6
	lea rdi, [rel const5] ; 'overflow computing array size'
	call _fail_assertion
.jump6:
	imul rdi, [rsp + 0 + 16] ; multiply by 4 
	jno .jump7
	lea rdi, [rel const5] ; 'overflow computing array size'
	call _fail_assertion
.jump7:
	imul rdi, [rsp + 0 + 24] ; multiply by 5 
	jno .jump8
	lea rdi, [rel const5] ; 'overflow computing array size'
	call _fail_assertion
.jump8:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 32], rax ; Move to pre-allocated space
	; Initialize 'd' to 0
	mov rax, 0
	push rax
	; Initialize 'c' to 0
	mov rax, 0
	push rax
	; Initialize 'b' to 0
	mov rax, 0
	push rax
	; Initialize 'a' to 0
	mov rax, 0
	push rax
.jump9: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const6] ; 0.0
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 8
	add rax, [rsp + 72]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'd'
	add qword [rsp + 24], 1
	; Compare d to its bound
	mov rax, [rsp + 24]
	cmp rax, [rsp + 56]
	jl .jump9 ; If d < bound, next iter
	mov qword [rsp + 24], 0 ; d = 0
	add qword [rsp + 16], 1 ; c++
	; Compare c to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 48]
	jl .jump9 ; If c < bound, next iter
	mov qword [rsp + 16], 0 ; c = 0
	add qword [rsp + 8], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 40]
	jl .jump9 ; If b < bound, next iter
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 32]
	jl .jump9 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 32
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'k'
	mov rax, [rel const7] ; 10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump10
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump10:
	; Computing bound for 'j'
	mov rax, [rel const7] ; 10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump11
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump11:
	; Computing bound for 'i'
	mov rax, [rel const7] ; 10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump12
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump12:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by 10 
	jno .jump13
	lea rdi, [rel const5] ; 'overflow computing array size'
	call _fail_assertion
.jump13:
	imul rdi, [rsp + 0 + 8] ; multiply by 10 
	jno .jump14
	lea rdi, [rel const5] ; 'overflow computing array size'
	call _fail_assertion
.jump14:
	imul rdi, [rsp + 0 + 16] ; multiply by 10 
	jno .jump15
	lea rdi, [rel const5] ; 'overflow computing array size'
	call _fail_assertion
.jump15:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'k' to 0
	mov rax, 0
	push rax
	; Initialize 'j' to 0
	mov rax, 0
	push rax
	; Initialize 'i' to 0
	mov rax, 0
	push rax
.jump16: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const8] ; 0
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'k'
	add qword [rsp + 16], 1
	; Compare k to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump16 ; If k < bound, next iter
	mov qword [rsp + 16], 0 ; k = 0
	add qword [rsp + 8], 1 ; j++
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump16 ; If j < bound, next iter
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump16 ; If i < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 72 bytes from rsp to rax 
		mov r10, [rsp + 64]
		mov [rax + 64], r10
		mov r10, [rsp + 56]
		mov [rax + 56], r10
		mov r10, [rsp + 48]
		mov [rax + 48], r10
		mov r10, [rsp + 40]
		mov [rax + 40], r10
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 80 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp ; end of jpl_main prelude
	sub rsp, 72
	lea rdi, [rsp + 0]
	call _f
	lea rdi, [rel const9] ; '(TupleType (ArrayType (IntType) 3) (ArrayType (FloatType) 4))'
	lea rsi, [rsp]
	call _show
	add rsp, 72
	pop r12 ; begin jpl_main postlude
	pop rbp
	ret

