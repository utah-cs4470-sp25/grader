global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 1
const1: dq 159
const2: dq 166
const3: dq 0
const4: dq 684
const5: dq 362
const6: db `mod by zero`, 0
const7: dq 794
const8: db `non-positive loop bound`, 0
const9: dq 548
const10: db `d`, 0
const11: dq 76.18
const12: db `b`, 0
const13: db `c.png`, 0

section .text
a:
_a:
	push rbp
	mov rbp, rsp
	mov rax, [rel const0] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump1
	mov rax, [rel const1] ; 159
	push rax
	jmp .jump2
.jump1:
	mov rax, [rel const2] ; 166
	push rax
.jump2:
	mov rax, [rel const3] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump3
	mov rax, [rel const4] ; 684
	push rax
	mov rax, [rel const5] ; 362
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump5
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump5:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	jmp .jump4
.jump3:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'd'
	mov rax, [rel const7] ; 794
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump6
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const8] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump6:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'd' to 0
	mov rax, 0
	push rax
.jump7: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const9] ; 548
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'd'
	add qword [rsp + 0], 1
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump7 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
.jump4:
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump8
	lea rdi, [rel const10] ; 'd'
	call _fail_assertion
.jump8:
	mov rax, [rel const11] ; 76.18
	push rax
	sub rsp, 32
	; Moving 32 bytes from rbp - -16 to rsp 
		mov r10, [rbp - -16 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 8 to rsp + 24 
		mov r10, [rsp + 8 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump9
	mov rax, [rel const0] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
.jump9:
	push rax
	add rsp, 8 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp ; end of jpl_main prelude
	mov rax, [rel const3] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump10
	mov rax, [rel const3] ; False
	push rax
	pop rax
.jump10:
	push rax
	pop rax
	cmp rax, 0
	jne .jump11
	mov rax, [rel const0] ; True
	push rax
	pop rax
.jump11:
	push rax
	pop rax
	cmp rax, 0
	jne .jump12
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const12] ; 'b'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump12:
	mov rax, [rel const3] ; False
	push rax
	sub rsp, 24
	lea rdi, [rsp]
	sub rsp, 8 ; Add alignment
	lea rsi, [rel const13] ; 'c.png'
	call _read_image
	add rsp, 8 ; Remove alignment
	add rsp, 32 ; Local variables
	pop r12 ; begin jpl_main postlude
	pop rbp
	ret

