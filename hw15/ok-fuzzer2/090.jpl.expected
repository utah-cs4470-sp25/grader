global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 141
const1: dq 559
const2: db `non-positive loop bound`, 0
const3: dq 1
const4: db `a`, 0
const5: dq 547
const6: dq 413
const7: dq 98
const8: dq 271
const9: db `overflow computing array size`, 0
const10: dq 983
const11: dq 581
const12: dq 655
const13: db `negative array index`, 0
const14: db `index too large`, 0
const15: dq 686
const16: dq 77.49
const17: dq 0

section .text
a:
_a:
	push rbp
	mov rbp, rsp
	push rdi
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const5] ; 547
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump6
	mov rax, [rel const3] ; True
	push rax
	pop rax
.jump6:
	push rax
	pop rax
	cmp rax, 0
	jne .jump7
	mov rax, [rel const6] ; 413
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump8
	mov rax, [rel const7] ; 98
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	pop rax
.jump8:
	push rax
	pop rax
.jump7:
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'f'
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump9
	lea rdi, [rel const2] ; 'non-positive loop bound'
	call _fail_assertion
.jump9:
	; Computing bound for 'e'
	mov rax, [rel const8] ; 271
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump10
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const2] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump10:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by 271 
	jno .jump11
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const9] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump11:
	imul rdi, [rsp + 0 + 8] ; multiply by c 
	jno .jump12
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const9] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump12:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'f' to 0
	mov rax, 0
	push rax
	; Initialize 'e' to 0
	mov rax, 0
	push rax
.jump13: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'f'
	add qword [rsp + 8], 1
	; Compare f to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump13 ; If f < bound, next iter
	mov qword [rsp + 8], 0 ; f = 0
	add qword [rsp + 0], 1 ; e++
	; Compare e to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump13 ; If e < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const10] ; 983
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump14
	mov rax, [rel const11] ; 581
	push rax
	jmp .jump15
.jump14:
	mov rax, [rel const12] ; 655
	push rax
.jump15:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump16
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const13] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump16:
	cmp rax, [rsp + 16]
	jl .jump17
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const14] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump17:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump18
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const13] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump18:
	cmp rax, [rsp + 24]
	jl .jump19
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const14] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump19:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const15] ; 686
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const16] ; 77.49
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 24 ; Local variables
	pop rbp
	ret

c:
_c:
	push rbp
	mov rbp, rsp
	sub rsp, 24
	; Moving 24 bytes from rbp - -16 to rsp 
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp 
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp 
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump20
	lea rdi, [rel const13] ; 'negative array index'
	call _fail_assertion
.jump20:
	cmp rax, [rsp + 16]
	jl .jump21
	lea rdi, [rel const14] ; 'index too large'
	call _fail_assertion
.jump21:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump22
	lea rdi, [rel const13] ; 'negative array index'
	call _fail_assertion
.jump22:
	cmp rax, [rsp + 24]
	jl .jump23
	lea rdi, [rel const14] ; 'index too large'
	call _fail_assertion
.jump23:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 32
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 32
	; Moving 32 bytes from rax to rsp 
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 24 
		mov r10, [rsp + 0 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	mov rdi, 8
	call _jpl_alloc
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	sub rsp, 24
	; Moving 24 bytes from rbp - -16 to rsp 
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp 
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp 
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump24
	lea rdi, [rel const13] ; 'negative array index'
	call _fail_assertion
.jump24:
	cmp rax, [rsp + 16]
	jl .jump25
	lea rdi, [rel const14] ; 'index too large'
	call _fail_assertion
.jump25:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump26
	lea rdi, [rel const13] ; 'negative array index'
	call _fail_assertion
.jump26:
	cmp rax, [rsp + 24]
	jl .jump27
	lea rdi, [rel const14] ; 'index too large'
	call _fail_assertion
.jump27:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 32
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 32
	; Moving 32 bytes from rax to rsp 
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Moving 8 bytes from rsp + 0 to rsp + 24 
		mov r10, [rsp + 0 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 40 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp ; end of jpl_main prelude
	mov rax, [rel const0] ; 141
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'a'
	mov rax, [rel const1] ; 559
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1
	lea rdi, [rel const2] ; 'non-positive loop bound'
	call _fail_assertion
.jump1:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'a' to 0
	mov rax, 0
	push rax
.jump2: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const3] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump3
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	jmp .jump4
.jump3:
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
.jump4:
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'a'
	add qword [rsp + 0], 1
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump2 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump5
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'a'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump5:
	mov rax, [rel const17] ; False
	push rax
	add rsp, 8 ; Local variables
	pop r12 ; begin jpl_main postlude
	pop rbp
	ret

