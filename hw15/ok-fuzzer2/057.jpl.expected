global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 1
const1: db `(BoolType)`, 0
const2: dq 57.38
const3: dq 65.93
const4: db `b`, 0

section .text
a:
_a:
	push rbp
	mov rbp, rsp
	push rdi
	mov rax, [rel const0] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump1
	mov rax, [rel const0] ; True
	push rax
	pop rax
.jump1:
	push rax
	sub rsp, 16
	; Moving 16 bytes from rbp - -16 to rsp 
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rdi
	call _a
	add rsp, 16
	push rax
	pop rax
	add rsp, 16 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp ; end of jpl_main prelude
	sub rsp, 8 ; Add alignment
	call _get_time
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	call _get_time
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const0] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const1] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	sub rsp, 8 ; Add alignment
	call _get_time
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 0]
	subsd xmm0, xmm1
	sub rsp, 8 ; Add alignment
	call _print_time
	add rsp, 8 ; Remove alignment
	sub rsp, 8 ; Add alignment
	call _get_time
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp + 8]
	subsd xmm0, xmm1
	sub rsp, 8 ; Add alignment
	call _print_time
	add rsp, 8 ; Remove alignment
	mov rax, [rel const2] ; 57.38
	push rax
	mov rax, [rel const3] ; 65.93
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump2
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'b'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump2:
	mov rax, [rel const0] ; True
	push rax
	pop rax
	cmp rax, 0
	jne .jump3
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'b'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump3:
	add rsp, 16 ; Local variables
	pop r12 ; begin jpl_main postlude
	pop rbp
	ret

