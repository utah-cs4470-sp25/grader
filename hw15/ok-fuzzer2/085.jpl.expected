global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 0
const1: dq 1
const2: db `c`, 0
const3: dq 495
const4: db `negative array index`, 0
const5: db `index too large`, 0
const6: db `d`, 0
const7: dq 79
const8: db `non-positive loop bound`, 0
const9: db `overflow computing array size`, 0
const10: dq 230
const11: dq 97.97

section .text
a:
_a:
	push rbp
	mov rbp, rsp
	mov rax, [rel const0] ; False
	push rax
	mov rax, [rel const1] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump1
	mov rax, [rel const1] ; True
	push rax
	jmp .jump2
.jump1:
	sub rsp, 8 ; Add alignment
	call _a
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	cmp rax, 0
	je .jump3
	mov rax, [rel const1] ; True
	push rax
	jmp .jump4
.jump3:
	mov rax, [rel const1] ; True
	push rax
.jump4:
.jump2:
	pop rax
	cmp rax, 0
	jne .jump5
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const2] ; 'c'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump5:
	sub rsp, 8 ; Add alignment
	call _a
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	add rsp, 8 ; Local variables
	pop rbp
	ret

c:
_c:
	push rbp
	mov rbp, rsp
	mov rax, [rel const0] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump10
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp 
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	jmp .jump11
.jump10:
	call _a
	push rax
	pop rax
	cmp rax, 0
	je .jump12
	call _a
	push rax
	pop rax
	xor rax, 1
	push rax
	jmp .jump13
.jump12:
	call _a
	push rax
.jump13:
.jump11:
	pop rax
	cmp rax, 0
	jne .jump14
	lea rdi, [rel const6] ; 'd'
	call _fail_assertion
.jump14:
	call _a
	push rax
	pop rax
	cmp rax, 0
	jne .jump15
	lea rdi, [rel const6] ; 'd'
	call _fail_assertion
.jump15:
	mov rax, [rel const1] ; 1
	push rax
	pop rax
	add rsp, 0 ; Local variables
	pop rbp
	ret

d:
_d:
	push rbp
	mov rbp, rsp
	push rdi
	push rsi
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'g'
	mov rax, [rel const7] ; 79
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump16
	lea rdi, [rel const8] ; 'non-positive loop bound'
	call _fail_assertion
.jump16:
	; Computing bound for 'f'
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump17
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const8] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump17:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof bool[,] 
	imul rdi, [rsp + 0 + 0] ; multiply by e 
	jno .jump18
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const9] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump18:
	imul rdi, [rsp + 0 + 8] ; multiply by 79 
	jno .jump19
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const9] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump19:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'g' to 0
	mov rax, 0
	push rax
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump20: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'i'
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump21
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const8] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump21:
	; Computing bound for 'h'
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump22
	lea rdi, [rel const8] ; 'non-positive loop bound'
	call _fail_assertion
.jump22:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool 
	imul rdi, [rsp + 0 + 0] ; multiply by e 
	jno .jump23
	lea rdi, [rel const9] ; 'overflow computing array size'
	call _fail_assertion
.jump23:
	imul rdi, [rsp + 0 + 8] ; multiply by g 
	jno .jump24
	lea rdi, [rel const9] ; 'overflow computing array size'
	call _fail_assertion
.jump24:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'i' to 0
	mov rax, 0
	push rax
	; Initialize 'h' to 0
	mov rax, 0
	push rax
.jump25: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const0] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'i'
	add qword [rsp + 8], 1
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump25 ; If i < bound, next iter
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump25 ; If h < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'g'
	add qword [rsp + 8], 1
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump20 ; If g < bound, next iter
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump20 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const10] ; 230
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump26
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump26:
	cmp rax, [rsp + 16]
	jl .jump27
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump27:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump28
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump28:
	cmp rax, [rsp + 24]
	jl .jump29
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump29:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 24
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 24
	; Moving 24 bytes from rax to rsp 
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const0] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump30
	mov rax, [rel const1] ; True
	push rax
	pop rax
.jump30:
	push rax
	pop rax
	cmp rax, 0
	je .jump31
	sub rsp, 24
	; Moving 24 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	jmp .jump32
.jump31:
	sub rsp, 24
	; Moving 24 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
.jump32:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'l'
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump33
	lea rdi, [rel const8] ; 'non-positive loop bound'
	call _fail_assertion
.jump33:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float 
	imul rdi, [rsp + 0 + 0] ; multiply by (- g) 
	jno .jump34
	lea rdi, [rel const9] ; 'overflow computing array size'
	call _fail_assertion
.jump34:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'l' to 0
	mov rax, 0
	push rax
.jump35: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const11] ; 97.97
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'l'
	add qword [rsp + 0], 1
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump35 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 80 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp ; end of jpl_main prelude
	mov rax, [rel const0] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump6
	sub rsp, 8 ; Add alignment
	call _a
	add rsp, 8 ; Remove alignment
	push rax
	mov rdi, 8
	call _jpl_alloc
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	jmp .jump7
.jump6:
	mov rax, [rel const0] ; False
	push rax
	mov rdi, 8
	call _jpl_alloc
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
.jump7:
	mov rax, [rel const3] ; 495
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump8
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
.jump8:
	cmp rax, [rsp + 8]
	jl .jump9
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
.jump9:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	add rsp, 8 ; Local variables
	pop r12 ; begin jpl_main postlude
	pop rbp
	ret

