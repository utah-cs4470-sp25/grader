global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 0
const1: dq 198
const2: dq 645
const3: dq 164
const4: db `non-positive loop bound`, 0
const5: dq 963
const6: dq 843
const7: db `overflow computing array size`, 0
const8: dq 727
const9: dq 69.73
const10: dq 289
const11: dq 559
const12: dq 207
const13: db `negative array index`, 0
const14: db `index too large`, 0
const15: dq 477
const16: dq 78
const17: dq 87.65
const18: dq 45.64
const19: dq 127
const20: dq 261
const21: dq 226
const22: dq 35
const23: db `mod by zero`, 0
const24: dq 1
const25: dq 987
const26: dq 627
const27: dq 87.57
const28: dq 99.65
const29: dq 815
const30: dq 797
const31: dq 141
const32: dq 20
const33: dq 116
const34: dq 13.28
const35: dq 886
const36: dq 948
const37: dq 953
const38: db `m`, 0
const39: dq 94.9
const40: dq 3.56

section .text
a:
_a:
	push rbp
	mov rbp, rsp
	push rdi
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'd'
	mov rax, [rel const0] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump1
	mov rax, [rel const1] ; 198
	push rax
	jmp .jump2
.jump1:
	mov rax, [rel const2] ; 645
	push rax
.jump2:
	mov rax, [rel const3] ; 164
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump3
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump3:
	; Computing bound for 'c'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'c'
	mov rax, [rel const5] ; 963
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump4
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump4:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'c' to 0
	mov rax, 0
	push rax
.jump5: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const6] ; 843
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'c'
	add qword [rsp + 0], 1
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump5 ; If c < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump6
	lea rdi, [rel const4] ; 'non-positive loop bound'
	call _fail_assertion
.jump6:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof float[,] 
imul rdi, [rsp + 0 + 0] ; multiply by (sum[c : 963] 843) 
	jno .jump7
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump7:
	imul rdi, [rsp + 0 + 8] ; multiply by ((- 164) * (if false then 198 else 645)) 
	jno .jump8
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump8:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'd' to 0
	mov rax, 0
	push rax
	; Initialize 'c' to 0
	mov rax, 0
	push rax
.jump9: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'f'
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump10
	lea rdi, [rel const4] ; 'non-positive loop bound'
	call _fail_assertion
.jump10:
	; Computing bound for 'e'
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump11
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump11:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float 
	imul rdi, [rsp + 0 + 0] ; multiply by d 
	jno .jump12
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump12:
	imul rdi, [rsp + 0 + 8] ; multiply by b 
	jno .jump13
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump13:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'f' to 0
	mov rax, 0
	push rax
	; Initialize 'e' to 0
	mov rax, 0
	push rax
.jump14: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'g'
	mov rax, [rel const8] ; 727
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump15
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump15:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'g' to 0
	mov rax, 0
	push rax
.jump16: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const9] ; 69.73
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 16] ; Load sum
	movsd [rsp + 16], xmm0 ; Save sum
	; Increment 'g'
	add qword [rsp + 0], 1
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump16 ; If g < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'f'
	add qword [rsp + 8], 1
	; Compare f to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump14 ; If f < bound, next iter
	mov qword [rsp + 8], 0 ; f = 0
	add qword [rsp + 0], 1 ; e++
	; Compare e to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump14 ; If e < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'd'
	add qword [rsp + 8], 1
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump9 ; If d < bound, next iter
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump9 ; If c < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'g'
	mov rax, [rel const10] ; 289
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump17
	lea rdi, [rel const4] ; 'non-positive loop bound'
	call _fail_assertion
.jump17:
	; Computing bound for 'f'
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump18
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump18:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof int[] 
	imul rdi, [rsp + 0 + 0] ; multiply by b 
	jno .jump19
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump19:
	imul rdi, [rsp + 0 + 8] ; multiply by (e * 289) 
	jno .jump20
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump20:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'g' to 0
	mov rax, 0
	push rax
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump21: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'h'
	mov rax, [rel const11] ; 559
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump22
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump22:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by 559 
	jno .jump23
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump23:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'h' to 0
	mov rax, 0
	push rax
.jump24: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'h'
	add qword [rsp + 0], 1
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump24 ; If h < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 16
	add rax, [rsp + 48]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment 'g'
	add qword [rsp + 8], 1
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump21 ; If g < bound, next iter
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump21 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const12] ; 207
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump25
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const13] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump25:
	cmp rax, [rsp + 16]
	jl .jump26
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const14] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump26:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump27
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const13] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump27:
	cmp rax, [rsp + 24]
	jl .jump28
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const14] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump28:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 16
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 16
	; Moving 16 bytes from rax to rsp 
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const0] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump29
	mov rax, [rel const15] ; 477
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	jmp .jump30
.jump29:
	mov rax, [rel const0] ; False
	push rax
.jump30:
	pop rax
	cmp rax, 0
	je .jump31
	mov rax, [rel const16] ; 78
	push rax
	pop rdi
	call _a
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump32
.jump31:
	mov rax, [rel const0] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump33
	mov rax, [rel const17] ; 87.65
	push rax
	jmp .jump34
.jump33:
	mov rax, [rel const18] ; 45.64
	push rax
.jump34:
.jump32:
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 48 ; Local variables
	pop rbp
	ret

e:
_e:
	push rbp
	mov rbp, rsp
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'g'
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump45
	lea rdi, [rel const4] ; 'non-positive loop bound'
	call _fail_assertion
.jump45:
	; Computing bound for 'f'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump46
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump46:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'g' to 0
	mov rax, 0
	push rax
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump47: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const27] ; 87.57
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 32] ; Load sum
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment 'g'
	add qword [rsp + 8], 1
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump47 ; If g < bound, next iter
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump47 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rel const28] ; 99.65
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump48
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rdi, 8
	sub rsp, 8 ; Add alignment
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	jmp .jump49
.jump48:
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const29] ; 815
	push rax
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
.jump49:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'i'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'i'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump50
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump50:
	; Computing bound for 'h'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump51
	lea rdi, [rel const4] ; 'non-positive loop bound'
	call _fail_assertion
.jump51:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'i' to 0
	mov rax, 0
	push rax
	; Initialize 'h' to 0
	mov rax, 0
	push rax
.jump52: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const30] ; 797
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'i'
	add qword [rsp + 8], 1
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump52 ; If i < bound, next iter
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump52 ; If h < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump53
	lea rdi, [rel const4] ; 'non-positive loop bound'
	call _fail_assertion
.jump53:
	; Computing bound for 'h'
	sub rsp, 24
	; Moving 24 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const31] ; 141
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump54
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const13] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump54:
	cmp rax, [rsp + 16]
	jl .jump55
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const14] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump55:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump56
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const13] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump56:
	cmp rax, [rsp + 24]
	jl .jump57
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const14] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump57:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump58
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump58:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'i' to 0
	mov rax, 0
	push rax
	; Initialize 'h' to 0
	mov rax, 0
	push rax
.jump59: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'i'
	add qword [rsp + 8], 1
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump59 ; If i < bound, next iter
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump59 ; If h < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rel const32] ; 20
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump60
	lea rdi, [rel const23] ; 'mod by zero'
	call _fail_assertion
.jump60:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const0] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump61
	mov rax, [rel const0] ; False
	push rax
	jmp .jump62
.jump61:
	mov rax, [rel const24] ; True
	push rax
.jump62:
	pop rax
	cmp rax, 0
	jne .jump63
	mov rax, [rel const24] ; True
	push rax
	pop rax
.jump63:
	push rax
	pop rax
	cmp rax, 0
	je .jump64
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'i'
	mov rax, [rel const33] ; 116
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump66
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump66:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float 
	imul rdi, [rsp + 0 + 0] ; multiply by 116 
	jno .jump67
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump67:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'i' to 0
	mov rax, 0
	push rax
.jump68: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const34] ; 13.28
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'i'
	add qword [rsp + 0], 1
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump68 ; If i < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'i'
	mov rax, [rel const35] ; 886
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump69
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump69:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'i' to 0
	mov rax, 0
	push rax
.jump70: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'i'
	add qword [rsp + 0], 1
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump70 ; If i < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump71
	lea rdi, [rel const13] ; 'negative array index'
	call _fail_assertion
.jump71:
	cmp rax, [rsp + 8]
	jl .jump72
	lea rdi, [rel const14] ; 'index too large'
	call _fail_assertion
.jump72:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump65
.jump64:
	sub rsp, 8 ; Add alignment
	mov rax, [rel const36] ; 948
	push rax
	pop rdi
	call _a
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
.jump65:
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 24 ; Local variables
	pop rbp
	ret

f:
_f:
	push rbp
	mov rbp, rsp
	mov rax, [rel const24] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump73
	mov rax, [rel const24] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump75
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rdi, 8
	sub rsp, 8 ; Add alignment
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	jmp .jump76
.jump75:
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
.jump76:
	jmp .jump74
.jump73:
	mov rax, [rel const0] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump77
	sub rsp, 8
	; Moving 8 bytes from rbp - -24 to rsp 
		mov r10, [rbp - -24 + 0]
		mov [rsp + 0], r10
	mov rdi, 8
	sub rsp, 8 ; Add alignment
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	jmp .jump78
.jump77:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'k'
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp 
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump79
	lea rdi, [rel const4] ; 'non-positive loop bound'
	call _fail_assertion
.jump79:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by h 
	jno .jump80
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump80:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'k' to 0
	mov rax, 0
	push rax
.jump81: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp 
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'k'
	add qword [rsp + 0], 1
	; Compare k to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump81 ; If k < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
.jump78:
.jump74:
	sub rsp, 24
	; Moving 24 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const37] ; 953
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump82
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const13] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump82:
	cmp rax, [rsp + 16]
	jl .jump83
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const14] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump83:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump84
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const13] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump84:
	cmp rax, [rsp + 24]
	jl .jump85
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const14] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump85:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump86
	lea rdi, [rel const13] ; 'negative array index'
	call _fail_assertion
.jump86:
	cmp rax, [rsp + 8]
	jl .jump87
	lea rdi, [rel const14] ; 'index too large'
	call _fail_assertion
.jump87:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump88
	lea rdi, [rel const38] ; 'm'
	call _fail_assertion
.jump88:
	mov rax, [rel const0] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	mov rax, [rel const24] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump89
	mov rax, [rel const24] ; True
	push rax
	pop rax
.jump89:
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump90
	mov rax, [rel const39] ; 94.9
	push rax
	jmp .jump91
.jump90:
	mov rax, [rel const40] ; 3.56
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
.jump91:
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 16 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp ; end of jpl_main prelude
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'c'
	mov rax, [rel const0] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump35
	mov rax, [rel const19] ; 127
	push rax
	mov rax, [rel const20] ; 261
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	jmp .jump36
.jump35:
	mov rax, [rel const21] ; 226
	push rax
	mov rax, [rel const22] ; 35
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump37
	lea rdi, [rel const23] ; 'mod by zero'
	call _fail_assertion
.jump37:
	cqo
	idiv r10
	mov rax, rdx
	push rax
.jump36:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump38
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump38:
	; Computing bound for 'b'
	mov rax, [rel const24] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump39
	mov rax, [rel const25] ; 987
	push rax
	jmp .jump40
.jump39:
	mov rax, [rel const26] ; 627
	push rax
.jump40:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump41
	lea rdi, [rel const4] ; 'non-positive loop bound'
	call _fail_assertion
.jump41:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by (if true then 987 else 627) 
	jno .jump42
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump42:
	imul rdi, [rsp + 0 + 8] ; multiply by (if false then (261 + 127) else (35 % 226)) 
	jno .jump43
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump43:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'c' to 0
	mov rax, 0
	push rax
	; Initialize 'b' to 0
	mov rax, 0
	push rax
.jump44: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'c'
	add qword [rsp + 8], 1
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump44 ; If c < bound, next iter
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump44 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	add rsp, 24 ; Local variables
	pop r12 ; begin jpl_main postlude
	pop rbp
	ret

