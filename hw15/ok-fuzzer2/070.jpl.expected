global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 0
const1: db `a`, 0
const2: dq 880
const3: db `non-positive loop bound`, 0
const4: dq 794
const5: db `overflow computing array size`, 0
const6: dq 1
const7: dq 492
const8: dq 633
const9: db `mod by zero`, 0
const10: dq 243
const11: db `negative array index`, 0
const12: db `index too large`, 0
const13: dq 67.08
const14: dq 47.95
const15: dq 91.78
const16: dq 42.33
const17: db `(TupleType (FloatType) (FloatType) (FloatType) (FloatType))`, 0

section .text
jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp ; end of jpl_main prelude
	mov rax, [rel const0] ; False
	push rax
	pop rax
	cmp rax, 0
	jne .jump1
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'a'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump1:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'b'
	mov rax, [rel const2] ; 880
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump2
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump2:
	; Computing bound for 'a'
	mov rax, [rel const4] ; 794
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump3
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump3:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool 
	imul rdi, [rsp + 0 + 0] ; multiply by 794 
	jno .jump4
	lea rdi, [rel const5] ; 'overflow computing array size'
	call _fail_assertion
.jump4:
	imul rdi, [rsp + 0 + 8] ; multiply by 880 
	jno .jump5
	lea rdi, [rel const5] ; 'overflow computing array size'
	call _fail_assertion
.jump5:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'b' to 0
	mov rax, 0
	push rax
	; Initialize 'a' to 0
	mov rax, 0
	push rax
.jump6: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const6] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'b'
	add qword [rsp + 8], 1
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump6 ; If b < bound, next iter
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump6 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const7] ; 492
	push rax
	mov rax, [rel const8] ; 633
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump7
	lea rdi, [rel const9] ; 'mod by zero'
	call _fail_assertion
.jump7:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const10] ; 243
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump8
	lea rdi, [rel const11] ; 'negative array index'
	call _fail_assertion
.jump8:
	cmp rax, [rsp + 16]
	jl .jump9
	lea rdi, [rel const12] ; 'index too large'
	call _fail_assertion
.jump9:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump10
	lea rdi, [rel const11] ; 'negative array index'
	call _fail_assertion
.jump10:
	cmp rax, [rsp + 24]
	jl .jump11
	lea rdi, [rel const12] ; 'index too large'
	call _fail_assertion
.jump11:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const13] ; 67.08
	push rax
	mov rax, [rel const14] ; 47.95
	push rax
	mov rax, [rel const15] ; 91.78
	push rax
	mov rax, [rel const16] ; 42.33
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	lea rdi, [rel const17] ; '(TupleType (FloatType) (FloatType) (FloatType) (FloatType))'
	lea rsi, [rsp]
	call _show
	add rsp, 32
	mov rax, [rel const0] ; False
	push rax
	add rsp, 16 ; Local variables
	pop r12 ; begin jpl_main postlude
	pop rbp
	ret

