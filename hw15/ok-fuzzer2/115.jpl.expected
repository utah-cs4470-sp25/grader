global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: db `a.png`, 0
const1: dq 77.74
const2: db `(FloatType)`, 0
const3: db `non-positive loop bound`, 0
const4: dq 250
const5: db `overflow computing array size`, 0
const6: db `mod by zero`, 0
const7: dq 352
const8: db `negative array index`, 0
const9: db `index too large`, 0
const10: db `f`, 0
const11: dq 0

section .text
e:
_e:
	push rbp
	mov rbp, rsp
	push rdi
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'g'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump1:
	; Computing bound for 'f'
	mov rax, [rel const4] ; 250
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump2
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump2:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool 
	imul rdi, [rsp + 0 + 0] ; multiply by 250 
	jno .jump3
	lea rdi, [rel const5] ; 'overflow computing array size'
	call _fail_assertion
.jump3:
	imul rdi, [rsp + 0 + 8] ; multiply by c 
	jno .jump4
	lea rdi, [rel const5] ; 'overflow computing array size'
	call _fail_assertion
.jump4:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'g' to 0
	mov rax, 0
	push rax
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump5: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'g'
	add qword [rsp + 8], 1
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump5 ; If g < bound, next iter
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump5 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump6
	lea rdi, [rel const6] ; 'mod by zero'
	call _fail_assertion
.jump6:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const7] ; 352
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump7
	lea rdi, [rel const8] ; 'negative array index'
	call _fail_assertion
.jump7:
	cmp rax, [rsp + 16]
	jl .jump8
	lea rdi, [rel const9] ; 'index too large'
	call _fail_assertion
.jump8:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump9
	lea rdi, [rel const8] ; 'negative array index'
	call _fail_assertion
.jump9:
	cmp rax, [rsp + 24]
	jl .jump10
	lea rdi, [rel const9] ; 'index too large'
	call _fail_assertion
.jump10:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	jne .jump11
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'f'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump11:
	sub rsp, 32
	sub rsp, 8 ; Add alignment
	lea rdi, [rsp + 8]
	call _e
	add rsp, 8 ; Remove alignment
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 32 bytes from rsp to rax 
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 40 ; Local variables
	pop rbp
	ret
	mov rax, [rel const11] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	sub rsp, 32
	lea rdi, [rsp + 0]
	call _e
	; Moving 32 bytes from rsp + 0 to rsp + 8 
		mov r10, [rsp + 0 + 24]
		mov [rsp + 8 + 24], r10
		mov r10, [rsp + 0 + 16]
		mov [rsp + 8 + 16], r10
		mov r10, [rsp + 0 + 8]
		mov [rsp + 8 + 8], r10
		mov r10, [rsp + 0 + 0]
		mov [rsp + 8 + 0], r10
	add rsp, 8
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 32 bytes from rsp to rax 
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 72 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp ; end of jpl_main prelude
	sub rsp, 24
	lea rdi, [rsp]
	lea rsi, [rel const0] ; 'a.png'
	call _read_image
	sub rsp, 8 ; Add alignment
	mov rax, [rel const1] ; 77.74
	push rax
	lea rdi, [rel const2] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	add rsp, 8 ; Remove alignment
	add rsp, 24 ; Local variables
	pop r12 ; begin jpl_main postlude
	pop rbp
	ret

