global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 1
const1: dq 94.28
const2: dq 49.06
const3: dq 0
const4: dq 656
const5: dq 448
const6: db `c`, 0
const7: dq 30.62
const8: dq 23.19
const9: dq 40.75
const10: dq 34.15
const11: dq 10.88
const12: dq 43.05

section .text
a:
_a:
	push rbp
	mov rbp, rsp
	mov rax, [rel const0] ; True
	push rax
	mov rax, [rel const1] ; 94.28
	push rax
	mov rax, [rel const2] ; 49.06
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump1
	call _a
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump2
	mov rax, [rel const3] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump4
	mov rax, [rel const0] ; True
	push rax
	jmp .jump5
.jump4:
	mov rax, [rel const0] ; True
	push rax
.jump5:
	jmp .jump3
.jump2:
	call _a
	push rax
	pop rax
	cmp rax, 0
	jne .jump6
	call _a
	push rax
	pop rax
.jump6:
	push rax
.jump3:
	pop rax
.jump1:
	push rax
	mov rax, [rel const4] ; 656
	push rax
	mov rax, [rel const5] ; 448
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump7
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'c'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump7:
	mov rax, [rel const3] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump8
	sub rsp, 8 ; Add alignment
	call _a
	add rsp, 8 ; Remove alignment
	push rax
	jmp .jump9
.jump8:
	sub rsp, 8 ; Add alignment
	call _a
	add rsp, 8 ; Remove alignment
	push rax
.jump9:
	pop rax
	add rsp, 8 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp ; end of jpl_main prelude
	mov rax, [rel const3] ; False
	push rax
	call _a
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	jne .jump10
	mov rax, [rel const3] ; False
	push rax
	call _a
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
.jump10:
	push rax
	pop rax
	cmp rax, 0
	je .jump11
	sub rsp, 8 ; Add alignment
	call _a
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump12
	mov rax, [rel const0] ; True
	push rax
	jmp .jump13
.jump12:
	mov rax, [rel const0] ; True
	push rax
.jump13:
	pop rax
.jump11:
	push rax
	mov rax, [rel const7] ; 30.62
	push rax
	mov rax, [rel const8] ; 23.19
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const9] ; 40.75
	push rax
	mov rax, [rel const10] ; 34.15
	push rax
	mov rax, [rel const11] ; 10.88
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const12] ; 43.05
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const3] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump14
	sub rsp, 32
	; Moving 32 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 48 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 48 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	jmp .jump15
.jump14:
	sub rsp, 32
	; Moving 32 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 48 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 48 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
.jump15:
	; Moving 8 bytes from rsp + 8 to rsp + 24 
		mov r10, [rsp + 8 + 0]
		mov [rsp + 24 + 0], r10
	add rsp, 24
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	add rsp, 48 ; Local variables
	pop r12 ; begin jpl_main postlude
	pop rbp
	ret

