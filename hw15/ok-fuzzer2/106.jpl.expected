global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 55
const1: dq 961
const2: db `non-positive loop bound`, 0
const3: dq 324
const4: db `overflow computing array size`, 0
const5: dq 5.63
const6: dq 993
const7: dq 285
const8: db `negative array index`, 0
const9: db `index too large`, 0
const10: dq 626
const11: dq 297
const12: db `c`, 0
const13: dq 605
const14: dq 0

section .text
c:
_c:
	push rbp
	mov rbp, rsp
	push rdi
	mov rax, [rel const13] ; 605
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	mov rax, [rel const14] ; False
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	add rsp, 24 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp ; end of jpl_main prelude
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'b'
	mov rax, [rel const0] ; 55
	push rax
	mov rax, [rel const1] ; 961
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const2] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump1:
	; Computing bound for 'a'
	mov rax, [rel const3] ; 324
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump2
	lea rdi, [rel const2] ; 'non-positive loop bound'
	call _fail_assertion
.jump2:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float 
	imul rdi, [rsp + 0 + 0] ; multiply by 324 
	jno .jump3
	lea rdi, [rel const4] ; 'overflow computing array size'
	call _fail_assertion
.jump3:
	imul rdi, [rsp + 0 + 8] ; multiply by (961 + 55) 
	jno .jump4
	lea rdi, [rel const4] ; 'overflow computing array size'
	call _fail_assertion
.jump4:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'b' to 0
	mov rax, 0
	push rax
	; Initialize 'a' to 0
	mov rax, 0
	push rax
.jump5: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const5] ; 5.63
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'b'
	add qword [rsp + 8], 1
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump5 ; If b < bound, next iter
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump5 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const6] ; 993
	push rax
	mov rax, [rel const7] ; 285
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump6
	lea rdi, [rel const8] ; 'negative array index'
	call _fail_assertion
.jump6:
	cmp rax, [rsp + 16]
	jl .jump7
	lea rdi, [rel const9] ; 'index too large'
	call _fail_assertion
.jump7:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump8
	lea rdi, [rel const8] ; 'negative array index'
	call _fail_assertion
.jump8:
	cmp rax, [rsp + 24]
	jl .jump9
	lea rdi, [rel const9] ; 'index too large'
	call _fail_assertion
.jump9:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const10] ; 626
	push rax
	mov rax, [rel const11] ; 297
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	lea rdi, [rel const12] ; 'c'
	sub rsp, 8 ; Add alignment
	call _print
	add rsp, 8 ; Remove alignment
	add rsp, 16 ; Local variables
	pop r12 ; begin jpl_main postlude
	pop rbp
	ret

