global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: db `non-positive loop bound`, 0
const1: db `overflow computing array size`, 0
const2: dq 1.0
const3: dq 0.0
const4: db `negative array index`, 0
const5: db `index too large`, 0
const6: dq 0.6
const7: dq 0.4
const8: dq 0.2
const9: db `(ArrayType (FloatType) 1)`, 0

section .text
jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp ; end of jpl_main prelude
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'w'
	push qword 300
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const0] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump1:
	; Computing bound for 'h'
	push qword 400
	mov rax, [rsp]
	cmp rax, 0
	jg .jump2
	lea rdi, [rel const0] ; 'non-positive loop bound'
	call _fail_assertion
.jump2:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof float[] 
	imul rdi, [rsp + 0 + 0] ; multiply by 400 
	jno .jump3
	lea rdi, [rel const1] ; 'overflow computing array size'
	call _fail_assertion
.jump3:
	imul rdi, [rsp + 0 + 8] ; multiply by 300 
	jno .jump4
	lea rdi, [rel const1] ; 'overflow computing array size'
	call _fail_assertion
.jump4:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'w' to 0
	mov rax, 0
	push rax
	; Initialize 'h' to 0
	mov rax, 0
	push rax
.jump5: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const2] ; 1.0
	push rax
	mov rax, [rel const3] ; 0.0
	push rax
	mov rax, [rel const3] ; 0.0
	push rax
	mov rax, [rel const2] ; 1.0
	push rax
	mov rdi, 32
	call _jpl_alloc
	; Moving 32 bytes from rsp to rax 
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	push rax
	mov rax, 4
	push rax
	; Index to store in
	mov rax, [rsp + 16]
	imul rax, 300
	add rax, [rsp + 24]
	shl rax, 4
	add rax, [rsp + 48]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment 'w'
	add qword [rsp + 8], 1
	; Compare w to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump5 ; If w < bound, next iter
	mov qword [rsp + 8], 0 ; w = 0
	add qword [rsp + 0], 1 ; h++
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump5 ; If h < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'j'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump6
	lea rdi, [rel const0] ; 'non-positive loop bound'
	call _fail_assertion
.jump6:
	; Computing bound for 'i'
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump7
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const0] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump7:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float 
	imul rdi, [rsp + 0 + 0] ; multiply by H 
	jno .jump8
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump8:
	imul rdi, [rsp + 0 + 8] ; multiply by W 
	jno .jump9
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump9:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'j' to 0
	mov rax, 0
	push rax
	; Initialize 'i' to 0
	mov rax, 0
	push rax
.jump10: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump11
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump11:
	cmp rax, [rsp + 56]
	jl .jump12
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump12:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump13
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump13:
	cmp rax, [rsp + 64]
	jl .jump14
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump14:
	mov rax, [rsp + 0]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 4
	add rax, [rsp + 72]
	add rsp, 16
	sub rsp, 16
	; Moving 16 bytes from rax to rsp 
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	push qword 0
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump15
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
.jump15:
	cmp rax, [rsp + 8]
	jl .jump16
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
.jump16:
	mov rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'j'
	add qword [rsp + 8], 1
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump10 ; If j < bound, next iter
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump10 ; If i < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'w'
	push qword 666
	mov rax, [rsp]
	cmp rax, 0
	jg .jump17
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const0] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump17:
	; Computing bound for 'h'
	push qword 999
	mov rax, [rsp]
	cmp rax, 0
	jg .jump18
	lea rdi, [rel const0] ; 'non-positive loop bound'
	call _fail_assertion
.jump18:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof float[] 
	imul rdi, [rsp + 0 + 0] ; multiply by 999 
	jno .jump19
	lea rdi, [rel const1] ; 'overflow computing array size'
	call _fail_assertion
.jump19:
	imul rdi, [rsp + 0 + 8] ; multiply by 666 
	jno .jump20
	lea rdi, [rel const1] ; 'overflow computing array size'
	call _fail_assertion
.jump20:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'w' to 0
	mov rax, 0
	push rax
	; Initialize 'h' to 0
	mov rax, 0
	push rax
.jump21: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const2] ; 1.0
	push rax
	mov rax, [rel const6] ; 0.6
	push rax
	mov rax, [rel const7] ; 0.4
	push rax
	mov rax, [rel const8] ; 0.2
	push rax
	mov rdi, 32
	call _jpl_alloc
	; Moving 32 bytes from rsp to rax 
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	push rax
	mov rax, 4
	push rax
	; Index to store in
	mov rax, [rsp + 16]
	imul rax, 666
	add rax, [rsp + 24]
	shl rax, 4
	add rax, [rsp + 48]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment 'w'
	add qword [rsp + 8], 1
	; Compare w to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump21 ; If w < bound, next iter
	mov qword [rsp + 8], 0 ; w = 0
	add qword [rsp + 0], 1 ; h++
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump21 ; If h < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - -16 to rsp 
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'k'
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump22
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const0] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump22:
	; Computing bound for 'j'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump23
	lea rdi, [rel const0] ; 'non-positive loop bound'
	call _fail_assertion
.jump23:
	; Computing bound for 'i'
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump24
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const0] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump24:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float 
	imul rdi, [rsp + 0 + 0] ; multiply by H2 
	jno .jump25
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump25:
	imul rdi, [rsp + 0 + 8] ; multiply by W 
	jno .jump26
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump26:
	imul rdi, [rsp + 0 + 16] ; multiply by N 
	jno .jump27
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump27:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'k' to 0
	mov rax, 0
	push rax
	; Initialize 'j' to 0
	mov rax, 0
	push rax
	; Initialize 'i' to 0
	mov rax, 0
	push rax
.jump28: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 136 to rsp 
		mov r10, [rbp - 136 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp 
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 144 to rsp 
		mov r10, [rbp - 144 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump29
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
.jump29:
	cmp rax, [rsp + 80]
	jl .jump30
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
.jump30:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump31
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
.jump31:
	cmp rax, [rsp + 88]
	jl .jump32
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
.jump32:
	mov rax, [rsp + 0]
	imul rax, [rsp + 88] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 4
	add rax, [rsp + 96]
	add rsp, 16
	sub rsp, 16
	; Moving 16 bytes from rax to rsp 
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	push qword 0
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump33
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump33:
	cmp rax, [rsp + 8]
	jl .jump34
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump34:
	mov rax, [rsp + 0]
	shl rax, 3
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'k'
	add qword [rsp + 16], 1
	; Compare k to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump28 ; If k < bound, next iter
	mov qword [rsp + 16], 0 ; k = 0
	add qword [rsp + 8], 1 ; j++
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump28 ; If j < bound, next iter
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump28 ; If i < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8 ; Add alignment
	; Tensor contraction detected
	;   Nodes = n, i, j 
	;   Edges = (i, n), (j, n), (i, j) 
	;   Order = i, j, n 
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'n'
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump35
	lea rdi, [rel const0] ; 'non-positive loop bound'
	call _fail_assertion
.jump35:
	; Computing bound for 'j'
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump36
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const0] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump36:
	; Computing bound for 'i'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump37
	lea rdi, [rel const0] ; 'non-positive loop bound'
	call _fail_assertion
.jump37:
	; Computing total size of heap memory to allocate
	; Offset is 2 sum bounds
	mov rdi, 8 ; sizeof float 
	imul rdi, [rsp + 16 + 0] ; multiply by N 
	jno .jump38
	lea rdi, [rel const1] ; 'overflow computing array size'
	call _fail_assertion
.jump38:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'n' to 0
	mov rax, 0
	push rax
	; Initialize 'j' to 0
	mov rax, 0
	push rax
	; Initialize 'i' to 0
	mov rax, 0
	push rax
.jump39: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 168 to rsp 
		mov r10, [rbp - 168 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 176 to rsp 
		mov r10, [rbp - 176 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 184 to rsp 
		mov r10, [rbp - 184 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump40
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
.jump40:
	cmp rax, [rsp + 88]
	jl .jump41
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
.jump41:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump42
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
.jump42:
	cmp rax, [rsp + 96]
	jl .jump43
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
.jump43:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump44
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
.jump44:
	cmp rax, [rsp + 104]
	jl .jump45
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
.jump45:
	mov rax, [rsp + 0]
	imul rax, [rsp + 96] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 104] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	shl rax, 3
	add rax, [rsp + 112]
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 176 to rsp 
		mov r10, [rbp - 176 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 184 to rsp 
		mov r10, [rbp - 184 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump46
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
.jump46:
	cmp rax, [rsp + 152]
	jl .jump47
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
.jump47:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump48
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
.jump48:
	cmp rax, [rsp + 160]
	jl .jump49
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
.jump49:
	mov rax, [rsp + 0]
	imul rax, [rsp + 160] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	shl rax, 3
	add rax, [rsp + 168]
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	; Array loop indices skip body and 2 sum indices
	; Array loop bounds then skip 1 array indices and 2 sum bounds
	mov rax, [rsp + 24]
	shl rax, 3
	add rax, [rsp + 56]
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rax]
	movsd [rax], xmm0
	; Increment 'n'
	add qword [rsp + 16], 1
	; Compare n to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump39 ; If n < bound, next iter
	mov qword [rsp + 16], 0 ; n = 0
	add qword [rsp + 8], 1 ; j++
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump39 ; If j < bound, next iter
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump39 ; If i < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 16
	; array left on stack
	lea rdi, [rel const9] ; '(ArrayType (FloatType) 1)'
	lea rsi, [rsp]
	call _show
	add rsp, 16
	add rsp, 8 ; Remove alignment
	add rsp, 112 ; Local variables
	pop r12 ; begin jpl_main postlude
	pop rbp
	ret

