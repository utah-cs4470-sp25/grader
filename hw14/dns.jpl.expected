global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 300
const1: db `non-positive loop bound`, 0
const2: dq 400
const3: db `overflow computing array size`, 0
const4: dq 1.0
const5: dq 0.0
const6: db `negative array index`, 0
const7: db `index too large`, 0
const8: dq 1
const9: dq 666
const10: dq 999
const11: dq 0.6
const12: dq 0.4
const13: dq 0.2
const14: db `(ArrayType (FloatType) 2)`, 0

section .text
jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp ; end of jpl_main prelude
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'w'
	mov rax, [rel const0] ; 300
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump1:
	; Computing bound for 'h'
	mov rax, [rel const2] ; 400
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump2
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump2:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof float[] 
	imul rdi, [rsp + 0 + 0] ; multiply by 400 
	jno .jump3
	lea rdi, [rel const3] ; 'overflow computing array size'
	call _fail_assertion
.jump3:
	imul rdi, [rsp + 0 + 8] ; multiply by 300 
	jno .jump4
	lea rdi, [rel const3] ; 'overflow computing array size'
	call _fail_assertion
.jump4:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'w' to 0
	mov rax, 0
	push rax
	; Initialize 'h' to 0
	mov rax, 0
	push rax
.jump5: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const4] ; 1.0
	push rax
	mov rax, [rel const5] ; 0.0
	push rax
	mov rax, [rel const4] ; 1.0
	push rax
	mov rax, [rel const4] ; 1.0
	push rax
	mov rdi, 32
	call _jpl_alloc
	; Moving 32 bytes from rsp to rax 
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	push rax
	mov rax, 4
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 16
	add rax, [rsp + 48]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment 'w'
	add qword [rsp + 8], 1
	; Compare w to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump5 ; If w < bound, next iter
	mov qword [rsp + 8], 0 ; w = 0
	add qword [rsp + 0], 1 ; h++
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump5 ; If h < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'j'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump6
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump6:
	; Computing bound for 'i'
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump7
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump7:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float 
	imul rdi, [rsp + 0 + 0] ; multiply by H 
	jno .jump8
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump8:
	imul rdi, [rsp + 0 + 8] ; multiply by W 
	jno .jump9
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump9:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'j' to 0
	mov rax, 0
	push rax
	; Initialize 'i' to 0
	mov rax, 0
	push rax
.jump10: ; Begin body of loop
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump11
	lea rdi, [rel const6] ; 'negative array index'
	call _fail_assertion
.jump11:
	cmp rax, [rsp + 16]
	jl .jump12
	lea rdi, [rel const7] ; 'index too large'
	call _fail_assertion
.jump12:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump13
	lea rdi, [rel const6] ; 'negative array index'
	call _fail_assertion
.jump13:
	cmp rax, [rsp + 24]
	jl .jump14
	lea rdi, [rel const7] ; 'index too large'
	call _fail_assertion
.jump14:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 16
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 16
	; Moving 16 bytes from rax to rsp 
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const8] ; 1
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump15
	lea rdi, [rel const6] ; 'negative array index'
	call _fail_assertion
.jump15:
	cmp rax, [rsp + 8]
	jl .jump16
	lea rdi, [rel const7] ; 'index too large'
	call _fail_assertion
.jump16:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'j'
	add qword [rsp + 8], 1
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump10 ; If j < bound, next iter
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump10 ; If i < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'w'
	mov rax, [rel const9] ; 666
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump17
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump17:
	; Computing bound for 'h'
	mov rax, [rel const10] ; 999
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump18
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump18:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof float[] 
	imul rdi, [rsp + 0 + 0] ; multiply by 999 
	jno .jump19
	lea rdi, [rel const3] ; 'overflow computing array size'
	call _fail_assertion
.jump19:
	imul rdi, [rsp + 0 + 8] ; multiply by 666 
	jno .jump20
	lea rdi, [rel const3] ; 'overflow computing array size'
	call _fail_assertion
.jump20:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'w' to 0
	mov rax, 0
	push rax
	; Initialize 'h' to 0
	mov rax, 0
	push rax
.jump21: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const4] ; 1.0
	push rax
	mov rax, [rel const11] ; 0.6
	push rax
	mov rax, [rel const12] ; 0.4
	push rax
	mov rax, [rel const13] ; 0.2
	push rax
	mov rdi, 32
	call _jpl_alloc
	; Moving 32 bytes from rsp to rax 
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	push rax
	mov rax, 4
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 16
	add rax, [rsp + 48]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment 'w'
	add qword [rsp + 8], 1
	; Compare w to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump21 ; If w < bound, next iter
	mov qword [rsp + 8], 0 ; w = 0
	add qword [rsp + 0], 1 ; h++
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump21 ; If h < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'j2'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump22
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump22:
	; Computing bound for 'i2'
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump23
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump23:
	; Computing bound for 'j'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump24
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump24:
	; Computing bound for 'i'
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump25
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump25:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float 
	imul rdi, [rsp + 0 + 0] ; multiply by H 
	jno .jump26
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump26:
	imul rdi, [rsp + 0 + 8] ; multiply by W 
	jno .jump27
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump27:
	imul rdi, [rsp + 0 + 16] ; multiply by H 
	jno .jump28
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump28:
	imul rdi, [rsp + 0 + 24] ; multiply by W 
	jno .jump29
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump29:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 32], rax ; Move to pre-allocated space
	; Initialize 'j2' to 0
	mov rax, 0
	push rax
	; Initialize 'i2' to 0
	mov rax, 0
	push rax
	; Initialize 'j' to 0
	mov rax, 0
	push rax
	; Initialize 'i' to 0
	mov rax, 0
	push rax
.jump30: ; Begin body of loop
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 80 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp 
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 136 to rsp 
		mov r10, [rbp - 136 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 144 to rsp 
		mov r10, [rbp - 144 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 152 to rsp 
		mov r10, [rbp - 152 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump31
	lea rdi, [rel const6] ; 'negative array index'
	call _fail_assertion
.jump31:
	cmp rax, [rsp + 16]
	jl .jump32
	lea rdi, [rel const7] ; 'index too large'
	call _fail_assertion
.jump32:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump33
	lea rdi, [rel const6] ; 'negative array index'
	call _fail_assertion
.jump33:
	cmp rax, [rsp + 24]
	jl .jump34
	lea rdi, [rel const7] ; 'index too large'
	call _fail_assertion
.jump34:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 16
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 16
	; Moving 16 bytes from rax to rsp 
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const8] ; 1
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump35
	lea rdi, [rel const6] ; 'negative array index'
	call _fail_assertion
.jump35:
	cmp rax, [rsp + 8]
	jl .jump36
	lea rdi, [rel const7] ; 'index too large'
	call _fail_assertion
.jump36:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 8
	add rax, [rsp + 72]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'j2'
	add qword [rsp + 24], 1
	; Compare j2 to its bound
	mov rax, [rsp + 24]
	cmp rax, [rsp + 56]
	jl .jump30 ; If j2 < bound, next iter
	mov qword [rsp + 24], 0 ; j2 = 0
	add qword [rsp + 16], 1 ; i2++
	; Compare i2 to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 48]
	jl .jump30 ; If i2 < bound, next iter
	mov qword [rsp + 16], 0 ; i2 = 0
	add qword [rsp + 8], 1 ; j++
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 40]
	jl .jump30 ; If j < bound, next iter
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 32]
	jl .jump30 ; If i < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 32
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'j'
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump37
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump37:
	; Computing bound for 'i'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump38
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump38:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float 
	imul rdi, [rsp + 0 + 0] ; multiply by W 
	jno .jump39
	lea rdi, [rel const3] ; 'overflow computing array size'
	call _fail_assertion
.jump39:
	imul rdi, [rsp + 0 + 8] ; multiply by H 
	jno .jump40
	lea rdi, [rel const3] ; 'overflow computing array size'
	call _fail_assertion
.jump40:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'j' to 0
	mov rax, 0
	push rax
	; Initialize 'i' to 0
	mov rax, 0
	push rax
.jump41: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'j2'
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump42
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump42:
	; Computing bound for 'i2'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump43
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump43:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'j2' to 0
	mov rax, 0
	push rax
	; Initialize 'i2' to 0
	mov rax, 0
	push rax
.jump44: ; Begin body of loop
	; Compute loop body
	sub rsp, 40
	; Moving 40 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 32]
		mov [rsp + 32], r10
		mov r10, [rbp - 120 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 120 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 120 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 152 to rsp 
		mov r10, [rbp - 152 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 160 to rsp 
		mov r10, [rbp - 160 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 192 to rsp 
		mov r10, [rbp - 192 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 200 to rsp 
		mov r10, [rbp - 200 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump45
	lea rdi, [rel const6] ; 'negative array index'
	call _fail_assertion
.jump45:
	cmp rax, [rsp + 32]
	jl .jump46
	lea rdi, [rel const7] ; 'index too large'
	call _fail_assertion
.jump46:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump47
	lea rdi, [rel const6] ; 'negative array index'
	call _fail_assertion
.jump47:
	cmp rax, [rsp + 40]
	jl .jump48
	lea rdi, [rel const7] ; 'index too large'
	call _fail_assertion
.jump48:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump49
	lea rdi, [rel const6] ; 'negative array index'
	call _fail_assertion
.jump49:
	cmp rax, [rsp + 48]
	jl .jump50
	lea rdi, [rel const7] ; 'index too large'
	call _fail_assertion
.jump50:
	mov rax, [rsp + 24]
	cmp rax, 0
	jge .jump51
	lea rdi, [rel const6] ; 'negative array index'
	call _fail_assertion
.jump51:
	cmp rax, [rsp + 56]
	jl .jump52
	lea rdi, [rel const7] ; 'index too large'
	call _fail_assertion
.jump52:
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 64]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 40
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 56 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 192 to rsp 
		mov r10, [rbp - 192 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 200 to rsp 
		mov r10, [rbp - 200 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump53
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump53:
	cmp rax, [rsp + 16]
	jl .jump54
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump54:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump55
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump55:
	cmp rax, [rsp + 24]
	jl .jump56
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump56:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 32] ; Load sum
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment 'j2'
	add qword [rsp + 8], 1
	; Compare j2 to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump44 ; If j2 < bound, next iter
	mov qword [rsp + 8], 0 ; j2 = 0
	add qword [rsp + 0], 1 ; i2++
	; Compare i2 to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump44 ; If i2 < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'j'
	add qword [rsp + 8], 1
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump41 ; If j < bound, next iter
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump41 ; If i < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	lea rdi, [rel const14] ; '(ArrayType (FloatType) 2)'
	lea rsi, [rsp]
	call _show
	add rsp, 24
	add rsp, 112 ; Local variables
	pop r12 ; begin jpl_main postlude
	pop rbp
	ret

