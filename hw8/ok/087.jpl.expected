
#include <math.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include "rt/runtime.h"

typedef struct { } void_t;
typedef struct {
  double r;
  double g;
  double b;
  double a;
} rgba;

typedef struct {
  int64_t d0;
  int64_t *data;
} _a1_int64_t;

void jpl_main(struct args args) {
    int64_t _0 = 1;
    int64_t _1 = 2;
    int64_t _2 = 3;
    _a1_int64_t _3;
    _3.d0 = 3;
    _3.data = jpl_alloc(sizeof(int64_t) * 3);
    _3.data[0] = _0;
    _3.data[1] = _1;
    _3.data[2] = _2;
    int64_t _4 = 0;
    if (_4 >= 0)
    goto _jump1;
    fail_assertion("negative array index");
    _jump1:;
    if (_4 < _3.d0)
    goto _jump2;
    fail_assertion("index too large");
    _jump2:;
    int64_t _5 = 0;
    _5 *= _3.d0;
    _5 += _4;
    int64_t _6 = _3.data[_5];
    if (_6 >= 0)
    goto _jump3;
    fail_assertion("negative array index");
    _jump3:;
    if (_6 < _3.d0)
    goto _jump4;
    fail_assertion("index too large");
    _jump4:;
    int64_t _7 = 0;
    _7 *= _3.d0;
    _7 += _6;
    int64_t _8 = _3.data[_7];
    if (_8 >= 0)
    goto _jump5;
    fail_assertion("negative array index");
    _jump5:;
    if (_8 < _3.d0)
    goto _jump6;
    fail_assertion("index too large");
    _jump6:;
    int64_t _9 = 0;
    _9 *= _3.d0;
    _9 += _8;
    int64_t _10 = _3.data[_9];
    if (_10 >= 0)
    goto _jump7;
    fail_assertion("negative array index");
    _jump7:;
    if (_10 < _3.d0)
    goto _jump8;
    fail_assertion("index too large");
    _jump8:;
    int64_t _11 = 0;
    _11 *= _3.d0;
    _11 += _10;
    int64_t _12 = _3.data[_11];
    show("(IntType)", &_12);
}

