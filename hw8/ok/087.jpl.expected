
#include <math.h>
#include <stdbool.h>
#include <stdio.h>
#include "rt/runtime.h"

typedef struct { } void_t;
typedef struct {
  double r;
  double g;
  double b;
  double a;
} rgba;

typedef struct {
  long long d0;
  long long *data;
} _a1_long_long;

void jpl_main(struct args args) {
    long long _0 = 1ll;
    long long _1 = 2ll;
    long long _2 = 3ll;
    long long _4 = 1ll;
    long long _5 = 2ll;
    long long _6 = 3ll;
    _a1_long_long _3;
    _3.d0 = 3;
    _3.data = jpl_alloc(sizeof(long long) * 3);
    _3.data[0] = _4;
    _3.data[1] = _5;
    _3.data[2] = _6;
    long long _7 = 0ll;
    if (_7 >= 0ll)
    goto _jump1;
    fail_assertion("negative array index");
    _jump1:;
    if (_7 < _3.d0)
    goto _jump2;
    fail_assertion("index too large");
    _jump2:;
    long long _8 = 0ll;
    _8 *= _3.d0;
    _8 += _7;
    long long _9 = _3.data[_8];
    if (_9 >= 0ll)
    goto _jump3;
    fail_assertion("negative array index");
    _jump3:;
    if (_9 < _3.d0)
    goto _jump4;
    fail_assertion("index too large");
    _jump4:;
    long long _10 = 0ll;
    _10 *= _3.d0;
    _10 += _9;
    long long _11 = _3.data[_10];
    if (_11 >= 0ll)
    goto _jump5;
    fail_assertion("negative array index");
    _jump5:;
    if (_11 < _3.d0)
    goto _jump6;
    fail_assertion("index too large");
    _jump6:;
    long long _12 = 0ll;
    _12 *= _3.d0;
    _12 += _11;
    long long _13 = _3.data[_12];
    if (_13 >= 0ll)
    goto _jump7;
    fail_assertion("negative array index");
    _jump7:;
    if (_13 < _3.d0)
    goto _jump8;
    fail_assertion("index too large");
    _jump8:;
    long long _14 = 0ll;
    _14 *= _3.d0;
    _14 += _13;
    long long _15 = _3.data[_14];
    show("(IntType)", &_15);
}

