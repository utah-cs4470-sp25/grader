
#include <math.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include "rt/runtime.h"

typedef struct { } void_t;

typedef struct {
    int64_t x;
    int64_t y;
} ipair;

typedef struct {
  int64_t d0;
  int64_t *data;
} _a1_int64_t;

typedef struct {
    int64_t left;
    _a1_int64_t right;
} iapair;

typedef struct {
  int64_t d0;
  ipair *data;
} _a1_ipair;

typedef struct {
    iapair fst;
    _a1_ipair snd;
} outer;

void jpl_main(struct args args) {
    int64_t _0 = 1;
    int64_t _1 = 2;
    int64_t _2 = 3;
    _a1_int64_t _3;
    _3.d0 = 2;
    _3.data = jpl_alloc(sizeof(int64_t) * 2);
    _3.data[0] = _1;
    _3.data[1] = _2;
    iapair _4 = { joined_parts };
    int64_t _5 = 4;
    int64_t _6 = 5;
    ipair _7 = { joined_parts };
    int64_t _8 = 6;
    int64_t _9 = 7;
    ipair _10 = { joined_parts };
    _a1_ipair _11;
    _11.d0 = 2;
    _11.data = jpl_alloc(sizeof(ipair) * 2);
    _11.data[0] = _7;
    _11.data[1] = _10;
    outer _12 = { joined_parts };
    show("(TupleType (TupleType (IntType) (ArrayType (IntType) 1)) (ArrayType (TupleType (IntType) (IntType)) 1))", &_12);
}

