
#include <math.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include "rt/runtime.h"

typedef struct { } void_t;

typedef struct {
  int64_t d0;
  double *data;
} _a1_double;

typedef struct {
  int64_t d0;
  bool *data;
} _a1_bool;

void jpl_main(struct args args) {
    double _0 = 93.0;
    double _1 = 80.0;
    bool _2 = _0 < _1;
    show("(BoolType)", &_2);
    double _3 = 5.0;
    double _4 = 21.0;
    _a1_double _5;
    _5.d0 = 1;
    _5.data = jpl_alloc(sizeof(double) * 1);
    _5.data[0] = _4;
    int64_t _6 = 871;
    if (_6 >= 0)
    goto _jump1;
    fail_assertion("negative array index");
    _jump1:;
    if (_6 < _5.d0)
    goto _jump2;
    fail_assertion("index too large");
    _jump2:;
    int64_t _7 = 0;
    _7 *= _5.d0;
    _7 += _6;
    double _8 = _5.data[_7];
    double _9 = 74.0;
    double _10 = _8 * _9;
    bool _11 = _3 > _10;
    _a1_bool _12;
    _12.d0 = 1;
    _12.data = jpl_alloc(sizeof(bool) * 1);
    _12.data[0] = _11;
    show("(ArrayType (BoolType) 1)", &_12);
    print("c");
    double _13 = 83.0;
    _a1_double _14;
    _14.d0 = 1;
    _14.data = jpl_alloc(sizeof(double) * 1);
    _14.data[0] = _13;
    int64_t _15 = 752;
    int64_t _16 = -_15;
    if (_16 >= 0)
    goto _jump3;
    fail_assertion("negative array index");
    _jump3:;
    if (_16 < _14.d0)
    goto _jump4;
    fail_assertion("index too large");
    _jump4:;
    int64_t _17 = 0;
    _17 *= _14.d0;
    _17 += _16;
    double _18 = _14.data[_17];
    double _19 = -_18;
    double _20 = 79.0;
    _a1_double _21;
    _21.d0 = 1;
    _21.data = jpl_alloc(sizeof(double) * 1);
    _21.data[0] = _20;
    int64_t _22 = 447;
    if (_22 >= 0)
    goto _jump5;
    fail_assertion("negative array index");
    _jump5:;
    if (_22 < _21.d0)
    goto _jump6;
    fail_assertion("index too large");
    _jump6:;
    int64_t _23 = 0;
    _23 *= _21.d0;
    _23 += _22;
    double _24 = _21.data[_23];
    double _25 = fmod(_19, _24);
    print("d");
    double _26 = 82.0;
    double _27 = 94.0;
    rgba _28 = { joined_parts };
    double _29 = _28.a;
    double _30 = 23.0;
    double _31 = fmod(_29, _30);
    double _32 = 39.0;
    double _33 = 63.0;
    double _34 = _32 - _33;
    bool _35 = _31 < _34;
}

