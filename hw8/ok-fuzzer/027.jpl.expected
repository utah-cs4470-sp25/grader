
#include <math.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include "rt/runtime.h"

typedef struct { } void_t;

typedef struct {
  int64_t d0;
  bool *data;
} _a1_bool;

typedef struct {
  int64_t d0;
  double *data;
} _a1_double;

typedef struct {
  int64_t d0;
  _a1_bool *data;
} _a1__a1_bool;

typedef struct {
  int64_t d0;
  int64_t *data;
} _a1_int64_t;

void jpl_main(struct args args) {
    bool _0 = false;
    double _1 = 82.0;
    double _2 = 89.0;
    double _3 = _1 / _2;
    double _4 = 55.0;
    double _5 = 50.0;
    double _6 = _4 * _5;
    double _7 = 39.0;
    double _8 = _6 / _7;
    bool _9 = _3 > _8;
    _a1_bool _10;
    _10.d0 = 2;
    _10.data = jpl_alloc(sizeof(bool) * 2);
    _10.data[0] = _0;
    _10.data[1] = _9;
    double _11 = 22.0;
    double _12 = -_11;
    _a1_double _13;
    _13.d0 = 1;
    _13.data = jpl_alloc(sizeof(double) * 1);
    _13.data[0] = _12;
    show("(ArrayType (BoolType) 1)", &_10);
    int64_t _14 = 106;
    show("(IntType)", &_14);
    print("d");
    int64_t _15 = 717;
    int64_t _16 = 811;
    bool _17 = _15 != _16;
    bool _18 = !_17;
    double _19 = 75.0;
    double _20 = 80.0;
    bool _21 = _19 == _20;
    _a1_bool _22;
    _22.d0 = 2;
    _22.data = jpl_alloc(sizeof(bool) * 2);
    _22.data[0] = _18;
    _22.data[1] = _21;
    _a1__a1_bool _23;
    _23.d0 = 2;
    _23.data = jpl_alloc(sizeof(_a1_bool) * 2);
    _23.data[0] = _22;
    _23.data[1] = _10;
    int64_t _24 = 91;
    _a1_int64_t _25;
    _25.d0 = 2;
    _25.data = jpl_alloc(sizeof(int64_t) * 2);
    _25.data[0] = _24;
    _25.data[1] = _23.d0;
    bool _26 = false;
    if (0 != _26)
    goto _jump1;
    fail_assertion("h");
    _jump1:;
}

