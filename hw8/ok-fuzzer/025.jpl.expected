
#include <math.h>
#include <stdbool.h>
#include <stdio.h>
#include "rt/runtime.h"

typedef struct { } void_t;
typedef struct {
  double r;
  double g;
  double b;
  double a;
} rgba;

typedef struct {
    bool a;
} a;

typedef struct {
  long long d0;
  bool *data;
} _a1_bool;

typedef struct {
    a a;
    void_t b;
} d;

typedef struct {
  long long d0;
  long long *data;
} _a1_long_long;

typedef struct {
    a a;
    rgba b;
} g;

void jpl_main(struct args args) {
    bool _0 = true;
    bool _2 = true;
    _a1_bool _1;
    _1.d0 = 1;
    _1.data = jpl_alloc(sizeof(bool) * 1);
    _1.data[0] = _2;
    double _3 = 22.9;
    show("(FloatType)", &_3);
    long long _4 = 358ll;
    if (_4 >= 0ll)
    goto _jump1;
    fail_assertion("negative array index");
    _jump1:;
    if (_4 < _1.d0)
    goto _jump2;
    fail_assertion("index too large");
    _jump2:;
    long long _5 = 0ll;
    _5 *= _1.d0;
    _5 += _4;
    bool _6 = _1.data[_5];
    long long _8 = 358ll;
    if (_8 >= 0ll)
    goto _jump3;
    fail_assertion("negative array index");
    _jump3:;
    if (_8 < _1.d0)
    goto _jump4;
    fail_assertion("index too large");
    _jump4:;
    long long _9 = 0ll;
    _9 *= _1.d0;
    _9 += _8;
    bool _10 = _1.data[_9];
    _a1_bool _7;
    _7.d0 = 1;
    _7.data = jpl_alloc(sizeof(bool) * 1);
    _7.data[0] = _10;
    long long _11 = 421ll;
    if (_11 >= 0ll)
    goto _jump5;
    fail_assertion("negative array index");
    _jump5:;
    if (_11 < _7.d0)
    goto _jump6;
    fail_assertion("index too large");
    _jump6:;
    long long _12 = 0ll;
    _12 *= _7.d0;
    _12 += _11;
    bool _13 = _7.data[_12];
    a _14 = { _13 };
    long long _15 = _1.d0 % _1.d0;
    long long _16 = -_15;
    long long _17 = _16 - _1.d0;
    long long _18 = 657ll;
    long long _19 = 297ll;
    long long _20 = _18 * _19;
    long long _22 = 657ll;
    long long _23 = 297ll;
    long long _24 = _22 * _23;
    _a1_long_long _21;
    _21.d0 = 1;
    _21.data = jpl_alloc(sizeof(long long) * 1);
    _21.data[0] = _24;
    long long _25 = 341ll;
    long long _26 = _25 * _1.d0;
    if (_26 >= 0ll)
    goto _jump7;
    fail_assertion("negative array index");
    _jump7:;
    if (_26 < _21.d0)
    goto _jump8;
    fail_assertion("index too large");
    _jump8:;
    long long _27 = 0ll;
    _27 *= _21.d0;
    _27 += _26;
    long long _28 = _21.data[_27];
    bool _29 = _17 == _28;
}

