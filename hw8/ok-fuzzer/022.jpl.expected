
#include <math.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include "rt/runtime.h"

typedef struct { } void_t;

typedef struct {
    bool a;
    rgba b;
} d;

typedef struct {
  int64_t d0;
  int64_t *data;
} _a1_int64_t;

void jpl_main(struct args args) {
    print("a");
    double _0 = 87.0;
    double _1 = -_0;
    double _2 = -_1;
    double _3 = -_2;
    double _4 = 63.0;
    double _5 = 83.0;
    double _6 = -_5;
    double _7 = 38.0;
    double _8 = 6.0;
    double _9 = 43.0;
    double _10 = fmod(_8, _9);
    rgba _11 = { _4, _6, _7, _10 };
    double _12 = _11.r;
    double _13 = _3 + _12;
    int64_t _14 = 611;
    int64_t _15 = -_14;
    int64_t _16 = 194;
    int64_t _17 = _15 / _16;
    int64_t _18 = 990;
    int64_t _19 = -_18;
    int64_t _20 = 890;
    int64_t _21 = _19 - _20;
    int64_t _22 = 496;
    int64_t _23 = 256;
    int64_t _24 = _22 % _23;
    int64_t _25 = -_24;
    int64_t _26 = _21 * _25;
    bool _27 = _17 == _26;
    if (0 != _27)
    goto _jump1;
    fail_assertion("b");
    _jump1:;
    bool _28 = false;
    show("(BoolType)", &_28);
    double _29 = -_13;
    double _30 = -_29;
    double _31 = 72.0;
    double _32 = _30 - _31;
    double _33 = fmod(_13, _32);
    int64_t _34 = 936;
    int64_t _35 = -_34;
    _a1_int64_t _36;
    _36.d0 = 1;
    _36.data = jpl_alloc(sizeof(int64_t) * 1);
    _36.data[0] = _35;
    int64_t _37 = 568;
    int64_t _38 = 987;
    int64_t _39 = _37 * _38;
    if (_39 >= 0)
    goto _jump2;
    fail_assertion("negative array index");
    _jump2:;
    if (_39 < _36.d0)
    goto _jump3;
    fail_assertion("index too large");
    _jump3:;
    int64_t _40 = 0;
    _40 *= _36.d0;
    _40 += _39;
    int64_t _41 = _36.data[_40];
    int64_t _42 = 356;
    int64_t _43 = 437;
    int64_t _44 = _42 / _43;
    bool _45 = _41 < _44;
}

