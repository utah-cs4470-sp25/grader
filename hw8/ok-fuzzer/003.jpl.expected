
#include <math.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include "rt/runtime.h"

typedef struct { } void_t;

typedef struct {
  int64_t d0;
  double *data;
} _a1_double;

typedef struct {
  int64_t d0;
  _a1_double *data;
} _a1__a1_double;

typedef struct {
  int64_t d0;
  bool *data;
} _a1_bool;

void jpl_main(struct args args) {
    double _0 = 10.0;
    _a1_double _1;
    _1.d0 = 1;
    _1.data = jpl_alloc(sizeof(double) * 1);
    _1.data[0] = _0;
    _a1__a1_double _2;
    _2.d0 = 1;
    _2.data = jpl_alloc(sizeof(_a1_double) * 1);
    _2.data[0] = _1;
    int64_t _3 = 128;
    if (_3 >= 0)
    goto _jump1;
    fail_assertion("negative array index");
    _jump1:;
    if (_3 < _2.d0)
    goto _jump2;
    fail_assertion("index too large");
    _jump2:;
    int64_t _4 = 0;
    _4 *= _2.d0;
    _4 += _3;
    _a1_double _5 = _2.data[_4];
    if (_5.d0 >= 0)
    goto _jump3;
    fail_assertion("negative array index");
    _jump3:;
    if (_5.d0 < _5.d0)
    goto _jump4;
    fail_assertion("index too large");
    _jump4:;
    int64_t _6 = 0;
    _6 *= _5.d0;
    _6 += _5.d0;
    double _7 = _5.data[_6];
    double _8 = 58.0;
    double _9 = -_8;
    double _10 = 0.0;
    double _11 = -_10;
    if (_5.d0 >= 0)
    goto _jump5;
    fail_assertion("negative array index");
    _jump5:;
    if (_5.d0 < _5.d0)
    goto _jump6;
    fail_assertion("index too large");
    _jump6:;
    int64_t _12 = 0;
    _12 *= _5.d0;
    _12 += _5.d0;
    double _13 = _5.data[_12];
    rgba _14 = { _7, _9, _11, _13 };
    double _15 = _14.b;
    double _16 = 24.0;
    double _17 = -_16;
    double _18 = 61.0;
    double _19 = fmod(_17, _18);
    double _20 = -_19;
    bool _21 = _15 > _20;
    if (0 != _21)
    goto _jump7;
    fail_assertion("c");
    _jump7:;
    bool _22 = false;
    if (0 != _22)
    goto _jump8;
    fail_assertion("c");
    _jump8:;
    int64_t _23 = 219;
    int64_t _24 = _5.d0 - _23;
    int64_t _25 = _5.d0 * _24;
    bool _26 = false;
    _a1_bool _27;
    _27.d0 = 1;
    _27.data = jpl_alloc(sizeof(bool) * 1);
    _27.data[0] = _26;
    int64_t _28 = 449;
    if (_28 >= 0)
    goto _jump9;
    fail_assertion("negative array index");
    _jump9:;
    if (_28 < _27.d0)
    goto _jump10;
    fail_assertion("index too large");
    _jump10:;
    int64_t _29 = 0;
    _29 *= _27.d0;
    _29 += _28;
    bool _30 = _27.data[_29];
    bool _31 = !_30;
    if (0 != _31)
    goto _jump11;
    fail_assertion("d");
    _jump11:;
    bool _32 = true;
    bool _33 = !_32;
    int64_t _34 = 622;
    int64_t _35 = _5.d0 % _34;
    bool _36 = _25 != _35;
    bool _37 = !_36;
    _a1_bool _38;
    _38.d0 = 2;
    _38.data = jpl_alloc(sizeof(bool) * 2);
    _38.data[0] = _33;
    _38.data[1] = _37;
    int64_t _39 = 760;
}

