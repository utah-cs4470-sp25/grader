
#include <math.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include "rt/runtime.h"

typedef struct { } void_t;

typedef struct {
  int64_t d0;
  bool *data;
} _a1_bool;

typedef struct {
  int64_t d0;
  _a1_bool *data;
} _a1__a1_bool;

typedef struct {
  int64_t d0;
  int64_t *data;
} _a1_int64_t;

void jpl_main(struct args args) {
    bool _0 = true;
    double _1 = 11.0;
    double _2 = 23.0;
    double _3 = _1 * _2;
    double _4 = 63.0;
    bool _5 = _3 <= _4;
    bool _6 = false;
    _a1_bool _7;
    _7.d0 = 2;
    _7.data = jpl_alloc(sizeof(bool) * 2);
    _7.data[0] = _5;
    _7.data[1] = _6;
    _a1__a1_bool _8;
    _8.d0 = 1;
    _8.data = jpl_alloc(sizeof(_a1_bool) * 1);
    _8.data[0] = _7;
    int64_t _9 = 779;
    _a1_int64_t _10;
    _10.d0 = 2;
    _10.data = jpl_alloc(sizeof(int64_t) * 2);
    _10.data[0] = _8.d0;
    _10.data[1] = _9;
    int64_t _11 = 754;
    if (_11 >= 0)
    goto _jump1;
    fail_assertion("negative array index");
    _jump1:;
    if (_11 < _10.d0)
    goto _jump2;
    fail_assertion("index too large");
    _jump2:;
    int64_t _12 = 0;
    _12 *= _10.d0;
    _12 += _11;
    int64_t _13 = _10.data[_12];
    int64_t _14 = 211;
    _a1_int64_t _15;
    _15.d0 = 2;
    _15.data = jpl_alloc(sizeof(int64_t) * 2);
    _15.data[0] = _8.d0;
    _15.data[1] = _14;
    int64_t _16 = _8.d0 - _8.d0;
    if (_16 >= 0)
    goto _jump3;
    fail_assertion("negative array index");
    _jump3:;
    if (_16 < _15.d0)
    goto _jump4;
    fail_assertion("index too large");
    _jump4:;
    int64_t _17 = 0;
    _17 *= _15.d0;
    _17 += _16;
    int64_t _18 = _15.data[_17];
    int64_t _19 = _13 - _18;
    int64_t _20 = 334;
    int64_t _21 = -_20;
    int64_t _22 = -_21;
    int64_t _23 = _19 * _22;
    print("g");
}

