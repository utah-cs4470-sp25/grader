
#include <math.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include "rt/runtime.h"

typedef struct { } void_t;

typedef struct {
  int64_t d0;
  double *data;
} _a1_double;

typedef struct {
  int64_t d0;
  int64_t *data;
} _a1_int64_t;

typedef struct {
  int64_t d0;
  bool *data;
} _a1_bool;

void jpl_main(struct args args) {
    double _0 = 19.0;
    double _1 = 66.0;
    double _2 = -_1;
    double _3 = 56.0;
    double _4 = -_3;
    double _5 = 87.0;
    double _6 = 31.0;
    double _7 = _5 - _6;
    rgba _8 = { _0, _2, _4, _7 };
    double _9 = _8.g;
    double _10 = -_9;
    int64_t _11 = 299;
    int64_t _12 = -_11;
    int64_t _13 = -_12;
    int64_t _14 = -_13;
    int64_t _15 = -_14;
    double _16 = 32.0;
    double _17 = _10 + _16;
    double _18 = fmod(_17, _10);
    double _19 = 93.0;
    double _20 = _18 - _19;
    double _21 = 23.0;
    double _22 = 34.0;
    double _23 = -_22;
    _a1_double _24;
    _24.d0 = 2;
    _24.data = jpl_alloc(sizeof(double) * 2);
    _24.data[0] = _21;
    _24.data[1] = _23;
    int64_t _25 = 468;
    _a1_int64_t _26;
    _26.d0 = 2;
    _26.data = jpl_alloc(sizeof(int64_t) * 2);
    _26.data[0] = _15;
    _26.data[1] = _25;
    int64_t _27 = _15 * _15;
    if (_27 >= 0)
    goto _jump1;
    fail_assertion("negative array index");
    _jump1:;
    if (_27 < _26.d0)
    goto _jump2;
    fail_assertion("index too large");
    _jump2:;
    int64_t _28 = 0;
    _28 *= _26.d0;
    _28 += _27;
    int64_t _29 = _26.data[_28];
    if (_29 >= 0)
    goto _jump3;
    fail_assertion("negative array index");
    _jump3:;
    if (_29 < _24.d0)
    goto _jump4;
    fail_assertion("index too large");
    _jump4:;
    int64_t _30 = 0;
    _30 *= _24.d0;
    _30 += _29;
    double _31 = _24.data[_30];
    double _32 = _20 + _31;
    show("(FloatType)", &_32);
    double _33 = 58.0;
    int64_t _34 = 522;
    int64_t _35 = _15 + _34;
    int64_t _36 = -_15;
    int64_t _37 = -_36;
    bool _38 = _35 > _37;
    bool _39 = false;
    _a1_bool _40;
    _40.d0 = 2;
    _40.data = jpl_alloc(sizeof(bool) * 2);
    _40.data[0] = _38;
    _40.data[1] = _39;
    double _41 = 37.0;
    double _42 = 5.0;
    double _43 = 3.0;
    rgba _44 = { _41, _42, _33, _43 };
    double _45 = _44.g;
    rgba _46 = { _33, _45, _10, _33 };
    double _47 = _46.b;
    print("h");
}

