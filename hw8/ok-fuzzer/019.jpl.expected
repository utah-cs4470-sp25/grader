
#include <math.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include "rt/runtime.h"

typedef struct {
  int64_t d0;
  bool *data;
} _a1_bool;

typedef struct {
  int64_t d0;
  _a1_bool *data;
} _a1__a1_bool;

typedef struct {
  int64_t d0;
  int64_t *data;
} _a1_int64_t;

void jpl_main(struct args args) {
    bool _0 = false;
    bool _1 = !_0;
    _a1_bool _2;
    _2.d0 = 1;
    _2.data = jpl_alloc(sizeof(bool) * 1);
    _2.data[0] = _1;
    _a1__a1_bool _3;
    _3.d0 = 1;
    _3.data = jpl_alloc(sizeof(_a1_bool) * 1);
    _3.data[0] = _2;
    int64_t _4 = 606;
    int64_t _5 = -_4;
    if (_5 >= 0)
    goto _jump1;
    fail_assertion("negative array index");
    _jump1:;
    if (_5 < _3.d0)
    goto _jump2;
    fail_assertion("index too large");
    _jump2:;
    int64_t _6 = 0;
    _6 *= _3.d0;
    _6 += _5;
    _a1_bool _7 = _3.data[_6];
    print("e");
    bool _8 = false;
    bool _9 = !_8;
    if (0 != _9)
    goto _jump3;
    fail_assertion("e");
    _jump3:;
    int64_t _10 = _2.d0 * _7.d0;
    _a1_int64_t _11;
    _11.d0 = 1;
    _11.data = jpl_alloc(sizeof(int64_t) * 1);
    _11.data[0] = _10;
    int64_t _12 = 706;
    _a1_int64_t _13;
    _13.d0 = 2;
    _13.data = jpl_alloc(sizeof(int64_t) * 2);
    _13.data[0] = _12;
    _13.data[1] = _7.d0;
}

