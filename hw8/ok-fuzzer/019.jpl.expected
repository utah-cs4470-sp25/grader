
#include <math.h>
#include <stdbool.h>
#include <stdio.h>
#include "rt/runtime.h"

typedef struct { } void_t;
typedef struct {
  double r;
  double g;
  double b;
  double a;
} rgba;

typedef struct {
  long long d0;
  bool *data;
} _a1_bool;

typedef struct {
  long long d0;
  _a1_bool *data;
} _a1__a1_bool;

typedef struct {
  long long d0;
  long long *data;
} _a1_long_long;

void jpl_main(struct args args) {
    bool _0 = false;
    bool _1 = !_0;
    bool _3 = false;
    bool _4 = !_3;
    _a1_bool _2;
    _2.d0 = 1;
    _2.data = jpl_alloc(sizeof(bool) * 1);
    _2.data[0] = _4;
    _a1__a1_bool _5;
    _5.d0 = 1;
    _5.data = jpl_alloc(sizeof(_a1_bool) * 1);
    _5.data[0] = _2;
    long long _6 = 606ll;
    long long _7 = -_6;
    if (_7 >= 0ll)
    goto _jump1;
    fail_assertion("negative array index");
    _jump1:;
    if (_7 < _5.d0)
    goto _jump2;
    fail_assertion("index too large");
    _jump2:;
    long long _8 = 0ll;
    _8 *= _5.d0;
    _8 += _7;
    _a1_bool _9 = _5.data[_8];
    print("e");
    bool _10 = false;
    bool _11 = !_10;
    if (0 != _11)
    goto _jump3;
    fail_assertion("e");
    _jump3:;
    long long _12 = _2.d0 * _9.d0;
    long long _14 = _2.d0 * _9.d0;
    _a1_long_long _13;
    _13.d0 = 1;
    _13.data = jpl_alloc(sizeof(long long) * 1);
    _13.data[0] = _14;
    long long _15 = 706ll;
    long long _17 = 706ll;
    _a1_long_long _16;
    _16.d0 = 2;
    _16.data = jpl_alloc(sizeof(long long) * 2);
    _16.data[0] = _17;
    _16.data[1] = _9.d0;
}

