global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 716
const1: dq 480
const2: db `(BoolType)`, 0
const3: dq 301
const4: dq 273
const5: db `divide by zero`, 0
const6: dq 573
const7: dq 102
const8: dq 627
const9: dq 3
const10: dq 128
const11: dq 263
const12: db `mod by zero`, 0
const13: db `(IntType)`, 0
const14: dq 655
const15: dq 816
const16: dq 118
const17: dq 219
const18: dq 303
const19: dq 560
const20: dq 161
const21: dq 77.85
const22: dq 10.76
const23: db `(FloatType)`, 0
const24: dq 1
const25: dq 989
const26: dq 72
const27: dq 930
const28: dq 0
const29: db `(ArrayType (BoolType) 1)`, 0
const30: dq 414
const31: dq 909
const32: dq 965
const33: dq 1.98
const34: dq 90.39
const35: dq 88.63
const36: dq 69.97
const37: dq 10.74
const38: dq 60.95
const39: dq 79.0
const40: dq 60.83
const41: dq 49.15
const42: dq 82.69

section .text
jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp ; end of jpl_main prelude
	mov rax, [rel const0] ; 716
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const1] ; 480
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const3] ; 301
	push rax
	mov rax, [rel const4] ; 273
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump1
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump1:
	cqo
	idiv r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const6] ; 573
	push rax
	mov rax, [rel const7] ; 102
	push rax
	mov rax, [rel const8] ; 627
	push rax
	mov rax, [rel const9] ; 3
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump2
	lea rdi, [rel const5] ; 'divide by zero'
	call _fail_assertion
.jump2:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const10] ; 128
	push rax
	mov rax, [rel const11] ; 263
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump3
	lea rdi, [rel const12] ; 'mod by zero'
	call _fail_assertion
.jump3:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump4
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump4:
	cqo
	idiv r10
	push rax
	lea rdi, [rel const13] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const14] ; 655
	push rax
	mov rax, [rel const15] ; 816
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump5
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump5:
	cqo
	idiv r10
	push rax
	mov rax, [rel const16] ; 118
	push rax
	mov rax, [rel const17] ; 219
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump6
	lea rdi, [rel const12] ; 'mod by zero'
	call _fail_assertion
.jump6:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const18] ; 303
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const19] ; 560
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump7
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const12] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump7:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const20] ; 161
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const21] ; 77.85
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const22] ; 10.76
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	lea rdi, [rel const23] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const24] ; True
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const25] ; 989
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const26] ; 72
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const27] ; 930
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump8
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const12] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump8:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	lea rdi, [rel const13] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const28] ; False
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	sub rsp, 8 ; Add alignment
	mov rax, [rel const28] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	mov rdi, 8
	sub rsp, 8 ; Add alignment
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	lea rdi, [rel const29] ; '(ArrayType (BoolType) 1)'
	lea rsi, [rsp]
	call _show
	add rsp, 16
	add rsp, 8 ; Remove alignment
	mov rax, [rel const30] ; 414
	push rax
	mov rax, [rel const31] ; 909
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const32] ; 965
	push rax
	lea rdi, [rel const13] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const33] ; 1.98
	push rax
	mov rax, [rel const34] ; 90.39
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const35] ; 88.63
	push rax
	mov rax, [rel const36] ; 69.97
	push rax
	mov rax, [rel const37] ; 10.74
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const38] ; 60.95
	push rax
	mov rax, [rel const39] ; 79.0
	push rax
	mov rax, [rel const40] ; 60.83
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const41] ; 49.15
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const42] ; 82.69
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	lea rdi, [rel const23] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	pop r12 ; begin jpl_main postlude
	pop rbp
	ret

