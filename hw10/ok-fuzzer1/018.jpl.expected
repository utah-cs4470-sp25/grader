global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 14.1
const1: db `(FloatType)`, 0
const2: dq 628
const3: dq 707
const4: dq 300
const5: dq 625
const6: db `(ArrayType (IntType) 1)`, 0
const7: dq 298
const8: db `(IntType)`, 0
const9: dq 0
const10: db `(BoolType)`, 0
const11: dq 1
const12: dq 82.36
const13: dq 24.82
const14: dq 62.02
const15: dq 62.44
const16: dq 36
const17: dq 935
const18: dq 809
const19: db `mod by zero`, 0
const20: dq 35
const21: db `divide by zero`, 0
const22: dq 555
const23: dq 150
const24: dq 470
const25: dq 54
const26: dq 726
const27: dq 7
const28: dq 975
const29: dq 905
const30: dq 613
const31: dq 299
const32: dq 263
const33: dq 661
const34: dq 811
const35: dq 887
const36: dq 960
const37: db `(ArrayType (BoolType) 1)`, 0
const38: dq 610
const39: dq 563
const40: dq 39.26

section .text
jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	mov rax, [rel const0] ; 14.1
	push rax
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	sub rsp, 8 ; Align stack
	mov rax, [rel const2] ; 628
	push rax
	mov rax, [rel const3] ; 707
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const4] ; 300
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const5] ; 625
	push rax
	pop rax
	neg rax
	push rax
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	lea rdi, [rel const6] ; '(ArrayType (IntType) 1)'
	lea rsi, [rsp]
	call _show
	add rsp, 16
	add rsp, 8 ; Remove alignment
	mov rax, [rel const7] ; 298
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	lea rdi, [rel const8] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const9] ; False
	push rax
	lea rdi, [rel const10] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const11] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const10] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const12] ; 82.36
	push rax
	mov rax, [rel const13] ; 24.82
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const14] ; 62.02
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const10] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const15] ; 62.44
	push rax
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const16] ; 36
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const17] ; 935
	push rax
	mov rax, [rel const18] ; 809
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump1
	lea rdi, [rel const19] ; 'mod by zero'
	call _fail_assertion
.jump1:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const20] ; 35
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump2
	lea rdi, [rel const21] ; 'divide by zero'
	call _fail_assertion
.jump2:
	cqo
	idiv r10
	push rax
	mov rax, [rel const22] ; 555
	push rax
	mov rax, [rel const23] ; 150
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const24] ; 470
	push rax
	mov rax, [rel const25] ; 54
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const26] ; 726
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump3
	sub rsp, 8 ; Align stack
	lea rdi, [rel const21] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump3:
	cqo
	idiv r10
	push rax
	mov rax, [rel const27] ; 7
	push rax
	mov rax, [rel const28] ; 975
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const29] ; 905
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	lea rdi, [rel const10] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const9] ; False
	push rax
	lea rdi, [rel const10] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	sub rsp, 8 ; Align stack
	mov rax, [rel const9] ; False
	push rax
	mov rax, [rel const30] ; 613
	push rax
	mov rax, [rel const31] ; 299
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const32] ; 263
	push rax
	mov rax, [rel const33] ; 661
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	mov rax, [rel const34] ; 811
	push rax
	mov rax, [rel const35] ; 887
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const36] ; 960
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	mov rax, [rel const11] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	mov rax, [rel const11] ; True
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	lea rdi, [rel const37] ; '(ArrayType (BoolType) 1)'
	lea rsi, [rsp]
	call _show
	add rsp, 16
	add rsp, 8 ; Remove alignment
	mov rax, [rel const38] ; 610
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const39] ; 563
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	lea rdi, [rel const8] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const40] ; 39.26
	push rax
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	pop r12
	pop rbp
	ret

