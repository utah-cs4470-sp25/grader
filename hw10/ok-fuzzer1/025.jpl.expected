global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 45.7
const1: dq 25.1
const2: db `(BoolType)`, 0
const3: dq 195
const4: dq 649
const5: db `mod by zero`, 0
const6: dq 214
const7: dq 0
const8: dq 1
const9: dq 28.21
const10: dq 95.07
const11: dq 12.19
const12: dq 19.62
const13: dq 43.47
const14: db `(ArrayType (BoolType) 1)`, 0
const15: dq 53
const16: dq 691
const17: dq 680
const18: dq 944
const19: dq 779
const20: dq 475
const21: dq 223
const22: db `(IntType)`, 0
const23: dq 36.68
const24: dq 27.2
const25: dq 74.55
const26: dq 132
const27: dq 327
const28: dq 191
const29: dq 281
const30: dq 225
const31: dq 582
const32: db `divide by zero`, 0
const33: dq 81.55
const34: dq 55.88
const35: dq 11.95
const36: db `(FloatType)`, 0

section .text
jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp ; end of jpl_main prelude
	mov rax, [rel const0] ; 45.7
	push rax
	mov rax, [rel const1] ; 25.1
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const3] ; 195
	push rax
	mov rax, [rel const4] ; 649
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump1
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump1:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const6] ; 214
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	sub rsp, 8 ; Add alignment
	mov rax, [rel const7] ; False
	push rax
	mov rax, [rel const8] ; True
	push rax
	mov rax, [rel const9] ; 28.21
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const10] ; 95.07
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const11] ; 12.19
	push rax
	mov rax, [rel const12] ; 19.62
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const13] ; 43.47
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	mov rdi, 24
	sub rsp, 8 ; Add alignment
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 3
	push rax
	lea rdi, [rel const14] ; '(ArrayType (BoolType) 1)'
	lea rsi, [rsp]
	call _show
	add rsp, 16
	add rsp, 8 ; Remove alignment
	mov rax, [rel const7] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const8] ; True
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const15] ; 53
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const16] ; 691
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const17] ; 680
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump2
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump2:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const18] ; 944
	push rax
	mov rax, [rel const19] ; 779
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const20] ; 475
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const21] ; 223
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	lea rdi, [rel const22] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const23] ; 36.68
	push rax
	mov rax, [rel const24] ; 27.2
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const25] ; 74.55
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	sub rsp, 8 ; Add alignment
	mov rax, [rel const7] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	mov rax, [rel const8] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	lea rdi, [rel const14] ; '(ArrayType (BoolType) 1)'
	lea rsi, [rsp]
	call _show
	add rsp, 16
	add rsp, 8 ; Remove alignment
	mov rax, [rel const26] ; 132
	push rax
	mov rax, [rel const27] ; 327
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump3
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump3:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const28] ; 191
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const29] ; 281
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const30] ; 225
	push rax
	mov rax, [rel const31] ; 582
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump4
	lea rdi, [rel const5] ; 'mod by zero'
	call _fail_assertion
.jump4:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump5
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const32] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump5:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump6
	lea rdi, [rel const32] ; 'divide by zero'
	call _fail_assertion
.jump6:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const7] ; False
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const33] ; 81.55
	push rax
	mov rax, [rel const34] ; 55.88
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const35] ; 11.95
	push rax
	lea rdi, [rel const36] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	pop r12 ; begin jpl_main postlude
	pop rbp
	ret

