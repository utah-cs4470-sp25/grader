global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 769
const1: dq 279
const2: dq 318
const3: dq 545
const4: db `mod by zero`, 0
const5: dq 26
const6: dq 368
const7: dq 261
const8: dq 395
const9: db `divide by zero`, 0
const10: dq 48
const11: dq 87
const12: db `(ArrayType (IntType) 1)`, 0
const13: dq 568
const14: dq 944
const15: dq 755
const16: dq 867
const17: dq 784
const18: dq 66
const19: dq 999
const20: dq 231
const21: db `(IntType)`, 0
const22: dq 47.24
const23: db `(FloatType)`, 0
const24: dq 31.31
const25: dq 64.75
const26: dq 59.77
const27: dq 27.19
const28: dq 35.35
const29: db `(BoolType)`, 0
const30: dq 48.49
const31: dq 96.24
const32: dq 64.08
const33: dq 7.56
const34: dq 68.06
const35: dq 45.34
const36: dq 980
const37: dq 13.61
const38: dq 625
const39: dq 175
const40: dq 32.12
const41: dq 80.39
const42: dq 5.63
const43: dq 4.12
const44: dq 0
const45: dq 1

section .text
jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	sub rsp, 8 ; Align stack
	mov rax, [rel const0] ; 769
	push rax
	mov rax, [rel const1] ; 279
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const2] ; 318
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const3] ; 545
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump1
	sub rsp, 8 ; Align stack
	lea rdi, [rel const4] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump1:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const5] ; 26
	push rax
	mov rax, [rel const6] ; 368
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump2
	lea rdi, [rel const4] ; 'mod by zero'
	call _fail_assertion
.jump2:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const7] ; 261
	push rax
	mov rax, [rel const8] ; 395
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump3
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump3:
	cqo
	idiv r10
	push rax
	mov rax, [rel const10] ; 48
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump4
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump4:
	cqo
	idiv r10
	push rax
	mov rax, [rel const11] ; 87
	push rax
	mov rdi, 24
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 3
	push rax
	lea rdi, [rel const12] ; '(ArrayType (IntType) 1)'
	lea rsi, [rsp]
	call _show
	add rsp, 16
	add rsp, 8 ; Remove alignment
	mov rax, [rel const13] ; 568
	push rax
	mov rax, [rel const14] ; 944
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const15] ; 755
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump5
	lea rdi, [rel const9] ; 'divide by zero'
	call _fail_assertion
.jump5:
	cqo
	idiv r10
	push rax
	mov rax, [rel const16] ; 867
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump6
	lea rdi, [rel const9] ; 'divide by zero'
	call _fail_assertion
.jump6:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump7
	sub rsp, 8 ; Align stack
	lea rdi, [rel const9] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump7:
	cqo
	idiv r10
	push rax
	mov rax, [rel const17] ; 784
	push rax
	mov rax, [rel const18] ; 66
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const19] ; 999
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const20] ; 231
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	lea rdi, [rel const21] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const22] ; 47.24
	push rax
	lea rdi, [rel const23] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const24] ; 31.31
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const25] ; 64.75
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const26] ; 59.77
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const27] ; 27.19
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const28] ; 35.35
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	lea rdi, [rel const29] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const30] ; 48.49
	push rax
	mov rax, [rel const31] ; 96.24
	push rax
	mov rax, [rel const32] ; 64.08
	push rax
	mov rax, [rel const33] ; 7.56
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const34] ; 68.06
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const35] ; 45.34
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	lea rdi, [rel const29] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const36] ; 980
	push rax
	pop rax
	neg rax
	push rax
	lea rdi, [rel const21] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const37] ; 13.61
	push rax
	lea rdi, [rel const23] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const38] ; 625
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const39] ; 175
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	lea rdi, [rel const29] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const40] ; 32.12
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const41] ; 80.39
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	lea rdi, [rel const29] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const42] ; 5.63
	push rax
	mov rax, [rel const43] ; 4.12
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	lea rdi, [rel const29] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const44] ; False
	push rax
	lea rdi, [rel const29] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const45] ; True
	push rax
	lea rdi, [rel const29] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	pop r12
	pop rbp
	ret

