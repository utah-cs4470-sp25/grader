global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 33.11
const1: db `(FloatType)`, 0
const2: dq 271
const3: dq 43
const4: dq 799
const5: dq 525
const6: db `(BoolType)`, 0
const7: dq 28.15
const8: dq 38.52
const9: dq 59.86
const10: dq 704
const11: dq 327
const12: dq 664
const13: dq 159
const14: db `divide by zero`, 0
const15: dq 504
const16: dq 116
const17: db `mod by zero`, 0
const18: dq 660
const19: dq 779
const20: dq 813
const21: dq 680
const22: dq 392
const23: dq 732
const24: dq 370
const25: dq 7
const26: dq 296
const27: dq 26.32
const28: dq 40.94
const29: dq 50.07
const30: dq 34.31
const31: dq 67.78
const32: dq 26.65
const33: dq 40.69
const34: dq 64.12
const35: dq 86.35
const36: dq 28.48
const37: dq 41.12
const38: dq 58.72
const39: dq 51.38
const40: dq 71.85
const41: dq 96.76
const42: dq 16.36
const43: dq 58.54
const44: dq 24.27
const45: dq 61.22
const46: dq 15.17
const47: dq 88.66
const48: dq 91.93
const49: dq 470
const50: dq 160
const51: dq 128
const52: dq 152
const53: dq 632
const54: dq 185
const55: dq 916
const56: dq 545
const57: dq 533
const58: dq 821
const59: dq 563
const60: dq 221
const61: dq 203
const62: dq 234
const63: dq 359
const64: dq 293
const65: dq 493
const66: dq 956
const67: dq 139
const68: dq 329
const69: dq 40
const70: dq 150
const71: dq 147
const72: dq 589
const73: dq 59
const74: dq 208
const75: dq 212
const76: dq 987
const77: dq 756
const78: dq 89
const79: dq 39
const80: dq 13
const81: dq 9.62
const82: dq 33.74
const83: dq 60.82
const84: dq 9.71
const85: dq 12.83
const86: dq 807
const87: db `(IntType)`, 0
const88: dq 79
const89: dq 521
const90: dq 1
const91: dq 69.46
const92: dq 5.18
const93: dq 91.47
const94: dq 62.96
const95: dq 27.64
const96: dq 66.99
const97: dq 30.68
const98: dq 14.08
const99: dq 73.75
const100: dq 53.38
const101: dq 0
const102: dq 689
const103: dq 576
const104: dq 368
const105: dq 26
const106: dq 51.63
const107: dq 56.22
const108: dq 71.33
const109: dq 60.13
const110: dq 48.64
const111: dq 408
const112: dq 120
const113: dq 564
const114: dq 509
const115: dq 217
const116: dq 36.91
const117: dq 5.36
const118: dq 985
const119: dq 457
const120: dq 250
const121: dq 454
const122: dq 18
const123: dq 9
const124: dq 561
const125: dq 539
const126: dq 302
const127: dq 8
const128: dq 109
const129: dq 251
const130: dq 809
const131: dq 840
const132: dq 3.31
const133: dq 31.13
const134: dq 56.84
const135: dq 29.34
const136: dq 66.81
const137: dq 65.71
const138: dq 77.5
const139: dq 73.36
const140: dq 91.62
const141: dq 6.79
const142: dq 353
const143: dq 77.37
const144: dq 92.9
const145: dq 42.34
const146: dq 88.06
const147: dq 73.41
const148: dq 85.32
const149: dq 49.46
const150: dq 18.89
const151: dq 53.78
const152: dq 47.41
const153: dq 77.55
const154: db `(ArrayType (ArrayType (FloatType) 1) 1)`, 0
const155: dq 33.71
const156: dq 81.67
const157: dq 79.83
const158: dq 61.52
const159: dq 45.59
const160: dq 51.66
const161: dq 460
const162: dq 476
const163: dq 315
const164: dq 335
const165: dq 452
const166: dq 829
const167: dq 469
const168: dq 29
const169: dq 162
const170: dq 25.76
const171: dq 77.74
const172: dq 94.02
const173: dq 93.3
const174: dq 13.01
const175: dq 17.6
const176: dq 90.47
const177: dq 97.67
const178: dq 20.54
const179: dq 26.19
const180: dq 995
const181: dq 96.55
const182: dq 83.29
const183: dq 22.41
const184: dq 67.09
const185: dq 43.19
const186: dq 80.91
const187: dq 83.77
const188: dq 85.53
const189: dq 99.31
const190: dq 32.4
const191: dq 93.42
const192: dq 16.05
const193: dq 57.52
const194: dq 46.63
const195: dq 77.67
const196: dq 347
const197: dq 88
const198: dq 216
const199: dq 158
const200: dq 56.41
const201: dq 67.01
const202: dq 52.05
const203: dq 45.07
const204: dq 80.07
const205: dq 6.04
const206: dq 54.72
const207: dq 19.15
const208: dq 47.52
const209: dq 4.85
const210: dq 11.55
const211: dq 48.29
const212: dq 59.77
const213: dq 68.85
const214: dq 79.26
const215: dq 2.76
const216: dq 45.09
const217: dq 26.95
const218: dq 14.44
const219: dq 40.62
const220: dq 60.78
const221: dq 19.24
const222: dq 71.66
const223: dq 10.29
const224: dq 59.05
const225: dq 8.73
const226: dq 42.93
const227: dq 77.96
const228: dq 3.82
const229: dq 36.11
const230: dq 81.9
const231: dq 57.86
const232: dq 62.1
const233: dq 28.39
const234: dq 57.43
const235: dq 28.83
const236: dq 95.96
const237: dq 71.81
const238: dq 68.53
const239: dq 18.98
const240: dq 50.63
const241: dq 3.89
const242: dq 45.49
const243: dq 23.89
const244: dq 76.45
const245: dq 2.19
const246: dq 63.52
const247: dq 54.4
const248: dq 47.62
const249: dq 55.52
const250: dq 0.32
const251: db `(ArrayType (BoolType) 1)`, 0
const252: dq 35.13
const253: dq 84.49
const254: dq 38.56
const255: dq 86.4
const256: dq 68.89
const257: dq 28.46
const258: dq 76.33
const259: dq 84.51
const260: dq 90.31
const261: dq 8.81
const262: dq 78.46
const263: dq 49.96
const264: dq 22.53
const265: dq 67.73
const266: dq 25.43
const267: dq 83.58
const268: dq 37.41
const269: dq 52.03
const270: dq 8.05
const271: dq 87.71
const272: dq 78.03
const273: dq 486
const274: dq 976
const275: dq 264
const276: dq 727
const277: dq 577
const278: dq 83
const279: dq 762
const280: dq 73
const281: dq 601
const282: dq 227
const283: dq 68.43
const284: dq 17.86
const285: dq 27.05
const286: dq 17.79
const287: dq 416
const288: dq 635
const289: dq 670
const290: dq 432
const291: dq 524
const292: dq 35.62
const293: dq 95.78
const294: dq 57.78
const295: dq 83.51
const296: dq 98.37
const297: dq 1.83
const298: dq 28.54
const299: dq 40.31
const300: dq 93.72
const301: dq 63
const302: dq 4
const303: dq 722
const304: dq 675
const305: dq 497
const306: dq 141
const307: dq 988
const308: dq 862
const309: dq 856
const310: dq 118
const311: dq 46
const312: dq 942
const313: dq 42.06
const314: dq 77.56
const315: dq 22.14
const316: dq 57.94

section .text
jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	mov rax, [rel const0] ; 33.11
	push rax
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const2] ; 271
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const3] ; 43
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const4] ; 799
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const5] ; 525
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	lea rdi, [rel const6] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const7] ; 28.15
	push rax
	mov rax, [rel const8] ; 38.52
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const9] ; 59.86
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const10] ; 704
	push rax
	mov rax, [rel const11] ; 327
	push rax
	mov rax, [rel const12] ; 664
	push rax
	mov rax, [rel const13] ; 159
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump1
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump1:
	cqo
	idiv r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const15] ; 504
	push rax
	mov rax, [rel const16] ; 116
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump2
	lea rdi, [rel const14] ; 'divide by zero'
	call _fail_assertion
.jump2:
	cqo
	idiv r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump3
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump3:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const18] ; 660
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump4
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump4:
	cqo
	idiv r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump5
	lea rdi, [rel const14] ; 'divide by zero'
	call _fail_assertion
.jump5:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump6
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump6:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const12] ; 664
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump7
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump7:
	cqo
	idiv r10
	push rax
	mov rax, [rel const19] ; 779
	push rax
	mov rax, [rel const20] ; 813
	push rax
	mov rax, [rel const21] ; 680
	push rax
	mov rax, [rel const22] ; 392
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const23] ; 732
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const24] ; 370
	push rax
	mov rax, [rel const25] ; 7
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const26] ; 296
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump8
	lea rdi, [rel const17] ; 'mod by zero'
	call _fail_assertion
.jump8:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	lea rdi, [rel const6] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const27] ; 26.32
	push rax
	mov rax, [rel const28] ; 40.94
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const29] ; 50.07
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	lea rdi, [rel const6] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const30] ; 34.31
	push rax
	mov rax, [rel const31] ; 67.78
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const32] ; 26.65
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const33] ; 40.69
	push rax
	mov rax, [rel const34] ; 64.12
	push rax
	mov rax, [rel const35] ; 86.35
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const36] ; 28.48
	push rax
	mov rax, [rel const37] ; 41.12
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const38] ; 58.72
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const39] ; 51.38
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const40] ; 71.85
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const41] ; 96.76
	push rax
	mov rax, [rel const42] ; 16.36
	push rax
	mov rax, [rel const43] ; 58.54
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const44] ; 24.27
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const45] ; 61.22
	push rax
	mov rax, [rel const46] ; 15.17
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const47] ; 88.66
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const48] ; 91.93
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const49] ; 470
	push rax
	mov rax, [rel const50] ; 160
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const51] ; 128
	push rax
	mov rax, [rel const52] ; 152
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const53] ; 632
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const54] ; 185
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump9
	lea rdi, [rel const17] ; 'mod by zero'
	call _fail_assertion
.jump9:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const55] ; 916
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const56] ; 545
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const57] ; 533
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump10
	lea rdi, [rel const17] ; 'mod by zero'
	call _fail_assertion
.jump10:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const58] ; 821
	push rax
	mov rax, [rel const59] ; 563
	push rax
	mov rax, [rel const60] ; 221
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const61] ; 203
	push rax
	mov rax, [rel const62] ; 234
	push rax
	mov rax, [rel const63] ; 359
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump11
	lea rdi, [rel const17] ; 'mod by zero'
	call _fail_assertion
.jump11:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const64] ; 293
	push rax
	mov rax, [rel const65] ; 493
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const66] ; 956
	push rax
	mov rax, [rel const67] ; 139
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump12
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump12:
	cqo
	idiv r10
	push rax
	mov rax, [rel const68] ; 329
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const69] ; 40
	push rax
	mov rax, [rel const70] ; 150
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump13
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump13:
	cqo
	idiv r10
	push rax
	mov rax, [rel const71] ; 147
	push rax
	mov rax, [rel const72] ; 589
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump14
	lea rdi, [rel const14] ; 'divide by zero'
	call _fail_assertion
.jump14:
	cqo
	idiv r10
	push rax
	mov rax, [rel const73] ; 59
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump15
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump15:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const74] ; 208
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump16
	lea rdi, [rel const14] ; 'divide by zero'
	call _fail_assertion
.jump16:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump17
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump17:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump18
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump18:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const75] ; 212
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const76] ; 987
	push rax
	mov rax, [rel const77] ; 756
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump19
	lea rdi, [rel const17] ; 'mod by zero'
	call _fail_assertion
.jump19:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump20
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump20:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const78] ; 89
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const79] ; 39
	push rax
	mov rax, [rel const80] ; 13
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump21
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump21:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	lea rdi, [rel const6] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const81] ; 9.62
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const82] ; 33.74
	push rax
	mov rax, [rel const83] ; 60.82
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const84] ; 9.71
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	lea rdi, [rel const6] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const85] ; 12.83
	push rax
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const86] ; 807
	push rax
	lea rdi, [rel const87] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const88] ; 79
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const89] ; 521
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	mov rax, [rel const90] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	mov rax, [rel const91] ; 69.46
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const92] ; 5.18
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const93] ; 91.47
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	lea rdi, [rel const6] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const94] ; 62.96
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const95] ; 27.64
	push rax
	mov rax, [rel const96] ; 66.99
	push rax
	mov rax, [rel const97] ; 30.68
	push rax
	mov rax, [rel const98] ; 14.08
	push rax
	mov rax, [rel const99] ; 73.75
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const100] ; 53.38
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const6] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const101] ; False
	push rax
	lea rdi, [rel const6] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const102] ; 689
	push rax
	lea rdi, [rel const87] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const101] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const6] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const101] ; False
	push rax
	lea rdi, [rel const6] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const103] ; 576
	push rax
	mov rax, [rel const104] ; 368
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump22
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump22:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	lea rdi, [rel const87] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const105] ; 26
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	lea rdi, [rel const87] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const106] ; 51.63
	push rax
	mov rax, [rel const107] ; 56.22
	push rax
	mov rax, [rel const108] ; 71.33
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const109] ; 60.13
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const110] ; 48.64
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const111] ; 408
	push rax
	lea rdi, [rel const87] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const112] ; 120
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const113] ; 564
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const114] ; 509
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump23
	lea rdi, [rel const14] ; 'divide by zero'
	call _fail_assertion
.jump23:
	cqo
	idiv r10
	push rax
	mov rax, [rel const115] ; 217
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	lea rdi, [rel const6] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const116] ; 36.91
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const117] ; 5.36
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const118] ; 985
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const114] ; 509
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const119] ; 457
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const120] ; 250
	push rax
	mov rax, [rel const114] ; 509
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump24
	lea rdi, [rel const17] ; 'mod by zero'
	call _fail_assertion
.jump24:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const121] ; 454
	push rax
	mov rax, [rel const122] ; 18
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump25
	lea rdi, [rel const14] ; 'divide by zero'
	call _fail_assertion
.jump25:
	cqo
	idiv r10
	push rax
	mov rax, [rel const123] ; 9
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const124] ; 561
	push rax
	mov rax, [rel const125] ; 539
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump26
	lea rdi, [rel const17] ; 'mod by zero'
	call _fail_assertion
.jump26:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump27
	lea rdi, [rel const17] ; 'mod by zero'
	call _fail_assertion
.jump27:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const126] ; 302
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump28
	lea rdi, [rel const17] ; 'mod by zero'
	call _fail_assertion
.jump28:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const127] ; 8
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const128] ; 109
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const129] ; 251
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	lea rdi, [rel const87] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const101] ; False
	push rax
	lea rdi, [rel const6] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const130] ; 809
	push rax
	mov rax, [rel const131] ; 840
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	mov rax, [rel const132] ; 3.31
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const133] ; 31.13
	push rax
	mov rax, [rel const134] ; 56.84
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const135] ; 29.34
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const136] ; 66.81
	push rax
	mov rax, [rel const137] ; 65.71
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const138] ; 77.5
	push rax
	mov rax, [rel const139] ; 73.36
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const140] ; 91.62
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const141] ; 6.79
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	lea rdi, [rel const6] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const90] ; True
	push rax
	mov rax, [rel const101] ; False
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	lea rdi, [rel const6] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const142] ; 353
	push rax
	lea rdi, [rel const87] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	sub rsp, 8 ; Align stack
	mov rax, [rel const143] ; 77.37
	push rax
	mov rax, [rel const144] ; 92.9
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const145] ; 42.34
	push rax
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	mov rax, [rel const146] ; 88.06
	push rax
	mov rax, [rel const147] ; 73.41
	push rax
	mov rax, [rel const148] ; 85.32
	push rax
	mov rdi, 24
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 3
	push rax
	mov rax, [rel const149] ; 49.46
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const150] ; 18.89
	push rax
	mov rax, [rel const151] ; 53.78
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const152] ; 47.41
	push rax
	mov rax, [rel const153] ; 77.55
	push rax
	mov rdi, 24
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 3
	push rax
	mov rdi, 48
	call _jpl_alloc
	; Moving 48 bytes from rsp to rax 
		mov r10, [rsp + 40]
		mov [rax + 40], r10
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 48
	push rax
	mov rax, 3
	push rax
	lea rdi, [rel const154] ; '(ArrayType (ArrayType (FloatType) 1) 1)'
	lea rsi, [rsp]
	call _show
	add rsp, 16
	add rsp, 8 ; Remove alignment
	mov rax, [rel const155] ; 33.71
	push rax
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const156] ; 81.67
	push rax
	mov rax, [rel const157] ; 79.83
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const158] ; 61.52
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const159] ; 45.59
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const160] ; 51.66
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	lea rdi, [rel const6] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const101] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const6] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const161] ; 460
	push rax
	mov rax, [rel const162] ; 476
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const163] ; 315
	push rax
	mov rax, [rel const164] ; 335
	push rax
	mov rax, [rel const165] ; 452
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const166] ; 829
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump29
	lea rdi, [rel const17] ; 'mod by zero'
	call _fail_assertion
.jump29:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump30
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump30:
	cqo
	idiv r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const167] ; 469
	push rax
	mov rax, [rel const168] ; 29
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump31
	lea rdi, [rel const14] ; 'divide by zero'
	call _fail_assertion
.jump31:
	cqo
	idiv r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const169] ; 162
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	lea rdi, [rel const6] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const170] ; 25.76
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const171] ; 77.74
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const172] ; 94.02
	push rax
	mov rax, [rel const173] ; 93.3
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const174] ; 13.01
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const175] ; 17.6
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const176] ; 90.47
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const177] ; 97.67
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const178] ; 20.54
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const179] ; 26.19
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const90] ; True
	push rax
	lea rdi, [rel const6] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const180] ; 995
	push rax
	pop rax
	neg rax
	push rax
	lea rdi, [rel const87] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const181] ; 96.55
	push rax
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const182] ; 83.29
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const183] ; 22.41
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const184] ; 67.09
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const185] ; 43.19
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const186] ; 80.91
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const187] ; 83.77
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const147] ; 73.41
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const188] ; 85.53
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const189] ; 99.31
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const190] ; 32.4
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const191] ; 93.42
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const192] ; 16.05
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const193] ; 57.52
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const194] ; 46.63
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const195] ; 77.67
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	lea rdi, [rel const6] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const196] ; 347
	push rax
	mov rax, [rel const197] ; 88
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump32
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump32:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	lea rdi, [rel const87] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const198] ; 216
	push rax
	lea rdi, [rel const87] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const199] ; 158
	push rax
	lea rdi, [rel const87] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	sub rsp, 8 ; Align stack
	mov rax, [rel const200] ; 56.41
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const201] ; 67.01
	push rax
	mov rax, [rel const202] ; 52.05
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const203] ; 45.07
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const204] ; 80.07
	push rax
	mov rax, [rel const205] ; 6.04
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const206] ; 54.72
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const207] ; 19.15
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const208] ; 47.52
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const209] ; 4.85
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const210] ; 11.55
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const211] ; 48.29
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const212] ; 59.77
	push rax
	mov rax, [rel const213] ; 68.85
	push rax
	mov rax, [rel const214] ; 79.26
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const215] ; 2.76
	push rax
	mov rax, [rel const216] ; 45.09
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const217] ; 26.95
	push rax
	mov rax, [rel const218] ; 14.44
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const219] ; 40.62
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const220] ; 60.78
	push rax
	mov rax, [rel const221] ; 19.24
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	mov rax, [rel const222] ; 71.66
	push rax
	mov rax, [rel const223] ; 10.29
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const224] ; 59.05
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const225] ; 8.73
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const226] ; 42.93
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const227] ; 77.96
	push rax
	mov rax, [rel const228] ; 3.82
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const229] ; 36.11
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const230] ; 81.9
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	mov rax, [rel const231] ; 57.86
	push rax
	mov rax, [rel const232] ; 62.1
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const233] ; 28.39
	push rax
	mov rax, [rel const234] ; 57.43
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const235] ; 28.83
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const236] ; 95.96
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const237] ; 71.81
	push rax
	mov rax, [rel const238] ; 68.53
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const239] ; 18.98
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const240] ; 50.63
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const241] ; 3.89
	push rax
	mov rax, [rel const242] ; 45.49
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const243] ; 23.89
	push rax
	mov rax, [rel const244] ; 76.45
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const31] ; 67.78
	push rax
	mov rax, [rel const245] ; 2.19
	push rax
	mov rax, [rel const246] ; 63.52
	push rax
	mov rax, [rel const247] ; 54.4
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const248] ; 47.62
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	mov rax, [rel const249] ; 55.52
	push rax
	mov rax, [rel const250] ; 0.32
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	mov rax, [rel const90] ; True
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	mov rax, [rel const90] ; True
	push rax
	mov rdi, 32
	call _jpl_alloc
	; Moving 32 bytes from rsp to rax 
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	push rax
	mov rax, 4
	push rax
	lea rdi, [rel const251] ; '(ArrayType (BoolType) 1)'
	lea rsi, [rsp]
	call _show
	add rsp, 16
	add rsp, 8 ; Remove alignment
	mov rax, [rel const252] ; 35.13
	push rax
	mov rax, [rel const253] ; 84.49
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const254] ; 38.56
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const255] ; 86.4
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const6] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const256] ; 68.89
	push rax
	mov rax, [rel const257] ; 28.46
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const46] ; 15.17
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const258] ; 76.33
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const259] ; 84.51
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	lea rdi, [rel const6] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const90] ; True
	push rax
	mov rax, [rel const260] ; 90.31
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const261] ; 8.81
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const262] ; 78.46
	push rax
	mov rax, [rel const263] ; 49.96
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const264] ; 22.53
	push rax
	mov rax, [rel const265] ; 67.73
	push rax
	mov rax, [rel const266] ; 25.43
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const267] ; 83.58
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const268] ; 37.41
	push rax
	mov rax, [rel const269] ; 52.03
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const270] ; 8.05
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	lea rdi, [rel const6] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const271] ; 87.71
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const272] ; 78.03
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const6] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const273] ; 486
	push rax
	mov rax, [rel const274] ; 976
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	lea rdi, [rel const6] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const275] ; 264
	push rax
	mov rax, [rel const276] ; 727
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const277] ; 577
	push rax
	mov rax, [rel const278] ; 83
	push rax
	mov rax, [rel const279] ; 762
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump33
	lea rdi, [rel const17] ; 'mod by zero'
	call _fail_assertion
.jump33:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump34
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump34:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const280] ; 73
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const123] ; 9
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const281] ; 601
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump35
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump35:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	lea rdi, [rel const87] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const282] ; 227
	push rax
	lea rdi, [rel const87] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const283] ; 68.43
	push rax
	mov rax, [rel const284] ; 17.86
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const285] ; 27.05
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	lea rdi, [rel const6] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const286] ; 17.79
	push rax
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const287] ; 416
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const288] ; 635
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	mov rax, [rel const289] ; 670
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const129] ; 251
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const290] ; 432
	push rax
	mov rax, [rel const291] ; 524
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	lea rdi, [rel const6] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const292] ; 35.62
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const293] ; 95.78
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const294] ; 57.78
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const295] ; 83.51
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	lea rdi, [rel const6] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const296] ; 98.37
	push rax
	mov rax, [rel const297] ; 1.83
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const298] ; 28.54
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const299] ; 40.31
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const6] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const300] ; 93.72
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const301] ; 63
	push rax
	mov rax, [rel const302] ; 4
	push rax
	mov rax, [rel const303] ; 722
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const304] ; 675
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const305] ; 497
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump36
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump36:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const306] ; 141
	push rax
	mov rax, [rel const307] ; 988
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const308] ; 862
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const309] ; 856
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump37
	lea rdi, [rel const14] ; 'divide by zero'
	call _fail_assertion
.jump37:
	cqo
	idiv r10
	push rax
	mov rax, [rel const310] ; 118
	push rax
	mov rax, [rel const311] ; 46
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const75] ; 212
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump38
	sub rsp, 8 ; Align stack
	lea rdi, [rel const17] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump38:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump39
	lea rdi, [rel const17] ; 'mod by zero'
	call _fail_assertion
.jump39:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const3] ; 43
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump40
	sub rsp, 8 ; Align stack
	lea rdi, [rel const14] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump40:
	cqo
	idiv r10
	push rax
	mov rax, [rel const312] ; 942
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	lea rdi, [rel const6] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const313] ; 42.06
	push rax
	mov rax, [rel const314] ; 77.56
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const315] ; 22.14
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const6] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const316] ; 57.94
	push rax
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	pop r12
	pop rbp
	ret

