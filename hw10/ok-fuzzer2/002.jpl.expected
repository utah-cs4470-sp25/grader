global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 961
const1: dq 411
const2: db `(BoolType)`, 0
const3: dq 73.1
const4: dq 34.07
const5: dq 68.12
const6: dq 45.67
const7: dq 29.5
const8: dq 70.77
const9: dq 86.94
const10: dq 25.72
const11: dq 49.5
const12: dq 95.79
const13: dq 92.01
const14: dq 49.29
const15: dq 53.03
const16: dq 86.66
const17: dq 8.05
const18: dq 54.93
const19: dq 64.31
const20: dq 20.77
const21: dq 48.62
const22: dq 66.01
const23: db `(ArrayType (BoolType) 1)`, 0
const24: dq 0
const25: dq 55.98
const26: dq 46.7
const27: dq 28.55
const28: dq 6.97
const29: dq 73.24
const30: dq 91.73
const31: dq 8.59
const32: dq 22.11
const33: dq 1
const34: dq 16.68
const35: dq 23.64
const36: dq 83.15
const37: dq 38.54
const38: dq 74.18
const39: dq 81.23
const40: dq 64.37
const41: dq 21.07
const42: dq 83.77
const43: dq 9.55
const44: dq 18.92
const45: dq 55.21
const46: dq 84.16
const47: dq 824
const48: dq 161
const49: dq 857
const50: dq 147
const51: dq 268
const52: dq 755
const53: db `mod by zero`, 0
const54: dq 876
const55: dq 203
const56: dq 315
const57: dq 253
const58: dq 574
const59: db `divide by zero`, 0
const60: dq 124
const61: dq 214
const62: dq 271
const63: dq 699
const64: dq 983
const65: dq 768
const66: dq 283
const67: dq 429
const68: dq 28
const69: dq 952
const70: dq 137
const71: dq 594
const72: db `(ArrayType (IntType) 1)`, 0
const73: dq 387
const74: dq 97
const75: dq 566
const76: dq 997
const77: dq 761
const78: dq 829
const79: dq 77
const80: dq 62
const81: dq 703
const82: dq 848
const83: dq 532
const84: dq 262
const85: dq 378
const86: dq 733
const87: dq 701
const88: dq 420
const89: dq 932
const90: dq 624
const91: dq 96
const92: dq 739
const93: dq 213
const94: dq 499
const95: dq 595
const96: dq 488
const97: dq 752
const98: dq 273
const99: dq 626
const100: dq 233
const101: dq 338
const102: dq 309
const103: dq 85
const104: db `(IntType)`, 0
const105: dq 9.44
const106: dq 67.41
const107: dq 77.29
const108: db `(ArrayType (FloatType) 1)`, 0
const109: dq 70.02
const110: dq 79.93
const111: dq 67.22
const112: dq 70.18
const113: dq 86.56
const114: dq 934
const115: dq 326
const116: dq 847
const117: dq 7
const118: dq 958
const119: dq 108
const120: dq 12
const121: dq 180
const122: dq 869
const123: dq 152
const124: dq 550
const125: dq 270
const126: dq 745
const127: dq 807
const128: dq 216
const129: dq 672
const130: dq 989
const131: dq 286
const132: dq 185
const133: dq 172
const134: dq 69
const135: dq 897
const136: dq 121
const137: dq 341
const138: dq 73.91
const139: dq 87.69
const140: dq 50.03
const141: db `(FloatType)`, 0
const142: dq 579
const143: dq 821
const144: dq 552
const145: dq 947
const146: dq 42.6
const147: dq 42.81
const148: dq 10.07
const149: dq 34.52
const150: dq 0.87
const151: dq 920
const152: dq 811
const153: dq 519
const154: dq 661
const155: dq 557
const156: dq 106
const157: dq 114
const158: dq 398
const159: dq 154
const160: dq 280
const161: dq 437
const162: dq 138
const163: dq 572
const164: dq 406
const165: dq 665
const166: dq 71.16
const167: dq 69.26
const168: db `(ArrayType (ArrayType (BoolType) 1) 1)`, 0
const169: dq 781
const170: dq 25
const171: dq 987
const172: dq 875
const173: dq 295
const174: dq 608
const175: dq 247
const176: dq 324
const177: dq 523
const178: dq 551
const179: dq 394
const180: dq 589
const181: dq 140
const182: dq 17.64
const183: dq 215
const184: dq 924
const185: dq 355
const186: dq 716
const187: dq 935
const188: dq 650
const189: dq 992
const190: dq 282
const191: dq 27.48
const192: dq 565
const193: dq 75.43
const194: dq 97.19
const195: dq 60.7
const196: dq 59.53
const197: dq 73.09
const198: dq 86.38
const199: dq 42.49
const200: dq 97.38
const201: dq 68.97
const202: dq 77.73
const203: dq 8.45
const204: dq 80.83
const205: dq 47.64
const206: dq 28.43
const207: dq 20.91
const208: dq 48.15
const209: dq 67.95
const210: dq 66.23
const211: dq 89.21
const212: dq 60.38
const213: dq 68.0
const214: dq 53.58
const215: dq 99.03
const216: dq 41.65
const217: dq 57.3
const218: dq 44.99
const219: dq 20.12
const220: dq 942
const221: dq 412
const222: dq 711
const223: dq 43
const224: dq 65
const225: dq 609
const226: dq 738
const227: dq 142
const228: dq 750
const229: dq 508
const230: dq 386
const231: dq 26
const232: dq 792
const233: dq 741
const234: dq 591
const235: dq 722
const236: dq 788
const237: dq 863
const238: dq 423
const239: dq 240
const240: dq 531
const241: dq 985
const242: dq 71.85
const243: dq 321
const244: dq 417
const245: dq 860
const246: dq 278
const247: dq 36.63
const248: dq 49.63
const249: dq 77.05
const250: dq 87.0
const251: dq 99.15
const252: dq 51.07
const253: dq 97.99
const254: dq 39.96
const255: dq 2.2
const256: dq 54
const257: dq 713
const258: dq 237
const259: dq 886
const260: dq 195
const261: dq 290
const262: dq 706
const263: dq 864
const264: dq 434
const265: dq 81.57
const266: dq 28.71
const267: dq 438
const268: dq 0.37
const269: dq 13.68
const270: dq 53.75
const271: dq 24.41
const272: dq 52.69
const273: dq 80.29
const274: dq 36.42
const275: dq 1.63
const276: dq 76.71
const277: dq 41.25
const278: dq 39.85
const279: dq 90.94
const280: dq 1.81
const281: dq 78.52
const282: dq 2.85
const283: dq 98.64
const284: dq 68.83
const285: dq 14.95
const286: dq 92.09
const287: dq 81.07
const288: dq 58.98
const289: dq 30.34
const290: dq 98.89
const291: dq 75.89
const292: dq 9.12
const293: dq 78.57
const294: dq 898
const295: dq 611
const296: dq 292
const297: dq 157
const298: dq 205
const299: dq 374
const300: dq 976
const301: dq 40
const302: dq 21.39
const303: dq 454
const304: dq 115
const305: dq 770
const306: dq 851
const307: dq 156
const308: dq 17
const309: dq 363
const310: dq 496
const311: dq 447
const312: dq 753
const313: dq 903
const314: dq 241
const315: dq 317
const316: dq 123
const317: dq 173
const318: dq 337
const319: dq 764
const320: dq 926
const321: dq 778
const322: dq 573
const323: dq 38
const324: dq 921
const325: dq 95
const326: dq 26.23
const327: dq 493
const328: dq 135
const329: dq 181
const330: dq 994
const331: dq 58
const332: dq 655
const333: dq 944
const334: dq 92
const335: dq 371
const336: dq 380
const337: dq 797
const338: dq 846
const339: dq 602
const340: dq 631
const341: dq 238
const342: dq 570
const343: dq 607
const344: dq 170
const345: dq 159
const346: dq 629
const347: dq 382

section .text
jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp
	mov rax, [rel const0] ; 961
	push rax
	mov rax, [rel const1] ; 411
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	sub rsp, 8 ; Align stack
	mov rax, [rel const3] ; 73.1
	push rax
	mov rax, [rel const4] ; 34.07
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const5] ; 68.12
	push rax
	mov rax, [rel const6] ; 45.67
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const7] ; 29.5
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const8] ; 70.77
	push rax
	mov rax, [rel const9] ; 86.94
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const10] ; 25.72
	push rax
	mov rax, [rel const11] ; 49.5
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const12] ; 95.79
	push rax
	mov rax, [rel const13] ; 92.01
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const14] ; 49.29
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const15] ; 53.03
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const16] ; 86.66
	push rax
	mov rax, [rel const17] ; 8.05
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const18] ; 54.93
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const19] ; 64.31
	push rax
	mov rax, [rel const20] ; 20.77
	push rax
	mov rax, [rel const21] ; 48.62
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const22] ; 66.01
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	mov rdi, 8
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	lea rdi, [rel const23] ; '(ArrayType (BoolType) 1)'
	lea rsi, [rsp]
	call _show
	add rsp, 16
	add rsp, 8 ; Remove alignment
	mov rax, [rel const24] ; False
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const25] ; 55.98
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const26] ; 46.7
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const27] ; 28.55
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const28] ; 6.97
	push rax
	mov rax, [rel const29] ; 73.24
	push rax
	mov rax, [rel const30] ; 91.73
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const31] ; 8.59
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const32] ; 22.11
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const33] ; True
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const34] ; 16.68
	push rax
	mov rax, [rel const35] ; 23.64
	push rax
	mov rax, [rel const36] ; 83.15
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const37] ; 38.54
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const38] ; 74.18
	push rax
	mov rax, [rel const39] ; 81.23
	push rax
	mov rax, [rel const40] ; 64.37
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const41] ; 21.07
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const42] ; 83.77
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const43] ; 9.55
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const44] ; 18.92
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const45] ; 55.21
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const46] ; 84.16
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	sub rsp, 8 ; Align stack
	mov rax, [rel const47] ; 824
	push rax
	mov rax, [rel const48] ; 161
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const49] ; 857
	push rax
	mov rax, [rel const50] ; 147
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const51] ; 268
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const52] ; 755
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump1
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
.jump1:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const54] ; 876
	push rax
	mov rax, [rel const55] ; 203
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const56] ; 315
	push rax
	mov rax, [rel const57] ; 253
	push rax
	mov rax, [rel const58] ; 574
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump2
	lea rdi, [rel const59] ; 'divide by zero'
	call _fail_assertion
.jump2:
	cqo
	idiv r10
	push rax
	mov rax, [rel const60] ; 124
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const61] ; 214
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump3
	sub rsp, 8 ; Align stack
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump3:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const50] ; 147
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const62] ; 271
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const63] ; 699
	push rax
	mov rax, [rel const64] ; 983
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump4
	lea rdi, [rel const59] ; 'divide by zero'
	call _fail_assertion
.jump4:
	cqo
	idiv r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump5
	sub rsp, 8 ; Align stack
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump5:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const65] ; 768
	push rax
	mov rax, [rel const66] ; 283
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump6
	lea rdi, [rel const59] ; 'divide by zero'
	call _fail_assertion
.jump6:
	cqo
	idiv r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const67] ; 429
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const68] ; 28
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump7
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
.jump7:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const69] ; 952
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const70] ; 137
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump8
	sub rsp, 8 ; Align stack
	lea rdi, [rel const59] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump8:
	cqo
	idiv r10
	push rax
	mov rax, [rel const71] ; 594
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump9
	sub rsp, 8 ; Align stack
	lea rdi, [rel const59] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump9:
	cqo
	idiv r10
	push rax
	mov rdi, 32
	call _jpl_alloc
	; Moving 32 bytes from rsp to rax 
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	push rax
	mov rax, 4
	push rax
	lea rdi, [rel const72] ; '(ArrayType (IntType) 1)'
	lea rsi, [rsp]
	call _show
	add rsp, 16
	add rsp, 8 ; Remove alignment
	mov rax, [rel const73] ; 387
	push rax
	mov rax, [rel const74] ; 97
	push rax
	mov rax, [rel const75] ; 566
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump10
	lea rdi, [rel const59] ; 'divide by zero'
	call _fail_assertion
.jump10:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const76] ; 997
	push rax
	mov rax, [rel const77] ; 761
	push rax
	mov rax, [rel const78] ; 829
	push rax
	mov rax, [rel const79] ; 77
	push rax
	mov rax, [rel const80] ; 62
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump11
	sub rsp, 8 ; Align stack
	lea rdi, [rel const59] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump11:
	cqo
	idiv r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const81] ; 703
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump12
	sub rsp, 8 ; Align stack
	lea rdi, [rel const59] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump12:
	cqo
	idiv r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const82] ; 848
	push rax
	mov rax, [rel const83] ; 532
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump13
	lea rdi, [rel const59] ; 'divide by zero'
	call _fail_assertion
.jump13:
	cqo
	idiv r10
	push rax
	mov rax, [rel const84] ; 262
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const85] ; 378
	push rax
	mov rax, [rel const86] ; 733
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump14
	lea rdi, [rel const59] ; 'divide by zero'
	call _fail_assertion
.jump14:
	cqo
	idiv r10
	push rax
	mov rax, [rel const87] ; 701
	push rax
	mov rax, [rel const88] ; 420
	push rax
	mov rax, [rel const89] ; 932
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump15
	sub rsp, 8 ; Align stack
	lea rdi, [rel const59] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump15:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump16
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
.jump16:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	sub rsp, 8 ; Align stack
	mov rax, [rel const90] ; 624
	push rax
	mov rax, [rel const91] ; 96
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const92] ; 739
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const93] ; 213
	push rax
	mov rax, [rel const94] ; 499
	push rax
	mov rax, [rel const95] ; 595
	push rax
	mov rax, [rel const96] ; 488
	push rax
	mov rax, [rel const97] ; 752
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump17
	lea rdi, [rel const59] ; 'divide by zero'
	call _fail_assertion
.jump17:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const60] ; 124
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump18
	sub rsp, 8 ; Align stack
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump18:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const98] ; 273
	push rax
	mov rax, [rel const99] ; 626
	push rax
	mov rax, [rel const100] ; 233
	push rax
	mov rax, [rel const101] ; 338
	push rax
	mov rax, [rel const102] ; 309
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rdi, 24
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 3
	push rax
	lea rdi, [rel const72] ; '(ArrayType (IntType) 1)'
	lea rsi, [rsp]
	call _show
	add rsp, 16
	add rsp, 8 ; Remove alignment
	mov rax, [rel const24] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const103] ; 85
	push rax
	pop rax
	neg rax
	push rax
	lea rdi, [rel const104] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	sub rsp, 8 ; Align stack
	mov rax, [rel const105] ; 9.44
	push rax
	mov rax, [rel const106] ; 67.41
	push rax
	mov rax, [rel const107] ; 77.29
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	lea rdi, [rel const108] ; '(ArrayType (FloatType) 1)'
	lea rsi, [rsp]
	call _show
	add rsp, 16
	add rsp, 8 ; Remove alignment
	mov rax, [rel const109] ; 70.02
	push rax
	mov rax, [rel const110] ; 79.93
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const111] ; 67.22
	push rax
	mov rax, [rel const112] ; 70.18
	push rax
	mov rax, [rel const113] ; 86.56
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	mov rax, [rel const114] ; 934
	push rax
	mov rax, [rel const115] ; 326
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const116] ; 847
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const117] ; 7
	push rax
	mov rax, [rel const118] ; 958
	push rax
	mov rax, [rel const119] ; 108
	push rax
	mov rax, [rel const120] ; 12
	push rax
	mov rax, [rel const121] ; 180
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump19
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
.jump19:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const122] ; 869
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump20
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
.jump20:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const123] ; 152
	push rax
	mov rax, [rel const124] ; 550
	push rax
	mov rax, [rel const125] ; 270
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const126] ; 745
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const127] ; 807
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump21
	sub rsp, 8 ; Align stack
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump21:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const128] ; 216
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump22
	sub rsp, 8 ; Align stack
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump22:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const129] ; 672
	push rax
	mov rax, [rel const130] ; 989
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const131] ; 286
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const132] ; 185
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const133] ; 172
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump23
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
.jump23:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const134] ; 69
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const135] ; 897
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump24
	lea rdi, [rel const59] ; 'divide by zero'
	call _fail_assertion
.jump24:
	cqo
	idiv r10
	push rax
	mov rax, [rel const136] ; 121
	push rax
	mov rax, [rel const137] ; 341
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const138] ; 73.91
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const139] ; 87.69
	push rax
	mov rax, [rel const140] ; 50.03
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	lea rdi, [rel const141] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const80] ; 62
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const142] ; 579
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump25
	sub rsp, 8 ; Align stack
	lea rdi, [rel const59] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump25:
	cqo
	idiv r10
	push rax
	mov rax, [rel const143] ; 821
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const144] ; 552
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const145] ; 947
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	lea rdi, [rel const104] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const146] ; 42.6
	push rax
	lea rdi, [rel const141] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const147] ; 42.81
	push rax
	lea rdi, [rel const141] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	sub rsp, 8 ; Align stack
	mov rax, [rel const148] ; 10.07
	push rax
	mov rax, [rel const149] ; 34.52
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const150] ; 0.87
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	mov rax, [rel const151] ; 920
	push rax
	mov rax, [rel const152] ; 811
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const153] ; 519
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const154] ; 661
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	mov rax, [rel const155] ; 557
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const156] ; 106
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const157] ; 114
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const158] ; 398
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump26
	lea rdi, [rel const59] ; 'divide by zero'
	call _fail_assertion
.jump26:
	cqo
	idiv r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const159] ; 154
	push rax
	mov rax, [rel const160] ; 280
	push rax
	mov rax, [rel const161] ; 437
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const162] ; 138
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const163] ; 572
	push rax
	mov rax, [rel const164] ; 406
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const165] ; 665
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump27
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
.jump27:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	mov rax, [rel const24] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	mov rax, [rel const166] ; 71.16
	push rax
	mov rax, [rel const167] ; 69.26
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	mov rdi, 32
	call _jpl_alloc
	; Moving 32 bytes from rsp to rax 
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	push rax
	mov rax, 4
	push rax
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 1
	push rax
	lea rdi, [rel const168] ; '(ArrayType (ArrayType (BoolType) 1) 1)'
	lea rsi, [rsp]
	call _show
	add rsp, 16
	add rsp, 8 ; Remove alignment
	mov rax, [rel const169] ; 781
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const170] ; 25
	push rax
	mov rax, [rel const171] ; 987
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const172] ; 875
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const173] ; 295
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const50] ; 147
	push rax
	mov rax, [rel const174] ; 608
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const175] ; 247
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump28
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
.jump28:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const176] ; 324
	push rax
	mov rax, [rel const177] ; 523
	push rax
	mov rax, [rel const76] ; 997
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const178] ; 551
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const179] ; 394
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump29
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
.jump29:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump30
	lea rdi, [rel const59] ; 'divide by zero'
	call _fail_assertion
.jump30:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump31
	sub rsp, 8 ; Align stack
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump31:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const180] ; 589
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const181] ; 140
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump32
	sub rsp, 8 ; Align stack
	lea rdi, [rel const59] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump32:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const182] ; 17.64
	push rax
	lea rdi, [rel const141] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const183] ; 215
	push rax
	mov rax, [rel const184] ; 924
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const185] ; 355
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	mov rax, [rel const24] ; False
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	mov rax, [rel const24] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const24] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const33] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	mov rax, [rel const186] ; 716
	push rax
	mov rax, [rel const187] ; 935
	push rax
	mov rax, [rel const188] ; 650
	push rax
	mov rax, [rel const189] ; 992
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const94] ; 499
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump33
	lea rdi, [rel const59] ; 'divide by zero'
	call _fail_assertion
.jump33:
	cqo
	idiv r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const190] ; 282
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	mov rax, [rel const33] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const132] ; 185
	push rax
	lea rdi, [rel const104] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const191] ; 27.48
	push rax
	lea rdi, [rel const141] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	sub rsp, 8 ; Align stack
	mov rax, [rel const192] ; 565
	push rax
	mov rdi, 8
	sub rsp, 8 ; Align stack
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	lea rdi, [rel const72] ; '(ArrayType (IntType) 1)'
	lea rsi, [rsp]
	call _show
	add rsp, 16
	add rsp, 8 ; Remove alignment
	mov rax, [rel const33] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	mov rax, [rel const193] ; 75.43
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const194] ; 97.19
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const33] ; True
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const195] ; 60.7
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const196] ; 59.53
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	mov rax, [rel const24] ; False
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const197] ; 73.09
	push rax
	mov rax, [rel const198] ; 86.38
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const199] ; 42.49
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const200] ; 97.38
	push rax
	mov rax, [rel const201] ; 68.97
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const202] ; 77.73
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const203] ; 8.45
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const204] ; 80.83
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const205] ; 47.64
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const206] ; 28.43
	push rax
	mov rax, [rel const207] ; 20.91
	push rax
	mov rax, [rel const208] ; 48.15
	push rax
	mov rax, [rel const209] ; 67.95
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const210] ; 66.23
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const211] ; 89.21
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const212] ; 60.38
	push rax
	mov rax, [rel const213] ; 68.0
	push rax
	mov rax, [rel const214] ; 53.58
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const215] ; 99.03
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const216] ; 41.65
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const217] ; 57.3
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const218] ; 44.99
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const219] ; 20.12
	push rax
	lea rdi, [rel const141] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const33] ; True
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const220] ; 942
	push rax
	mov rax, [rel const221] ; 412
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump34
	sub rsp, 8 ; Align stack
	lea rdi, [rel const59] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump34:
	cqo
	idiv r10
	push rax
	mov rax, [rel const222] ; 711
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const223] ; 43
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const224] ; 65
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const225] ; 609
	push rax
	mov rax, [rel const226] ; 738
	push rax
	mov rax, [rel const227] ; 142
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump35
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
.jump35:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump36
	sub rsp, 8 ; Align stack
	lea rdi, [rel const59] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump36:
	cqo
	idiv r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const228] ; 750
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump37
	sub rsp, 8 ; Align stack
	lea rdi, [rel const59] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump37:
	cqo
	idiv r10
	push rax
	mov rax, [rel const229] ; 508
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const230] ; 386
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump38
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
.jump38:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const231] ; 26
	push rax
	mov rax, [rel const232] ; 792
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const54] ; 876
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const233] ; 741
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const234] ; 591
	push rax
	mov rax, [rel const235] ; 722
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump39
	sub rsp, 8 ; Align stack
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump39:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const236] ; 788
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const237] ; 863
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const238] ; 423
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump40
	sub rsp, 8 ; Align stack
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump40:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	lea rdi, [rel const104] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const69] ; 952
	push rax
	mov rax, [rel const239] ; 240
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const240] ; 531
	push rax
	mov rax, [rel const241] ; 985
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump41
	lea rdi, [rel const59] ; 'divide by zero'
	call _fail_assertion
.jump41:
	cqo
	idiv r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump42
	sub rsp, 8 ; Align stack
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump42:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	lea rdi, [rel const104] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const24] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const242] ; 71.85
	push rax
	lea rdi, [rel const141] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const243] ; 321
	push rax
	mov rax, [rel const244] ; 417
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const245] ; 860
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const246] ; 278
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const247] ; 36.63
	push rax
	mov rax, [rel const248] ; 49.63
	push rax
	mov rax, [rel const249] ; 77.05
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const250] ; 87.0
	push rax
	mov rax, [rel const251] ; 99.15
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const252] ; 51.07
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const24] ; False
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	sub rsp, 8 ; Align stack
	mov rax, [rel const253] ; 97.99
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const254] ; 39.96
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const255] ; 2.2
	push rax
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	lea rdi, [rel const108] ; '(ArrayType (FloatType) 1)'
	lea rsi, [rsp]
	call _show
	add rsp, 16
	add rsp, 8 ; Remove alignment
	mov rax, [rel const256] ; 54
	push rax
	lea rdi, [rel const104] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	sub rsp, 8 ; Align stack
	mov rax, [rel const33] ; True
	push rax
	mov rax, [rel const90] ; 624
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const257] ; 713
	push rax
	mov rax, [rel const132] ; 185
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const258] ; 237
	push rax
	mov rax, [rel const259] ; 886
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const260] ; 195
	push rax
	mov rax, [rel const261] ; 290
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump43
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
.jump43:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const262] ; 706
	push rax
	mov rax, [rel const263] ; 864
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump44
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
.jump44:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const222] ; 711
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const264] ; 434
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump45
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
.jump45:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump46
	lea rdi, [rel const59] ; 'divide by zero'
	call _fail_assertion
.jump46:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	mov rax, [rel const33] ; True
	push rax
	mov rax, [rel const24] ; False
	push rax
	mov rax, [rel const265] ; 81.57
	push rax
	mov rax, [rel const266] ; 28.71
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	mov rdi, 32
	call _jpl_alloc
	; Moving 32 bytes from rsp to rax 
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	push rax
	mov rax, 4
	push rax
	lea rdi, [rel const23] ; '(ArrayType (BoolType) 1)'
	lea rsi, [rsp]
	call _show
	add rsp, 16
	add rsp, 8 ; Remove alignment
	mov rax, [rel const267] ; 438
	push rax
	lea rdi, [rel const104] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const268] ; 0.37
	push rax
	mov rax, [rel const269] ; 13.68
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const270] ; 53.75
	push rax
	mov rax, [rel const271] ; 24.41
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const272] ; 52.69
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const273] ; 80.29
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const274] ; 36.42
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const275] ; 1.63
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const276] ; 76.71
	push rax
	mov rax, [rel const277] ; 41.25
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const278] ; 39.85
	push rax
	mov rax, [rel const279] ; 90.94
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const280] ; 1.81
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const281] ; 78.52
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const282] ; 2.85
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const283] ; 98.64
	push rax
	mov rax, [rel const284] ; 68.83
	push rax
	mov rax, [rel const285] ; 14.95
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const286] ; 92.09
	push rax
	mov rax, [rel const287] ; 81.07
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const288] ; 58.98
	push rax
	mov rax, [rel const289] ; 30.34
	push rax
	mov rax, [rel const290] ; 98.89
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const291] ; 75.89
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const292] ; 9.12
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const293] ; 78.57
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const294] ; 898
	push rax
	mov rax, [rel const295] ; 611
	push rax
	mov rax, [rel const296] ; 292
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump47
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
.jump47:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const161] ; 437
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const297] ; 157
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump48
	lea rdi, [rel const59] ; 'divide by zero'
	call _fail_assertion
.jump48:
	cqo
	idiv r10
	push rax
	mov rax, [rel const298] ; 205
	push rax
	mov rax, [rel const299] ; 374
	push rax
	mov rax, [rel const300] ; 976
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump49
	lea rdi, [rel const59] ; 'divide by zero'
	call _fail_assertion
.jump49:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const301] ; 40
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const302] ; 21.39
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	lea rdi, [rel const141] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const220] ; 942
	push rax
	lea rdi, [rel const104] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const303] ; 454
	push rax
	mov rax, [rel const304] ; 115
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const305] ; 770
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const170] ; 25
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump50
	sub rsp, 8 ; Align stack
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump50:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const306] ; 851
	push rax
	mov rax, [rel const307] ; 156
	push rax
	mov rax, [rel const96] ; 488
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump51
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
.jump51:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const308] ; 17
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump52
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
.jump52:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const62] ; 271
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const309] ; 363
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const310] ; 496
	push rax
	mov rax, [rel const311] ; 447
	push rax
	mov rax, [rel const312] ; 753
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const313] ; 903
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump53
	sub rsp, 8 ; Align stack
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump53:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump54
	sub rsp, 8 ; Align stack
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump54:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const261] ; 290
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const314] ; 241
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const164] ; 406
	push rax
	mov rax, [rel const315] ; 317
	push rax
	mov rax, [rel const316] ; 123
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump55
	sub rsp, 8 ; Align stack
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump55:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const317] ; 173
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump56
	sub rsp, 8 ; Align stack
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump56:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump57
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
.jump57:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const318] ; 337
	push rax
	mov rax, [rel const319] ; 764
	push rax
	mov rax, [rel const119] ; 108
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump58
	lea rdi, [rel const59] ; 'divide by zero'
	call _fail_assertion
.jump58:
	cqo
	idiv r10
	push rax
	mov rax, [rel const320] ; 926
	push rax
	mov rax, [rel const321] ; 778
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump59
	lea rdi, [rel const59] ; 'divide by zero'
	call _fail_assertion
.jump59:
	cqo
	idiv r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const322] ; 573
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const323] ; 38
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump60
	sub rsp, 8 ; Align stack
	lea rdi, [rel const59] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump60:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump61
	sub rsp, 8 ; Align stack
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump61:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const324] ; 921
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const325] ; 95
	push rax
	lea rdi, [rel const104] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const326] ; 26.23
	push rax
	lea rdi, [rel const141] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const327] ; 493
	push rax
	mov rax, [rel const328] ; 135
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const329] ; 181
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const330] ; 994
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const331] ; 58
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const332] ; 655
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const333] ; 944
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const334] ; 92
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const335] ; 371
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const336] ; 380
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const337] ; 797
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	lea rdi, [rel const104] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const24] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const33] ; True
	push rax
	lea rdi, [rel const2] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const338] ; 846
	push rax
	mov rax, [rel const339] ; 602
	push rax
	mov rax, [rel const340] ; 631
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump62
	lea rdi, [rel const59] ; 'divide by zero'
	call _fail_assertion
.jump62:
	cqo
	idiv r10
	push rax
	mov rax, [rel const341] ; 238
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const342] ; 570
	push rax
	mov rax, [rel const343] ; 607
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const344] ; 170
	push rax
	mov rax, [rel const345] ; 159
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump63
	lea rdi, [rel const53] ; 'mod by zero'
	call _fail_assertion
.jump63:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const346] ; 629
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump64
	sub rsp, 8 ; Align stack
	lea rdi, [rel const59] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump64:
	cqo
	idiv r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump65
	sub rsp, 8 ; Align stack
	lea rdi, [rel const59] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump65:
	cqo
	idiv r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const347] ; 382
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	lea rdi, [rel const104] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	pop r12
	pop rbp
	ret

