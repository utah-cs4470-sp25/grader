global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 276
const1: dq 77
const2: dq 518
const3: dq 686
const4: db `mod by zero`, 0
const5: db `(IntType)`, 0
const6: dq 318
const7: dq 549
const8: dq 515
const9: db `(BoolType)`, 0
const10: dq 0.96
const11: db `(FloatType)`, 0
const12: dq 365
const13: dq 95.41
const14: dq 11.11
const15: dq 94.93
const16: dq 19.01
const17: dq 0
const18: dq 1
const19: dq 80.7
const20: dq 71.09
const21: dq 97.59
const22: dq 420
const23: dq 505
const24: dq 248
const25: dq 564
const26: dq 230
const27: dq 898
const28: db `divide by zero`, 0
const29: dq 291
const30: dq 295
const31: dq 279

section .text
jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp ; end of jpl_main prelude
	mov rax, [rel const0] ; 276
	push rax
	mov rax, [rel const1] ; 77
	push rax
	mov rax, [rel const2] ; 518
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const3] ; 686
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump1
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump1:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	lea rdi, [rel const5] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const6] ; 318
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const7] ; 549
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const8] ; 515
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	lea rdi, [rel const9] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const10] ; 0.96
	push rax
	lea rdi, [rel const11] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const12] ; 365
	push rax
	lea rdi, [rel const5] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const13] ; 95.41
	push rax
	mov rax, [rel const14] ; 11.11
	push rax
	mov rax, [rel const15] ; 94.93
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const16] ; 19.01
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const9] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const17] ; False
	push rax
	lea rdi, [rel const9] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const18] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const9] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const19] ; 80.7
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const20] ; 71.09
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const21] ; 97.59
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	lea rdi, [rel const9] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const22] ; 420
	push rax
	mov rax, [rel const23] ; 505
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const24] ; 248
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump2
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump2:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const25] ; 564
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const26] ; 230
	push rax
	mov rax, [rel const27] ; 898
	push rax
	mov rax, [rel const1] ; 77
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump3
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const28] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump3:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const29] ; 291
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump4
	lea rdi, [rel const4] ; 'mod by zero'
	call _fail_assertion
.jump4:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const9] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const18] ; True
	push rax
	lea rdi, [rel const9] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const30] ; 295
	push rax
	lea rdi, [rel const5] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const31] ; 279
	push rax
	lea rdi, [rel const5] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	pop r12 ; begin jpl_main postlude
	pop rbp
	ret

