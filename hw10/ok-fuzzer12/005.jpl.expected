global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 83.03
const1: db `(FloatType)`, 0
const2: dq 26.17
const3: dq 56.77
const4: dq 70.61
const5: dq 752
const6: db `(IntType)`, 0
const7: dq 580
const8: dq 1
const9: db `(BoolType)`, 0
const10: db `(ArrayType (BoolType) 1)`, 0
const11: dq 81.69
const12: dq 39.43
const13: dq 79.65
const14: dq 81.07
const15: dq 92.26
const16: dq 94.52
const17: dq 43.94
const18: dq 261
const19: dq 165
const20: dq 919
const21: dq 349
const22: dq 45
const23: db `mod by zero`, 0
const24: dq 0
const25: dq 448
const26: dq 361
const27: dq 436
const28: db `divide by zero`, 0
const29: dq 47.12
const30: dq 73.13
const31: dq 12.81
const32: dq 6.11
const33: dq 16.27
const34: dq 25.76
const35: dq 67.93
const36: dq 46.42
const37: dq 15.82
const38: dq 30.21
const39: dq 10.4
const40: dq 72.13
const41: dq 34.05
const42: dq 31.42
const43: dq 36.79
const44: dq 61.01
const45: dq 40.88
const46: dq 86.37
const47: db `(ArrayType (FloatType) 1)`, 0
const48: dq 54.48
const49: dq 675
const50: dq 629
const51: dq 881
const52: dq 250
const53: dq 298
const54: dq 89.91
const55: dq 34.0
const56: dq 35.37
const57: dq 5.04
const58: dq 1.2
const59: dq 79.15
const60: dq 12.08
const61: dq 984
const62: dq 853
const63: dq 186
const64: dq 209
const65: dq 137
const66: dq 897
const67: dq 53
const68: dq 561
const69: dq 176
const70: dq 825
const71: dq 228
const72: dq 90.33
const73: dq 24.16
const74: dq 73.81
const75: dq 22.74
const76: dq 57.04
const77: dq 8.79
const78: dq 73.42
const79: dq 80.9
const80: dq 56.38
const81: dq 80.22
const82: dq 21.82
const83: dq 52.98
const84: dq 43.68
const85: dq 40.74
const86: dq 17.06
const87: dq 1.54
const88: dq 24.53
const89: dq 28.7
const90: dq 22.76
const91: dq 26.03
const92: dq 88.1
const93: dq 88.37
const94: dq 71.79
const95: dq 21.35
const96: dq 24.6
const97: dq 1.47
const98: dq 12.29
const99: dq 60.91
const100: dq 24.65
const101: dq 75.56
const102: dq 60.78
const103: dq 29.97
const104: dq 9.47
const105: dq 49.26
const106: dq 24.66
const107: dq 67.4
const108: dq 4.9
const109: dq 80.28
const110: dq 73.66
const111: dq 44.11
const112: dq 956
const113: dq 540
const114: dq 7.21
const115: dq 68.71
const116: dq 9.85
const117: dq 89.17
const118: dq 6.21
const119: dq 1.63
const120: dq 8.21
const121: dq 38.18
const122: dq 27.18
const123: dq 43.05
const124: dq 524
const125: dq 887
const126: dq 92.25
const127: dq 85.75
const128: dq 15.84
const129: dq 21.48
const130: dq 5.9
const131: dq 51.34
const132: dq 63.15
const133: dq 42.18
const134: dq 67.38
const135: dq 57.47
const136: dq 354
const137: dq 783
const138: dq 87
const139: dq 714
const140: dq 260
const141: dq 736
const142: dq 254
const143: dq 635
const144: dq 78
const145: dq 627
const146: dq 304
const147: dq 788
const148: dq 665
const149: dq 238
const150: dq 625
const151: dq 175
const152: dq 412
const153: dq 410
const154: dq 950
const155: dq 619
const156: dq 470
const157: dq 150
const158: dq 520
const159: dq 372
const160: dq 598
const161: dq 816
const162: dq 166
const163: dq 28.25
const164: dq 88.95
const165: dq 70.99
const166: dq 21.7
const167: dq 37.25
const168: dq 47.18
const169: dq 82.72
const170: dq 52.43
const171: dq 2.23
const172: dq 86.09
const173: dq 76.74
const174: dq 12.39
const175: dq 19.91
const176: dq 52.38
const177: dq 77.28
const178: dq 91.53
const179: dq 91.19
const180: dq 264
const181: dq 218
const182: dq 230
const183: dq 383
const184: dq 741
const185: dq 159
const186: dq 364
const187: dq 655
const188: dq 59
const189: db `(ArrayType (IntType) 1)`, 0
const190: dq 29.93
const191: dq 14.62
const192: dq 18.1
const193: dq 32.35
const194: dq 55.37
const195: dq 24.18
const196: dq 98.27
const197: dq 61.33
const198: dq 44.08
const199: dq 40.77
const200: dq 78.79
const201: dq 34.25
const202: dq 0.17
const203: dq 39.28
const204: dq 6.06
const205: dq 78.63
const206: dq 10.78
const207: dq 98.48
const208: dq 46.73
const209: dq 23.34
const210: dq 20.57
const211: dq 868
const212: dq 341
const213: dq 951
const214: dq 762
const215: dq 152
const216: dq 123
const217: dq 34
const218: dq 749
const219: dq 585
const220: dq 738
const221: dq 323
const222: dq 307
const223: dq 912
const224: dq 21
const225: dq 932
const226: dq 755
const227: dq 191
const228: dq 797
const229: dq 599
const230: dq 141
const231: dq 345
const232: dq 806
const233: dq 782
const234: dq 113
const235: dq 338
const236: dq 691
const237: dq 232
const238: dq 96
const239: dq 353
const240: dq 266
const241: dq 133
const242: dq 712
const243: dq 51
const244: dq 995
const245: dq 37.67
const246: dq 29.94
const247: dq 0.67
const248: dq 61.68
const249: dq 92.86
const250: dq 87.65
const251: dq 55.35
const252: dq 84.81
const253: dq 94.61
const254: dq 57.55
const255: dq 65.17
const256: dq 3.08
const257: db `(ArrayType (ArrayType (FloatType) 1) 1)`, 0
const258: dq 28.79
const259: dq 59.03
const260: dq 92.6
const261: dq 234
const262: dq 4
const263: dq 785
const264: dq 497
const265: dq 680
const266: dq 879
const267: dq 54.46
const268: dq 363
const269: dq 104
const270: dq 703
const271: dq 427
const272: dq 366
const273: dq 92
const274: dq 717
const275: dq 445
const276: dq 895
const277: dq 377
const278: dq 50
const279: dq 162
const280: dq 106
const281: dq 262
const282: dq 90
const283: dq 316
const284: dq 10.1
const285: dq 21.76
const286: dq 58.66
const287: dq 51.63
const288: dq 18.57
const289: dq 17.74
const290: dq 71.61
const291: dq 54.06
const292: dq 98.42
const293: dq 33.51
const294: dq 87.19
const295: dq 66.15
const296: dq 33.03
const297: dq 38.03
const298: dq 58.43
const299: dq 41.68
const300: dq 91.02
const301: dq 3.43
const302: dq 481
const303: dq 644
const304: dq 914
const305: dq 269
const306: dq 18.68

section .text
jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp ; end of jpl_main prelude
	mov rax, [rel const0] ; 83.03
	push rax
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	sub rsp, 8 ; Add alignment
	mov rax, [rel const2] ; 26.17
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const3] ; 56.77
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const4] ; 70.61
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const5] ; 752
	push rax
	lea rdi, [rel const6] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const7] ; 580
	push rax
	lea rdi, [rel const6] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const8] ; True
	push rax
	lea rdi, [rel const9] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const8] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const9] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const8] ; True
	push rax
	lea rdi, [rel const9] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	sub rsp, 8 ; Add alignment
	mov rax, [rel const8] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	mov rdi, 8
	sub rsp, 8 ; Add alignment
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	lea rdi, [rel const10] ; '(ArrayType (BoolType) 1)'
	lea rsi, [rsp]
	call _show
	add rsp, 16
	add rsp, 8 ; Remove alignment
	mov rax, [rel const11] ; 81.69
	push rax
	mov rax, [rel const12] ; 39.43
	push rax
	mov rax, [rel const13] ; 79.65
	push rax
	mov rax, [rel const14] ; 81.07
	push rax
	mov rax, [rel const15] ; 92.26
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const16] ; 94.52
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const17] ; 43.94
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	lea rdi, [rel const9] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const18] ; 261
	push rax
	mov rax, [rel const19] ; 165
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	lea rdi, [rel const9] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const20] ; 919
	push rax
	mov rax, [rel const21] ; 349
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const22] ; 45
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump1
	lea rdi, [rel const23] ; 'mod by zero'
	call _fail_assertion
.jump1:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	lea rdi, [rel const9] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const24] ; False
	push rax
	lea rdi, [rel const9] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const25] ; 448
	push rax
	lea rdi, [rel const6] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const24] ; False
	push rax
	lea rdi, [rel const9] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const26] ; 361
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const27] ; 436
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump2
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const28] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump2:
	cqo
	idiv r10
	push rax
	pop rax
	neg rax
	push rax
	lea rdi, [rel const6] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const29] ; 47.12
	push rax
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	sub rsp, 8 ; Add alignment
	mov rax, [rel const30] ; 73.13
	push rax
	mov rax, [rel const31] ; 12.81
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const32] ; 6.11
	push rax
	mov rax, [rel const33] ; 16.27
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const34] ; 25.76
	push rax
	mov rax, [rel const35] ; 67.93
	push rax
	mov rax, [rel const36] ; 46.42
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const37] ; 15.82
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const38] ; 30.21
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const39] ; 10.4
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const40] ; 72.13
	push rax
	mov rax, [rel const41] ; 34.05
	push rax
	mov rax, [rel const42] ; 31.42
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const43] ; 36.79
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const44] ; 61.01
	push rax
	mov rax, [rel const45] ; 40.88
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const46] ; 86.37
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rdi, 8
	sub rsp, 8 ; Add alignment
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	lea rdi, [rel const47] ; '(ArrayType (FloatType) 1)'
	lea rsi, [rsp]
	call _show
	add rsp, 16
	add rsp, 8 ; Remove alignment
	mov rax, [rel const48] ; 54.48
	push rax
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const24] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const9] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const49] ; 675
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const50] ; 629
	push rax
	mov rax, [rel const51] ; 881
	push rax
	mov rax, [rel const52] ; 250
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const53] ; 298
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump3
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const23] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump3:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump4
	lea rdi, [rel const28] ; 'divide by zero'
	call _fail_assertion
.jump4:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const9] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const24] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const9] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const24] ; False
	push rax
	lea rdi, [rel const9] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const24] ; False
	push rax
	lea rdi, [rel const9] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const24] ; False
	push rax
	lea rdi, [rel const9] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const54] ; 89.91
	push rax
	mov rax, [rel const55] ; 34.0
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const56] ; 35.37
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const57] ; 5.04
	push rax
	mov rax, [rel const58] ; 1.2
	push rax
	mov rax, [rel const59] ; 79.15
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const60] ; 12.08
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	mov rax, [rel const61] ; 984
	push rax
	mov rax, [rel const62] ; 853
	push rax
	mov rax, [rel const63] ; 186
	push rax
	mov rax, [rel const64] ; 209
	push rax
	mov rax, [rel const65] ; 137
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const66] ; 897
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const67] ; 53
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump5
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const23] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump5:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const68] ; 561
	push rax
	mov rax, [rel const69] ; 176
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const5] ; 752
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump6
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const28] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump6:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump7
	lea rdi, [rel const23] ; 'mod by zero'
	call _fail_assertion
.jump7:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const70] ; 825
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump8
	lea rdi, [rel const28] ; 'divide by zero'
	call _fail_assertion
.jump8:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump9
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const28] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump9:
	cqo
	idiv r10
	push rax
	mov rax, [rel const71] ; 228
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump10
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const23] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump10:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	lea rdi, [rel const9] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	sub rsp, 8 ; Add alignment
	mov rax, [rel const72] ; 90.33
	push rax
	mov rax, [rel const73] ; 24.16
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const74] ; 73.81
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const75] ; 22.74
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const76] ; 57.04
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const77] ; 8.79
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const78] ; 73.42
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const79] ; 80.9
	push rax
	mov rax, [rel const80] ; 56.38
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const81] ; 80.22
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const82] ; 21.82
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const83] ; 52.98
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const84] ; 43.68
	push rax
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const85] ; 40.74
	push rax
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const86] ; 17.06
	push rax
	mov rax, [rel const87] ; 1.54
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const88] ; 24.53
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const89] ; 28.7
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const90] ; 22.76
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const91] ; 26.03
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const92] ; 88.1
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const93] ; 88.37
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const94] ; 71.79
	push rax
	mov rax, [rel const95] ; 21.35
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const96] ; 24.6
	push rax
	mov rax, [rel const97] ; 1.47
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const98] ; 12.29
	push rax
	mov rax, [rel const99] ; 60.91
	push rax
	mov rax, [rel const100] ; 24.65
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const101] ; 75.56
	push rax
	mov rax, [rel const102] ; 60.78
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const103] ; 29.97
	push rax
	mov rax, [rel const104] ; 9.47
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const105] ; 49.26
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const106] ; 24.66
	push rax
	mov rax, [rel const107] ; 67.4
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const108] ; 4.9
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const109] ; 80.28
	push rax
	mov rax, [rel const110] ; 73.66
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const111] ; 44.11
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const112] ; 956
	push rax
	lea rdi, [rel const6] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const8] ; True
	push rax
	lea rdi, [rel const9] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const113] ; 540
	push rax
	lea rdi, [rel const6] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const114] ; 7.21
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const115] ; 68.71
	push rax
	mov rax, [rel const116] ; 9.85
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const117] ; 89.17
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const118] ; 6.21
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const119] ; 1.63
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const120] ; 8.21
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const121] ; 38.18
	push rax
	mov rax, [rel const122] ; 27.18
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const123] ; 43.05
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const9] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const124] ; 524
	push rax
	mov rax, [rel const125] ; 887
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump11
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const28] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump11:
	cqo
	idiv r10
	push rax
	lea rdi, [rel const6] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	sub rsp, 8 ; Add alignment
	mov rax, [rel const126] ; 92.25
	push rax
	mov rax, [rel const127] ; 85.75
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const128] ; 15.84
	push rax
	mov rax, [rel const129] ; 21.48
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const130] ; 5.9
	push rax
	mov rax, [rel const131] ; 51.34
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const132] ; 63.15
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const133] ; 42.18
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const134] ; 67.38
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const135] ; 57.47
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const24] ; False
	push rax
	lea rdi, [rel const9] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const136] ; 354
	push rax
	mov rax, [rel const137] ; 783
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const138] ; 87
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump12
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const28] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump12:
	cqo
	idiv r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const139] ; 714
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const140] ; 260
	push rax
	mov rax, [rel const141] ; 736
	push rax
	mov rax, [rel const142] ; 254
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump13
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const23] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump13:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const143] ; 635
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const144] ; 78
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const145] ; 627
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const146] ; 304
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const147] ; 788
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const148] ; 665
	push rax
	mov rax, [rel const149] ; 238
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump14
	lea rdi, [rel const23] ; 'mod by zero'
	call _fail_assertion
.jump14:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const150] ; 625
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump15
	lea rdi, [rel const23] ; 'mod by zero'
	call _fail_assertion
.jump15:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const151] ; 175
	push rax
	mov rax, [rel const152] ; 412
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump16
	lea rdi, [rel const23] ; 'mod by zero'
	call _fail_assertion
.jump16:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump17
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const23] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump17:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump18
	lea rdi, [rel const28] ; 'divide by zero'
	call _fail_assertion
.jump18:
	cqo
	idiv r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump19
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const28] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump19:
	cqo
	idiv r10
	push rax
	lea rdi, [rel const6] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const153] ; 410
	push rax
	mov rax, [rel const154] ; 950
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const155] ; 619
	push rax
	mov rax, [rel const156] ; 470
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump20
	lea rdi, [rel const23] ; 'mod by zero'
	call _fail_assertion
.jump20:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const157] ; 150
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const158] ; 520
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const159] ; 372
	push rax
	mov rax, [rel const160] ; 598
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump21
	lea rdi, [rel const23] ; 'mod by zero'
	call _fail_assertion
.jump21:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump22
	lea rdi, [rel const23] ; 'mod by zero'
	call _fail_assertion
.jump22:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const161] ; 816
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const162] ; 166
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump23
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const23] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump23:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	lea rdi, [rel const6] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const163] ; 28.25
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const164] ; 88.95
	push rax
	mov rax, [rel const165] ; 70.99
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const166] ; 21.7
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const167] ; 37.25
	push rax
	mov rax, [rel const168] ; 47.18
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const169] ; 82.72
	push rax
	mov rax, [rel const170] ; 52.43
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const171] ; 2.23
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const172] ; 86.09
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const173] ; 76.74
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const174] ; 12.39
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const175] ; 19.91
	push rax
	mov rax, [rel const176] ; 52.38
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const177] ; 77.28
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const178] ; 91.53
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const179] ; 91.19
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const9] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const180] ; 264
	push rax
	lea rdi, [rel const6] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	sub rsp, 8 ; Add alignment
	mov rax, [rel const181] ; 218
	push rax
	mov rax, [rel const182] ; 230
	push rax
	mov rax, [rel const183] ; 383
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump24
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const23] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump24:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const67] ; 53
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const184] ; 741
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const185] ; 159
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const186] ; 364
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump25
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const28] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump25:
	cqo
	idiv r10
	push rax
	mov rax, [rel const187] ; 655
	push rax
	mov rax, [rel const188] ; 59
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump26
	lea rdi, [rel const28] ; 'divide by zero'
	call _fail_assertion
.jump26:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump27
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const28] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump27:
	cqo
	idiv r10
	push rax
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	lea rdi, [rel const189] ; '(ArrayType (IntType) 1)'
	lea rsi, [rsp]
	call _show
	add rsp, 16
	add rsp, 8 ; Remove alignment
	mov rax, [rel const190] ; 29.93
	push rax
	mov rax, [rel const191] ; 14.62
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const192] ; 18.1
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const84] ; 43.68
	push rax
	mov rax, [rel const193] ; 32.35
	push rax
	mov rax, [rel const194] ; 55.37
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const195] ; 24.18
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const196] ; 98.27
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const197] ; 61.33
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const198] ; 44.08
	push rax
	mov rax, [rel const199] ; 40.77
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const200] ; 78.79
	push rax
	mov rax, [rel const201] ; 34.25
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const202] ; 0.17
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const203] ; 39.28
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const204] ; 6.06
	push rax
	mov rax, [rel const205] ; 78.63
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const206] ; 10.78
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const207] ; 98.48
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const208] ; 46.73
	push rax
	mov rax, [rel const209] ; 23.34
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const210] ; 20.57
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	mov rax, [rel const211] ; 868
	push rax
	mov rax, [rel const212] ; 341
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const213] ; 951
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const214] ; 762
	push rax
	mov rax, [rel const215] ; 152
	push rax
	mov rax, [rel const216] ; 123
	push rax
	mov rax, [rel const113] ; 540
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump28
	lea rdi, [rel const23] ; 'mod by zero'
	call _fail_assertion
.jump28:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump29
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const23] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump29:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const217] ; 34
	push rax
	mov rax, [rel const218] ; 749
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump30
	lea rdi, [rel const28] ; 'divide by zero'
	call _fail_assertion
.jump30:
	cqo
	idiv r10
	push rax
	mov rax, [rel const219] ; 585
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const220] ; 738
	push rax
	mov rax, [rel const221] ; 323
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump31
	lea rdi, [rel const28] ; 'divide by zero'
	call _fail_assertion
.jump31:
	cqo
	idiv r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump32
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const28] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump32:
	cqo
	idiv r10
	push rax
	mov rax, [rel const222] ; 307
	push rax
	mov rax, [rel const223] ; 912
	push rax
	mov rax, [rel const224] ; 21
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const225] ; 932
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const140] ; 260
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump33
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const23] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump33:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump34
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const28] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump34:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	lea rdi, [rel const9] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const160] ; 598
	push rax
	lea rdi, [rel const6] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const24] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const9] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const226] ; 755
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const227] ; 191
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump35
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const28] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump35:
	cqo
	idiv r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const228] ; 797
	push rax
	mov rax, [rel const229] ; 599
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump36
	lea rdi, [rel const28] ; 'divide by zero'
	call _fail_assertion
.jump36:
	cqo
	idiv r10
	push rax
	mov rax, [rel const230] ; 141
	push rax
	mov rax, [rel const231] ; 345
	push rax
	mov rax, [rel const232] ; 806
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const233] ; 782
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const234] ; 113
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump37
	lea rdi, [rel const28] ; 'divide by zero'
	call _fail_assertion
.jump37:
	cqo
	idiv r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const235] ; 338
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump38
	lea rdi, [rel const23] ; 'mod by zero'
	call _fail_assertion
.jump38:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const236] ; 691
	push rax
	mov rax, [rel const237] ; 232
	push rax
	mov rax, [rel const238] ; 96
	push rax
	mov rax, [rel const239] ; 353
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump39
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const28] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump39:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump40
	lea rdi, [rel const23] ; 'mod by zero'
	call _fail_assertion
.jump40:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const240] ; 266
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const241] ; 133
	push rax
	mov rax, [rel const242] ; 712
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const243] ; 51
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const244] ; 995
	push rax
	mov rax, [rel const234] ; 113
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump41
	lea rdi, [rel const28] ; 'divide by zero'
	call _fail_assertion
.jump41:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump42
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const23] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump42:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump43
	lea rdi, [rel const23] ; 'mod by zero'
	call _fail_assertion
.jump43:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	lea rdi, [rel const6] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const245] ; 37.67
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const24] ; False
	push rax
	lea rdi, [rel const9] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const246] ; 29.94
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const247] ; 0.67
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const248] ; 61.68
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const249] ; 92.86
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const250] ; 87.65
	push rax
	mov rax, [rel const251] ; 55.35
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const252] ; 84.81
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const253] ; 94.61
	push rax
	mov rax, [rel const254] ; 57.55
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const255] ; 65.17
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	sub rsp, 8 ; Add alignment
	mov rax, [rel const256] ; 3.08
	push rax
	mov rdi, 8
	sub rsp, 8 ; Add alignment
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 1
	push rax
	lea rdi, [rel const257] ; '(ArrayType (ArrayType (FloatType) 1) 1)'
	lea rsi, [rsp]
	call _show
	add rsp, 16
	add rsp, 8 ; Remove alignment
	mov rax, [rel const24] ; False
	push rax
	lea rdi, [rel const9] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	sub rsp, 8 ; Add alignment
	mov rax, [rel const258] ; 28.79
	push rax
	mov rax, [rel const259] ; 59.03
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const260] ; 92.6
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	mov rax, [rel const8] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	lea rdi, [rel const9] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const261] ; 234
	push rax
	mov rax, [rel const262] ; 4
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const263] ; 785
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const264] ; 497
	push rax
	mov rax, [rel const265] ; 680
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump44
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const23] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump44:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump45
	lea rdi, [rel const28] ; 'divide by zero'
	call _fail_assertion
.jump45:
	cqo
	idiv r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const266] ; 879
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	mov rax, [rel const24] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	lea rdi, [rel const9] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const267] ; 54.46
	push rax
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const268] ; 363
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const269] ; 104
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const270] ; 703
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump46
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const23] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump46:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const271] ; 427
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const272] ; 366
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const273] ; 92
	push rax
	mov rax, [rel const274] ; 717
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const275] ; 445
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump47
	lea rdi, [rel const28] ; 'divide by zero'
	call _fail_assertion
.jump47:
	cqo
	idiv r10
	push rax
	mov rax, [rel const276] ; 895
	push rax
	mov rax, [rel const277] ; 377
	push rax
	mov rax, [rel const278] ; 50
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const279] ; 162
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump48
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const28] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump48:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump49
	lea rdi, [rel const23] ; 'mod by zero'
	call _fail_assertion
.jump49:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const112] ; 956
	push rax
	mov rax, [rel const280] ; 106
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const281] ; 262
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump50
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const23] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump50:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const282] ; 90
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const283] ; 316
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump51
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const23] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump51:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump52
	lea rdi, [rel const28] ; 'divide by zero'
	call _fail_assertion
.jump52:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	lea rdi, [rel const6] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const284] ; 10.1
	push rax
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	sub rsp, 8 ; Add alignment
	mov rax, [rel const285] ; 21.76
	push rax
	mov rax, [rel const286] ; 58.66
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const287] ; 51.63
	push rax
	mov rax, [rel const288] ; 18.57
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const289] ; 17.74
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const290] ; 71.61
	push rax
	mov rax, [rel const291] ; 54.06
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const292] ; 98.42
	push rax
	mov rax, [rel const293] ; 33.51
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const294] ; 87.19
	push rax
	mov rax, [rel const295] ; 66.15
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const296] ; 33.03
	push rax
	mov rax, [rel const97] ; 1.47
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const297] ; 38.03
	push rax
	mov rax, [rel const298] ; 58.43
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const299] ; 41.68
	push rax
	mov rax, [rel const300] ; 91.02
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const301] ; 3.43
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const302] ; 481
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const150] ; 625
	push rax
	mov rax, [rel const303] ; 644
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const304] ; 914
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const305] ; 269
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	lea rdi, [rel const9] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const306] ; 18.68
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	lea rdi, [rel const1] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	pop r12 ; begin jpl_main postlude
	pop rbp
	ret

