global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 387
const1: dq 97
const2: dq 566
const3: db `divide by zero`, 0
const4: dq 179
const5: dq 824
const6: dq 161
const7: dq 857
const8: db `mod by zero`, 0
const9: dq 147
const10: dq 30.23
const11: dq 99.91
const12: dq 35.48
const13: dq 65.15
const14: db `(IntType)`, 0
const15: dq 80.48
const16: dq 15.08
const17: dq 0

section .text
jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp ; end of jpl_main prelude
	mov rax, [rel const0] ; 387
	push rax
	mov rax, [rel const1] ; 97
	push rax
	mov rax, [rel const2] ; 566
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump1
	lea rdi, [rel const3] ; 'divide by zero'
	call _fail_assertion
.jump1:
	cqo
	idiv r10
	push rax
	mov rax, [rel const4] ; 179
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const5] ; 824
	push rax
	mov rax, [rel const6] ; 161
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const7] ; 857
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump2
	lea rdi, [rel const8] ; 'mod by zero'
	call _fail_assertion
.jump2:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const9] ; 147
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump3
	lea rdi, [rel const8] ; 'mod by zero'
	call _fail_assertion
.jump3:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const10] ; 30.23
	push rax
	mov rax, [rel const11] ; 99.91
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	mov rax, [rel const12] ; 35.48
	push rax
	mov rdi, 8
	call _jpl_alloc
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	mov rdi, 16
	sub rsp, 8 ; Add alignment
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 1
	push rax
	mov rax, [rel const13] ; 65.15
	push rax
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	lea rdi, [rel const14] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	mov rax, [rel const15] ; 80.48
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	sub rsp, 16
	; Moving 16 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const16] ; 15.08
	push rax
	mov rax, [rel const17] ; False
	push rax
	add rsp, 104 ; Local variables
	pop r12 ; begin jpl_main postlude
	pop rbp
	ret

