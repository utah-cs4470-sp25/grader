global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 1
const1: dq 992
const2: db `divide by zero`, 0
const3: dq 507
const4: dq 45.5
const5: db `(BoolType)`, 0
const6: dq 14.42
const7: dq 59.81
const8: dq 61.48
const9: dq 777
const10: dq 142
const11: dq 174
const12: dq 0
const13: dq 477
const14: dq 5.06
const15: dq 1.43
const16: dq 89.74
const17: dq 298
const18: dq 73.94
const19: dq 97.69
const20: dq 57
const21: dq 21.44
const22: dq 637
const23: dq 86.54
const24: dq 73.93
const25: dq 521
const26: dq 76.2
const27: dq 56.19
const28: dq 53.98
const29: dq 64
const30: dq 852
const31: db `mod by zero`, 0
const32: dq 763
const33: dq 60.44
const34: dq 658
const35: dq 885
const36: dq 98.58
const37: dq 77
const38: dq 399
const39: dq 385
const40: dq 458
const41: dq 47.63
const42: dq 74.72
const43: dq 62.39
const44: dq 696
const45: dq 86.88
const46: dq 278
const47: dq 60.76
const48: dq 66.85
const49: dq 46.08
const50: dq 54.48
const51: dq 11.55
const52: dq 93.47
const53: dq 40.56
const54: dq 585
const55: dq 59.6
const56: dq 40.8
const57: dq 22.48
const58: dq 42.66
const59: dq 73.99
const60: dq 91.95
const61: dq 848
const62: dq 89.48
const63: dq 72.87
const64: dq 98.74
const65: dq 62.59
const66: dq 800
const67: dq 17.24
const68: dq 958
const69: dq 29.78
const70: dq 221
const71: dq 15.08
const72: dq 550
const73: dq 994
const74: dq 64.38
const75: dq 42.07
const76: dq 56.64
const77: dq 455
const78: dq 3.64
const79: dq 63.23
const80: dq 941
const81: dq 923
const82: dq 440
const83: dq 43.46
const84: dq 655
const85: dq 4.4
const86: dq 67.17
const87: dq 43.88
const88: dq 40.52
const89: dq 836
const90: dq 51.27
const91: dq 794
const92: dq 15.04
const93: dq 854
const94: dq 625
const95: dq 103
const96: dq 91.51
const97: dq 72.86
const98: dq 782
const99: dq 28.7
const100: dq 83.34
const101: dq 30.56
const102: dq 0.93
const103: dq 32.31
const104: dq 86.37
const105: dq 89.82
const106: dq 766
const107: dq 808
const108: dq 13.18
const109: dq 55.52
const110: dq 82.2
const111: dq 741
const112: dq 386
const113: dq 19.08
const114: dq 9.16
const115: dq 69.13
const116: dq 11.07
const117: dq 839
const118: dq 841
const119: dq 537
const120: dq 58.98
const121: dq 68.85
const122: dq 41.11
const123: dq 584
const124: dq 13.76
const125: dq 178
const126: dq 0.8
const127: dq 404
const128: dq 948
const129: dq 910
const130: dq 331
const131: dq 17.61
const132: dq 909
const133: dq 110
const134: dq 898
const135: dq 2
const136: dq 118
const137: dq 422
const138: dq 49.24
const139: dq 44.9
const140: dq 249
const141: dq 59.18
const142: dq 0.2
const143: dq 33
const144: dq 127
const145: dq 812
const146: dq 17.02
const147: dq 579
const148: dq 98.81
const149: dq 14.31
const150: dq 423
const151: dq 15.22
const152: dq 57.23
const153: dq 2.78
const154: dq 179
const155: dq 12.9
const156: dq 47.24
const157: dq 41
const158: dq 88.11
const159: dq 81.37
const160: dq 69.93
const161: dq 957
const162: dq 19.7
const163: dq 49
const164: dq 50.02
const165: dq 881
const166: dq 97.1
const167: dq 686
const168: dq 27.42
const169: dq 28.99
const170: dq 30.14
const171: dq 14.43
const172: dq 997
const173: dq 29.57
const174: dq 756
const175: dq 8.72
const176: dq 4.11
const177: dq 74.96
const178: dq 678
const179: dq 963
const180: dq 26.8
const181: dq 44.27
const182: dq 43.32
const183: dq 126
const184: dq 37.63
const185: dq 206
const186: dq 890
const187: dq 47.03
const188: dq 613
const189: dq 535
const190: dq 19.28
const191: dq 36.12
const192: dq 80.02
const193: dq 534
const194: dq 83.06
const195: dq 147
const196: dq 469
const197: dq 789
const198: dq 505
const199: dq 10.39
const200: dq 607
const201: dq 675
const202: dq 525
const203: dq 60.66
const204: dq 58.55
const205: dq 749
const206: dq 55.01
const207: dq 718
const208: dq 97.85
const209: dq 46.78
const210: dq 227
const211: dq 92.68
const212: dq 774
const213: dq 725
const214: dq 248
const215: dq 23.28
const216: dq 25.66
const217: dq 79.46
const218: dq 24.2
const219: dq 28.52
const220: dq 54.06
const221: dq 254
const222: dq 47.84
const223: dq 660
const224: dq 959
const225: dq 66.6
const226: dq 737
const227: dq 879
const228: dq 16.22
const229: dq 421
const230: dq 451
const231: dq 11.82
const232: dq 827
const233: dq 261
const234: dq 266
const235: dq 793
const236: dq 787
const237: dq 84.54
const238: dq 45.94
const239: dq 13.51
const240: dq 536
const241: dq 68.38
const242: dq 92.35
const243: dq 5.98
const244: dq 46.94
const245: dq 956
const246: dq 0.18
const247: dq 288
const248: dq 973
const249: dq 27.78
const250: dq 23.25
const251: dq 18.22
const252: dq 452
const253: dq 262
const254: dq 4.55
const255: dq 37
const256: dq 73.55
const257: dq 115
const258: dq 1.28
const259: dq 396
const260: dq 53
const261: dq 647
const262: dq 13
const263: dq 857
const264: dq 61.15
const265: dq 64.91
const266: dq 861
const267: dq 64.82
const268: dq 797
const269: dq 156
const270: dq 81.87
const271: dq 418
const272: dq 2.67
const273: dq 34.36
const274: dq 75.16
const275: dq 158
const276: dq 93.33
const277: dq 56.96
const278: dq 59.25
const279: dq 144
const280: dq 13.3
const281: dq 784
const282: dq 349
const283: dq 936
const284: dq 132
const285: dq 45.09
const286: dq 674
const287: dq 80.18
const288: dq 62.8
const289: dq 92.84
const290: dq 582
const291: dq 67.65
const292: dq 96.35
const293: dq 996
const294: dq 76.08
const295: dq 633
const296: dq 35.74
const297: dq 12.2
const298: dq 95.07
const299: dq 43.47
const300: dq 281
const301: dq 804
const302: dq 78.49
const303: dq 81.78
const304: dq 247
const305: dq 13.33
const306: dq 87.14
const307: dq 484
const308: dq 425
const309: dq 311
const310: dq 380
const311: dq 9.49
const312: dq 1.07
const313: dq 947
const314: dq 754
const315: dq 32.83
const316: dq 89.38
const317: dq 481
const318: dq 89.94
const319: dq 57.1
const320: dq 88.82
const321: dq 75.8
const322: dq 760
const323: dq 23.56
const324: dq 32
const325: dq 34.34
const326: dq 946
const327: dq 145
const328: dq 77.21
const329: dq 38.75
const330: dq 67.52
const331: dq 52.74
const332: dq 43.6
const333: dq 49.19
const334: dq 692
const335: dq 17.87
const336: dq 372
const337: dq 40.11
const338: dq 608
const339: dq 33.71
const340: dq 183
const341: dq 141
const342: dq 81.19
const343: dq 29.77
const344: dq 44.98
const345: dq 74.59
const346: dq 342
const347: dq 90.83
const348: dq 99.81
const349: dq 84.18
const350: dq 432
const351: dq 17.1
const352: dq 29.81
const353: dq 94.96
const354: dq 59.72
const355: dq 80.53
const356: dq 44.35
const357: dq 86.11
const358: dq 34.27
const359: dq 73.53
const360: dq 44.12
const361: dq 34.18
const362: dq 64.92
const363: dq 327
const364: dq 949
const365: dq 73.96
const366: dq 16.01
const367: dq 120
const368: dq 362
const369: dq 56.88
const370: dq 69.97
const371: dq 10.74
const372: dq 939
const373: dq 60.95
const374: dq 307
const375: dq 90.39
const376: dq 73.78
const377: dq 16.64
const378: dq 989
const379: dq 98.07
const380: dq 18.85
const381: dq 22.03
const382: dq 638
const383: dq 84.57
const384: dq 225
const385: dq 552
const386: dq 42.24
const387: dq 299
const388: dq 92.66
const389: dq 826
const390: dq 3.1
const391: dq 58.58
const392: dq 63
const393: dq 130
const394: dq 38.07
const395: dq 45.25
const396: dq 532
const397: dq 689
const398: dq 547
const399: dq 47.44
const400: dq 57.66
const401: dq 407
const402: dq 317
const403: dq 42.92
const404: dq 986
const405: dq 398
const406: dq 50.77
const407: dq 27.32
const408: dq 781
const409: dq 53.5
const410: dq 1.76
const411: dq 377
const412: dq 719
const413: dq 46.57
const414: dq 149
const415: dq 161
const416: dq 202
const417: dq 486
const418: dq 92
const419: dq 541
const420: dq 713
const421: dq 77.05
const422: dq 99.66
const423: dq 474
const424: dq 193
const425: dq 302
const426: dq 7.45
const427: dq 94
const428: dq 80
const429: dq 40.2
const430: dq 90.71
const431: dq 49.86
const432: dq 971
const433: dq 684
const434: dq 378
const435: dq 93.01
const436: dq 333
const437: dq 73
const438: dq 270
const439: dq 88.5
const440: dq 185
const441: dq 294
const442: dq 111
const443: dq 72.07
const444: dq 29.34
const445: dq 574
const446: dq 71.76
const447: dq 514
const448: dq 87.57
const449: dq 540
const450: dq 28.8
const451: dq 872
const452: dq 37.37
const453: dq 215
const454: dq 770
const455: dq 97.27
const456: dq 83.16
const457: dq 915
const458: dq 903
const459: dq 269
const460: dq 87.15
const461: dq 26.95
const462: dq 65
const463: dq 37.9
const464: dq 89.79
const465: dq 691
const466: dq 87
const467: dq 246
const468: dq 9.11
const469: dq 86
const470: dq 53.77
const471: dq 57.93
const472: dq 91.39
const473: dq 365
const474: dq 330
const475: dq 59
const476: dq 858
const477: dq 14
const478: dq 151
const479: dq 19
const480: dq 456
const481: dq 76.13
const482: dq 39.82
const483: dq 235
const484: dq 36.72
const485: dq 5.8
const486: dq 61
const487: dq 70.25
const488: dq 85
const489: dq 243
const490: dq 74
const491: dq 573
const492: dq 875
const493: dq 11.88
const494: dq 982
const495: dq 699
const496: dq 17.51
const497: dq 53.08
const498: dq 851
const499: dq 50.75
const500: dq 831
const501: dq 10.37
const502: dq 1.66
const503: dq 877
const504: dq 942
const505: dq 31.97
const506: dq 358
const507: dq 187
const508: dq 645
const509: dq 86.8
const510: dq 595
const511: dq 82.49
const512: dq 257
const513: dq 212
const514: dq 55.29
const515: dq 33.89
const516: dq 709
const517: dq 0.63
const518: dq 198
const519: dq 824
const520: dq 82
const521: dq 199
const522: dq 27
const523: dq 639
const524: dq 9.13
const525: dq 497
const526: dq 364
const527: dq 464
const528: dq 39
const529: dq 798
const530: dq 31.69
const531: dq 664
const532: dq 419
const533: dq 97.07
const534: dq 59.68
const535: dq 63.75
const536: dq 91.56
const537: dq 75.47
const538: dq 25.22
const539: dq 234
const540: dq 97.16
const541: dq 984
const542: dq 1.47
const543: dq 73.57
const544: dq 32.94
const545: dq 652
const546: dq 22.59
const547: dq 5.75
const548: dq 649
const549: dq 561
const550: dq 75.51
const551: dq 21.87
const552: dq 86.25
const553: dq 38.02
const554: dq 58.17
const555: dq 64.27
const556: dq 40
const557: dq 74.2
const558: dq 25.64
const559: dq 859
const560: dq 83.39
const561: dq 315
const562: dq 36.08
const563: dq 66.12
const564: dq 75.27
const565: dq 695
const566: dq 190
const567: dq 26.36
const568: dq 1.79
const569: dq 822
const570: dq 10.32
const571: dq 16.89
const572: dq 51.39
const573: dq 6.21
const574: dq 65.39
const575: dq 60.3
const576: dq 336
const577: dq 56.72
const578: dq 80.62
const579: dq 49.16
const580: dq 33.31
const581: dq 768
const582: dq 60.83
const583: dq 75.88
const584: dq 31.41
const585: dq 20.31
const586: dq 91.22
const587: dq 34.4
const588: dq 96.61
const589: dq 76.48
const590: dq 65.63
const591: dq 56.12
const592: dq 44
const593: dq 14.24
const594: dq 791
const595: dq 823
const596: dq 29.16
const597: dq 94.21
const598: dq 88.12
const599: dq 68.45
const600: dq 58.6
const601: dq 683
const602: dq 104
const603: dq 82.51
const604: dq 39.8
const605: dq 53.36
const606: dq 95.74
const607: dq 14.4
const608: dq 771
const609: dq 41.75
const610: dq 30.37
const611: dq 11.72
const612: dq 667
const613: dq 84.87
const614: dq 45
const615: dq 42.34
const616: dq 5.58
const617: dq 85.23
const618: dq 670
const619: dq 78.24
const620: dq 64.67
const621: dq 50.65
const622: dq 570
const623: dq 79.09
const624: dq 911
const625: dq 616
const626: dq 894
const627: dq 32.03
const628: dq 33.8
const629: dq 63.77
const630: dq 609
const631: dq 515
const632: dq 43.82
const633: dq 62.95
const634: dq 654
const635: dq 810
const636: dq 49.32
const637: dq 4.1
const638: dq 50.74
const639: dq 25.35
const640: dq 80.27
const641: dq 36.89
const642: dq 367
const643: dq 68.58
const644: dq 9.5
const645: dq 46.01
const646: dq 13.75
const647: dq 46.02
const648: dq 26.59
const649: dq 16.93
const650: dq 50.54
const651: dq 442
const652: dq 55.81
const653: dq 18.24
const654: dq 87.91
const655: dq 483
const656: dq 36.56
const657: dq 18.21
const658: dq 575
const659: dq 65.21
const660: dq 85.74
const661: dq 6.44
const662: dq 92.91
const663: dq 77.14
const664: dq 86.36
const665: dq 92.46
const666: dq 856
const667: dq 17.98
const668: dq 77.47
const669: dq 36.78
const670: dq 89.37
const671: dq 98.02
const672: dq 25.82
const673: dq 20.06
const674: dq 43.02
const675: dq 82.35
const676: dq 343
const677: dq 925
const678: dq 323
const679: dq 96.93
const680: dq 85.37
const681: dq 88.58
const682: dq 16.29
const683: dq 95.95
const684: dq 26.66
const685: dq 707
const686: dq 38.38
const687: dq 964
const688: dq 191
const689: dq 35.24
const690: dq 9.48
const691: dq 50.93
const692: dq 403
const693: dq 78.22
const694: dq 76.53
const695: dq 40.47
const696: dq 52.04
const697: dq 762
const698: dq 98.97
const699: dq 81.31
const700: dq 465
const701: dq 84.61
const702: dq 91.24
const703: dq 51.56
const704: dq 31.46
const705: dq 10.8
const706: dq 49.31
const707: dq 68.82
const708: dq 38.36
const709: dq 496
const710: dq 641
const711: dq 36.45
const712: dq 33.06
const713: dq 71.17
const714: dq 58.59
const715: dq 416
const716: dq 731
const717: dq 43.91
const718: dq 755
const719: dq 88.84
const720: dq 18.35
const721: dq 71
const722: dq 31.16
const723: dq 186
const724: dq 286
const725: dq 12.38
const726: dq 29.9
const727: dq 75.25
const728: dq 35.55
const729: dq 55.42
const730: dq 10.47
const731: dq 54.14
const732: dq 27.53
const733: dq 84.62
const734: dq 275
const735: dq 11.06
const736: dq 39.52
const737: dq 887
const738: dq 7.81
const739: dq 39.46
const740: dq 33.49
const741: dq 25.87
const742: dq 58.24
const743: dq 60.17
const744: dq 17.23
const745: dq 19.58
const746: dq 88.23
const747: dq 12.73
const748: dq 65.54
const749: dq 83.69
const750: dq 644
const751: dq 91.38
const752: dq 6.27
const753: dq 52.19
const754: dq 32.98
const755: dq 64.79
const756: dq 56.91
const757: dq 37.99
const758: dq 51.34
const759: dq 742
const760: dq 95.51
const761: dq 242
const762: dq 90.02
const763: dq 67.85
const764: dq 60.84
const765: dq 5.26
const766: dq 49.94
const767: dq 77.58
const768: dq 76.69
const769: dq 86.23
const770: dq 85.63
const771: dq 54.92
const772: dq 45.72
const773: dq 83.15
const774: dq 38.64
const775: dq 48.93
const776: dq 6.68
const777: dq 35.92
const778: dq 37.59
const779: dq 17.0
const780: dq 38
const781: db `(FloatType)`, 0
const782: dq 7.11
const783: dq 34.54
const784: dq 41.19
const785: dq 43.53
const786: dq 767
const787: dq 618
const788: dq 13.86
const789: dq 39.22
const790: dq 602
const791: dq 52.09
const792: dq 321
const793: dq 17.64
const794: dq 11.65
const795: dq 93.54
const796: dq 751
const797: dq 555
const798: dq 792
const799: dq 31.96
const800: dq 460
const801: dq 829
const802: dq 224
const803: dq 67.21
const804: dq 18.61
const805: dq 9
const806: dq 29
const807: dq 15.19
const808: dq 21.82
const809: dq 195
const810: dq 504
const811: dq 69.66
const812: dq 400
const813: dq 51.88
const814: dq 88.21
const815: dq 643
const816: dq 95
const817: dq 44.78
const818: dq 4.03
const819: dq 26
const820: dq 889
const821: dq 13.98
const822: dq 67.74
const823: dq 48.75
const824: dq 93.76
const825: dq 53.62
const826: dq 846
const827: dq 53.28
const828: dq 60.89
const829: dq 33.03
const830: dq 89.59
const831: dq 636
const832: dq 36.85
const833: dq 542
const834: dq 590
const835: dq 34.92
const836: dq 33.02
const837: dq 38.25
const838: dq 694
const839: dq 559
const840: dq 78.6
const841: dq 71.09
const842: dq 11.93
const843: dq 65.04
const844: dq 868
const845: dq 73.22
const846: dq 389
const847: dq 61.01
const848: dq 381
const849: dq 123
const850: dq 487
const851: dq 40.17
const852: dq 384
const853: dq 40.61
const854: dq 46.32
const855: dq 301
const856: dq 10.72
const857: dq 693
const858: dq 72.09
const859: dq 131
const860: dq 557
const861: dq 920
const862: dq 722
const863: dq 70.87
const864: dq 74.67
const865: dq 48.78
const866: dq 397
const867: dq 681
const868: dq 29.14
const869: dq 24.69
const870: dq 77.86
const871: dq 745
const872: dq 71.96
const873: dq 880
const874: dq 435
const875: dq 51.48
const876: dq 62.2
const877: dq 870
const878: dq 468
const879: dq 813
const880: dq 40.55
const881: dq 690
const882: dq 319
const883: dq 37.44
const884: dq 295
const885: dq 498
const886: dq 828
const887: dq 67.24
const888: dq 866
const889: dq 30

section .text
c:
_c:
	push rbp
	mov rbp, rsp
	push rdi
	sub rsp, 8
	movsd [rsp], xmm0
	push rsi
	push rdx
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rel const1] ; 992
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump1
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump1:
	cqo
	idiv r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump2
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
.jump2:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	mov rax, [rel const3] ; 507
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp 
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	mov rax, [rel const4] ; 45.5
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp 
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	pop rax
	add rsp, 112 ; Local variables
	pop rbp
	ret

d:
_d:
	push rbp
	mov rbp, rsp
	push rdi
	sub rsp, 8
	movsd [rsp], xmm0
	push rsi
	sub rsp, 8
	movsd [rsp], xmm1
	mov rax, [rel const6] ; 14.42
	push rax
	mov rax, [rel const7] ; 59.81
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 40 ; Local variables
	pop rbp
	ret
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const8] ; 61.48
	push rax
	mov rax, [rel const9] ; 777
	push rax
	mov rax, [rel const10] ; 142
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 72 ; Local variables
	pop rbp
	ret
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 72 ; Local variables
	pop rbp
	ret
	mov rax, [rel const11] ; 174
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump3
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
.jump3:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 88 ; Local variables
	pop rbp
	ret

h:
_h:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const388] ; 92.66
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const389] ; 826
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	mov rax, [rel const390] ; 3.1
	push rax
	mov rax, [rel const391] ; 58.58
	push rax
	mov rax, [rel const392] ; 63
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const393] ; 130
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	mov rax, [rel const394] ; 38.07
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const395] ; 45.25
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const396] ; 532
	push rax
	mov rax, [rel const397] ; 689
	push rax
	mov rax, [rel const398] ; 547
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const12] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	mov rax, [rel const399] ; 47.44
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump31
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump31:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp 
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const400] ; 57.66
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const34] ; 658
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump32
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump32:
	cqo
	idiv r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const401] ; 407
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const205] ; 749
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const402] ; 317
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const403] ; 42.92
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const404] ; 986
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const405] ; 398
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const406] ; 50.77
	push rax
	mov rax, [rel const407] ; 27.32
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	mov rax, [rel const408] ; 781
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump33
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
.jump33:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp 
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp 
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const409] ; 53.5
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	mov rax, [rel const410] ; 1.76
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const411] ; 377
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const412] ; 719
	push rax
	mov rax, [rel const413] ; 46.57
	push rax
	mov rax, [rel const327] ; 145
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const414] ; 149
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const415] ; 161
	push rax
	mov rax, [rel const82] ; 440
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const416] ; 202
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const417] ; 486
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const418] ; 92
	push rax
	mov rax, [rel const106] ; 766
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const419] ; 541
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	mov rax, [rel const420] ; 713
	push rax
	mov rax, [rel const12] ; False
	push rax
	mov rax, [rel const421] ; 77.05
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const422] ; 99.66
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const423] ; 474
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const424] ; 193
	push rax
	mov rax, [rel const117] ; 839
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const425] ; 302
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp 
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const426] ; 7.45
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const427] ; 94
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const428] ; 80
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const429] ; 40.2
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const430] ; 90.71
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const431] ; 49.86
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const432] ; 971
	push rax
	mov rax, [rel const0] ; True
	push rax
	mov rax, [rel const399] ; 47.44
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const433] ; 684
	push rax
	mov rax, [rel const434] ; 378
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump34
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump34:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const435] ; 93.01
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const436] ; 333
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const437] ; 73
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	mov rax, [rel const438] ; 270
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const439] ; 88.5
	push rax
	mov rax, [rel const440] ; 185
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const441] ; 294
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const442] ; 111
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const443] ; 72.07
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const444] ; 29.34
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const445] ; 574
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const446] ; 71.76
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp 
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp 
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const447] ; 514
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const448] ; 87.57
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const449] ; 540
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	mov rax, [rel const0] ; True
	push rax
	mov rax, [rel const450] ; 28.8
	push rax
	mov rax, [rel const451] ; 872
	push rax
	mov rax, [rel const452] ; 37.37
	push rax
	mov rax, [rel const453] ; 215
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const233] ; 261
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump35
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump35:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const0] ; True
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const454] ; 770
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const89] ; 836
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const455] ; 97.27
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const456] ; 83.16
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const457] ; 915
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const458] ; 903
	push rax
	mov rax, [rel const459] ; 269
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump36
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
.jump36:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const460] ; 87.15
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const461] ; 26.95
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const462] ; 65
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const463] ; 37.9
	push rax
	mov rax, [rel const12] ; False
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const398] ; 547
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const464] ; 89.79
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const465] ; 691
	push rax
	mov rax, [rel const466] ; 87
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump37
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
.jump37:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp 
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const467] ; 246
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const468] ; 9.11
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const469] ; 86
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const428] ; 80
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const470] ; 53.77
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp 
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const471] ; 57.93
	push rax
	mov rax, [rel const472] ; 91.39
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const473] ; 365
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const474] ; 330
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const411] ; 377
	push rax
	mov rax, [rel const68] ; 958
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const475] ; 59
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const12] ; False
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const476] ; 858
	push rax
	mov rax, [rel const12] ; False
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const477] ; 14
	push rax
	mov rax, [rel const478] ; 151
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const479] ; 19
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const248] ; 973
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp 
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const480] ; 456
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp 
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const481] ; 76.13
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp 
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const482] ; 39.82
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const0] ; True
	push rax
	mov rax, [rel const345] ; 74.59
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const483] ; 235
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp 
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const484] ; 36.72
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const308] ; 425
	push rax
	mov rax, [rel const485] ; 5.8
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const486] ; 61
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const487] ; 70.25
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const488] ; 85
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const183] ; 126
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump38
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
.jump38:
	cqo
	idiv r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp 
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const489] ; 243
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const490] ; 74
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const491] ; 573
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const492] ; 875
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump39
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
.jump39:
	cqo
	idiv r10
	push rax
	mov rax, [rel const0] ; True
	push rax
	mov rax, [rel const493] ; 11.88
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp 
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const0] ; True
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump40
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
.jump40:
	cqo
	idiv r10
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const494] ; 982
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const495] ; 699
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp 
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const12] ; False
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const0] ; True
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const496] ; 17.51
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const497] ; 53.08
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const498] ; 851
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const499] ; 50.75
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const500] ; 831
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp 
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const501] ; 10.37
	push rax
	mov rax, [rel const502] ; 1.66
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const503] ; 877
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const504] ; 942
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp 
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	mov rax, [rel const12] ; False
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const505] ; 31.97
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	mov rax, [rel const30] ; 852
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	mov rax, [rel const506] ; 358
	push rax
	mov rax, [rel const507] ; 187
	push rax
	mov rax, [rel const508] ; 645
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump41
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump41:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump42
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump42:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const509] ; 86.8
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const510] ; 595
	push rax
	mov rax, [rel const0] ; True
	push rax
	mov rax, [rel const511] ; 82.49
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	mov rax, [rel const512] ; 257
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const513] ; 212
	push rax
	mov rax, [rel const310] ; 380
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp 
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const514] ; 55.29
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump43
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
.jump43:
	cqo
	idiv r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	mov rax, [rel const515] ; 33.89
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const516] ; 709
	push rax
	mov rax, [rel const517] ; 0.63
	push rax
	mov rax, [rel const518] ; 198
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const519] ; 824
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const520] ; 82
	push rax
	mov rax, [rel const95] ; 103
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const340] ; 183
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const442] ; 111
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const521] ; 199
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	mov rax, [rel const522] ; 27
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const0] ; True
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const523] ; 639
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump44
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump44:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const524] ; 9.13
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const525] ; 497
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const526] ; 364
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump45
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
.jump45:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const527] ; 464
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump46
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
.jump46:
	cqo
	idiv r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	mov rax, [rel const528] ; 39
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	mov rax, [rel const529] ; 798
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const530] ; 31.69
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 88 ; Local variables
	pop rbp
	ret

l:
_l:
	push rbp
	mov rbp, rsp
	mov rax, [rel const549] ; 561
	push rax
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const550] ; 75.51
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const551] ; 21.87
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rel const552] ; 86.25
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const553] ; 38.02
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp 
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const554] ; 58.17
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const555] ; 64.27
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const556] ; 40
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const557] ; 74.2
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const558] ; 25.64
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const559] ; 859
	push rax
	mov rax, [rel const560] ; 83.39
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump48
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
.jump48:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const561] ; 315
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const562] ; 36.08
	push rax
	mov rax, [rel const563] ; 66.12
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const564] ; 75.27
	push rax
	mov rax, [rel const565] ; 695
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const566] ; 190
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const567] ; 26.36
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const568] ; 1.79
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rel const569] ; 822
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump49
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump49:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp 
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const570] ; 10.32
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const571] ; 16.89
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const572] ; 51.39
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const573] ; 6.21
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const574] ; 65.39
	push rax
	mov rax, [rel const11] ; 174
	push rax
	mov rax, [rel const575] ; 60.3
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const576] ; 336
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const12] ; False
	push rax
	mov rax, [rel const577] ; 56.72
	push rax
	mov rax, [rel const578] ; 80.62
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const579] ; 49.16
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const580] ; 33.31
	push rax
	mov rax, [rel const581] ; 768
	push rax
	mov rax, [rel const582] ; 60.83
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const12] ; False
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const583] ; 75.88
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const584] ; 31.41
	push rax
	mov rax, [rel const585] ; 20.31
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const12] ; False
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	mov rax, [rel const586] ; 91.22
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const587] ; 34.4
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp 
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const321] ; 75.8
	push rax
	mov rax, [rel const588] ; 96.61
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp 
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	mov rax, [rel const589] ; 76.48
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp 
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const590] ; 65.63
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const591] ; 56.12
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const592] ; 44
	push rax
	mov rax, [rel const593] ; 14.24
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const522] ; 27
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const594] ; 791
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const595] ; 823
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump50
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump50:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const596] ; 29.16
	push rax
	mov rax, [rel const597] ; 94.21
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const378] ; 989
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const598] ; 88.12
	push rax
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const599] ; 68.45
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp 
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rel const600] ; 58.6
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const601] ; 683
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const549] ; 561
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump51
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump51:
	cqo
	idiv r10
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const548] ; 649
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const602] ; 104
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const603] ; 82.51
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const604] ; 39.8
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const605] ; 53.36
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const342] ; 81.19
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const606] ; 95.74
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const607] ; 14.4
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const608] ; 771
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const609] ; 41.75
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const610] ; 30.37
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump52
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
.jump52:
	cqo
	idiv r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp 
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	mov rax, [rel const611] ; 11.72
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const612] ; 667
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump53
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
.jump53:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const613] ; 84.87
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const614] ; 45
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const615] ; 42.34
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const616] ; 5.58
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp 
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump54
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump54:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const617] ; 85.23
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp 
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const618] ; 670
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump55
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
.jump55:
	cqo
	idiv r10
	push rax
	mov rax, [rel const143] ; 33
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump56
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump56:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const619] ; 78.24
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp 
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	mov rax, [rel const620] ; 64.67
	push rax
	mov rax, [rel const486] ; 61
	push rax
	mov rax, [rel const621] ; 50.65
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const622] ; 570
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp 
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	mov rax, [rel const623] ; 79.09
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const624] ; 911
	push rax
	mov rax, [rel const625] ; 616
	push rax
	mov rax, [rel const626] ; 894
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump57
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump57:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const627] ; 32.03
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const628] ; 33.8
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const629] ; 63.77
	push rax
	mov rax, [rel const630] ; 609
	push rax
	mov rax, [rel const631] ; 515
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const632] ; 43.82
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rel const633] ; 62.95
	push rax
	mov rax, [rel const634] ; 654
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const635] ; 810
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const263] ; 857
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump58
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
.jump58:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const636] ; 49.32
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const637] ; 4.1
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const638] ; 50.74
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rel const639] ; 25.35
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const279] ; 144
	push rax
	mov rax, [rel const640] ; 80.27
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const641] ; 36.89
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const388] ; 92.66
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const642] ; 367
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const583] ; 75.88
	push rax
	mov rax, [rel const0] ; True
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	mov rax, [rel const643] ; 68.58
	push rax
	mov rax, [rel const644] ; 9.5
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const645] ; 46.01
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const12] ; False
	push rax
	mov rax, [rel const646] ; 13.75
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const647] ; 46.02
	push rax
	mov rax, [rel const648] ; 26.59
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const649] ; 16.93
	push rax
	mov rax, [rel const650] ; 50.54
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rel const651] ; 442
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const652] ; 55.81
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const653] ; 18.24
	push rax
	mov rax, [rel const654] ; 87.91
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const655] ; 483
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const656] ; 36.56
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const657] ; 18.21
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const658] ; 575
	push rax
	mov rax, [rel const659] ; 65.21
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const660] ; 85.74
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const661] ; 6.44
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const11] ; 174
	push rax
	mov rax, [rel const662] ; 92.91
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const233] ; 261
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const663] ; 77.14
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const664] ; 86.36
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const665] ; 92.46
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rel const666] ; 856
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const667] ; 17.98
	push rax
	mov rax, [rel const668] ; 77.47
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const669] ; 36.78
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const670] ; 89.37
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const671] ; 98.02
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const135] ; 2
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const672] ; 25.82
	push rax
	mov rax, [rel const0] ; True
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const673] ; 20.06
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const674] ; 43.02
	push rax
	mov rax, [rel const675] ; 82.35
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const676] ; 343
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const677] ; 925
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump59
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump59:
	cqo
	idiv r10
	push rax
	mov rax, [rel const678] ; 323
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const679] ; 96.93
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const680] ; 85.37
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const681] ; 88.58
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const682] ; 16.29
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const683] ; 95.95
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const684] ; 26.66
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump60
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump60:
	cqo
	idiv r10
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const685] ; 707
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const686] ; 38.38
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const687] ; 964
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const688] ; 191
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const689] ; 35.24
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const690] ; 9.48
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const691] ; 50.93
	push rax
	mov rax, [rel const692] ; 403
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const693] ; 78.22
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const694] ; 76.53
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const695] ; 40.47
	push rax
	mov rax, [rel const479] ; 19
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const696] ; 52.04
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const697] ; 762
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const698] ; 98.97
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const258] ; 1.28
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const699] ; 81.31
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const700] ; 465
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const701] ; 84.61
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const702] ; 91.24
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp 
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump61
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump61:
	cqo
	idiv r10
	push rax
	mov rax, [rel const703] ; 51.56
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const704] ; 31.46
	push rax
	mov rax, [rel const705] ; 10.8
	push rax
	mov rax, [rel const706] ; 49.31
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const707] ; 68.82
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const708] ; 38.36
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const576] ; 336
	push rax
	mov rax, [rel const709] ; 496
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump62
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump62:
	cqo
	idiv r10
	push rax
	mov rax, [rel const710] ; 641
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump63
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump63:
	cqo
	idiv r10
	push rax
	mov rax, [rel const711] ; 36.45
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const712] ; 33.06
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const136] ; 118
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp 
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rel const12] ; False
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const713] ; 71.17
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const714] ; 58.59
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const715] ; 416
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const716] ; 731
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const717] ; 43.91
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const718] ; 755
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const719] ; 88.84
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const77] ; 455
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const720] ; 18.35
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp 
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	add rsp, 32 ; Local variables
	pop rbp
	ret
	mov rax, [rel const9] ; 777
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const721] ; 71
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const722] ; 31.16
	push rax
	mov rax, [rel const723] ; 186
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	mov rax, [rel const724] ; 286
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp 
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const725] ; 12.38
	push rax
	mov rax, [rel const726] ; 29.9
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const727] ; 75.25
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp 
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp 
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const161] ; 957
	push rax
	mov rax, [rel const12] ; False
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp 
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const728] ; 35.55
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const729] ; 55.42
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump64
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
.jump64:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const174] ; 756
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const730] ; 10.47
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	add rsp, 40 ; Local variables
	pop rbp
	ret
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	mov rax, [rel const731] ; 54.14
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp 
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	add rsp, 64 ; Local variables
	pop rbp
	ret

n:
_n:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	movsd [rsp], xmm1
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp 
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	mov rax, [rel const732] ; 27.53
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 40 ; Local variables
	pop rbp
	ret
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 40 ; Local variables
	pop rbp
	ret
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const733] ; 84.62
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump65
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump65:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const193] ; 534
	push rax
	mov rax, [rel const93] ; 854
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	mov rax, [rel const734] ; 275
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp 
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const735] ; 11.06
	push rax
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const736] ; 39.52
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const0] ; True
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const507] ; 187
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const737] ; 887
	push rax
	mov rax, [rel const172] ; 997
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 40 ; Local variables
	pop rbp
	ret
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const0] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 72 ; Local variables
	pop rbp
	ret

o:
_o:
	push rbp
	mov rbp, rsp
	push rdi
	push rsi
	mov rax, [rel const12] ; False
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp 
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	mov rax, [rel const738] ; 7.81
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const739] ; 39.46
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	call _l
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump66
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump66:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const40] ; 458
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump67
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump67:
	cqo
	idiv r10
	push rax
	mov rax, [rel const740] ; 33.49
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const741] ; 25.87
	push rax
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const742] ; 58.24
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const743] ; 60.17
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const744] ; 17.23
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const745] ; 19.58
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const746] ; 88.23
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const747] ; 12.73
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const748] ; 65.54
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const749] ; 83.69
	push rax
	mov rax, [rel const12] ; 0
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const750] ; 644
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const751] ; 91.38
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const752] ; 6.27
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const753] ; 52.19
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const754] ; 32.98
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const755] ; 64.79
	push rax
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const756] ; 56.91
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const757] ; 37.99
	push rax
	mov rax, [rel const758] ; 51.34
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const759] ; 742
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const760] ; 95.51
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const761] ; 242
	push rax
	mov rax, [rel const762] ; 90.02
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump68
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump68:
	cqo
	idiv r10
	push rax
	call _l
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump69
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump69:
	cqo
	idiv r10
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const763] ; 67.85
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const764] ; 60.84
	push rax
	mov rax, [rel const765] ; 5.26
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const766] ; 49.94
	push rax
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const767] ; 77.58
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const768] ; 76.69
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const769] ; 86.23
	push rax
	mov rax, [rel const770] ; 85.63
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const202] ; 525
	push rax
	mov rax, [rel const771] ; 54.92
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const772] ; 45.72
	push rax
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const773] ; 83.15
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const774] ; 38.64
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump70
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump70:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const0] ; True
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8 ; Add alignment
	call _l
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp 
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const775] ; 48.93
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump71
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
.jump71:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump72
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump72:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const776] ; 6.68
	push rax
	mov rax, [rel const12] ; False
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 16 to rsp 
		mov r10, [r12 - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const777] ; 35.92
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 96 ; Local variables
	pop rbp
	ret

p:
_p:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	movsd [rsp], xmm0
	push rdi
	sub rsp, 8
	movsd [rsp], xmm1
	sub rsp, 8 ; Add alignment
	mov rax, [rel const782] ; 7.11
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	call _l
	push rax
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	mov rax, [rel const783] ; 34.54
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const324] ; 32
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const784] ; 41.19
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	mov rax, [rel const785] ; 43.53
	push rax
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const283] ; 936
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const786] ; 767
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const234] ; 266
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	call _l
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump73
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
.jump73:
	cqo
	idiv r10
	push rax
	mov rax, [rel const787] ; 618
	push rax
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	mov rax, [rel const788] ; 13.86
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	call _l
	push rax
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump74
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
.jump74:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const12] ; False
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const789] ; 39.22
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const790] ; 602
	push rax
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	call _l
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp 
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	call _l
	push rax
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	call _l
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const147] ; 579
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp 
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump75
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
.jump75:
	cqo
	idiv r10
	push rax
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const791] ; 52.09
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const792] ; 321
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 56 ; Local variables
	pop rbp
	ret
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	mov rax, [rel const793] ; 17.64
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const794] ; 11.65
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 72 ; Local variables
	pop rbp
	ret
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 88 ; Local variables
	pop rbp
	ret

J:
_J:
	push rbp
	mov rbp, rsp
	push rdi
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 224 to rsp 
		mov r10, [r12 - 224 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp 
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 128 to rsp 
		mov r10, [r12 - 128 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	add rsp, 40 ; Local variables
	pop rbp
	ret
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 224 to rsp 
		mov r10, [r12 - 224 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	add rsp, 56 ; Local variables
	pop rbp
	ret
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from r12 - 216 to rsp 
		mov r10, [r12 - 216 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const876] ; 62.2
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 160 to rsp 
		mov r10, [r12 - 160 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 168 to rsp 
		mov r10, [r12 - 168 + 0]
		mov [rsp + 0], r10
	pop rax
	add rsp, 72 ; Local variables
	pop rbp
	ret
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	add rsp, 72 ; Local variables
	pop rbp
	ret

L:
_L:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	movsd [rsp], xmm0
	push rdi
	sub rsp, 8
	; Moving 8 bytes from r12 - 168 to rsp 
		mov r10, [r12 - 168 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp 
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	add rsp, 40 ; Local variables
	pop rbp
	ret
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const877] ; 870
	push rax
	pop rax
	add rsp, 48 ; Local variables
	pop rbp
	ret
	sub rsp, 8
	; Moving 8 bytes from r12 - 112 to rsp 
		mov r10, [r12 - 112 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 240 to rsp 
		mov r10, [r12 - 240 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp 
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const878] ; 468
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp 
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp 
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp 
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 128 to rsp 
		mov r10, [r12 - 128 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 216 to rsp 
		mov r10, [r12 - 216 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const879] ; 813
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp 
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	add rsp, 80 ; Local variables
	pop rbp
	ret

P:
_P:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp 
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	call _l
	push rax
	mov rax, [rel const880] ; 40.55
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	pop rdi
	call _L
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 112 to rsp 
		mov r10, [r12 - 112 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from r12 - 232 to rsp 
		mov r10, [r12 - 232 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp 
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	call _J
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const881] ; 690
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 136 to rsp 
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 216 to rsp 
		mov r10, [r12 - 216 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 80 ; Local variables
	pop rbp
	ret

Q:
_Q:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 240 to rsp 
		mov r10, [r12 - 240 + 0]
		mov [rsp + 0], r10
	call _P
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp 
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rel const12] ; False
	push rax
	call _P
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 192 to rsp 
		mov r10, [r12 - 192 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	pop rdi
	movsd xmm1, [rsp]
	add rsp, 8
	call _p
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp 
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	call _l
	push rax
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from r12 - 112 to rsp 
		mov r10, [r12 - 112 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp 
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const360] ; 44.12
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp 
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	pop rdi
	call _L
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	pop rsi
	call _o
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 144 to rsp 
		mov r10, [r12 - 144 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const882] ; 319
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 112 to rsp 
		mov r10, [r12 - 112 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const224] ; 959
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp 
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const883] ; 37.44
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	pop rdi
	call _L
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 216 to rsp 
		mov r10, [r12 - 216 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	pop rdi
	call _L
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump84
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump84:
	cqo
	idiv r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 232 to rsp 
		mov r10, [r12 - 232 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	pop rdi
	movsd xmm1, [rsp]
	add rsp, 8
	call _p
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from r12 - 264 to rsp 
		mov r10, [r12 - 264 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	mov rax, [rel const715] ; 416
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 264 to rsp 
		mov r10, [r12 - 264 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	pop rdi
	call _L
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 264 to rsp 
		mov r10, [r12 - 264 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	pop rdi
	movsd xmm1, [rsp]
	add rsp, 8
	call _p
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 24 ; Local variables
	pop rbp
	ret
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const12] ; False
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 72 ; Local variables
	pop rbp
	ret
	sub rsp, 8
	; Moving 8 bytes from r12 - 112 to rsp 
		mov r10, [r12 - 112 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 72 ; Local variables
	pop rbp
	ret

R:
_R:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	; Moving 8 bytes from r12 - 168 to rsp 
		mov r10, [r12 - 168 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 192 to rsp 
		mov r10, [r12 - 192 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	add rsp, 16 ; Local variables
	pop rbp
	ret
	sub rsp, 8
	; Moving 8 bytes from r12 - 232 to rsp 
		mov r10, [r12 - 232 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	call _l
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	pop rdi
	call _L
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	pop rdi
	call _L
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const838] ; 694
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump85
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump85:
	cqo
	idiv r10
	push rax
	pop rax
	neg rax
	push rax
	call _P
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 112 to rsp 
		mov r10, [r12 - 112 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	pop rdi
	movsd xmm1, [rsp]
	add rsp, 8
	call _p
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp 
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 192 to rsp 
		mov r10, [r12 - 192 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	pop rdi
	call _L
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const884] ; 295
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump86
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump86:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	call _l
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 208 to rsp 
		mov r10, [r12 - 208 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _Q
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 224 to rsp 
		mov r10, [r12 - 224 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 144 to rsp 
		mov r10, [r12 - 144 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	pop rdi
	call _L
	push rax
	sub rsp, 8 ; Add alignment
	call _P
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	pop rdi
	call _L
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp 
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 264 to rsp 
		mov r10, [r12 - 264 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _Q
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 176 to rsp 
		mov r10, [r12 - 176 + 0]
		mov [rsp + 0], r10
	pop rax
	add rsp, 56 ; Local variables
	pop rbp
	ret
	mov rax, [rel const0] ; True
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	add rsp, 64 ; Local variables
	pop rbp
	ret

Y:
_Y:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	; Moving 8 bytes from r12 - 112 to rsp 
		mov r10, [r12 - 112 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	add rsp, 16 ; Local variables
	pop rbp
	ret
	mov rax, [rel const885] ; 498
	push rax
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 88 to rsp 
		mov r10, [r12 - 88 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp 
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 176 to rsp 
		mov r10, [r12 - 176 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	add rsp, 72 ; Local variables
	pop rbp
	ret

aa:
_aa:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	movsd [rsp], xmm0
	push rdi
	push rsi
	sub rsp, 8
	; Moving 8 bytes from r12 - 240 to rsp 
		mov r10, [r12 - 240 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 264 to rsp 
		mov r10, [r12 - 264 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 112 to rsp 
		mov r10, [r12 - 112 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	call _P
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const886] ; 828
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 264 to rsp 
		mov r10, [r12 - 264 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	pop rdi
	movsd xmm1, [rsp]
	add rsp, 8
	call _p
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _Q
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 56 to rsp 
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 280 to rsp 
		mov r10, [r12 - 280 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const887] ; 67.24
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 152 to rsp 
		mov r10, [r12 - 152 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 104 ; Local variables
	pop rbp
	ret

ab:
_ab:
	push rbp
	mov rbp, rsp
	sub rsp, 8
	movsd [rsp], xmm0
	push rdi
	sub rsp, 8
	; Moving 8 bytes from r12 - 240 to rsp 
		mov r10, [r12 - 240 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const888] ; 866
	push rax
	pop rax
	add rsp, 24 ; Local variables
	pop rbp
	ret
	sub rsp, 8 ; Add alignment
	mov rax, [rel const889] ; 30
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 280 to rsp 
		mov r10, [r12 - 280 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	pop rdi
	call _L
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 216 to rsp 
		mov r10, [r12 - 216 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	pop rdi
	call _L
	push rax
	sub rsp, 8 ; Add alignment
	call _Y
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 8 to rsp 
		mov r10, [rbp - 8 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	pop rdi
	pop rsi
	call _aa
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 248 to rsp 
		mov r10, [r12 - 248 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp 
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	call _J
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 256 to rsp 
		mov r10, [r12 - 256 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp 
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	add rsp, 88 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp ; end of jpl_main prelude
	mov rax, [rel const0] ; True
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const0] ; True
	push rax
	lea rdi, [rel const5] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	mov rax, [rel const12] ; False
	push rax
	mov rax, [rel const13] ; 477
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const14] ; 5.06
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const15] ; 1.43
	push rax
	mov rax, [rel const12] ; False
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	mov rax, [rel const16] ; 89.74
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const12] ; False
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const17] ; 298
	push rax
	mov rax, [rel const18] ; 73.94
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const19] ; 97.69
	push rax
	mov rax, [rel const20] ; 57
	push rax
	mov rax, [rel const21] ; 21.44
	push rax
	mov rax, [rel const22] ; 637
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const23] ; 86.54
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	mov rax, [rel const24] ; 73.93
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const25] ; 521
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const26] ; 76.2
	push rax
	mov rax, [rel const27] ; 56.19
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const28] ; 53.98
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const29] ; 64
	push rax
	mov rax, [rel const30] ; 852
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump4
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump4:
	cqo
	idiv r10
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump5
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
.jump5:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const32] ; 763
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const0] ; True
	push rax
	mov rax, [rel const33] ; 60.44
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const34] ; 658
	push rax
	mov rax, [rel const35] ; 885
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump6
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
.jump6:
	cqo
	idiv r10
	push rax
	mov rax, [rel const12] ; False
	push rax
	mov rax, [rel const36] ; 98.58
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const37] ; 77
	push rax
	mov rax, [rel const38] ; 399
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const39] ; 385
	push rax
	mov rax, [rel const40] ; 458
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump7
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump7:
	cqo
	idiv r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump8
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
.jump8:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const41] ; 47.63
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const42] ; 74.72
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const12] ; 0
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump9
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
.jump9:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const43] ; 62.39
	push rax
	mov rax, [rel const44] ; 696
	push rax
	mov rax, [rel const45] ; 86.88
	push rax
	mov rax, [rel const46] ; 278
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const47] ; 60.76
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const48] ; 66.85
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const49] ; 46.08
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const50] ; 54.48
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const51] ; 11.55
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const52] ; 93.47
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	mov rax, [rel const53] ; 40.56
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const54] ; 585
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const55] ; 59.6
	push rax
	mov rax, [rel const56] ; 40.8
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	mov rax, [rel const57] ; 22.48
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const58] ; 42.66
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const59] ; 73.99
	push rax
	mov rax, [rel const60] ; 91.95
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const61] ; 848
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const62] ; 89.48
	push rax
	mov rax, [rel const63] ; 72.87
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const64] ; 98.74
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const65] ; 62.59
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const66] ; 800
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const67] ; 17.24
	push rax
	mov rax, [rel const68] ; 958
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const69] ; 29.78
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const70] ; 221
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const71] ; 15.08
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const72] ; 550
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const73] ; 994
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const74] ; 64.38
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const75] ; 42.07
	push rax
	mov rax, [rel const76] ; 56.64
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const77] ; 455
	push rax
	mov rax, [rel const78] ; 3.64
	push rax
	mov rax, [rel const79] ; 63.23
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const80] ; 941
	push rax
	mov rax, [rel const81] ; 923
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump10
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump10:
	cqo
	idiv r10
	push rax
	mov rax, [rel const82] ; 440
	push rax
	mov rax, [rel const0] ; True
	push rax
	mov rax, [rel const83] ; 43.46
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const0] ; True
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const84] ; 655
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const85] ; 4.4
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const86] ; 67.17
	push rax
	mov rax, [rel const87] ; 43.88
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const88] ; 40.52
	push rax
	mov rax, [rel const89] ; 836
	push rax
	mov rax, [rel const90] ; 51.27
	push rax
	mov rax, [rel const91] ; 794
	push rax
	mov rax, [rel const92] ; 15.04
	push rax
	mov rax, [rel const93] ; 854
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const94] ; 625
	push rax
	mov rax, [rel const95] ; 103
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump11
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump11:
	cqo
	idiv r10
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const96] ; 91.51
	push rax
	mov rax, [rel const97] ; 72.86
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const98] ; 782
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const99] ; 28.7
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const100] ; 83.34
	push rax
	mov rax, [rel const101] ; 30.56
	push rax
	mov rax, [rel const102] ; 0.93
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const103] ; 32.31
	push rax
	mov rax, [rel const104] ; 86.37
	push rax
	mov rax, [rel const105] ; 89.82
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const106] ; 766
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const107] ; 808
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const108] ; 13.18
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const109] ; 55.52
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const110] ; 82.2
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const111] ; 741
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const112] ; 386
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	mov rax, [rel const113] ; 19.08
	push rax
	mov rax, [rel const114] ; 9.16
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const115] ; 69.13
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const116] ; 11.07
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const117] ; 839
	push rax
	mov rax, [rel const118] ; 841
	push rax
	mov rax, [rel const119] ; 537
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump12
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
.jump12:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const120] ; 58.98
	push rax
	mov rax, [rel const121] ; 68.85
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const122] ; 41.11
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const123] ; 584
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const124] ; 13.76
	push rax
	mov rax, [rel const125] ; 178
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const126] ; 0.8
	push rax
	mov rax, [rel const127] ; 404
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const128] ; 948
	push rax
	mov rax, [rel const129] ; 910
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const130] ; 331
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const131] ; 17.61
	push rax
	mov rax, [rel const132] ; 909
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const133] ; 110
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const134] ; 898
	push rax
	mov rax, [rel const135] ; 2
	push rax
	mov rax, [rel const136] ; 118
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump13
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump13:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const137] ; 422
	push rax
	mov rax, [rel const0] ; True
	push rax
	mov rax, [rel const60] ; 91.95
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	mov rax, [rel const138] ; 49.24
	push rax
	mov rax, [rel const139] ; 44.9
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const140] ; 249
	push rax
	mov rax, [rel const141] ; 59.18
	push rax
	mov rax, [rel const142] ; 0.2
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const143] ; 33
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const144] ; 127
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const145] ; 812
	push rax
	mov rax, [rel const12] ; False
	push rax
	mov rax, [rel const146] ; 17.02
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const147] ; 579
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const148] ; 98.81
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const149] ; 14.31
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const150] ; 423
	push rax
	mov rax, [rel const151] ; 15.22
	push rax
	mov rax, [rel const152] ; 57.23
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const153] ; 2.78
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const154] ; 179
	push rax
	mov rax, [rel const12] ; False
	push rax
	mov rax, [rel const155] ; 12.9
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const156] ; 47.24
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const157] ; 41
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const158] ; 88.11
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const159] ; 81.37
	push rax
	mov rax, [rel const160] ; 69.93
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const161] ; 957
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const162] ; 19.7
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const163] ; 49
	push rax
	mov rax, [rel const12] ; False
	push rax
	mov rax, [rel const164] ; 50.02
	push rax
	mov rax, [rel const0] ; True
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const165] ; 881
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	mov rax, [rel const166] ; 97.1
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const0] ; True
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const167] ; 686
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const13] ; 477
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const168] ; 27.42
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const169] ; 28.99
	push rax
	mov rax, [rel const170] ; 30.14
	push rax
	mov rax, [rel const171] ; 14.43
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const172] ; 997
	push rax
	mov rax, [rel const173] ; 29.57
	push rax
	mov rax, [rel const174] ; 756
	push rax
	mov rax, [rel const135] ; 2
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const175] ; 8.72
	push rax
	mov rax, [rel const176] ; 4.11
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const177] ; 74.96
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const178] ; 678
	push rax
	mov rax, [rel const179] ; 963
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump14
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
.jump14:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const12] ; False
	push rax
	mov rax, [rel const180] ; 26.8
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	mov rax, [rel const12] ; False
	push rax
	mov rax, [rel const181] ; 44.27
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const12] ; False
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const182] ; 43.32
	push rax
	mov rax, [rel const183] ; 126
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const184] ; 37.63
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const185] ; 206
	push rax
	mov rax, [rel const186] ; 890
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump15
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
.jump15:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const187] ; 47.03
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const188] ; 613
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const189] ; 535
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const190] ; 19.28
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump16
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
.jump16:
	cqo
	idiv r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	mov rax, [rel const191] ; 36.12
	push rax
	mov rax, [rel const192] ; 80.02
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const193] ; 534
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const194] ; 83.06
	push rax
	mov rax, [rel const195] ; 147
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const12] ; False
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const196] ; 469
	push rax
	mov rax, [rel const197] ; 789
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const198] ; 505
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const199] ; 10.39
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump17
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump17:
	cqo
	idiv r10
	push rax
	mov rax, [rel const200] ; 607
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const201] ; 675
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const202] ; 525
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const91] ; 794
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const203] ; 60.66
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const204] ; 58.55
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const205] ; 749
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const206] ; 55.01
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const207] ; 718
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	mov rax, [rel const208] ; 97.85
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const209] ; 46.78
	push rax
	mov rax, [rel const210] ; 227
	push rax
	mov rax, [rel const211] ; 92.68
	push rax
	mov rax, [rel const212] ; 774
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const0] ; True
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const0] ; True
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const213] ; 725
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const214] ; 248
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const215] ; 23.28
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const216] ; 25.66
	push rax
	mov rax, [rel const217] ; 79.46
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const218] ; 24.2
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const219] ; 28.52
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const220] ; 54.06
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const221] ; 254
	push rax
	mov rax, [rel const222] ; 47.84
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const223] ; 660
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const0] ; True
	push rax
	mov rax, [rel const4] ; 45.5
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	mov rax, [rel const224] ; 959
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump18
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
.jump18:
	cqo
	idiv r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const225] ; 66.6
	push rax
	mov rax, [rel const226] ; 737
	push rax
	mov rax, [rel const33] ; 60.44
	push rax
	mov rax, [rel const227] ; 879
	push rax
	mov rax, [rel const228] ; 16.22
	push rax
	mov rax, [rel const229] ; 421
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const230] ; 451
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump19
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump19:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump20
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
.jump20:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const44] ; 696
	push rax
	mov rax, [rel const12] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	mov rax, [rel const231] ; 11.82
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const232] ; 827
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump21
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump21:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const233] ; 261
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump22
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump22:
	cqo
	idiv r10
	push rax
	mov rax, [rel const234] ; 266
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const235] ; 793
	push rax
	mov rax, [rel const94] ; 625
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump23
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
.jump23:
	cqo
	idiv r10
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const236] ; 787
	push rax
	mov rax, [rel const237] ; 84.54
	push rax
	mov rax, [rel const238] ; 45.94
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	mov rax, [rel const239] ; 13.51
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const240] ; 536
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const241] ; 68.38
	push rax
	mov rax, [rel const0] ; True
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const242] ; 92.35
	push rax
	mov rax, [rel const150] ; 423
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const243] ; 5.98
	push rax
	mov rax, [rel const244] ; 46.94
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const245] ; 956
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	mov rax, [rel const246] ; 0.18
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const247] ; 288
	push rax
	mov rax, [rel const248] ; 973
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const249] ; 27.78
	push rax
	mov rax, [rel const250] ; 23.25
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const251] ; 18.22
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const0] ; True
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const252] ; 452
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const253] ; 262
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump24
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump24:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const254] ; 4.55
	push rax
	mov rax, [rel const255] ; 37
	push rax
	mov rax, [rel const256] ; 73.55
	push rax
	mov rax, [rel const257] ; 115
	push rax
	mov rax, [rel const214] ; 248
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const258] ; 1.28
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump25
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump25:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const259] ; 396
	push rax
	mov rax, [rel const260] ; 53
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const261] ; 647
	push rax
	mov rax, [rel const262] ; 13
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const263] ; 857
	push rax
	mov rax, [rel const12] ; False
	push rax
	mov rax, [rel const264] ; 61.15
	push rax
	mov rax, [rel const0] ; True
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	mov rax, [rel const265] ; 64.91
	push rax
	mov rax, [rel const266] ; 861
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const267] ; 64.82
	push rax
	mov rax, [rel const268] ; 797
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const269] ; 156
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const270] ; 81.87
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const271] ; 418
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const272] ; 2.67
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	mov rax, [rel const273] ; 34.36
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const274] ; 75.16
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const275] ; 158
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const25] ; 521
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump26
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump26:
	cqo
	idiv r10
	push rax
	mov rax, [rel const276] ; 93.33
	push rax
	mov rax, [rel const277] ; 56.96
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const278] ; 59.25
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const279] ; 144
	push rax
	mov rax, [rel const280] ; 13.3
	push rax
	mov rax, [rel const281] ; 784
	push rax
	mov rax, [rel const282] ; 349
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const283] ; 936
	push rax
	mov rax, [rel const284] ; 132
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const285] ; 45.09
	push rax
	mov rax, [rel const286] ; 674
	push rax
	mov rax, [rel const287] ; 80.18
	push rax
	mov rax, [rel const288] ; 62.8
	push rax
	mov rax, [rel const289] ; 92.84
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const290] ; 582
	push rax
	mov rax, [rel const260] ; 53
	push rax
	mov rax, [rel const12] ; False
	push rax
	mov rax, [rel const291] ; 67.65
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump27
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump27:
	cqo
	idiv r10
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const292] ; 96.35
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const293] ; 996
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const294] ; 76.08
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const295] ; 633
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const296] ; 35.74
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const297] ; 12.2
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const298] ; 95.07
	push rax
	mov rax, [rel const299] ; 43.47
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const201] ; 675
	push rax
	mov rax, [rel const300] ; 281
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const301] ; 804
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump28
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump28:
	cqo
	idiv r10
	push rax
	mov rax, [rel const302] ; 78.49
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const303] ; 81.78
	push rax
	mov rax, [rel const304] ; 247
	push rax
	mov rax, [rel const305] ; 13.33
	push rax
	mov rax, [rel const306] ; 87.14
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const307] ; 484
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const308] ; 425
	push rax
	mov rax, [rel const309] ; 311
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const310] ; 380
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const311] ; 9.49
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const312] ; 1.07
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const313] ; 947
	push rax
	mov rax, [rel const314] ; 754
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump29
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
.jump29:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const315] ; 32.83
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const316] ; 89.38
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const317] ; 481
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	mov rax, [rel const318] ; 89.94
	push rax
	mov rax, [rel const0] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	mov rax, [rel const319] ; 57.1
	push rax
	mov rax, [rel const320] ; 88.82
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	mov rax, [rel const321] ; 75.8
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const322] ; 760
	push rax
	mov rax, [rel const0] ; True
	push rax
	mov rax, [rel const323] ; 23.56
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const324] ; 32
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	mov rax, [rel const325] ; 34.34
	push rax
	mov rax, [rel const232] ; 827
	push rax
	mov rax, [rel const326] ; 946
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const327] ; 145
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump30
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
.jump30:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	mov rax, [rel const328] ; 77.21
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const329] ; 38.75
	push rax
	mov rax, [rel const330] ; 67.52
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const331] ; 52.74
	push rax
	mov rax, [rel const332] ; 43.6
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const230] ; 451
	push rax
	mov rax, [rel const333] ; 49.19
	push rax
	mov rax, [rel const334] ; 692
	push rax
	mov rax, [rel const335] ; 17.87
	push rax
	mov rax, [rel const336] ; 372
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const337] ; 40.11
	push rax
	mov rax, [rel const338] ; 608
	push rax
	mov rax, [rel const339] ; 33.71
	push rax
	mov rax, [rel const340] ; 183
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const341] ; 141
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	mov rax, [rel const342] ; 81.19
	push rax
	mov rax, [rel const343] ; 29.77
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const344] ; 44.98
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const345] ; 74.59
	push rax
	mov rax, [rel const346] ; 342
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const347] ; 90.83
	push rax
	mov rax, [rel const1] ; 992
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const348] ; 99.81
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const1] ; 992
	push rax
	mov rax, [rel const349] ; 84.18
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const350] ; 432
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const351] ; 17.1
	push rax
	mov rax, [rel const12] ; False
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const352] ; 29.81
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const91] ; 794
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const353] ; 94.96
	push rax
	mov rax, [rel const12] ; False
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const354] ; 59.72
	push rax
	mov rax, [rel const355] ; 80.53
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const356] ; 44.35
	push rax
	mov rax, [rel const357] ; 86.11
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const79] ; 63.23
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const200] ; 607
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const185] ; 206
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const358] ; 34.27
	push rax
	mov rax, [rel const359] ; 73.53
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const360] ; 44.12
	push rax
	mov rax, [rel const361] ; 34.18
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const362] ; 64.92
	push rax
	mov rax, [rel const363] ; 327
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const364] ; 949
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const365] ; 73.96
	push rax
	mov rax, [rel const366] ; 16.01
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const346] ; 342
	push rax
	mov rax, [rel const367] ; 120
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const368] ; 362
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const334] ; 692
	push rax
	mov rax, [rel const0] ; True
	push rax
	mov rax, [rel const369] ; 56.88
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const370] ; 69.97
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const371] ; 10.74
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const372] ; 939
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const373] ; 60.95
	push rax
	mov rax, [rel const374] ; 307
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const375] ; 90.39
	push rax
	mov rax, [rel const376] ; 73.78
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const377] ; 16.64
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const378] ; 989
	push rax
	mov rax, [rel const379] ; 98.07
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const380] ; 18.85
	push rax
	mov rax, [rel const381] ; 22.03
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const382] ; 638
	push rax
	mov rax, [rel const383] ; 84.57
	push rax
	mov rax, [rel const384] ; 225
	push rax
	mov rax, [rel const385] ; 552
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const386] ; 42.24
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const387] ; 299
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const531] ; 664
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const532] ; 419
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const533] ; 97.07
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const534] ; 59.68
	push rax
	mov rax, [rel const535] ; 63.75
	push rax
	mov rax, [rel const536] ; 91.56
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const537] ; 75.47
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const538] ; 25.22
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const539] ; 234
	push rax
	mov rax, [rel const34] ; 658
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const540] ; 97.16
	push rax
	mov rax, [rel const541] ; 984
	push rax
	mov rax, [rel const542] ; 1.47
	push rax
	mov rax, [rel const543] ; 73.57
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const544] ; 32.94
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const545] ; 652
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const12] ; False
	push rax
	mov rax, [rel const546] ; 22.59
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump47
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump47:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const547] ; 5.75
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const548] ; 649
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	mov rax, [rel const0] ; True
	push rax
	lea rdi, [rel const5] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	add rsp, 8 ; Remove alignment
	sub rsp, 8 ; Add alignment
	sub rsp, 8 ; Add alignment
	mov rax, [rel const778] ; 37.59
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const779] ; 17.0
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const81] ; 923
	push rax
	mov rax, [rel const780] ; 38
	push rax
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	lea rdi, [rel const781] ; '(FloatType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const795] ; 93.54
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const796] ; 751
	push rax
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const797] ; 555
	push rax
	mov rax, [rel const798] ; 792
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump76
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump76:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const253] ; 262
	push rax
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const799] ; 31.96
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	call _l
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp 
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const124] ; 13.76
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const800] ; 460
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const801] ; 829
	push rax
	mov rax, [rel const802] ; 224
	push rax
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const803] ; 67.21
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	pop rdi
	movsd xmm1, [rsp]
	add rsp, 8
	call _p
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const804] ; 18.61
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const805] ; 9
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const806] ; 29
	push rax
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const17] ; 298
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	call _l
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const807] ; 15.19
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const12] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	mov rax, [rel const808] ; 21.82
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	pop rsi
	call _o
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	call _l
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const782] ; 7.11
	push rax
	mov rax, [rel const34] ; 658
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const809] ; 195
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const810] ; 504
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	mov rax, [rel const811] ; 69.66
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const812] ; 400
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump77
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump77:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump78
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
.jump78:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump79
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump79:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const813] ; 51.88
	push rax
	mov rax, [rel const406] ; 50.77
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const814] ; 88.21
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	mov rax, [rel const815] ; 643
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump80
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
.jump80:
	cqo
	idiv r10
	push rax
	mov rax, [rel const816] ; 95
	push rax
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	call _l
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp 
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	call _l
	push rax
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const817] ; 44.78
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	pop rdi
	movsd xmm1, [rsp]
	add rsp, 8
	call _p
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const818] ; 4.03
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const819] ; 26
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump81
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump81:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const820] ; 889
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	pop rsi
	call _o
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const821] ; 13.98
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const822] ; 67.74
	push rax
	mov rax, [rel const823] ; 48.75
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const824] ; 93.76
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const520] ; 82
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp 
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const825] ; 53.62
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	call _l
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const826] ; 846
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const827] ; 53.28
	push rax
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const828] ; 60.89
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const829] ; 33.03
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	pop rsi
	call _o
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	call _l
	push rax
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const830] ; 89.59
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	call _l
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const77] ; 455
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const831] ; 636
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump82
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const2] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump82:
	cqo
	idiv r10
	push rax
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const832] ; 36.85
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const833] ; 542
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	pop rsi
	call _o
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const622] ; 570
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	pop rsi
	call _o
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const834] ; 590
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const835] ; 34.92
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const828] ; 60.89
	push rax
	mov rax, [rel const836] ; 33.02
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	call _l
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump83
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const31] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump83:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	call _l
	push rax
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	pop rdi
	movsd xmm1, [rsp]
	add rsp, 8
	call _p
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	call _l
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	call _l
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	mov rax, [rel const837] ; 38.25
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const838] ; 694
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	pop rdi
	movsd xmm1, [rsp]
	add rsp, 8
	call _p
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const839] ; 559
	push rax
	mov rax, [rel const840] ; 78.6
	push rax
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	pop rsi
	call _o
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const841] ; 71.09
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const842] ; 11.93
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const843] ; 65.04
	push rax
	sub rsp, 8 ; Add alignment
	call _l
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	pop rsi
	call _o
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	call _l
	push rax
	mov rax, [rel const844] ; 868
	push rax
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	pop rdi
	movsd xmm1, [rsp]
	add rsp, 8
	call _p
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const9] ; 777
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const845] ; 73.22
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp 
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const846] ; 389
	push rax
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const847] ; 61.01
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const848] ; 381
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const849] ; 123
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const850] ; 487
	push rax
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const393] ; 130
	push rax
	mov rax, [rel const851] ; 40.17
	push rax
	mov rax, [rel const852] ; 384
	push rax
	call _l
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	pop rdi
	movsd xmm1, [rsp]
	add rsp, 8
	call _p
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const281] ; 784
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const853] ; 40.61
	push rax
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const854] ; 46.32
	push rax
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const855] ; 301
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const856] ; 10.72
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const466] ; 87
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const857] ; 693
	push rax
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	mov rax, [rel const858] ; 72.09
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const859] ; 131
	push rax
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	pop rsi
	call _o
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp 
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const860] ; 557
	push rax
	sub rsp, 8 ; Add alignment
	mov rax, [rel const861] ; 920
	push rax
	mov rax, [rel const12] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	mov rax, [rel const862] ; 722
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const863] ; 70.87
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const425] ; 302
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const864] ; 74.67
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const865] ; 48.78
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const866] ; 397
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const867] ; 681
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const724] ; 286
	push rax
	mov rax, [rel const868] ; 29.14
	push rax
	mov rax, [rel const869] ; 24.69
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	mov rax, [rel const870] ; 77.86
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8 ; Add alignment
	call _l
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	pop rdi
	movsd xmm1, [rsp]
	add rsp, 8
	call _p
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const271] ; 418
	push rax
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	call _l
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const871] ; 745
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp 
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const872] ; 71.96
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 112 to rsp 
		mov r10, [rbp - 112 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 112 to rsp 
		mov r10, [rbp - 112 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 112 to rsp 
		mov r10, [rbp - 112 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const873] ; 880
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const874] ; 435
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rdi
	pop rsi
	call _o
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const134] ; 898
	push rax
	pop rax
	neg rax
	push rax
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	movsd xmm1, [rsp]
	add rsp, 8
	call _d
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _n
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rdi
	movsd xmm0, [rsp]
	add rsp, 8
	pop rsi
	pop rdx
	call _c
	add rsp, 8 ; Remove alignment
	push rax
	pop rdi
	pop rsi
	call _o
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp 
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp 
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	call _h
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 160 to rsp 
		mov r10, [rbp - 160 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	lea rdi, [rel const5] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const875] ; 51.48
	push rax
	mov rax, [rel const12] ; False
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 112 to rsp 
		mov r10, [rbp - 112 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 184 to rsp 
		mov r10, [rbp - 184 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp 
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp 
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 168 to rsp 
		mov r10, [rbp - 168 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 192 to rsp 
		mov r10, [rbp - 192 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 264 to rsp 
		mov r10, [rbp - 264 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const0] ; True
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 272 to rsp 
		mov r10, [rbp - 272 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 184 to rsp 
		mov r10, [rbp - 184 + 0]
		mov [rsp + 0], r10
	lea rdi, [rel const5] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	sub rsp, 8
	; Moving 8 bytes from rbp - 136 to rsp 
		mov r10, [rbp - 136 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp 
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	lea rdi, [rel const5] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	add rsp, 312 ; Local variables
	pop r12 ; begin jpl_main postlude
	pop rbp
	ret

