global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 8.0
const1: dq 7.0
const2: dq 6.0
const3: dq 5.0
const4: dq 4.0
const5: dq 3.0
const6: dq 2.0
const7: dq 1.0
const8: dq 1
const9: db `negative array index`, 0
const10: db `index too large`, 0
const11: db `(BoolType)`, 0

section .text
jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp ; end of jpl_main prelude
	mov rax, [rel const0] ; 8.0
	push rax
	mov rax, [rel const1] ; 7.0
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	mov rax, [rel const2] ; 6.0
	push rax
	mov rax, [rel const3] ; 5.0
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	mov rax, [rel const4] ; 4.0
	push rax
	mov rax, [rel const5] ; 3.0
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	mov rax, [rel const6] ; 2.0
	push rax
	mov rax, [rel const7] ; 1.0
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	mov rdi, 32
	sub rsp, 8 ; Add alignment
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 32 bytes from rsp to rax 
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	push rax
	mov rax, 4
	push rax
	sub rsp, 16
	; Moving 16 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const8] ; 1
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump1
	lea rdi, [rel const9] ; 'negative array index'
	call _fail_assertion
.jump1:
	cmp rax, [rsp + 8]
	jl .jump2
	lea rdi, [rel const10] ; 'index too large'
	call _fail_assertion
.jump2:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	lea rdi, [rel const11] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	add rsp, 16 ; Local variables
	pop r12 ; begin jpl_main postlude
	pop rbp
	ret

