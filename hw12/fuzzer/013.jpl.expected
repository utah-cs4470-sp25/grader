global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 734
const1: db `non-positive loop bound`, 0
const2: dq 981
const3: dq 928
const4: dq 5
const5: dq 66
const6: dq 474
const7: db `overflow computing array size`, 0
const8: dq 0
const9: dq 201
const10: dq 740
const11: dq 721
const12: dq 0.13
const13: dq 72.05
const14: dq 303
const15: dq 172
const16: dq 360
const17: db `negative array index`, 0
const18: db `index too large`, 0
const19: dq 605
const20: dq 790
const21: dq 309
const22: dq 460
const23: dq 736
const24: dq 29
const25: dq 552
const26: db `mod by zero`, 0
const27: dq 1
const28: dq 53
const29: dq 174
const30: dq 959
const31: dq 774
const32: dq 342
const33: dq 651
const34: dq 645
const35: dq 220
const36: dq 670
const37: dq 389
const38: dq 159
const39: dq 694
const40: dq 269
const41: dq 920
const42: dq 743
const43: dq 948
const44: db `divide by zero`, 0
const45: dq 162
const46: dq 505
const47: dq 495
const48: dq 143
const49: dq 881
const50: dq 787
const51: dq 597
const52: dq 182
const53: dq 195
const54: dq 946
const55: dq 187
const56: dq 411
const57: dq 421
const58: dq 83
const59: dq 15
const60: dq 723
const61: dq 388
const62: dq 490
const63: dq 972
const64: dq 680
const65: dq 291
const66: dq 183
const67: dq 620
const68: dq 337
const69: dq 437
const70: dq 921
const71: dq 622
const72: dq 125
const73: dq 104
const74: dq 466
const75: dq 70.06
const76: dq 58.25
const77: dq 507
const78: dq 273
const79: dq 660
const80: dq 247
const81: dq 456
const82: dq 92.92
const83: dq 89.09
const84: dq 965
const85: dq 852
const86: dq 232
const87: dq 314
const88: dq 176
const89: db `(BoolType)`, 0
const90: dq 185
const91: dq 204
const92: dq 67.84
const93: dq 826
const94: dq 623
const95: dq 374
const96: dq 530
const97: dq 38.6
const98: dq 9.52
const99: dq 194
const100: dq 233
const101: dq 116
const102: dq 497
const103: dq 935
const104: dq 356
const105: dq 476
const106: dq 148
const107: dq 24
const108: dq 957
const109: dq 199
const110: dq 675
const111: dq 62.25
const112: dq 43.34
const113: dq 38
const114: dq 227
const115: dq 85.43
const116: dq 716
const117: dq 290
const118: dq 625
const119: dq 225
const120: dq 462
const121: dq 43.08
const122: dq 211
const123: dq 56.59
const124: dq 472
const125: dq 256
const126: dq 87
const127: dq 451
const128: dq 18.8
const129: dq 76.8
const130: dq 52
const131: dq 34
const132: dq 688
const133: dq 82.57
const134: dq 361
const135: dq 663
const136: dq 147
const137: dq 945
const138: dq 580
const139: dq 40
const140: dq 747
const141: dq 189
const142: dq 726
const143: dq 796
const144: dq 80.17
const145: dq 83.09
const146: dq 4.02
const147: dq 96.34
const148: dq 16.96
const149: dq 56.43
const150: dq 30.55
const151: dq 19.11
const152: dq 67.96
const153: dq 34.9
const154: dq 469
const155: dq 428
const156: dq 485
const157: dq 294
const158: dq 982
const159: dq 838
const160: dq 628
const161: dq 534
const162: dq 334
const163: dq 512
const164: dq 216
const165: dq 617
const166: dq 168
const167: dq 839
const168: dq 336
const169: dq 986
const170: dq 436
const171: dq 31.02
const172: dq 833
const173: dq 630
const174: dq 53.3
const175: dq 90.54
const176: dq 858
const177: dq 266
const178: dq 593
const179: dq 95.8
const180: dq 25.66
const181: dq 9.36
const182: dq 824
const183: dq 267
const184: dq 28.87
const185: dq 16.06
const186: dq 48.52
const187: dq 668
const188: dq 477
const189: dq 773
const190: dq 613
const191: dq 396
const192: dq 995
const193: dq 58.31
const194: dq 311
const195: dq 295
const196: dq 175
const197: dq 482
const198: dq 637
const199: dq 408
const200: dq 511
const201: dq 214
const202: dq 867
const203: dq 933
const204: dq 62.99
const205: dq 95.14
const206: dq 25.21
const207: dq 52.79
const208: dq 23.09
const209: dq 24.21
const210: dq 614
const211: dq 646
const212: dq 31.29
const213: dq 250
const214: dq 71.36
const215: dq 829
const216: dq 78.81
const217: dq 83.77
const218: dq 719
const219: dq 718
const220: dq 67
const221: dq 50.82
const222: dq 38.74
const223: dq 42.96
const224: dq 581
const225: dq 786
const226: dq 43

section .text
e:
_e:
	push rbp
	mov rbp, rsp
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'f'
	mov rax, [rel const27] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump232
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	jmp .jump233
.jump232:
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
.jump233:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump234
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump234:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool 
	imul rdi, [rsp + 0 + 0] ; multiply by (if true then c else b) 
	jno .jump235
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump235:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump236: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const8] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'f'
	add qword [rsp + 0], 1
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump236 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump237
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump237:
	cmp rax, [rsp + 8]
	jl .jump238
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump238:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump239
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'h'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'h'
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump241
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump241:
	; Computing bound for 'g'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump242
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump242:
	; Computing bound for 'f'
	mov rax, [rel const90] ; 185
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump243
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump243:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'h' to 0
	mov rax, 0
	push rax
	; Initialize 'g' to 0
	mov rax, 0
	push rax
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump244: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment 'h'
	add qword [rsp + 16], 1
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump244 ; If h < bound, next iter
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump244 ; If g < bound, next iter
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump244 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump245
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump245:
	; Computing bound for 'g'
	sub rsp, 24
	; Moving 24 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const91] ; 204
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump246
	sub asp, 8 ; Add alignment
	lea rdi, [rel const26] ; 'mod by zero'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump246:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump247
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump247:
	cmp rax, [rsp + 16]
	jl .jump248
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump248:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump249
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump249:
	cmp rax, [rsp + 24]
	jl .jump250
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump250:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump251
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump251:
	; Computing bound for 'f'
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump252
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump252:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'h' to 0
	mov rax, 0
	push rax
	; Initialize 'g' to 0
	mov rax, 0
	push rax
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump253: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const92] ; 67.84
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 48] ; Load sum
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment 'h'
	add qword [rsp + 16], 1
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump253 ; If h < bound, next iter
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump253 ; If g < bound, next iter
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump253 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'h'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'f'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump254
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump254:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump255: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'f'
	add qword [rsp + 0], 1
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump255 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump256
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump256:
	; Computing bound for 'g'
	mov rax, [rel const93] ; 826
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump257
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump257:
	; Computing bound for 'f'
	sub rsp, 24
	; Moving 24 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const94] ; 623
	push rax
	mov rax, [rel const95] ; 374
	push rax
	mov rax, [rel const96] ; 530
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump258
	lea rdi, [rel const44] ; 'divide by zero'
	call _fail_assertion
.jump258:
	cqo
	idiv r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump259
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump259:
	cmp rax, [rsp + 16]
	jl .jump260
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump260:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump261
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump261:
	cmp rax, [rsp + 24]
	jl .jump262
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump262:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump263
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump263:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'h' to 0
	mov rax, 0
	push rax
	; Initialize 'g' to 0
	mov rax, 0
	push rax
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump264: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const8] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump265
	mov rax, [rel const97] ; 38.6
	push rax
	jmp .jump266
.jump265:
	mov rax, [rel const98] ; 9.52
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
.jump266:
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 48] ; Load sum
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment 'h'
	add qword [rsp + 16], 1
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump264 ; If h < bound, next iter
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump264 ; If g < bound, next iter
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump264 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump267
	mov rax, [rel const8] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump269
	sub rsp, 24
	; Moving 24 bytes from r12 - 56 to rsp 
		mov r10, [r12 - 56 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 56 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from r12 - 56 to rsp 
		mov r10, [r12 - 56 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 56 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	mov rdi, 48
	call _jpl_alloc
	; Moving 48 bytes from rsp to rax 
		mov r10, [rsp + 40]
		mov [rax + 40], r10
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 48
	push rax
	mov rax, 2
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump271
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump271:
	cmp rax, [rsp + 8]
	jl .jump272
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump272:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 24
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 24
	; Moving 24 bytes from rax to rsp 
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump270
.jump269:
	mov rax, [rel const27] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump273
	mov rax, [rel const8] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump275
	sub rsp, 24
	; Moving 24 bytes from r12 - 56 to rsp 
		mov r10, [r12 - 56 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 56 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	jmp .jump276
.jump275:
	sub rsp, 24
	; Moving 24 bytes from r12 - 56 to rsp 
		mov r10, [r12 - 56 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 56 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
.jump276:
	jmp .jump274
.jump273:
	sub rsp, 24
	; Moving 24 bytes from r12 - 56 to rsp 
		mov r10, [r12 - 56 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 56 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
.jump274:
.jump270:
	jmp .jump268
.jump267:
	sub rsp, 24
	; Moving 24 bytes from r12 - 56 to rsp 
		mov r10, [r12 - 56 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 56 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
.jump268:
	jmp .jump240
.jump239:
	mov rax, [rel const27] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump277
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'g'
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump279
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump279:
	; Computing bound for 'f'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'g'
	mov rax, [rel const99] ; 194
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump280
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump280:
	; Computing bound for 'f'
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump281
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump281:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'g' to 0
	mov rax, 0
	push rax
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump282: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'g'
	add qword [rsp + 8], 1
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump282 ; If g < bound, next iter
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump282 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump283
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump283:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool 
imul rdi, [rsp + 0 + 0] ; multiply by (sum[f : b, g : 194] b) 
	jno .jump284
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump284:
	imul rdi, [rsp + 0 + 8] ; multiply by b 
	jno .jump285
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump285:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'g' to 0
	mov rax, 0
	push rax
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump286: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const27] ; True
	push rax
	mov rax, [rel const27] ; True
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'g'
	add qword [rsp + 8], 1
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump286 ; If g < bound, next iter
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump286 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'h'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump287
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump287:
	; Computing bound for 'g'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump288
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump288:
	; Computing bound for 'f'
	mov rax, [rel const100] ; 233
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump289
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump289:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by 233 
	jno .jump290
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump290:
	imul rdi, [rsp + 0 + 8] ; multiply by c 
	jno .jump291
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump291:
	imul rdi, [rsp + 0 + 16] ; multiply by c 
	jno .jump292
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump292:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'h' to 0
	mov rax, 0
	push rax
	; Initialize 'g' to 0
	mov rax, 0
	push rax
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump293: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'h'
	add qword [rsp + 16], 1
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump293 ; If h < bound, next iter
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump293 ; If g < bound, next iter
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump293 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	mov rax, [rel const101] ; 116
	push rax
	mov rax, [rel const16] ; 360
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump294
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump294:
	cmp rax, [rsp + 24]
	jl .jump295
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump295:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump296
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump296:
	cmp rax, [rsp + 32]
	jl .jump297
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump297:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump298
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump298:
	cmp rax, [rsp + 40]
	jl .jump299
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump299:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'g'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump300
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump300:
	; Computing bound for 'f'
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump301
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump301:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'g' to 0
	mov rax, 0
	push rax
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump302: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'g'
	add qword [rsp + 8], 1
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump302 ; If g < bound, next iter
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump302 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump303
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump303:
	cmp rax, [rsp + 16]
	jl .jump304
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump304:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump305
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump305:
	cmp rax, [rsp + 24]
	jl .jump306
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump306:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump278
.jump277:
	mov rax, [rel const8] ; False
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const102] ; 497
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
.jump278:
	pop rax
	cmp rax, 0
	je .jump307
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'g'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'g'
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump309
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump309:
	; Computing bound for 'f'
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump310
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump310:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'g' to 0
	mov rax, 0
	push rax
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump311: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'g'
	add qword [rsp + 8], 1
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump311 ; If g < bound, next iter
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump311 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rel const10] ; 740
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump312
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump312:
	; Computing bound for 'f'
	mov rax, [rel const27] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump313
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	jmp .jump314
.jump313:
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
.jump314:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump315
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump315:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof int[] 
	imul rdi, [rsp + 0 + 0] ; multiply by (if true then b else c) 
	jno .jump316
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump316:
imul rdi, [rsp + 0 + 8] ; multiply by (- (740 - (sum[f : b, g : b] g))) 
	jno .jump317
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump317:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'g' to 0
	mov rax, 0
	push rax
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump318: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'h'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump319
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump319:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by c 
	jno .jump320
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump320:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'h' to 0
	mov rax, 0
	push rax
.jump321: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump322
	lea rdi, [rel const26] ; 'mod by zero'
	call _fail_assertion
.jump322:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'h'
	add qword [rsp + 0], 1
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump321 ; If h < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 16
	add rax, [rsp + 48]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment 'g'
	add qword [rsp + 8], 1
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump318 ; If g < bound, next iter
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump318 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump308
.jump307:
	sub rsp, 24
	; Moving 24 bytes from r12 - 56 to rsp 
		mov r10, [r12 - 56 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 56 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
.jump308:
.jump240:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'k'
	mov rax, [rel const27] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump323
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	jmp .jump324
.jump323:
	mov rax, [rel const103] ; 935
	push rax
	pop rax
	neg rax
	push rax
.jump324:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump325
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump325:
	; Computing bound for 'j'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'j'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump326
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump326:
	; Computing bound for 'i'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'i'
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump327
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump327:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'i' to 0
	mov rax, 0
	push rax
.jump328: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'i'
	add qword [rsp + 0], 1
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump328 ; If i < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump329
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump329:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'j' to 0
	mov rax, 0
	push rax
	; Initialize 'i' to 0
	mov rax, 0
	push rax
.jump330: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'l'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump331
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump331:
	; Computing bound for 'k'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump332
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump332:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'l' to 0
	mov rax, 0
	push rax
	; Initialize 'k' to 0
	mov rax, 0
	push rax
.jump333: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'l'
	add qword [rsp + 8], 1
	; Compare l to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump333 ; If l < bound, next iter
	mov qword [rsp + 8], 0 ; l = 0
	add qword [rsp + 0], 1 ; k++
	; Compare k to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump333 ; If k < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'j'
	add qword [rsp + 8], 1
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump330 ; If j < bound, next iter
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump330 ; If i < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump334
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump334:
	; Computing bound for 'i'
	mov rax, [rel const104] ; 356
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump335
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump335:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by 356 
	jno .jump336
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump336:
imul rdi, [rsp + 0 + 8] ; multiply by (sum[i : (sum[i : h] i), j : g] (sum[k : g, l : c] k)) 
	jno .jump337
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump337:
	imul rdi, [rsp + 0 + 16] ; multiply by (if true then h else (- 935)) 
	jno .jump338
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump338:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'k' to 0
	mov rax, 0
	push rax
	; Initialize 'j' to 0
	mov rax, 0
	push rax
	; Initialize 'i' to 0
	mov rax, 0
	push rax
.jump339: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const105] ; 476
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rdi, 24
	sub asp, 8 ; Add alignment
	call _jpl_alloc
	add asp, 8 ; Remove alignment
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 3
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump340
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump340:
	cmp rax, [rsp + 8]
	jl .jump341
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump341:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'k'
	add qword [rsp + 16], 1
	; Compare k to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump339 ; If k < bound, next iter
	mov qword [rsp + 16], 0 ; k = 0
	add qword [rsp + 8], 1 ; j++
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump339 ; If j < bound, next iter
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump339 ; If i < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const106] ; 148
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump342
	lea rdi, [rel const44] ; 'divide by zero'
	call _fail_assertion
.jump342:
	cqo
	idiv r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump343
	lea rdi, [rel const26] ; 'mod by zero'
	call _fail_assertion
.jump343:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const107] ; 24
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump344
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump344:
	cmp rax, [rsp + 24]
	jl .jump345
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump345:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump346
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump346:
	cmp rax, [rsp + 32]
	jl .jump347
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump347:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump348
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump348:
	cmp rax, [rsp + 40]
	jl .jump349
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump349:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'i'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump350
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump350:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'i' to 0
	mov rax, 0
	push rax
.jump351: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'j'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'k'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump352
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump352:
	; Computing bound for 'j'
	mov rax, [rel const108] ; 957
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump353
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump353:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'k' to 0
	mov rax, 0
	push rax
	; Initialize 'j' to 0
	mov rax, 0
	push rax
.jump354: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'k'
	add qword [rsp + 8], 1
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump354 ; If k < bound, next iter
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump354 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump355
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump355:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'j' to 0
	mov rax, 0
	push rax
.jump356: ; Begin body of loop
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rel const8] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump357
	mov rax, [rel const109] ; 199
	push rax
	jmp .jump358
.jump357:
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
.jump358:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump359
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump359:
	cmp rax, [rsp + 16]
	jl .jump360
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump360:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump361
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump361:
	cmp rax, [rsp + 24]
	jl .jump362
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump362:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'j'
	add qword [rsp + 0], 1
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump356 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'i'
	add qword [rsp + 0], 1
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump351 ; If i < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	add rsp, 24 ; Local variables
	pop rbp
	ret
	sub rsp, 24
	; Moving 24 bytes from r12 - 56 to rsp 
		mov r10, [r12 - 56 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 56 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	pop rax
	add rsp, 48 ; Local variables
	pop rbp
	ret
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'm'
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump363
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump363:
	; Computing bound for 'l'
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump364
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump364:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by k 
	jno .jump365
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump365:
	imul rdi, [rsp + 0 + 8] ; multiply by j 
	jno .jump366
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump366:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'm' to 0
	mov rax, 0
	push rax
	; Initialize 'l' to 0
	mov rax, 0
	push rax
.jump367: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const110] ; 675
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'm'
	add qword [rsp + 8], 1
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump367 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump367 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump368
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump368:
	cmp rax, [rsp + 16]
	jl .jump369
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump369:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump370
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump370:
	cmp rax, [rsp + 24]
	jl .jump371
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump371:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump372
	mov rax, [rel const111] ; 62.25
	push rax
	jmp .jump373
.jump372:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'n'
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump374
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump374:
	; Computing bound for 'm'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump375
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump375:
	; Computing bound for 'l'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'l'
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump376
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump376:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'l' to 0
	mov rax, 0
	push rax
.jump377: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'l'
	add qword [rsp + 0], 1
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump377 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump378
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump378:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float 
imul rdi, [rsp + 0 + 0] ; multiply by (sum[l : k] c) 
	jno .jump379
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump379:
	imul rdi, [rsp + 0 + 8] ; multiply by c 
	jno .jump380
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump380:
	imul rdi, [rsp + 0 + 16] ; multiply by (c * k) 
	jno .jump381
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump381:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'n' to 0
	mov rax, 0
	push rax
	; Initialize 'm' to 0
	mov rax, 0
	push rax
	; Initialize 'l' to 0
	mov rax, 0
	push rax
.jump382: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const112] ; 43.34
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'n'
	add qword [rsp + 16], 1
	; Compare n to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump382 ; If n < bound, next iter
	mov qword [rsp + 16], 0 ; n = 0
	add qword [rsp + 8], 1 ; m++
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump382 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump382 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'n'
	mov rax, [rel const113] ; 38
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump383
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump383:
	; Computing bound for 'm'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump384
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump384:
	; Computing bound for 'l'
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump385
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump385:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by j 
	jno .jump386
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump386:
	imul rdi, [rsp + 0 + 8] ; multiply by c 
	jno .jump387
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump387:
	imul rdi, [rsp + 0 + 16] ; multiply by 38 
	jno .jump388
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump388:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'n' to 0
	mov rax, 0
	push rax
	; Initialize 'm' to 0
	mov rax, 0
	push rax
	; Initialize 'l' to 0
	mov rax, 0
	push rax
.jump389: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'n'
	add qword [rsp + 16], 1
	; Compare n to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump389 ; If n < bound, next iter
	mov qword [rsp + 16], 0 ; n = 0
	add qword [rsp + 8], 1 ; m++
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump389 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump389 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump390
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump390:
	cmp rax, [rsp + 24]
	jl .jump391
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump391:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump392
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump392:
	cmp rax, [rsp + 32]
	jl .jump393
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump393:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump394
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump394:
	cmp rax, [rsp + 40]
	jl .jump395
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump395:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump396
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump396:
	cmp rax, [rsp + 24]
	jl .jump397
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump397:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump398
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump398:
	cmp rax, [rsp + 32]
	jl .jump399
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump399:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump400
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump400:
	cmp rax, [rsp + 40]
	jl .jump401
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump401:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump373:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'm'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump402
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump402:
	; Computing bound for 'l'
	mov rax, [rel const114] ; 227
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump403
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump403:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float 
	imul rdi, [rsp + 0 + 0] ; multiply by 227 
	jno .jump404
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump404:
	imul rdi, [rsp + 0 + 8] ; multiply by g 
	jno .jump405
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump405:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'm' to 0
	mov rax, 0
	push rax
	; Initialize 'l' to 0
	mov rax, 0
	push rax
.jump406: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const115] ; 85.43
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'm'
	add qword [rsp + 8], 1
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump406 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump406 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const116] ; 716
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump407
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump407:
	cmp rax, [rsp + 16]
	jl .jump408
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump408:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump409
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump409:
	cmp rax, [rsp + 24]
	jl .jump410
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump410:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const27] ; True
	push rax
	pop rax
	add rsp, 56 ; Local variables
	pop rbp
	ret

i:
_i:
	push rbp
	mov rbp, rsp
	push rdi
	sub asp, 8 ; Add alignment
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'k'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump542
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump542:
	; Computing bound for 'j'
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump543
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump543:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'k' to 0
	mov rax, 0
	push rax
	; Initialize 'j' to 0
	mov rax, 0
	push rax
.jump544: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const143] ; 796
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump545
	mov rax, [rel const144] ; 80.17
	push rax
	mov rax, [rel const145] ; 83.09
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump546
.jump545:
	mov rax, [rel const146] ; 4.02
	push rax
.jump546:
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 32] ; Load sum
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment 'k'
	add qword [rsp + 8], 1
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump544 ; If k < bound, next iter
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump544 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rel const147] ; 96.34
	push rax
	mov rax, [rel const148] ; 16.96
	push rax
	mov rax, [rel const149] ; 56.43
	push rax
	mov rax, [rel const150] ; 30.55
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rdi, 24
	call _jpl_alloc
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 3
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump547
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump547:
	cmp rax, [rsp + 8]
	jl .jump548
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump548:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	add asp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const151] ; 19.11
	push rax
	mov rax, [rel const152] ; 67.96
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'k'
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump549
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump549:
	; Computing bound for 'j'
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump550
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump550:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'k' to 0
	mov rax, 0
	push rax
	; Initialize 'j' to 0
	mov rax, 0
	push rax
.jump551: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const153] ; 34.9
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 32] ; Load sum
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment 'k'
	add qword [rsp + 8], 1
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump551 ; If k < bound, next iter
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump551 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rdi, 24
	sub asp, 8 ; Add alignment
	call _jpl_alloc
	add asp, 8 ; Remove alignment
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 3
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump552
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump552:
	cmp rax, [rsp + 8]
	jl .jump553
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump553:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump554
	mov rax, [rel const27] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump556
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'k'
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'l'
	sub asp, 8 ; Add alignment
	call _e
	add asp, 8 ; Remove alignment
	push rax
	pop rax
	cmp rax, 0
	je .jump558
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	jmp .jump559
.jump558:
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
.jump559:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump560
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump560:
	; Computing bound for 'k'
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump561
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump561:
	; Computing bound for 'j'
	mov rax, [rel const154] ; 469
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump562
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump562:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by (- 469) 
	jno .jump563
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump563:
	imul rdi, [rsp + 0 + 8] ; multiply by h 
	jno .jump564
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump564:
	imul rdi, [rsp + 0 + 16] ; multiply by (if e() then h else b) 
	jno .jump565
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump565:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'l' to 0
	mov rax, 0
	push rax
	; Initialize 'k' to 0
	mov rax, 0
	push rax
	; Initialize 'j' to 0
	mov rax, 0
	push rax
.jump566: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'l'
	add qword [rsp + 16], 1
	; Compare l to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump566 ; If l < bound, next iter
	mov qword [rsp + 16], 0 ; l = 0
	add qword [rsp + 8], 1 ; k++
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump566 ; If k < bound, next iter
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump566 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const155] ; 428
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const156] ; 485
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump567
	sub asp, 8 ; Add alignment
	lea rdi, [rel const44] ; 'divide by zero'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump567:
	cqo
	idiv r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump568
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump568:
	cmp rax, [rsp + 24]
	jl .jump569
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump569:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump570
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump570:
	cmp rax, [rsp + 32]
	jl .jump571
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump571:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump572
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump572:
	cmp rax, [rsp + 40]
	jl .jump573
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump573:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump574
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump574:
	; Computing bound for 'j'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'j'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump575
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump575:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'j' to 0
	mov rax, 0
	push rax
.jump576: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'k'
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump577
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump577:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'k' to 0
	mov rax, 0
	push rax
.jump578: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'k'
	add qword [rsp + 0], 1
	; Compare k to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump578 ; If k < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'j'
	add qword [rsp + 0], 1
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump576 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump579
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump579:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
imul rdi, [rsp + 0 + 0] ; multiply by (sum[j : (- c)] (sum[k : b] k)) 
	jno .jump580
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump580:
imul rdi, [rsp + 0 + 8] ; multiply by (array[j : (- 469), k : h, l : (if e() then h else b)] j)[b, (485 / (- 428)), h] 
	jno .jump581
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump581:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'k' to 0
	mov rax, 0
	push rax
	; Initialize 'j' to 0
	mov rax, 0
	push rax
.jump582: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const157] ; 294
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'k'
	add qword [rsp + 8], 1
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump582 ; If k < bound, next iter
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump582 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump557
.jump556:
	mov rax, [rel const27] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump583
	sub asp, 8 ; Add alignment
	call _e
	add asp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump585
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'k'
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump587
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump587:
	; Computing bound for 'j'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump588
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump588:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,] 
	imul rdi, [rsp + 0 + 0] ; multiply by c 
	jno .jump589
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump589:
	imul rdi, [rsp + 0 + 8] ; multiply by h 
	jno .jump590
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump590:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'k' to 0
	mov rax, 0
	push rax
	; Initialize 'j' to 0
	mov rax, 0
	push rax
.jump591: ; Begin body of loop
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'k'
	add qword [rsp + 8], 1
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump591 ; If k < bound, next iter
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump591 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump586
.jump585:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'k'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump592
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump592:
	; Computing bound for 'j'
	mov rax, [rel const37] ; 389
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump593
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump593:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,] 
	imul rdi, [rsp + 0 + 0] ; multiply by 389 
	jno .jump594
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump594:
	imul rdi, [rsp + 0 + 8] ; multiply by c 
	jno .jump595
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump595:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'k' to 0
	mov rax, 0
	push rax
	; Initialize 'j' to 0
	mov rax, 0
	push rax
.jump596: ; Begin body of loop
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'k'
	add qword [rsp + 8], 1
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump596 ; If k < bound, next iter
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump596 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump586:
	jmp .jump584
.jump583:
	sub asp, 8 ; Add alignment
	call _e
	add asp, 8 ; Remove alignment
	push rax
	pop rax
	cmp rax, 0
	je .jump597
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'k'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump599
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump599:
	; Computing bound for 'j'
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump600
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump600:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,] 
	imul rdi, [rsp + 0 + 0] ; multiply by b 
	jno .jump601
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump601:
	imul rdi, [rsp + 0 + 8] ; multiply by c 
	jno .jump602
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump602:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'k' to 0
	mov rax, 0
	push rax
	; Initialize 'j' to 0
	mov rax, 0
	push rax
.jump603: ; Begin body of loop
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'k'
	add qword [rsp + 8], 1
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump603 ; If k < bound, next iter
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump603 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump598
.jump597:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'k'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump604
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump604:
	; Computing bound for 'j'
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump605
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump605:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,] 
	imul rdi, [rsp + 0 + 0] ; multiply by b 
	jno .jump606
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump606:
	imul rdi, [rsp + 0 + 8] ; multiply by c 
	jno .jump607
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump607:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'k' to 0
	mov rax, 0
	push rax
	; Initialize 'j' to 0
	mov rax, 0
	push rax
.jump608: ; Begin body of loop
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'k'
	add qword [rsp + 8], 1
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump608 ; If k < bound, next iter
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump608 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump598:
.jump584:
	call _e
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump609
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump611
	call _e
	push rax
	jmp .jump612
.jump611:
	mov rax, [rel const27] ; True
	push rax
.jump612:
	jmp .jump610
.jump609:
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
.jump610:
	pop rax
	cmp rax, 0
	je .jump613
	mov rax, [rel const158] ; 982
	push rax
	pop rax
	neg rax
	push rax
	jmp .jump614
.jump613:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'k'
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump615
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump615:
	; Computing bound for 'j'
	mov rax, [rel const159] ; 838
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump616
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump616:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by 838 
	jno .jump617
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump617:
	imul rdi, [rsp + 0 + 8] ; multiply by b 
	jno .jump618
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump618:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'k' to 0
	mov rax, 0
	push rax
	; Initialize 'j' to 0
	mov rax, 0
	push rax
.jump619: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'k'
	add qword [rsp + 8], 1
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump619 ; If k < bound, next iter
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump619 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const160] ; 628
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump620
	lea rdi, [rel const44] ; 'divide by zero'
	call _fail_assertion
.jump620:
	cqo
	idiv r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump621
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump621:
	cmp rax, [rsp + 16]
	jl .jump622
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump622:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump623
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump623:
	cmp rax, [rsp + 24]
	jl .jump624
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump624:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump614:
	mov rax, [rel const161] ; 534
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump625
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump625:
	cmp rax, [rsp + 16]
	jl .jump626
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump626:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump627
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump627:
	cmp rax, [rsp + 24]
	jl .jump628
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump628:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 24
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 24
	; Moving 24 bytes from rax to rsp 
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump557:
	jmp .jump555
.jump554:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'k'
	mov rax, [rel const27] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump629
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	jmp .jump630
.jump629:
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
.jump630:
	pop rax
	cmp rax, 0
	je .jump631
	mov rax, [rel const27] ; True
	push rax
	mov rdi, 8
	sub asp, 8 ; Add alignment
	call _jpl_alloc
	add asp, 8 ; Remove alignment
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	jmp .jump632
.jump631:
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
.jump632:
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump633
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump633:
	cmp rax, [rsp + 8]
	jl .jump634
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump634:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump635
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	jmp .jump636
.jump635:
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	sub asp, 8 ; Add alignment
	call _e
	add asp, 8 ; Remove alignment
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump637
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	jmp .jump638
.jump637:
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump639
	mov rax, [rel const162] ; 334
	push rax
	jmp .jump640
.jump639:
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
.jump640:
.jump638:
.jump636:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump641
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump641:
	; Computing bound for 'j'
	mov rax, [rel const27] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump642
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	jmp .jump643
.jump642:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'j'
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump644
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump644:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'j' to 0
	mov rax, 0
	push rax
.jump645: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'j'
	add qword [rsp + 0], 1
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump645 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
.jump643:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump646
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump646:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
imul rdi, [rsp + 0 + 0] ; multiply by (if (! true) then h else (sum[j : b] b)) 
	jno .jump647
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump647:
	imul rdi, [rsp + 0 + 8] ; multiply by (if (if (if true then f else f) then [true] else [f, f])[h] then b else (if (! (e() == f)) then b else (if (b <= c) then 334 else (- b)))) 
	jno .jump648
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump648:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'k' to 0
	mov rax, 0
	push rax
	; Initialize 'j' to 0
	mov rax, 0
	push rax
.jump649: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'k'
	add qword [rsp + 8], 1
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump649 ; If k < bound, next iter
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump649 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump555:
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32 ; Local variables
	pop rbp
	ret
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const163] ; 512
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump650
	sub asp, 8 ; Add alignment
	lea rdi, [rel const26] ; 'mod by zero'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump650:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const164] ; 216
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rdi, 16
	sub asp, 8 ; Add alignment
	call _jpl_alloc
	add asp, 8 ; Remove alignment
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump651
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump651:
	cmp rax, [rsp + 8]
	jl .jump652
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump652:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	mov rax, [rel const27] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump653
	mov rax, [rel const8] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	jmp .jump654
.jump653:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'l'
	mov rax, [rel const165] ; 617
	push rax
	call _e
	push rax
	pop rax
	cmp rax, 0
	je .jump655
	mov rax, [rel const166] ; 168
	push rax
	jmp .jump656
.jump655:
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
.jump656:
	pop rax
	pop r10
	cmp r10, 0
	jne .jump657
	sub asp, 8 ; Add alignment
	lea rdi, [rel const26] ; 'mod by zero'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump657:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump658
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump658:
	; Computing bound for 'k'
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump659
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	jmp .jump660
.jump659:
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump661
	mov rax, [rel const167] ; 839
	push rax
	jmp .jump662
.jump661:
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
.jump662:
.jump660:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump663
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump663:
	; Computing bound for 'j'
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump664
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const168] ; 336
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump666
	sub asp, 8 ; Add alignment
	lea rdi, [rel const26] ; 'mod by zero'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump666:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	jmp .jump665
.jump664:
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
.jump665:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump667
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump667:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool 
	imul rdi, [rsp + 0 + 0] ; multiply by (if (! f) then (336 % c) else h) 
	jno .jump668
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump668:
	imul rdi, [rsp + 0 + 8] ; multiply by (if f then (- b) else (if f then 839 else c)) 
	jno .jump669
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump669:
	imul rdi, [rsp + 0 + 16] ; multiply by ((if e() then 168 else c) % 617) 
	jno .jump670
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump670:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'l' to 0
	mov rax, 0
	push rax
	; Initialize 'k' to 0
	mov rax, 0
	push rax
	; Initialize 'j' to 0
	mov rax, 0
	push rax
.jump671: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump672
	sub asp, 8 ; Add alignment
	lea rdi, [rel const26] ; 'mod by zero'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump672:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'l'
	add qword [rsp + 16], 1
	; Compare l to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump671 ; If l < bound, next iter
	mov qword [rsp + 16], 0 ; l = 0
	add qword [rsp + 8], 1 ; k++
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump671 ; If k < bound, next iter
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump671 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'k'
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump673
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump673:
	; Computing bound for 'j'
	mov rax, [rel const59] ; 15
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump674
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump674:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by 15 
	jno .jump675
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump675:
	imul rdi, [rsp + 0 + 8] ; multiply by h 
	jno .jump676
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump676:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'k' to 0
	mov rax, 0
	push rax
	; Initialize 'j' to 0
	mov rax, 0
	push rax
.jump677: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump678
	sub asp, 8 ; Add alignment
	lea rdi, [rel const44] ; 'divide by zero'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump678:
	cqo
	idiv r10
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'k'
	add qword [rsp + 8], 1
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump677 ; If k < bound, next iter
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump677 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump679
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'j'
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump681
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump681:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'j' to 0
	mov rax, 0
	push rax
.jump682: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const169] ; 986
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'j'
	add qword [rsp + 0], 1
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump682 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	jmp .jump680
.jump679:
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
.jump680:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump683
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump683:
	cmp rax, [rsp + 16]
	jl .jump684
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump684:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump685
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump685:
	cmp rax, [rsp + 24]
	jl .jump686
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump686:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const170] ; 436
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump687
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	jmp .jump688
.jump687:
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
.jump688:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump689
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump689:
	cmp rax, [rsp + 24]
	jl .jump690
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump690:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump691
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump691:
	cmp rax, [rsp + 32]
	jl .jump692
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump692:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump693
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump693:
	cmp rax, [rsp + 40]
	jl .jump694
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump694:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump654:
	mov rdi, 24
	sub asp, 8 ; Add alignment
	call _jpl_alloc
	add asp, 8 ; Remove alignment
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 3
	push rax
	mov rax, [rel const171] ; 31.02
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'm'
	mov rax, [rel const8] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump695
	mov rax, [rel const38] ; 159
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'n'
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump697
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump697:
	; Computing bound for 'm'
	mov rax, [rel const172] ; 833
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump698
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump698:
	; Computing bound for 'l'
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump699
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump699:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by h 
	jno .jump700
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump700:
	imul rdi, [rsp + 0 + 8] ; multiply by 833 
	jno .jump701
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump701:
	imul rdi, [rsp + 0 + 16] ; multiply by b 
	jno .jump702
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump702:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'n' to 0
	mov rax, 0
	push rax
	; Initialize 'm' to 0
	mov rax, 0
	push rax
	; Initialize 'l' to 0
	mov rax, 0
	push rax
.jump703: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const69] ; 437
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'n'
	add qword [rsp + 16], 1
	; Compare n to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump703 ; If n < bound, next iter
	mov qword [rsp + 16], 0 ; n = 0
	add qword [rsp + 8], 1 ; m++
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump703 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump703 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'm'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump704
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump704:
	; Computing bound for 'l'
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump705
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump705:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'm' to 0
	mov rax, 0
	push rax
	; Initialize 'l' to 0
	mov rax, 0
	push rax
.jump706: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const173] ; 630
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'm'
	add qword [rsp + 8], 1
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump706 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump706 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump707
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump707:
	cmp rax, [rsp + 24]
	jl .jump708
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump708:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump709
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump709:
	cmp rax, [rsp + 32]
	jl .jump710
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump710:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump711
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump711:
	cmp rax, [rsp + 40]
	jl .jump712
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump712:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	jmp .jump696
.jump695:
	mov rax, [rel const174] ; 53.3
	push rax
	mov rax, [rel const175] ; 90.54
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump713
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump715
	lea rdi, [rel const26] ; 'mod by zero'
	call _fail_assertion
.jump715:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	jmp .jump714
.jump713:
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
.jump714:
	pop rax
	neg rax
	push rax
.jump696:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump716
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump716:
	; Computing bound for 'l'
	mov rax, [rel const176] ; 858
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump717
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump717:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof float[,,] 
	imul rdi, [rsp + 0 + 0] ; multiply by 858 
	jno .jump718
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump718:
imul rdi, [rsp + 0 + 8] ; multiply by (if false then ((array[l : h, m : 833, n : b] 437)[(sum[l : h, m : c] 630), h, c] + (- (h + 159))) else (- (if (90.54 <= 53.3) then (h % h) else c))) 
	jno .jump719
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump719:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'm' to 0
	mov rax, 0
	push rax
	; Initialize 'l' to 0
	mov rax, 0
	push rax
.jump720: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'p'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'p'
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const177] ; 266
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump721
	lea rdi, [rel const44] ; 'divide by zero'
	call _fail_assertion
.jump721:
	cqo
	idiv r10
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'p'
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump722
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump722:
	; Computing bound for 'o'
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump723
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump723:
	; Computing bound for 'n'
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp 
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump724
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump724:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'p' to 0
	mov rax, 0
	push rax
	; Initialize 'o' to 0
	mov rax, 0
	push rax
	; Initialize 'n' to 0
	mov rax, 0
	push rax
.jump725: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 160 to rsp 
		mov r10, [rbp - 160 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment 'p'
	add qword [rsp + 16], 1
	; Compare p to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump725 ; If p < bound, next iter
	mov qword [rsp + 16], 0 ; p = 0
	add qword [rsp + 8], 1 ; o++
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump725 ; If o < bound, next iter
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump725 ; If n < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump726
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump726:
	; Computing bound for 'o'
	mov rax, [rel const178] ; 593
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump727
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump727:
	; Computing bound for 'n'
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp 
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump728
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump728:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'p' to 0
	mov rax, 0
	push rax
	; Initialize 'o' to 0
	mov rax, 0
	push rax
	; Initialize 'n' to 0
	mov rax, 0
	push rax
.jump729: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump730
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump730:
	cmp rax, [rsp + 8]
	jl .jump731
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump731:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment 'p'
	add qword [rsp + 16], 1
	; Compare p to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump729 ; If p < bound, next iter
	mov qword [rsp + 16], 0 ; p = 0
	add qword [rsp + 8], 1 ; o++
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump729 ; If o < bound, next iter
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump729 ; If n < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump732
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump732:
	; Computing bound for 'o'
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp 
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump733
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump733:
	; Computing bound for 'n'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump734
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump734:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float 
	imul rdi, [rsp + 0 + 0] ; multiply by c 
	jno .jump735
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump735:
	imul rdi, [rsp + 0 + 8] ; multiply by (c * (- l)) 
	jno .jump736
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump736:
imul rdi, [rsp + 0 + 16] ; multiply by (sum[n : l, o : 593, p : ((sum[n : l, o : m, p : b] p) - (266 / b))] [b, c][(- m)]) 
	jno .jump737
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump737:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'p' to 0
	mov rax, 0
	push rax
	; Initialize 'o' to 0
	mov rax, 0
	push rax
	; Initialize 'n' to 0
	mov rax, 0
	push rax
.jump738: ; Begin body of loop
	; Compute loop body
	sub asp, 8 ; Add alignment
	call _e
	add asp, 8 ; Remove alignment
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump739
	mov rax, [rel const179] ; 95.8
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump740
.jump739:
	mov rax, [rel const180] ; 25.66
	push rax
	mov rax, [rel const181] ; 9.36
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
.jump740:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'p'
	add qword [rsp + 16], 1
	; Compare p to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump738 ; If p < bound, next iter
	mov qword [rsp + 16], 0 ; p = 0
	add qword [rsp + 8], 1 ; o++
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump738 ; If o < bound, next iter
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump738 ; If n < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 32
	add rax, [rsp + 64]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax 
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment 'm'
	add qword [rsp + 8], 1
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump720 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump720 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	call _e
	push rax
	pop rax
	cmp rax, 0
	je .jump741
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'n'
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump743
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump743:
	; Computing bound for 'm'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump744
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump744:
	; Computing bound for 'l'
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump745
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump745:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,] 
	imul rdi, [rsp + 0 + 0] ; multiply by b 
	jno .jump746
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump746:
	imul rdi, [rsp + 0 + 8] ; multiply by c 
	jno .jump747
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump747:
	imul rdi, [rsp + 0 + 16] ; multiply by b 
	jno .jump748
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump748:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'n' to 0
	mov rax, 0
	push rax
	; Initialize 'm' to 0
	mov rax, 0
	push rax
	; Initialize 'l' to 0
	mov rax, 0
	push rax
.jump749: ; Begin body of loop
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'n'
	add qword [rsp + 16], 1
	; Compare n to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump749 ; If n < bound, next iter
	mov qword [rsp + 16], 0 ; n = 0
	add qword [rsp + 8], 1 ; m++
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump749 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump749 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	mov rax, [rel const182] ; 824
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump750
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump750:
	cmp rax, [rsp + 24]
	jl .jump751
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump751:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump752
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump752:
	cmp rax, [rsp + 32]
	jl .jump753
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump753:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump754
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump754:
	cmp rax, [rsp + 40]
	jl .jump755
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump755:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 24
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 24
	; Moving 24 bytes from rax to rsp 
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump742
.jump741:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'm'
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump756
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump756:
	; Computing bound for 'l'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump757
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump757:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by c 
	jno .jump758
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump758:
	imul rdi, [rsp + 0 + 8] ; multiply by b 
	jno .jump759
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump759:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'm' to 0
	mov rax, 0
	push rax
	; Initialize 'l' to 0
	mov rax, 0
	push rax
.jump760: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 112 to rsp 
		mov r10, [rbp - 112 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'm'
	add qword [rsp + 8], 1
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump760 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump760 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump742:
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'm'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump761
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump761:
	; Computing bound for 'l'
	mov rax, [rel const183] ; 267
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump762
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump762:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'm' to 0
	mov rax, 0
	push rax
	; Initialize 'l' to 0
	mov rax, 0
	push rax
.jump763: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const184] ; 28.87
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 32] ; Load sum
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment 'm'
	add qword [rsp + 8], 1
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump763 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump763 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rel const185] ; 16.06
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump764
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	jmp .jump765
.jump764:
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
.jump765:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump766
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump766:
	cmp rax, [rsp + 16]
	jl .jump767
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump767:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump768
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump768:
	cmp rax, [rsp + 24]
	jl .jump769
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump769:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const8] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump770
	sub asp, 8 ; Add alignment
	call _e
	add asp, 8 ; Remove alignment
	push rax
	pop rax
	xor rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	jmp .jump771
.jump770:
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rdi, 8
	call _jpl_alloc
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	mov rax, [rel const183] ; 267
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump772
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump772:
	cmp rax, [rsp + 8]
	jl .jump773
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump773:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump771:
	pop rax
	cmp rax, 0
	je .jump774
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	jmp .jump775
.jump774:
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
.jump775:
	pop rax
	pop r10
	sub rax, r10
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'm'
	mov rax, [rel const186] ; 48.52
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump776
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'm'
	mov rax, [rel const187] ; 668
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump778
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump778:
	; Computing bound for 'l'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump779
	sub asp, 8 ; Add alignment
	lea rdi, [rel const26] ; 'mod by zero'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump779:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump780
	lea rdi, [rel const26] ; 'mod by zero'
	call _fail_assertion
.jump780:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump781
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump781:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'm' to 0
	mov rax, 0
	push rax
	; Initialize 'l' to 0
	mov rax, 0
	push rax
.jump782: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 136 to rsp 
		mov r10, [rbp - 136 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump783
	sub asp, 8 ; Add alignment
	lea rdi, [rel const26] ; 'mod by zero'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump783:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'm'
	add qword [rsp + 8], 1
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump782 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump782 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	jmp .jump777
.jump776:
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
.jump777:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump784
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump784:
	; Computing bound for 'l'
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump785
	sub asp, 8 ; Add alignment
	lea rdi, [rel const44] ; 'divide by zero'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump785:
	cqo
	idiv r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump786
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump786:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'm' to 0
	mov rax, 0
	push rax
	; Initialize 'l' to 0
	mov rax, 0
	push rax
.jump787: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'o'
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump788
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump788:
	; Computing bound for 'n'
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump789
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump789:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by m 
	jno .jump790
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump790:
	imul rdi, [rsp + 0 + 8] ; multiply by m 
	jno .jump791
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump791:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'o' to 0
	mov rax, 0
	push rax
	; Initialize 'n' to 0
	mov rax, 0
	push rax
.jump792: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp 
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'o'
	add qword [rsp + 8], 1
	; Compare o to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump792 ; If o < bound, next iter
	mov qword [rsp + 8], 0 ; o = 0
	add qword [rsp + 0], 1 ; n++
	; Compare n to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump792 ; If n < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp 
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump793
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump793:
	cmp rax, [rsp + 16]
	jl .jump794
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump794:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump795
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump795:
	cmp rax, [rsp + 24]
	jl .jump796
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump796:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'm'
	add qword [rsp + 8], 1
	; Compare m to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump787 ; If m < bound, next iter
	mov qword [rsp + 8], 0 ; m = 0
	add qword [rsp + 0], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump787 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump797
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump797:
	cmp rax, [rsp + 16]
	jl .jump798
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump798:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump799
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump799:
	cmp rax, [rsp + 24]
	jl .jump800
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump800:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 32
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 32
	; Moving 32 bytes from rax to rsp 
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'q'
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump801
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump801:
	; Computing bound for 'p'
	mov rax, [rel const188] ; 477
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump802
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump802:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof bool[,] 
	imul rdi, [rsp + 0 + 0] ; multiply by 477 
	jno .jump803
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump803:
	imul rdi, [rsp + 0 + 8] ; multiply by o 
	jno .jump804
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump804:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'q' to 0
	mov rax, 0
	push rax
	; Initialize 'p' to 0
	mov rax, 0
	push rax
.jump805: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 's'
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump806
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump806:
	; Computing bound for 'r'
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump807
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump807:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool 
	imul rdi, [rsp + 0 + 0] ; multiply by b 
	jno .jump808
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump808:
	imul rdi, [rsp + 0 + 8] ; multiply by n 
	jno .jump809
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump809:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 's' to 0
	mov rax, 0
	push rax
	; Initialize 'r' to 0
	mov rax, 0
	push rax
.jump810: ; Begin body of loop
	; Compute loop body
	sub asp, 8 ; Add alignment
	call _e
	add asp, 8 ; Remove alignment
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 's'
	add qword [rsp + 8], 1
	; Compare s to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump810 ; If s < bound, next iter
	mov qword [rsp + 8], 0 ; s = 0
	add qword [rsp + 0], 1 ; r++
	; Compare r to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump810 ; If r < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'q'
	add qword [rsp + 8], 1
	; Compare q to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump805 ; If q < bound, next iter
	mov qword [rsp + 8], 0 ; q = 0
	add qword [rsp + 0], 1 ; p++
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump805 ; If p < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump811
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump811:
	cmp rax, [rsp + 16]
	jl .jump812
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump812:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump813
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump813:
	cmp rax, [rsp + 24]
	jl .jump814
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump814:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 24
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 24
	; Moving 24 bytes from rax to rsp 
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const8] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump815
	sub rsp, 24
	; Moving 24 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	jmp .jump816
.jump815:
	sub rsp, 24
	; Moving 24 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
.jump816:
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump817
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump817:
	cmp rax, [rsp + 16]
	jl .jump818
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump818:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump819
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump819:
	cmp rax, [rsp + 24]
	jl .jump820
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump820:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump821
	lea rdi, [rel const26] ; 'mod by zero'
	call _fail_assertion
.jump821:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump822
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump822:
	cmp rax, [rsp + 16]
	jl .jump823
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump823:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump824
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump824:
	cmp rax, [rsp + 24]
	jl .jump825
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump825:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump826
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'q'
	mov rax, [rel const189] ; 773
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump828
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump828:
	; Computing bound for 'p'
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump829
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump829:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof int[,][,,] 
	imul rdi, [rsp + 0 + 0] ; multiply by n 
	jno .jump830
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump830:
	imul rdi, [rsp + 0 + 8] ; multiply by (h - 773) 
	jno .jump831
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump831:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'q' to 0
	mov rax, 0
	push rax
	; Initialize 'p' to 0
	mov rax, 0
	push rax
.jump832: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump833
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 't'
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump835
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump835:
	; Computing bound for 's'
	mov rax, [rel const190] ; 613
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump836
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump836:
	; Computing bound for 'r'
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp 
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump837
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump837:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,] 
	imul rdi, [rsp + 0 + 0] ; multiply by p 
	jno .jump838
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump838:
	imul rdi, [rsp + 0 + 8] ; multiply by 613 
	jno .jump839
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump839:
	imul rdi, [rsp + 0 + 16] ; multiply by q 
	jno .jump840
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump840:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 't' to 0
	mov rax, 0
	push rax
	; Initialize 's' to 0
	mov rax, 0
	push rax
	; Initialize 'r' to 0
	mov rax, 0
	push rax
.jump841: ; Begin body of loop
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 't'
	add qword [rsp + 16], 1
	; Compare t to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump841 ; If t < bound, next iter
	mov qword [rsp + 16], 0 ; t = 0
	add qword [rsp + 8], 1 ; s++
	; Compare s to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump841 ; If s < bound, next iter
	mov qword [rsp + 8], 0 ; s = 0
	add qword [rsp + 0], 1 ; r++
	; Compare r to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump841 ; If r < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump834
.jump833:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 't'
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump842
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump842:
	; Computing bound for 's'
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump843
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump843:
	; Computing bound for 'r'
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp 
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump844
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump844:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,] 
	imul rdi, [rsp + 0 + 0] ; multiply by p 
	jno .jump845
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump845:
	imul rdi, [rsp + 0 + 8] ; multiply by n 
	jno .jump846
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump846:
	imul rdi, [rsp + 0 + 16] ; multiply by o 
	jno .jump847
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump847:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 't' to 0
	mov rax, 0
	push rax
	; Initialize 's' to 0
	mov rax, 0
	push rax
	; Initialize 'r' to 0
	mov rax, 0
	push rax
.jump848: ; Begin body of loop
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 't'
	add qword [rsp + 16], 1
	; Compare t to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump848 ; If t < bound, next iter
	mov qword [rsp + 16], 0 ; t = 0
	add qword [rsp + 8], 1 ; s++
	; Compare s to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump848 ; If s < bound, next iter
	mov qword [rsp + 8], 0 ; s = 0
	add qword [rsp + 0], 1 ; r++
	; Compare r to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump848 ; If r < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump834:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 32
	add rax, [rsp + 64]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax 
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment 'q'
	add qword [rsp + 8], 1
	; Compare q to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump832 ; If q < bound, next iter
	mov qword [rsp + 8], 0 ; q = 0
	add qword [rsp + 0], 1 ; p++
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump832 ; If p < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump849
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	jmp .jump850
.jump849:
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
.jump850:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'p'
	mov rax, [rel const191] ; 396
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump851
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump851:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'p' to 0
	mov rax, 0
	push rax
.jump852: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'p'
	add qword [rsp + 0], 1
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump852 ; If p < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump853
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump853:
	cmp rax, [rsp + 16]
	jl .jump854
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump854:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump855
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump855:
	cmp rax, [rsp + 24]
	jl .jump856
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump856:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 32
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 32
	; Moving 32 bytes from rax to rsp 
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump827
.jump826:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'r'
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump857
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump857:
	; Computing bound for 'q'
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump858
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump858:
	; Computing bound for 'p'
	mov rax, [rel const8] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump859
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	jmp .jump860
.jump859:
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
.jump860:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump861
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump861:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,] 
	imul rdi, [rsp + 0 + 0] ; multiply by (if (! false) then n else o) 
	jno .jump862
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump862:
	imul rdi, [rsp + 0 + 8] ; multiply by m 
	jno .jump863
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump863:
	imul rdi, [rsp + 0 + 16] ; multiply by h 
	jno .jump864
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump864:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'r' to 0
	mov rax, 0
	push rax
	; Initialize 'q' to 0
	mov rax, 0
	push rax
	; Initialize 'p' to 0
	mov rax, 0
	push rax
.jump865: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 't'
	sub rsp, 8
	; Moving 8 bytes from rbp - 144 to rsp 
		mov r10, [rbp - 144 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump866
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump866:
	; Computing bound for 's'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 's'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump867
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump867:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 's' to 0
	mov rax, 0
	push rax
.jump868: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 's'
	add qword [rsp + 0], 1
	; Compare s to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump868 ; If s < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump869
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump869:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
imul rdi, [rsp + 0 + 0] ; multiply by (sum[s : c] b) 
	jno .jump870
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump870:
	imul rdi, [rsp + 0 + 8] ; multiply by p 
	jno .jump871
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump871:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 't' to 0
	mov rax, 0
	push rax
	; Initialize 's' to 0
	mov rax, 0
	push rax
.jump872: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const192] ; 995
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 't'
	add qword [rsp + 8], 1
	; Compare t to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump872 ; If t < bound, next iter
	mov qword [rsp + 8], 0 ; t = 0
	add qword [rsp + 0], 1 ; s++
	; Compare s to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump872 ; If s < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'r'
	add qword [rsp + 16], 1
	; Compare r to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump865 ; If r < bound, next iter
	mov qword [rsp + 16], 0 ; r = 0
	add qword [rsp + 8], 1 ; q++
	; Compare q to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump865 ; If q < bound, next iter
	mov qword [rsp + 8], 0 ; q = 0
	add qword [rsp + 0], 1 ; p++
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump865 ; If p < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump827:
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'q'
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump873
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump873:
	; Computing bound for 'p'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'r'
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump874
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump874:
	; Computing bound for 'q'
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump875
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump875:
	; Computing bound for 'p'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'q'
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump876
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump876:
	; Computing bound for 'p'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump877
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump877:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'q' to 0
	mov rax, 0
	push rax
	; Initialize 'p' to 0
	mov rax, 0
	push rax
.jump878: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'q'
	add qword [rsp + 8], 1
	; Compare q to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump878 ; If q < bound, next iter
	mov qword [rsp + 8], 0 ; q = 0
	add qword [rsp + 0], 1 ; p++
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump878 ; If p < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump879
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump879:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'r' to 0
	mov rax, 0
	push rax
	; Initialize 'q' to 0
	mov rax, 0
	push rax
	; Initialize 'p' to 0
	mov rax, 0
	push rax
.jump880: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'u'
	sub rsp, 8
	; Moving 8 bytes from rbp - 192 to rsp 
		mov r10, [rbp - 192 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump881
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump881:
	; Computing bound for 't'
	sub rsp, 8
	; Moving 8 bytes from rbp - 200 to rsp 
		mov r10, [rbp - 200 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump882
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump882:
	; Computing bound for 's'
	sub rsp, 8
	; Moving 8 bytes from rbp - 200 to rsp 
		mov r10, [rbp - 200 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump883
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump883:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'u' to 0
	mov rax, 0
	push rax
	; Initialize 't' to 0
	mov rax, 0
	push rax
	; Initialize 's' to 0
	mov rax, 0
	push rax
.jump884: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const193] ; 58.31
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 48] ; Load sum
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment 'u'
	add qword [rsp + 16], 1
	; Compare u to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump884 ; If u < bound, next iter
	mov qword [rsp + 16], 0 ; u = 0
	add qword [rsp + 8], 1 ; t++
	; Compare t to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump884 ; If t < bound, next iter
	mov qword [rsp + 8], 0 ; t = 0
	add qword [rsp + 0], 1 ; s++
	; Compare s to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump884 ; If s < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 48] ; Load sum
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment 'r'
	add qword [rsp + 16], 1
	; Compare r to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump880 ; If r < bound, next iter
	mov qword [rsp + 16], 0 ; r = 0
	add qword [rsp + 8], 1 ; q++
	; Compare q to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump880 ; If q < bound, next iter
	mov qword [rsp + 8], 0 ; q = 0
	add qword [rsp + 0], 1 ; p++
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump880 ; If p < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'q'
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump885
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump885:
	; Computing bound for 'p'
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump886
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump886:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'q' to 0
	mov rax, 0
	push rax
	; Initialize 'p' to 0
	mov rax, 0
	push rax
.jump887: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 32] ; Load sum
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment 'q'
	add qword [rsp + 8], 1
	; Compare q to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump887 ; If q < bound, next iter
	mov qword [rsp + 8], 0 ; q = 0
	add qword [rsp + 0], 1 ; p++
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump887 ; If p < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump888
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	jmp .jump889
.jump888:
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
.jump889:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump890
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump890:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'q' to 0
	mov rax, 0
	push rax
	; Initialize 'p' to 0
	mov rax, 0
	push rax
.jump891: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'q'
	add qword [rsp + 8], 1
	; Compare q to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump891 ; If q < bound, next iter
	mov qword [rsp + 8], 0 ; q = 0
	add qword [rsp + 0], 1 ; p++
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump891 ; If p < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump892
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump892:
	cmp rax, [rsp + 24]
	jl .jump893
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump893:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump894
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump894:
	cmp rax, [rsp + 32]
	jl .jump895
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump895:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump896
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump896:
	cmp rax, [rsp + 40]
	jl .jump897
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump897:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 24
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 24
	; Moving 24 bytes from rax to rsp 
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 112 ; Local variables
	pop rbp
	ret
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'r'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump898
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump898:
	; Computing bound for 'q'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump899
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump899:
	; Computing bound for 'p'
	sub asp, 8 ; Add alignment
	call _e
	add asp, 8 ; Remove alignment
	push rax
	pop rax
	cmp rax, 0
	je .jump900
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'r'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump902
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump902:
	; Computing bound for 'q'
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump903
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump903:
	; Computing bound for 'p'
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump904
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump904:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'r' to 0
	mov rax, 0
	push rax
	; Initialize 'q' to 0
	mov rax, 0
	push rax
	; Initialize 'p' to 0
	mov rax, 0
	push rax
.jump905: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const194] ; 311
	push rax
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment 'r'
	add qword [rsp + 16], 1
	; Compare r to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump905 ; If r < bound, next iter
	mov qword [rsp + 16], 0 ; r = 0
	add qword [rsp + 8], 1 ; q++
	; Compare q to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump905 ; If q < bound, next iter
	mov qword [rsp + 8], 0 ; q = 0
	add qword [rsp + 0], 1 ; p++
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump905 ; If p < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'p'
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump906
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump906:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'p' to 0
	mov rax, 0
	push rax
.jump907: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'p'
	add qword [rsp + 0], 1
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump907 ; If p < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	jmp .jump901
.jump900:
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
.jump901:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump908
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump908:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,] 
imul rdi, [rsp + 0 + 0] ; multiply by (if e() then (- ((sum[p : o] o) + (sum[p : n, q : m, r : c] 311))) else h) 
	jno .jump909
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump909:
	imul rdi, [rsp + 0 + 8] ; multiply by c 
	jno .jump910
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump910:
	imul rdi, [rsp + 0 + 16] ; multiply by c 
	jno .jump911
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump911:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'r' to 0
	mov rax, 0
	push rax
	; Initialize 'q' to 0
	mov rax, 0
	push rax
	; Initialize 'p' to 0
	mov rax, 0
	push rax
.jump912: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'u'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'u'
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump913
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump913:
	; Computing bound for 't'
	sub rsp, 8
	; Moving 8 bytes from rbp - 160 to rsp 
		mov r10, [rbp - 160 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump914
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump914:
	; Computing bound for 's'
	sub rsp, 8
	; Moving 8 bytes from rbp - 160 to rsp 
		mov r10, [rbp - 160 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump915
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump915:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'u' to 0
	mov rax, 0
	push rax
	; Initialize 't' to 0
	mov rax, 0
	push rax
	; Initialize 's' to 0
	mov rax, 0
	push rax
.jump916: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const195] ; 295
	push rax
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment 'u'
	add qword [rsp + 16], 1
	; Compare u to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump916 ; If u < bound, next iter
	mov qword [rsp + 16], 0 ; u = 0
	add qword [rsp + 8], 1 ; t++
	; Compare t to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump916 ; If t < bound, next iter
	mov qword [rsp + 8], 0 ; t = 0
	add qword [rsp + 0], 1 ; s++
	; Compare s to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump916 ; If s < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump917
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump917:
	; Computing bound for 't'
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump918
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump918:
	; Computing bound for 's'
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump919
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump919:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof int[,][,,] 
	imul rdi, [rsp + 0 + 0] ; multiply by n 
	jno .jump920
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump920:
	imul rdi, [rsp + 0 + 8] ; multiply by h 
	jno .jump921
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump921:
imul rdi, [rsp + 0 + 16] ; multiply by (sum[s : q, t : q, u : m] 295) 
	jno .jump922
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump922:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'u' to 0
	mov rax, 0
	push rax
	; Initialize 't' to 0
	mov rax, 0
	push rax
	; Initialize 's' to 0
	mov rax, 0
	push rax
.jump923: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'x'
	sub rsp, 8
	; Moving 8 bytes from rbp - 208 to rsp 
		mov r10, [rbp - 208 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump924
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump924:
	; Computing bound for 'w'
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump925
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump925:
	; Computing bound for 'v'
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump926
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump926:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,] 
	imul rdi, [rsp + 0 + 0] ; multiply by b 
	jno .jump927
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump927:
	imul rdi, [rsp + 0 + 8] ; multiply by o 
	jno .jump928
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump928:
	imul rdi, [rsp + 0 + 16] ; multiply by u 
	jno .jump929
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump929:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'x' to 0
	mov rax, 0
	push rax
	; Initialize 'w' to 0
	mov rax, 0
	push rax
	; Initialize 'v' to 0
	mov rax, 0
	push rax
.jump930: ; Begin body of loop
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'x'
	add qword [rsp + 16], 1
	; Compare x to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump930 ; If x < bound, next iter
	mov qword [rsp + 16], 0 ; x = 0
	add qword [rsp + 8], 1 ; w++
	; Compare w to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump930 ; If w < bound, next iter
	mov qword [rsp + 8], 0 ; w = 0
	add qword [rsp + 0], 1 ; v++
	; Compare v to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump930 ; If v < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	imul rax, 32
	add rax, [rsp + 80]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax 
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment 'u'
	add qword [rsp + 16], 1
	; Compare u to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump923 ; If u < bound, next iter
	mov qword [rsp + 16], 0 ; u = 0
	add qword [rsp + 8], 1 ; t++
	; Compare t to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump923 ; If t < bound, next iter
	mov qword [rsp + 8], 0 ; t = 0
	add qword [rsp + 0], 1 ; s++
	; Compare s to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump923 ; If s < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'u'
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump931
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump931:
	; Computing bound for 't'
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump932
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump932:
	; Computing bound for 's'
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 168 to rsp 
		mov r10, [rbp - 168 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump933
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump933:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'u' to 0
	mov rax, 0
	push rax
	; Initialize 't' to 0
	mov rax, 0
	push rax
	; Initialize 's' to 0
	mov rax, 0
	push rax
.jump934: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment 'u'
	add qword [rsp + 16], 1
	; Compare u to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump934 ; If u < bound, next iter
	mov qword [rsp + 16], 0 ; u = 0
	add qword [rsp + 8], 1 ; t++
	; Compare t to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump934 ; If t < bound, next iter
	mov qword [rsp + 8], 0 ; t = 0
	add qword [rsp + 0], 1 ; s++
	; Compare s to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump934 ; If s < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'u'
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump935
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump935:
	; Computing bound for 't'
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump936
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump936:
	; Computing bound for 's'
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump937
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump937:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'u' to 0
	mov rax, 0
	push rax
	; Initialize 't' to 0
	mov rax, 0
	push rax
	; Initialize 's' to 0
	mov rax, 0
	push rax
.jump938: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 160 to rsp 
		mov r10, [rbp - 160 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment 'u'
	add qword [rsp + 16], 1
	; Compare u to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump938 ; If u < bound, next iter
	mov qword [rsp + 16], 0 ; u = 0
	add qword [rsp + 8], 1 ; t++
	; Compare t to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump938 ; If t < bound, next iter
	mov qword [rsp + 8], 0 ; t = 0
	add qword [rsp + 0], 1 ; s++
	; Compare s to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump938 ; If s < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump939
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump939:
	cmp rax, [rsp + 24]
	jl .jump940
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump940:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump941
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump941:
	cmp rax, [rsp + 32]
	jl .jump942
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump942:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump943
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump943:
	cmp rax, [rsp + 40]
	jl .jump944
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump944:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 32
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 32
	; Moving 32 bytes from rax to rsp 
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const8] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump945
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'u'
	mov rax, [rel const196] ; 175
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump947
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump947:
	; Computing bound for 't'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump948
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump948:
	; Computing bound for 's'
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump949
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump949:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by o 
	jno .jump950
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump950:
	imul rdi, [rsp + 0 + 8] ; multiply by c 
	jno .jump951
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump951:
	imul rdi, [rsp + 0 + 16] ; multiply by 175 
	jno .jump952
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump952:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'u' to 0
	mov rax, 0
	push rax
	; Initialize 't' to 0
	mov rax, 0
	push rax
	; Initialize 's' to 0
	mov rax, 0
	push rax
.jump953: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 240 to rsp 
		mov r10, [rbp - 240 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'u'
	add qword [rsp + 16], 1
	; Compare u to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump953 ; If u < bound, next iter
	mov qword [rsp + 16], 0 ; u = 0
	add qword [rsp + 8], 1 ; t++
	; Compare t to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump953 ; If t < bound, next iter
	mov qword [rsp + 8], 0 ; t = 0
	add qword [rsp + 0], 1 ; s++
	; Compare s to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump953 ; If s < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump946
.jump945:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'u'
	sub rsp, 8
	; Moving 8 bytes from rbp - 152 to rsp 
		mov r10, [rbp - 152 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump954
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump954:
	; Computing bound for 't'
	mov rax, [rel const197] ; 482
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump955
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump955:
	; Computing bound for 's'
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump956
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump956:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by h 
	jno .jump957
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump957:
	imul rdi, [rsp + 0 + 8] ; multiply by 482 
	jno .jump958
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump958:
	imul rdi, [rsp + 0 + 16] ; multiply by r 
	jno .jump959
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump959:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'u' to 0
	mov rax, 0
	push rax
	; Initialize 't' to 0
	mov rax, 0
	push rax
	; Initialize 's' to 0
	mov rax, 0
	push rax
.jump960: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const198] ; 637
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'u'
	add qword [rsp + 16], 1
	; Compare u to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump960 ; If u < bound, next iter
	mov qword [rsp + 16], 0 ; u = 0
	add qword [rsp + 8], 1 ; t++
	; Compare t to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump960 ; If t < bound, next iter
	mov qword [rsp + 8], 0 ; t = 0
	add qword [rsp + 0], 1 ; s++
	; Compare s to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump960 ; If s < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump946:
	mov rax, [rel const8] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump961
	mov rax, [rel const199] ; 408
	push rax
	jmp .jump962
.jump961:
	sub rsp, 8
	; Moving 8 bytes from rbp - 168 to rsp 
		mov r10, [rbp - 168 + 0]
		mov [rsp + 0], r10
.jump962:
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 's'
	sub rsp, 8
	; Moving 8 bytes from rbp - 168 to rsp 
		mov r10, [rbp - 168 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump963
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump963:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by p 
	jno .jump964
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump964:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 's' to 0
	mov rax, 0
	push rax
.jump965: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 's'
	add qword [rsp + 0], 1
	; Compare s to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump965 ; If s < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump966
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump966:
	cmp rax, [rsp + 8]
	jl .jump967
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump967:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump968
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump968:
	cmp rax, [rsp + 24]
	jl .jump969
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump969:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump970
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump970:
	cmp rax, [rsp + 32]
	jl .jump971
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump971:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump972
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump972:
	cmp rax, [rsp + 40]
	jl .jump973
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump973:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 160 to rsp 
		mov r10, [rbp - 160 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rel const200] ; 511
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump974
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump974:
	cmp rax, [rsp + 24]
	jl .jump975
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump975:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump976
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump976:
	cmp rax, [rsp + 32]
	jl .jump977
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump977:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump978
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump978:
	cmp rax, [rsp + 40]
	jl .jump979
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump979:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 24
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 24
	; Moving 24 bytes from rax to rsp 
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'r'
	add qword [rsp + 16], 1
	; Compare r to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump912 ; If r < bound, next iter
	mov qword [rsp + 16], 0 ; r = 0
	add qword [rsp + 8], 1 ; q++
	; Compare q to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump912 ; If q < bound, next iter
	mov qword [rsp + 8], 0 ; q = 0
	add qword [rsp + 0], 1 ; p++
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump912 ; If p < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'q'
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump980
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	neg rax
	push rax
	jmp .jump981
.jump980:
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
.jump981:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump982
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump982:
	; Computing bound for 'p'
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump983
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump983:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by m 
	jno .jump984
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump984:
	imul rdi, [rsp + 0 + 8] ; multiply by (if (b > b) then (- (n - h)) else h) 
	jno .jump985
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump985:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'q' to 0
	mov rax, 0
	push rax
	; Initialize 'p' to 0
	mov rax, 0
	push rax
.jump986: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'q'
	add qword [rsp + 8], 1
	; Compare q to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump986 ; If q < bound, next iter
	mov qword [rsp + 8], 0 ; q = 0
	add qword [rsp + 0], 1 ; p++
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump986 ; If p < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'q'
	call _e
	push rax
	pop rax
	cmp rax, 0
	je .jump987
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	jmp .jump988
.jump987:
	call _e
	push rax
.jump988:
	pop rax
	cmp rax, 0
	je .jump989
	mov rax, [rel const201] ; 214
	push rax
	pop rax
	neg rax
	push rax
	jmp .jump990
.jump989:
	mov rax, [rel const84] ; 965
	push rax
.jump990:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump991
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump991:
	; Computing bound for 'p'
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump992
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump992:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'q' to 0
	mov rax, 0
	push rax
	; Initialize 'p' to 0
	mov rax, 0
	push rax
.jump993: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'q'
	add qword [rsp + 8], 1
	; Compare q to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump993 ; If q < bound, next iter
	mov qword [rsp + 8], 0 ; q = 0
	add qword [rsp + 0], 1 ; p++
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump993 ; If p < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump994
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump994:
	cmp rax, [rsp + 16]
	jl .jump995
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump995:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump996
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump996:
	cmp rax, [rsp + 24]
	jl .jump997
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump997:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump998
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump998:
	cmp rax, [rsp + 24]
	jl .jump999
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump999:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump1000
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1000:
	cmp rax, [rsp + 32]
	jl .jump1001
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1001:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump1002
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1002:
	cmp rax, [rsp + 40]
	jl .jump1003
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1003:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 24
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 24
	; Moving 24 bytes from rax to rsp 
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 136 ; Local variables
	pop rbp
	ret

o:
_o:
	push rbp
	mov rbp, rsp
	sub rsp, 24
	; Moving 24 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'r'
	sub rsp, 8
	; Moving 8 bytes from r12 - 128 to rsp 
		mov r10, [r12 - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1017
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1017:
	; Computing bound for 'q'
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump1018
	sub rsp, 8
	; Moving 8 bytes from r12 - 128 to rsp 
		mov r10, [r12 - 128 + 0]
		mov [rsp + 0], r10
	jmp .jump1019
.jump1018:
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp 
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump1020
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp 
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	jmp .jump1021
.jump1020:
	call _e
	push rax
.jump1021:
	pop rax
	cmp rax, 0
	je .jump1022
	mov rax, [rel const202] ; 867
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	jmp .jump1023
.jump1022:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'q'
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp 
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1024
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump1024:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by n 
	jno .jump1025
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump1025:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'q' to 0
	mov rax, 0
	push rax
.jump1026: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 128 to rsp 
		mov r10, [r12 - 128 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'q'
	add qword [rsp + 0], 1
	; Compare q to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump1026 ; If q < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
.jump1023:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 's'
	sub rsp, 8
	; Moving 8 bytes from r12 - 136 to rsp 
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1027
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump1027:
	; Computing bound for 'r'
	sub rsp, 8
	; Moving 8 bytes from r12 - 128 to rsp 
		mov r10, [r12 - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1028
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1028:
	; Computing bound for 'q'
	mov rax, [rel const203] ; 933
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1029
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump1029:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by 933 
	jno .jump1030
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump1030:
	imul rdi, [rsp + 0 + 8] ; multiply by m 
	jno .jump1031
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump1031:
	imul rdi, [rsp + 0 + 16] ; multiply by l 
	jno .jump1032
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump1032:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 's' to 0
	mov rax, 0
	push rax
	; Initialize 'r' to 0
	mov rax, 0
	push rax
	; Initialize 'q' to 0
	mov rax, 0
	push rax
.jump1033: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 136 to rsp 
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 's'
	add qword [rsp + 16], 1
	; Compare s to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump1033 ; If s < bound, next iter
	mov qword [rsp + 16], 0 ; s = 0
	add qword [rsp + 8], 1 ; r++
	; Compare r to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump1033 ; If r < bound, next iter
	mov qword [rsp + 8], 0 ; r = 0
	add qword [rsp + 0], 1 ; q++
	; Compare q to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump1033 ; If q < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp 
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp 
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump1034
	lea rdi, [rel const44] ; 'divide by zero'
	call _fail_assertion
.jump1034:
	cqo
	idiv r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 32 to rsp 
		mov r10, [r12 - 32 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'q'
	sub rsp, 8
	; Moving 8 bytes from r12 - 128 to rsp 
		mov r10, [r12 - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1035
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump1035:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'q' to 0
	mov rax, 0
	push rax
.jump1036: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 136 to rsp 
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'q'
	add qword [rsp + 0], 1
	; Compare q to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump1036 ; If q < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump1037
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1037:
	cmp rax, [rsp + 24]
	jl .jump1038
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1038:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump1039
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1039:
	cmp rax, [rsp + 32]
	jl .jump1040
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1040:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump1041
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1041:
	cmp rax, [rsp + 40]
	jl .jump1042
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1042:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump1043
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1043:
	cmp rax, [rsp + 8]
	jl .jump1044
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1044:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump1019:
	pop rax
	pop r10
	cmp r10, 0
	jne .jump1045
	sub asp, 8 ; Add alignment
	lea rdi, [rel const44] ; 'divide by zero'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1045:
	cqo
	idiv r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1046
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump1046:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,] 
imul rdi, [rsp + 0 + 0] ; multiply by ((if f then m else (if (if j then j else e()) then [c, 867] else (array[q : n] m))[(array[q : 933, r : m, s : l] l)[(sum[q : m] l), b, (n / n)]]) / h) 
	jno .jump1047
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump1047:
	imul rdi, [rsp + 0 + 8] ; multiply by m 
	jno .jump1048
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump1048:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'r' to 0
	mov rax, 0
	push rax
	; Initialize 'q' to 0
	mov rax, 0
	push rax
.jump1049: ; Begin body of loop
	; Compute loop body
	sub rsp, 24
	sub asp, 8 ; Add alignment
	lea rdi, [rsp + 8]
	call _i
	add asp, 8 ; Remove alignment
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'r'
	add qword [rsp + 8], 1
	; Compare r to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump1049 ; If r < bound, next iter
	mov qword [rsp + 8], 0 ; r = 0
	add qword [rsp + 0], 1 ; q++
	; Compare q to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump1049 ; If q < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	add rsp, 48 ; Local variables
	pop rbp
	ret
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'v'
	sub rsp, 8
	; Moving 8 bytes from r12 - 96 to rsp 
		mov r10, [r12 - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1050
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump1050:
	; Computing bound for 'u'
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1051
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1051:
	; Computing bound for 't'
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 't'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1052
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1052:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float 
	imul rdi, [rsp + 0 + 0] ; multiply by c 
	jno .jump1053
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1053:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 't' to 0
	mov rax, 0
	push rax
.jump1054: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const204] ; 62.99
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 't'
	add qword [rsp + 0], 1
	; Compare t to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump1054 ; If t < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 128 to rsp 
		mov r10, [r12 - 128 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 136 to rsp 
		mov r10, [r12 - 136 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump1055
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump1055:
	cmp rax, [rsp + 8]
	jl .jump1056
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump1056:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp 
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump1057
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	jmp .jump1058
.jump1057:
	call _e
	push rax
.jump1058:
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump1059
	mov rax, [rel const27] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump1061
	mov rax, [rel const205] ; 95.14
	push rax
	mov rax, [rel const206] ; 25.21
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	jmp .jump1062
.jump1061:
	mov rax, [rel const207] ; 52.79
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
.jump1062:
	jmp .jump1060
.jump1059:
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp 
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump1063
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	jmp .jump1064
.jump1063:
	mov rax, [rel const27] ; True
	push rax
.jump1064:
	pop rax
	cmp rax, 0
	je .jump1065
	mov rax, [rel const208] ; 23.09
	push rax
	jmp .jump1066
.jump1065:
	mov rax, [rel const209] ; 24.21
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
.jump1066:
.jump1060:
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump1067
	mov rax, [rel const210] ; 614
	push rax
	jmp .jump1068
.jump1067:
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
.jump1068:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1069
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump1069:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
imul rdi, [rsp + 0 + 0] ; multiply by (if ((if (! (if j then f else e())) then (if (! true) then (25.21 - 95.14) else (- 52.79)) else (if (if j then f else true) then 23.09 else (- 24.21))) == (array[t : c] 62.99)[((- l) - m)]) then 614 else c) 
	jno .jump1070
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump1070:
	imul rdi, [rsp + 0 + 8] ; multiply by r 
	jno .jump1071
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump1071:
	imul rdi, [rsp + 0 + 16] ; multiply by h 
	jno .jump1072
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump1072:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'v' to 0
	mov rax, 0
	push rax
	; Initialize 'u' to 0
	mov rax, 0
	push rax
	; Initialize 't' to 0
	mov rax, 0
	push rax
.jump1073: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'v'
	add qword [rsp + 16], 1
	; Compare v to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump1073 ; If v < bound, next iter
	mov qword [rsp + 16], 0 ; v = 0
	add qword [rsp + 8], 1 ; u++
	; Compare u to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump1073 ; If u < bound, next iter
	mov qword [rsp + 8], 0 ; u = 0
	add qword [rsp + 0], 1 ; t++
	; Compare t to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump1073 ; If t < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'x'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1074
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump1074:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool 
	imul rdi, [rsp + 0 + 0] ; multiply by c 
	jno .jump1075
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump1075:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'x' to 0
	mov rax, 0
	push rax
.jump1076: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const8] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'x'
	add qword [rsp + 0], 1
	; Compare x to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump1076 ; If x < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	add rsp, 96 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp ; end of jpl_main prelude
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'a'
	mov rax, [rel const0] ; 734
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'a' to 0
	mov rax, 0
	push rax
.jump2: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'a'
	add qword [rsp + 0], 1
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump2 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	neg rax
	push rax
	mov rax, [rel const2] ; 981
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump3
	mov rax, [rel const3] ; 928
	push rax
	jmp .jump4
.jump3:
	mov rax, [rel const4] ; 5
	push rax
.jump4:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'b'
	mov rax, [rel const5] ; 66
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump5
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump5:
	; Computing bound for 'a'
	mov rax, [rel const6] ; 474
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump6
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump6:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by 474 
	jno .jump7
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump7:
	imul rdi, [rsp + 0 + 8] ; multiply by 66 
	jno .jump8
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump8:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'b' to 0
	mov rax, 0
	push rax
	; Initialize 'a' to 0
	mov rax, 0
	push rax
.jump9: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const8] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	jmp .jump11
.jump10:
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
.jump11:
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'b'
	add qword [rsp + 8], 1
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump9 ; If b < bound, next iter
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump9 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const8] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump12
	mov rax, [rel const9] ; 201
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const10] ; 740
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	jmp .jump13
.jump12:
	mov rax, [rel const11] ; 721
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
.jump13:
	mov rax, [rel const12] ; 0.13
	push rax
	mov rax, [rel const13] ; 72.05
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump14
	mov rax, [rel const14] ; 303
	push rax
	pop rax
	neg rax
	push rax
	jmp .jump15
.jump14:
	mov rax, [rel const15] ; 172
	push rax
.jump15:
	mov rax, [rel const16] ; 360
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump16
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump16:
	cmp rax, [rsp + 16]
	jl .jump17
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump17:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump18
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump18:
	cmp rax, [rsp + 24]
	jl .jump19
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump19:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump20
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'c'
	mov rax, [rel const19] ; 605
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump22
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump22:
	; Computing bound for 'b'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'b'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'c'
	mov rax, [rel const20] ; 790
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump23
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump23:
	; Computing bound for 'b'
	mov rax, [rel const21] ; 309
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump24
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump24:
	; Computing bound for 'a'
	mov rax, [rel const22] ; 460
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump25
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump25:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'c' to 0
	mov rax, 0
	push rax
	; Initialize 'b' to 0
	mov rax, 0
	push rax
	; Initialize 'a' to 0
	mov rax, 0
	push rax
.jump26: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment 'c'
	add qword [rsp + 16], 1
	; Compare c to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump26 ; If c < bound, next iter
	mov qword [rsp + 16], 0 ; c = 0
	add qword [rsp + 8], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump26 ; If b < bound, next iter
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump26 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump27
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump27:
	; Computing bound for 'a'
	mov rax, [rel const23] ; 736
	push rax
	mov rax, [rel const24] ; 29
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const25] ; 552
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump28
	sub asp, 8 ; Add alignment
	lea rdi, [rel const26] ; 'mod by zero'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump28:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump29
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump29:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'b' to 0
	mov rax, 0
	push rax
	; Initialize 'a' to 0
	mov rax, 0
	push rax
.jump30: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'b'
	add qword [rsp + 8], 1
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump30 ; If b < bound, next iter
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump30 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump31
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump31:
	; Computing bound for 'a'
	mov rax, [rel const27] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump32
	mov rax, [rel const28] ; 53
	push rax
	jmp .jump33
.jump32:
	mov rax, [rel const29] ; 174
	push rax
.jump33:
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump34
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump34:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,] 
	imul rdi, [rsp + 0 + 0] ; multiply by (- (if (! true) then 53 else 174)) 
	jno .jump35
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump35:
imul rdi, [rsp + 0 + 8] ; multiply by (sum[a : ((- 552) % (29 * 736)), b : (- (sum[a : 460, b : 309, c : 790] c))] b) 
	jno .jump36
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump36:
	imul rdi, [rsp + 0 + 16] ; multiply by 605 
	jno .jump37
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump37:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'c' to 0
	mov rax, 0
	push rax
	; Initialize 'b' to 0
	mov rax, 0
	push rax
	; Initialize 'a' to 0
	mov rax, 0
	push rax
.jump38: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const30] ; 959
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump39
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'e'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'e'
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump41
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump41:
	; Computing bound for 'd'
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump42
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump42:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'e' to 0
	mov rax, 0
	push rax
	; Initialize 'd' to 0
	mov rax, 0
	push rax
.jump43: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'e'
	add qword [rsp + 8], 1
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump43 ; If e < bound, next iter
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump43 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump44
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump44:
	; Computing bound for 'd'
	mov rax, [rel const31] ; 774
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump45
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump45:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by (b - 774) 
	jno .jump46
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump46:
imul rdi, [rsp + 0 + 8] ; multiply by (sum[d : a, e : a] c) 
	jno .jump47
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump47:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'e' to 0
	mov rax, 0
	push rax
	; Initialize 'd' to 0
	mov rax, 0
	push rax
.jump48: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'e'
	add qword [rsp + 8], 1
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump48 ; If e < bound, next iter
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump48 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump40
.jump39:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'e'
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump49
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump49:
	; Computing bound for 'd'
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump50
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump50:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by b 
	jno .jump51
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump51:
	imul rdi, [rsp + 0 + 8] ; multiply by (- c) 
	jno .jump52
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump52:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'e' to 0
	mov rax, 0
	push rax
	; Initialize 'd' to 0
	mov rax, 0
	push rax
.jump53: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'e'
	add qword [rsp + 8], 1
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump53 ; If e < bound, next iter
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump53 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump40:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'c'
	add qword [rsp + 16], 1
	; Compare c to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump38 ; If c < bound, next iter
	mov qword [rsp + 16], 0 ; c = 0
	add qword [rsp + 8], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump38 ; If b < bound, next iter
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump38 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	mov rax, [rel const27] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump54
	mov rax, [rel const32] ; 342
	push rax
	jmp .jump55
.jump54:
	mov rax, [rel const33] ; 651
	push rax
	mov rax, [rel const34] ; 645
	push rax
	mov rax, [rel const35] ; 220
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
.jump55:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'a'
	mov rax, [rel const36] ; 670
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump56
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump56:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'a' to 0
	mov rax, 0
	push rax
.jump57: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'b'
	mov rax, [rel const37] ; 389
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump58
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump58:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by 389 
	jno .jump59
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump59:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'b' to 0
	mov rax, 0
	push rax
.jump60: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const38] ; 159
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'b'
	add qword [rsp + 0], 1
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump60 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump61
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump61:
	cmp rax, [rsp + 8]
	jl .jump62
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump62:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'a'
	add qword [rsp + 0], 1
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump57 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'a'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'c'
	mov rax, [rel const27] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump63
	mov rax, [rel const39] ; 694
	push rax
	jmp .jump64
.jump63:
	mov rax, [rel const40] ; 269
	push rax
.jump64:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'a'
	mov rax, [rel const41] ; 920
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump65
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump65:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'a' to 0
	mov rax, 0
	push rax
.jump66: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'a'
	add qword [rsp + 0], 1
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump66 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump67
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump67:
	; Computing bound for 'b'
	mov rax, [rel const42] ; 743
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump68
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump68:
	; Computing bound for 'a'
	mov rax, [rel const43] ; 948
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump69
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump69:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'c' to 0
	mov rax, 0
	push rax
	; Initialize 'b' to 0
	mov rax, 0
	push rax
	; Initialize 'a' to 0
	mov rax, 0
	push rax
.jump70: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'f'
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump71
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump71:
	; Computing bound for 'e'
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump72
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump72:
	; Computing bound for 'd'
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump73
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump73:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'f' to 0
	mov rax, 0
	push rax
	; Initialize 'e' to 0
	mov rax, 0
	push rax
	; Initialize 'd' to 0
	mov rax, 0
	push rax
.jump74: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment 'f'
	add qword [rsp + 16], 1
	; Compare f to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump74 ; If f < bound, next iter
	mov qword [rsp + 16], 0 ; f = 0
	add qword [rsp + 8], 1 ; e++
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump74 ; If e < bound, next iter
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump74 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	pop rax
	pop r10
	cmp r10, 0
	jne .jump75
	sub asp, 8 ; Add alignment
	lea rdi, [rel const44] ; 'divide by zero'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump75:
	cqo
	idiv r10
	push rax
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment 'c'
	add qword [rsp + 16], 1
	; Compare c to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump70 ; If c < bound, next iter
	mov qword [rsp + 16], 0 ; c = 0
	add qword [rsp + 8], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump70 ; If b < bound, next iter
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump70 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump76
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump76:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'a' to 0
	mov rax, 0
	push rax
.jump77: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'b'
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const45] ; 162
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump78
	sub asp, 8 ; Add alignment
	lea rdi, [rel const44] ; 'divide by zero'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump78:
	cqo
	idiv r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump79
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump79:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'b' to 0
	mov rax, 0
	push rax
.jump80: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const8] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump81
	mov rax, [rel const8] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump83
	mov rax, [rel const46] ; 505
	push rax
	jmp .jump84
.jump83:
	mov rax, [rel const47] ; 495
	push rax
.jump84:
	jmp .jump82
.jump81:
	mov rax, [rel const48] ; 143
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
.jump82:
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'b'
	add qword [rsp + 0], 1
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump80 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'a'
	add qword [rsp + 0], 1
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump77 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump85
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump85:
	cmp rax, [rsp + 24]
	jl .jump86
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump86:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump87
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump87:
	cmp rax, [rsp + 32]
	jl .jump88
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump88:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump89
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump89:
	cmp rax, [rsp + 40]
	jl .jump90
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump90:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 24
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 24
	; Moving 24 bytes from rax to rsp 
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump21
.jump20:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'c'
	mov rax, [rel const49] ; 881
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump91
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump91:
	; Computing bound for 'b'
	mov rax, [rel const50] ; 787
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump92
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump92:
	; Computing bound for 'a'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'a'
	mov rax, [rel const51] ; 597
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump93
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump93:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'a' to 0
	mov rax, 0
	push rax
.jump94: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'a'
	add qword [rsp + 0], 1
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump94 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump95
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump95:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'c' to 0
	mov rax, 0
	push rax
	; Initialize 'b' to 0
	mov rax, 0
	push rax
	; Initialize 'a' to 0
	mov rax, 0
	push rax
.jump96: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const52] ; 182
	push rax
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment 'c'
	add qword [rsp + 16], 1
	; Compare c to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump96 ; If c < bound, next iter
	mov qword [rsp + 16], 0 ; c = 0
	add qword [rsp + 8], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump96 ; If b < bound, next iter
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump96 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rel const53] ; 195
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump97
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'b'
	mov rax, [rel const54] ; 946
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump99
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump99:
	; Computing bound for 'a'
	mov rax, [rel const55] ; 187
	push rax
	mov rax, [rel const56] ; 411
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump100
	sub asp, 8 ; Add alignment
	lea rdi, [rel const26] ; 'mod by zero'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump100:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'a'
	mov rax, [rel const57] ; 421
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump101
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump101:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'a' to 0
	mov rax, 0
	push rax
.jump102: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'c'
	mov rax, [rel const58] ; 83
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump103
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump103:
	; Computing bound for 'b'
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump104
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump104:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'c' to 0
	mov rax, 0
	push rax
	; Initialize 'b' to 0
	mov rax, 0
	push rax
.jump105: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const59] ; 15
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'c'
	add qword [rsp + 8], 1
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump105 ; If c < bound, next iter
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump105 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'a'
	add qword [rsp + 0], 1
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump102 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	pop r10
	cmp r10, 0
	jne .jump106
	sub asp, 8 ; Add alignment
	lea rdi, [rel const26] ; 'mod by zero'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump106:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump107
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump107:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
imul rdi, [rsp + 0 + 0] ; multiply by ((sum[a : 421] (sum[b : a, c : 83] 15)) % (411 % 187)) 
	jno .jump108
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump108:
	imul rdi, [rsp + 0 + 8] ; multiply by 946 
	jno .jump109
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump109:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'b' to 0
	mov rax, 0
	push rax
	; Initialize 'a' to 0
	mov rax, 0
	push rax
.jump110: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'd'
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump111
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump111:
	; Computing bound for 'c'
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump112
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump112:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by b 
	jno .jump113
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump113:
	imul rdi, [rsp + 0 + 8] ; multiply by a 
	jno .jump114
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump114:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'd' to 0
	mov rax, 0
	push rax
	; Initialize 'c' to 0
	mov rax, 0
	push rax
.jump115: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const8] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump116
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	jmp .jump117
.jump116:
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
.jump117:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'd'
	add qword [rsp + 8], 1
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump115 ; If d < bound, next iter
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump115 ; If c < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'e'
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump118
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump118:
	; Computing bound for 'd'
	mov rax, [rel const8] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump119
	mov rax, [rel const60] ; 723
	push rax
	jmp .jump120
.jump119:
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
.jump120:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump121
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump121:
	; Computing bound for 'c'
	mov rax, [rel const61] ; 388
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump122
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump122:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'e' to 0
	mov rax, 0
	push rax
	; Initialize 'd' to 0
	mov rax, 0
	push rax
	; Initialize 'c' to 0
	mov rax, 0
	push rax
.jump123: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment 'e'
	add qword [rsp + 16], 1
	; Compare e to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump123 ; If e < bound, next iter
	mov qword [rsp + 16], 0 ; e = 0
	add qword [rsp + 8], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump123 ; If d < bound, next iter
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump123 ; If c < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'c'
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump124
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump124:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by a 
	jno .jump125
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump125:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'c' to 0
	mov rax, 0
	push rax
.jump126: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'c'
	add qword [rsp + 0], 1
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump126 ; If c < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump127
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump127:
	cmp rax, [rsp + 8]
	jl .jump128
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump128:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump129
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump129:
	cmp rax, [rsp + 16]
	jl .jump130
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump130:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump131
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump131:
	cmp rax, [rsp + 24]
	jl .jump132
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump132:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'b'
	add qword [rsp + 8], 1
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump110 ; If b < bound, next iter
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump110 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump98
.jump97:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'c'
	mov rax, [rel const62] ; 490
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump133
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump133:
	; Computing bound for 'b'
	mov rax, [rel const63] ; 972
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump134
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump134:
	; Computing bound for 'a'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'a'
	mov rax, [rel const64] ; 680
	push rax
	mov rax, [rel const65] ; 291
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump135
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump135:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'a' to 0
	mov rax, 0
	push rax
.jump136: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'a'
	add qword [rsp + 0], 1
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump136 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump137
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump137:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,] 
imul rdi, [rsp + 0 + 0] ; multiply by (sum[a : (291 * 680)] a) 
	jno .jump138
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump138:
	imul rdi, [rsp + 0 + 8] ; multiply by 972 
	jno .jump139
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump139:
	imul rdi, [rsp + 0 + 16] ; multiply by (- 490) 
	jno .jump140
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump140:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'c' to 0
	mov rax, 0
	push rax
	; Initialize 'b' to 0
	mov rax, 0
	push rax
	; Initialize 'a' to 0
	mov rax, 0
	push rax
.jump141: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'e'
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump142
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump142:
	; Computing bound for 'd'
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const66] ; 183
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump143
	lea rdi, [rel const26] ; 'mod by zero'
	call _fail_assertion
.jump143:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump144
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump144:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by (183 % c) 
	jno .jump145
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump145:
	imul rdi, [rsp + 0 + 8] ; multiply by c 
	jno .jump146
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump146:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'e' to 0
	mov rax, 0
	push rax
	; Initialize 'd' to 0
	mov rax, 0
	push rax
.jump147: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp 
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'e'
	add qword [rsp + 8], 1
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump147 ; If e < bound, next iter
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump147 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'c'
	add qword [rsp + 16], 1
	; Compare c to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump141 ; If c < bound, next iter
	mov qword [rsp + 16], 0 ; c = 0
	add qword [rsp + 8], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump141 ; If b < bound, next iter
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump141 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'a'
	mov rax, [rel const67] ; 620
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump148
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump148:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'a' to 0
	mov rax, 0
	push rax
.jump149: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const68] ; 337
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'a'
	add qword [rsp + 0], 1
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump149 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const69] ; 437
	push rax
	mov rax, [rel const70] ; 921
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump150
	lea rdi, [rel const44] ; 'divide by zero'
	call _fail_assertion
.jump150:
	cqo
	idiv r10
	push rax
	mov rax, [rel const6] ; 474
	push rax
	mov rax, [rel const27] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump151
	mov rax, [rel const71] ; 622
	push rax
	jmp .jump152
.jump151:
	mov rax, [rel const72] ; 125
	push rax
.jump152:
	pop rax
	pop r10
	cmp r10, 0
	jne .jump153
	sub asp, 8 ; Add alignment
	lea rdi, [rel const26] ; 'mod by zero'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump153:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump154
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump154:
	cmp rax, [rsp + 24]
	jl .jump155
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump155:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump156
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump156:
	cmp rax, [rsp + 32]
	jl .jump157
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump157:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump158
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump158:
	cmp rax, [rsp + 40]
	jl .jump159
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump159:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 24
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 24
	; Moving 24 bytes from rax to rsp 
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump98:
.jump21:
	mov rax, [rel const27] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump160
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const73] ; 104
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	jmp .jump161
.jump160:
	mov rax, [rel const27] ; True
	push rax
.jump161:
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump162
	mov rax, [rel const27] ; True
	push rax
	jmp .jump163
.jump162:
	mov rax, [rel const27] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
.jump163:
	pop rax
	cmp rax, 0
	je .jump164
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'e'
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump166
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump166:
	; Computing bound for 'd'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'd'
	mov rax, [rel const8] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump167
	sub rsp, 24
	; Moving 24 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	jmp .jump168
.jump167:
	sub rsp, 24
	; Moving 24 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
.jump168:
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump169
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump169:
	cmp rax, [rsp + 16]
	jl .jump170
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump170:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump171
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump171:
	cmp rax, [rsp + 24]
	jl .jump172
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump172:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump173
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump173:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'd' to 0
	mov rax, 0
	push rax
.jump174: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'd'
	add qword [rsp + 0], 1
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump174 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump175
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump175:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof int[] 
imul rdi, [rsp + 0 + 0] ; multiply by (- (sum[d : (if false then a else a)[b, (c + b)]] b)) 
	jno .jump176
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump176:
	imul rdi, [rsp + 0 + 8] ; multiply by b 
	jno .jump177
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump177:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'e' to 0
	mov rax, 0
	push rax
	; Initialize 'd' to 0
	mov rax, 0
	push rax
.jump178: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'f'
	mov rax, [rel const74] ; 466
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump179
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump179:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump180: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'f'
	add qword [rsp + 0], 1
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump180 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	pop r10
	imul rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rdi, 24
	call _jpl_alloc
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 3
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 16
	add rax, [rsp + 48]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment 'e'
	add qword [rsp + 8], 1
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump178 ; If e < bound, next iter
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump178 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump165
.jump164:
	mov rax, [rel const27] ; True
	push rax
	mov rax, [rel const27] ; True
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump181
	mov rax, [rel const8] ; False
	push rax
	jmp .jump182
.jump181:
	mov rax, [rel const27] ; True
	push rax
.jump182:
	pop rax
	cmp rax, 0
	je .jump183
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'e'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump185
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump185:
	; Computing bound for 'd'
	mov rax, [rel const3] ; 928
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump186
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump186:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'e' to 0
	mov rax, 0
	push rax
	; Initialize 'd' to 0
	mov rax, 0
	push rax
.jump187: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const75] ; 70.06
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 32] ; Load sum
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment 'e'
	add qword [rsp + 8], 1
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump187 ; If e < bound, next iter
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump187 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rel const76] ; 58.25
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	jmp .jump184
.jump183:
	mov rax, [rel const27] ; True
	push rax
.jump184:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'e'
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump188
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump188:
	; Computing bound for 'd'
	mov rax, [rel const77] ; 507
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump189
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump189:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool 
	imul rdi, [rsp + 0 + 0] ; multiply by (- 507) 
	jno .jump190
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump190:
	imul rdi, [rsp + 0 + 8] ; multiply by b 
	jno .jump191
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump191:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'e' to 0
	mov rax, 0
	push rax
	; Initialize 'd' to 0
	mov rax, 0
	push rax
.jump192: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'e'
	add qword [rsp + 8], 1
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump192 ; If e < bound, next iter
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump192 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rel const8] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump193
	mov rax, [rel const78] ; 273
	push rax
	jmp .jump194
.jump193:
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump195
	sub asp, 8 ; Add alignment
	lea rdi, [rel const26] ; 'mod by zero'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump195:
	cqo
	idiv r10
	mov rax, rdx
	push rax
.jump194:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump196
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump196:
	cmp rax, [rsp + 16]
	jl .jump197
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump197:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump198
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump198:
	cmp rax, [rsp + 24]
	jl .jump199
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump199:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump200
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'e'
	mov rax, [rel const79] ; 660
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump202
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump202:
	; Computing bound for 'd'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump203
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump203:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof int[] 
	imul rdi, [rsp + 0 + 0] ; multiply by (- (- c)) 
	jno .jump204
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump204:
	imul rdi, [rsp + 0 + 8] ; multiply by 660 
	jno .jump205
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump205:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'e' to 0
	mov rax, 0
	push rax
	; Initialize 'd' to 0
	mov rax, 0
	push rax
.jump206: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rdi, 16
	sub asp, 8 ; Add alignment
	call _jpl_alloc
	add asp, 8 ; Remove alignment
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 16
	add rax, [rsp + 48]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment 'e'
	add qword [rsp + 8], 1
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump206 ; If e < bound, next iter
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump206 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump201
.jump200:
	mov rax, [rel const8] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump207
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'e'
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump209
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump209:
	; Computing bound for 'd'
	mov rax, [rel const8] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump210
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const80] ; 247
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	jmp .jump211
.jump210:
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const81] ; 456
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
.jump211:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump212
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump212:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof int[] 
	imul rdi, [rsp + 0 + 0] ; multiply by (if (! false) then (247 - b) else (456 * c)) 
	jno .jump213
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump213:
	imul rdi, [rsp + 0 + 8] ; multiply by b 
	jno .jump214
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump214:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'e' to 0
	mov rax, 0
	push rax
	; Initialize 'd' to 0
	mov rax, 0
	push rax
.jump215: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const82] ; 92.92
	push rax
	mov rax, [rel const83] ; 89.09
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump216
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'f'
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump218
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump218:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by e 
	jno .jump219
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump219:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump220: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'f'
	add qword [rsp + 0], 1
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump220 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	jmp .jump217
.jump216:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'f'
	mov rax, [rel const84] ; 965
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump221
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump221:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by 965 
	jno .jump222
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump222:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump223: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'f'
	add qword [rsp + 0], 1
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump223 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
.jump217:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 16
	add rax, [rsp + 48]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment 'e'
	add qword [rsp + 8], 1
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump215 ; If e < bound, next iter
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump215 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump208
.jump207:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'e'
	mov rax, [rel const85] ; 852
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump224
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump224:
	; Computing bound for 'd'
	mov rax, [rel const86] ; 232
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump225
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump225:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof int[] 
	imul rdi, [rsp + 0 + 0] ; multiply by 232 
	jno .jump226
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump226:
	imul rdi, [rsp + 0 + 8] ; multiply by 852 
	jno .jump227
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump227:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'e' to 0
	mov rax, 0
	push rax
	; Initialize 'd' to 0
	mov rax, 0
	push rax
.jump228: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'f'
	mov rax, [rel const87] ; 314
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump229
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump229:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by (- 314) 
	jno .jump230
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump230:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump231: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const88] ; 176
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'f'
	add qword [rsp + 0], 1
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump231 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 16
	add rax, [rsp + 48]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment 'e'
	add qword [rsp + 8], 1
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump228 ; If e < bound, next iter
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump228 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump208:
.jump201:
.jump165:
	mov rax, [rel const8] ; False
	push rax
	lea rdi, [rel const89] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'h'
	mov rax, [rel const117] ; 290
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump411
	mov rax, [rel const27] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump413
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	jmp .jump414
.jump413:
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
.jump414:
	jmp .jump412
.jump411:
	mov rax, [rel const118] ; 625
	push rax
.jump412:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump415
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump415:
	; Computing bound for 'g'
	sub asp, 8 ; Add alignment
	call _e
	add asp, 8 ; Remove alignment
	push rax
	pop rax
	cmp rax, 0
	je .jump416
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump418
	mov rax, [rel const119] ; 225
	push rax
	jmp .jump419
.jump418:
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
.jump419:
	jmp .jump417
.jump416:
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
.jump417:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump420
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump420:
	; Computing bound for 'f'
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 56 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump421
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump421:
	cmp rax, [rsp + 16]
	jl .jump422
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump422:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump423
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump423:
	cmp rax, [rsp + 24]
	jl .jump424
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump424:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 16
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 16
	; Moving 16 bytes from rax to rsp 
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump425
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump425:
	cmp rax, [rsp + 8]
	jl .jump426
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump426:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump427
	lea rdi, [rel const44] ; 'divide by zero'
	call _fail_assertion
.jump427:
	cqo
	idiv r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump428
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump428:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float 
	imul rdi, [rsp + 0 + 0] ; multiply by (d[c, b][c] / b) 
	jno .jump429
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump429:
	imul rdi, [rsp + 0 + 8] ; multiply by (if e() then (if (c <= b) then 225 else b) else c) 
	jno .jump430
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump430:
	imul rdi, [rsp + 0 + 16] ; multiply by (if (! (c <= 290)) then (if true then c else c) else 625) 
	jno .jump431
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump431:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'h' to 0
	mov rax, 0
	push rax
	; Initialize 'g' to 0
	mov rax, 0
	push rax
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump432: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'j'
	mov rax, [rel const27] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump433
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	jmp .jump434
.jump433:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'j'
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp 
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump435
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump435:
	; Computing bound for 'i'
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump436
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump436:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'j' to 0
	mov rax, 0
	push rax
	; Initialize 'i' to 0
	mov rax, 0
	push rax
.jump437: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 112 to rsp 
		mov r10, [rbp - 112 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'j'
	add qword [rsp + 8], 1
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump437 ; If j < bound, next iter
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump437 ; If i < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
.jump434:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump438
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump438:
	; Computing bound for 'i'
	mov rax, [rel const120] ; 462
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump439
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump439:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'j' to 0
	mov rax, 0
	push rax
	; Initialize 'i' to 0
	mov rax, 0
	push rax
.jump440: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const121] ; 43.08
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 32] ; Load sum
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment 'j'
	add qword [rsp + 8], 1
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump440 ; If j < bound, next iter
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump440 ; If i < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'h'
	add qword [rsp + 16], 1
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump432 ; If h < bound, next iter
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump432 ; If g < bound, next iter
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump432 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const27] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump441
	sub asp, 8 ; Add alignment
	call _e
	add asp, 8 ; Remove alignment
	push rax
	jmp .jump442
.jump441:
	mov rax, [rel const27] ; True
	push rax
.jump442:
	pop rax
	cmp rax, 0
	je .jump443
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const122] ; 211
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	jmp .jump444
.jump443:
	sub asp, 8 ; Add alignment
	call _e
	add asp, 8 ; Remove alignment
	push rax
	pop rax
	cmp rax, 0
	je .jump445
	sub asp, 8 ; Add alignment
	call _e
	add asp, 8 ; Remove alignment
	push rax
	pop rax
	cmp rax, 0
	je .jump447
	sub asp, 8 ; Add alignment
	call _e
	add asp, 8 ; Remove alignment
	push rax
	jmp .jump448
.jump447:
	sub asp, 8 ; Add alignment
	call _e
	add asp, 8 ; Remove alignment
	push rax
.jump448:
	jmp .jump446
.jump445:
	mov rax, [rel const8] ; False
	push rax
.jump446:
.jump444:
	pop rax
	cmp rax, 0
	je .jump449
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	jmp .jump450
.jump449:
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
.jump450:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump451
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump451:
	cmp rax, [rsp + 24]
	jl .jump452
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump452:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump453
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump453:
	cmp rax, [rsp + 32]
	jl .jump454
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump454:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump455
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump455:
	cmp rax, [rsp + 40]
	jl .jump456
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump456:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const123] ; 56.59
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	sub asp, 8 ; Add alignment
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'h'
	mov rax, [rel const8] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump457
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'g'
	mov rax, [rel const124] ; 472
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump459
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump459:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'g' to 0
	mov rax, 0
	push rax
.jump460: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const125] ; 256
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'g'
	add qword [rsp + 0], 1
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump460 ; If g < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	neg rax
	push rax
	jmp .jump458
.jump457:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'h'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump461
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump461:
	; Computing bound for 'g'
	mov rax, [rel const126] ; 87
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump462
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump462:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'h' to 0
	mov rax, 0
	push rax
	; Initialize 'g' to 0
	mov rax, 0
	push rax
.jump463: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'h'
	add qword [rsp + 8], 1
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump463 ; If h < bound, next iter
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump463 ; If g < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	pop rax
	neg rax
	push rax
.jump458:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump464
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump464:
	; Computing bound for 'g'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'i'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump465
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump465:
	; Computing bound for 'h'
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump466
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump466:
	; Computing bound for 'g'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump467
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	jmp .jump468
.jump467:
	mov rax, [rel const127] ; 451
	push rax
.jump468:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump469
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump469:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'i' to 0
	mov rax, 0
	push rax
	; Initialize 'h' to 0
	mov rax, 0
	push rax
	; Initialize 'g' to 0
	mov rax, 0
	push rax
.jump470: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'j'
	sub rsp, 8
	; Moving 8 bytes from rbp - 144 to rsp 
		mov r10, [rbp - 144 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump471
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump471:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'j' to 0
	mov rax, 0
	push rax
.jump472: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 136 to rsp 
		mov r10, [rbp - 136 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'j'
	add qword [rsp + 0], 1
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump472 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment 'i'
	add qword [rsp + 16], 1
	; Compare i to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump470 ; If i < bound, next iter
	mov qword [rsp + 16], 0 ; i = 0
	add qword [rsp + 8], 1 ; h++
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump470 ; If h < bound, next iter
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump470 ; If g < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump473
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump473:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float 
imul rdi, [rsp + 0 + 0] ; multiply by (sum[g : (if (c < c) then b else 451), h : b, i : (- c)] (sum[j : g] (- h))) 
	jno .jump474
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump474:
imul rdi, [rsp + 0 + 8] ; multiply by (if false then (- (sum[g : 472] 256)) else (- (sum[g : 87, h : c] g))) 
	jno .jump475
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump475:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'h' to 0
	mov rax, 0
	push rax
	; Initialize 'g' to 0
	mov rax, 0
	push rax
.jump476: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const128] ; 18.8
	push rax
	mov rax, [rel const129] ; 76.8
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'h'
	add qword [rsp + 8], 1
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump476 ; If h < bound, next iter
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump476 ; If g < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump477
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump477:
	cmp rax, [rsp + 16]
	jl .jump478
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump478:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump479
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump479:
	cmp rax, [rsp + 24]
	jl .jump480
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump480:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'g'
	mov rax, [rel const130] ; 52
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump481
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump481:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'g' to 0
	mov rax, 0
	push rax
.jump482: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'j'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'i'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump483
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump483:
	; Computing bound for 'h'
	mov rax, [rel const131] ; 34
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump484
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump484:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'i' to 0
	mov rax, 0
	push rax
	; Initialize 'h' to 0
	mov rax, 0
	push rax
.jump485: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'i'
	add qword [rsp + 8], 1
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump485 ; If i < bound, next iter
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump485 ; If h < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump486
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump486:
	; Computing bound for 'i'
	mov rax, [rel const54] ; 946
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump487
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump487:
	; Computing bound for 'h'
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump488
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump488:
	; Computing total size of heap memory to allocate
	mov rdi, 16 ; sizeof float[] 
	imul rdi, [rsp + 0 + 0] ; multiply by g 
	jno .jump489
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump489:
	imul rdi, [rsp + 0 + 8] ; multiply by 946 
	jno .jump490
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump490:
imul rdi, [rsp + 0 + 16] ; multiply by (sum[h : 34, i : c] g) 
	jno .jump491
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump491:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'j' to 0
	mov rax, 0
	push rax
	; Initialize 'i' to 0
	mov rax, 0
	push rax
	; Initialize 'h' to 0
	mov rax, 0
	push rax
.jump492: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'k'
	mov rax, [rel const132] ; 688
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump493
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump493:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float 
	imul rdi, [rsp + 0 + 0] ; multiply by 688 
	jno .jump494
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump494:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'k' to 0
	mov rax, 0
	push rax
.jump495: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const133] ; 82.57
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'k'
	add qword [rsp + 0], 1
	; Compare k to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump495 ; If k < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 16
	add rax, [rsp + 64]
	; Move body (16 bytes) to index
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	; Increment 'j'
	add qword [rsp + 16], 1
	; Compare j to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump492 ; If j < bound, next iter
	mov qword [rsp + 16], 0 ; j = 0
	add qword [rsp + 8], 1 ; i++
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump492 ; If i < bound, next iter
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump492 ; If h < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump496
	mov rax, [rel const134] ; 361
	push rax
	jmp .jump497
.jump496:
	mov rax, [rel const135] ; 663
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump498
	sub asp, 8 ; Add alignment
	lea rdi, [rel const44] ; 'divide by zero'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump498:
	cqo
	idiv r10
	push rax
.jump497:
	mov rax, [rel const136] ; 147
	push rax
	sub asp, 8 ; Add alignment
	call _e
	add asp, 8 ; Remove alignment
	push rax
	pop rax
	cmp rax, 0
	je .jump499
	sub rsp, 24
	; Moving 24 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const137] ; 945
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump501
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump501:
	cmp rax, [rsp + 16]
	jl .jump502
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump502:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump503
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump503:
	cmp rax, [rsp + 24]
	jl .jump504
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump504:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump500
.jump499:
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
.jump500:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump505
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump505:
	cmp rax, [rsp + 24]
	jl .jump506
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump506:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump507
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump507:
	cmp rax, [rsp + 32]
	jl .jump508
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump508:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump509
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump509:
	cmp rax, [rsp + 40]
	jl .jump510
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump510:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 16
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 16
	; Moving 16 bytes from rax to rsp 
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump511
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump511:
	cmp rax, [rsp + 8]
	jl .jump512
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump512:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 16] ; Load sum
	movsd [rsp + 16], xmm0 ; Save sum
	; Increment 'g'
	add qword [rsp + 0], 1
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump482 ; If g < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	lea rdi, [rel const89] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	add asp, 8 ; Remove alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump513
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'g'
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump515
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump515:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[][,] 
	imul rdi, [rsp + 0 + 0] ; multiply by b 
	jno .jump516
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump516:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'g' to 0
	mov rax, 0
	push rax
.jump517: ; Begin body of loop
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 56 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 24
	add rax, [rsp + 40]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'g'
	add qword [rsp + 0], 1
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump517 ; If g < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'h'
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump518
	mov rax, [rel const138] ; 580
	push rax
	jmp .jump519
.jump518:
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
.jump519:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump520
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump520:
	; Computing bound for 'g'
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump521
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump521:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'h' to 0
	mov rax, 0
	push rax
	; Initialize 'g' to 0
	mov rax, 0
	push rax
.jump522: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'h'
	add qword [rsp + 8], 1
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump522 ; If h < bound, next iter
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump522 ; If g < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump523
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump523:
	cmp rax, [rsp + 8]
	jl .jump524
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump524:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 24
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 24
	; Moving 24 bytes from rax to rsp 
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump514
.jump513:
	sub rsp, 24
	; Moving 24 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 56 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
.jump514:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'j'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'h'
	mov rax, [rel const27] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump525
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	jmp .jump526
.jump525:
	mov rax, [rel const139] ; 40
	push rax
.jump526:
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump527
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump527:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'h' to 0
	mov rax, 0
	push rax
.jump528: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'h'
	add qword [rsp + 0], 1
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump528 ; If h < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rdi, 8
	sub asp, 8 ; Add alignment
	call _jpl_alloc
	add asp, 8 ; Remove alignment
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump529
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	jmp .jump530
.jump529:
	call _e
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump531
	mov rax, [rel const55] ; 187
	push rax
	pop rax
	neg rax
	push rax
	jmp .jump532
.jump531:
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rel const0] ; 734
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
.jump532:
.jump530:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump533
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump533:
	cmp rax, [rsp + 8]
	jl .jump534
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump534:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump535
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump535:
	; Computing bound for 'i'
	mov rax, [rel const140] ; 747
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump536
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump536:
	; Computing bound for 'h'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'i'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump537
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump537:
	; Computing bound for 'h'
	mov rax, [rel const141] ; 189
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump538
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump538:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'i' to 0
	mov rax, 0
	push rax
	; Initialize 'h' to 0
	mov rax, 0
	push rax
.jump539: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 152 to rsp 
		mov r10, [rbp - 152 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'i'
	add qword [rsp + 8], 1
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump539 ; If i < bound, next iter
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump539 ; If h < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rel const142] ; 726
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump540
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump540:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'j' to 0
	mov rax, 0
	push rax
	; Initialize 'i' to 0
	mov rax, 0
	push rax
	; Initialize 'h' to 0
	mov rax, 0
	push rax
.jump541: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 136 to rsp 
		mov r10, [rbp - 136 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment 'j'
	add qword [rsp + 16], 1
	; Compare j to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump541 ; If j < bound, next iter
	mov qword [rsp + 16], 0 ; j = 0
	add qword [rsp + 8], 1 ; i++
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump541 ; If i < bound, next iter
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump541 ; If h < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	call _e
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'm'
	sub rsp, 24
	; Moving 24 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rel const118] ; 625
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump1004
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1004:
	cmp rax, [rsp + 16]
	jl .jump1005
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1005:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump1006
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1006:
	cmp rax, [rsp + 24]
	jl .jump1007
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1007:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1008
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1008:
	; Computing bound for 'l'
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1009
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump1009:
	; Computing bound for 'k'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'k'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1010
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump1010:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'k' to 0
	mov rax, 0
	push rax
.jump1011: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 152 to rsp 
		mov r10, [rbp - 152 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'k'
	add qword [rsp + 0], 1
	; Compare k to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump1011 ; If k < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1012
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1012:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,] 
imul rdi, [rsp + 0 + 0] ; multiply by (sum[k : (- c)] k) 
	jno .jump1013
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1013:
	imul rdi, [rsp + 0 + 8] ; multiply by b 
	jno .jump1014
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1014:
	imul rdi, [rsp + 0 + 16] ; multiply by a[625, (- c)] 
	jno .jump1015
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1015:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'm' to 0
	mov rax, 0
	push rax
	; Initialize 'l' to 0
	mov rax, 0
	push rax
	; Initialize 'k' to 0
	mov rax, 0
	push rax
.jump1016: ; Begin body of loop
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'm'
	add qword [rsp + 16], 1
	; Compare m to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump1016 ; If m < bound, next iter
	mov qword [rsp + 16], 0 ; m = 0
	add qword [rsp + 8], 1 ; l++
	; Compare l to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump1016 ; If l < bound, next iter
	mov qword [rsp + 8], 0 ; l = 0
	add qword [rsp + 0], 1 ; k++
	; Compare k to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump1016 ; If k < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	mov rax, [rel const27] ; True
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'q'
	mov rax, [rel const211] ; 646
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1077
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump1077:
	; Computing bound for 'p'
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp 
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1078
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1078:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'q' to 0
	mov rax, 0
	push rax
	; Initialize 'p' to 0
	mov rax, 0
	push rax
.jump1079: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const212] ; 31.29
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 32] ; Load sum
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment 'q'
	add qword [rsp + 8], 1
	; Compare q to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump1079 ; If q < bound, next iter
	mov qword [rsp + 8], 0 ; q = 0
	add qword [rsp + 0], 1 ; p++
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump1079 ; If p < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'p'
	mov rax, [rel const213] ; 250
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1080
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1080:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'p' to 0
	mov rax, 0
	push rax
.jump1081: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const214] ; 71.36
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 16] ; Load sum
	movsd [rsp + 16], xmm0 ; Save sum
	; Increment 'p'
	add qword [rsp + 0], 1
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump1081 ; If p < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'q'
	mov rax, [rel const117] ; 290
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1082
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1082:
	; Computing bound for 'p'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'r'
	mov rax, [rel const215] ; 829
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1083
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1083:
	; Computing bound for 'q'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'q'
	sub rsp, 8
	; Moving 8 bytes from rbp - 136 to rsp 
		mov r10, [rbp - 136 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1084
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1084:
	; Computing bound for 'p'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1085
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump1085:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'q' to 0
	mov rax, 0
	push rax
	; Initialize 'p' to 0
	mov rax, 0
	push rax
.jump1086: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'q'
	add qword [rsp + 8], 1
	; Compare q to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump1086 ; If q < bound, next iter
	mov qword [rsp + 8], 0 ; q = 0
	add qword [rsp + 0], 1 ; p++
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump1086 ; If p < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1087
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump1087:
	; Computing bound for 'p'
	sub rsp, 8
	; Moving 8 bytes from rbp - 136 to rsp 
		mov r10, [rbp - 136 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1088
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1088:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'r' to 0
	mov rax, 0
	push rax
	; Initialize 'q' to 0
	mov rax, 0
	push rax
	; Initialize 'p' to 0
	mov rax, 0
	push rax
.jump1089: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment 'r'
	add qword [rsp + 16], 1
	; Compare r to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump1089 ; If r < bound, next iter
	mov qword [rsp + 16], 0 ; r = 0
	add qword [rsp + 8], 1 ; q++
	; Compare q to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump1089 ; If q < bound, next iter
	mov qword [rsp + 8], 0 ; q = 0
	add qword [rsp + 0], 1 ; p++
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump1089 ; If p < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1090
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump1090:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float 
imul rdi, [rsp + 0 + 0] ; multiply by (sum[p : l, q : (sum[p : c, q : l] c), r : 829] n) 
	jno .jump1091
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump1091:
	imul rdi, [rsp + 0 + 8] ; multiply by 290 
	jno .jump1092
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump1092:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'q' to 0
	mov rax, 0
	push rax
	; Initialize 'p' to 0
	mov rax, 0
	push rax
.jump1093: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 's'
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp 
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1094
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump1094:
	; Computing bound for 'r'
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1095
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1095:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 's' to 0
	mov rax, 0
	push rax
	; Initialize 'r' to 0
	mov rax, 0
	push rax
.jump1096: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const216] ; 78.81
	push rax
	mov rax, [rel const217] ; 83.77
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 32] ; Load sum
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment 's'
	add qword [rsp + 8], 1
	; Compare s to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump1096 ; If s < bound, next iter
	mov qword [rsp + 8], 0 ; s = 0
	add qword [rsp + 0], 1 ; r++
	; Compare r to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump1096 ; If r < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'q'
	add qword [rsp + 8], 1
	; Compare q to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump1093 ; If q < bound, next iter
	mov qword [rsp + 8], 0 ; q = 0
	add qword [rsp + 0], 1 ; p++
	; Compare p to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump1093 ; If p < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump1097
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump1097:
	cmp rax, [rsp + 16]
	jl .jump1098
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump1098:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump1099
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump1099:
	cmp rax, [rsp + 24]
	jl .jump1100
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump1100:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	mov rdi, 16
	sub asp, 8 ; Add alignment
	call _jpl_alloc
	add asp, 8 ; Remove alignment
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	sub rsp, 32
	; Moving 32 bytes from rbp - 136 to rsp 
		mov r10, [rbp - 136 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 136 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 136 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 136 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump1101
	sub rsp, 24
	lea rdi, [rsp + 0]
	call _i
	jmp .jump1102
.jump1101:
	sub asp, 8 ; Add alignment
	call _e
	add asp, 8 ; Remove alignment
	push rax
	pop rax
	cmp rax, 0
	je .jump1103
	mov rax, [rel const8] ; False
	push rax
	jmp .jump1104
.jump1103:
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
.jump1104:
	pop rax
	cmp rax, 0
	je .jump1105
	mov rax, [rel const8] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump1107
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump1109
	sub rsp, 24
	; Moving 24 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	jmp .jump1110
.jump1109:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'w'
	mov rax, [rel const218] ; 719
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1111
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1111:
	; Computing bound for 'v'
	mov rax, [rel const219] ; 718
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1112
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump1112:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by 718 
	jno .jump1113
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump1113:
	imul rdi, [rsp + 0 + 8] ; multiply by 719 
	jno .jump1114
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump1114:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'w' to 0
	mov rax, 0
	push rax
	; Initialize 'v' to 0
	mov rax, 0
	push rax
.jump1115: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const220] ; 67
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'w'
	add qword [rsp + 8], 1
	; Compare w to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump1115 ; If w < bound, next iter
	mov qword [rsp + 8], 0 ; w = 0
	add qword [rsp + 0], 1 ; v++
	; Compare v to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump1115 ; If v < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump1110:
	jmp .jump1108
.jump1107:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'v'
	sub rsp, 8
	; Moving 8 bytes from rbp - 152 to rsp 
		mov r10, [rbp - 152 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1116
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1116:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof int[,][,,] 
	imul rdi, [rsp + 0 + 0] ; multiply by q 
	jno .jump1117
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1117:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'v' to 0
	mov rax, 0
	push rax
.jump1118: ; Begin body of loop
	; Compute loop body
	sub rsp, 32
	; Moving 32 bytes from rbp - 184 to rsp 
		mov r10, [rbp - 184 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 184 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 184 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 184 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 32
	add rax, [rsp + 48]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax 
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment 'v'
	add qword [rsp + 0], 1
	; Compare v to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump1118 ; If v < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump1119
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump1119:
	cmp rax, [rsp + 8]
	jl .jump1120
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump1120:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 32
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 32
	; Moving 32 bytes from rax to rsp 
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub asp, 8 ; Add alignment
	call _o
	add asp, 8 ; Remove alignment
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 168 to rsp 
		mov r10, [rbp - 168 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump1121
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump1121:
	cmp rax, [rsp + 24]
	jl .jump1122
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump1122:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump1123
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump1123:
	cmp rax, [rsp + 32]
	jl .jump1124
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump1124:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump1125
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump1125:
	cmp rax, [rsp + 40]
	jl .jump1126
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump1126:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 24
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 24
	; Moving 24 bytes from rax to rsp 
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump1108:
	jmp .jump1106
.jump1105:
	sub rsp, 24
	lea rdi, [rsp + 0]
	call _i
.jump1106:
.jump1102:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'A'
	sub rsp, 8
	; Moving 8 bytes from rbp - 200 to rsp 
		mov r10, [rbp - 200 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1127
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump1127:
	; Computing bound for 'z'
	sub rsp, 8
	; Moving 8 bytes from rbp - 176 to rsp 
		mov r10, [rbp - 176 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1128
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1128:
	; Computing bound for 'y'
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp 
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1129
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump1129:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof int[,][,,] 
	imul rdi, [rsp + 0 + 0] ; multiply by m 
	jno .jump1130
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump1130:
	imul rdi, [rsp + 0 + 8] ; multiply by t 
	jno .jump1131
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump1131:
	imul rdi, [rsp + 0 + 16] ; multiply by x 
	jno .jump1132
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
.jump1132:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'A' to 0
	mov rax, 0
	push rax
	; Initialize 'z' to 0
	mov rax, 0
	push rax
	; Initialize 'y' to 0
	mov rax, 0
	push rax
.jump1133: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump1134
	sub rsp, 32
	; Moving 32 bytes from rbp - 136 to rsp 
		mov r10, [rbp - 136 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 136 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 136 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 136 + 0]
		mov [rsp + 0], r10
	jmp .jump1135
.jump1134:
	mov rax, [rel const8] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump1136
	mov rax, [rel const8] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump1138
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump1140
	sub rsp, 32
	; Moving 32 bytes from rbp - 184 to rsp 
		mov r10, [rbp - 184 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 184 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 184 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 184 + 0]
		mov [rsp + 0], r10
	jmp .jump1141
.jump1140:
	sub rsp, 32
	; Moving 32 bytes from rbp - 136 to rsp 
		mov r10, [rbp - 136 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 136 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 136 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 136 + 0]
		mov [rsp + 0], r10
.jump1141:
	jmp .jump1139
.jump1138:
	sub rsp, 32
	; Moving 32 bytes from rbp - 184 to rsp 
		mov r10, [rbp - 184 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 184 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 184 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 184 + 0]
		mov [rsp + 0], r10
.jump1139:
	jmp .jump1137
.jump1136:
	sub rsp, 32
	; Moving 32 bytes from rbp - 184 to rsp 
		mov r10, [rbp - 184 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 184 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 184 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 184 + 0]
		mov [rsp + 0], r10
.jump1137:
.jump1135:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	imul rax, 32
	add rax, [rsp + 80]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax 
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment 'A'
	add qword [rsp + 16], 1
	; Compare A to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump1133 ; If A < bound, next iter
	mov qword [rsp + 16], 0 ; A = 0
	add qword [rsp + 8], 1 ; z++
	; Compare z to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump1133 ; If z < bound, next iter
	mov qword [rsp + 8], 0 ; z = 0
	add qword [rsp + 0], 1 ; y++
	; Compare y to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump1133 ; If y < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 200 to rsp 
		mov r10, [rbp - 200 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'z'
	sub rsp, 8
	; Moving 8 bytes from rbp - 200 to rsp 
		mov r10, [rbp - 200 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1142
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1142:
	; Computing bound for 'y'
	sub rsp, 8
	; Moving 8 bytes from rbp - 136 to rsp 
		mov r10, [rbp - 136 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1143
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump1143:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'z' to 0
	mov rax, 0
	push rax
	; Initialize 'y' to 0
	mov rax, 0
	push rax
.jump1144: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const221] ; 50.82
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 32] ; Load sum
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment 'z'
	add qword [rsp + 8], 1
	; Compare z to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump1144 ; If z < bound, next iter
	mov qword [rsp + 8], 0 ; z = 0
	add qword [rsp + 0], 1 ; y++
	; Compare y to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump1144 ; If y < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'A'
	sub asp, 8 ; Add alignment
	call _o
	add asp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1145
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump1145:
	; Computing bound for 'z'
	call _o
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1146
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1146:
	; Computing bound for 'y'
	sub asp, 8 ; Add alignment
	call _o
	add asp, 8 ; Remove alignment
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1147
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump1147:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'A' to 0
	mov rax, 0
	push rax
	; Initialize 'z' to 0
	mov rax, 0
	push rax
	; Initialize 'y' to 0
	mov rax, 0
	push rax
.jump1148: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const222] ; 38.74
	push rax
	mov rax, [rel const223] ; 42.96
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 48] ; Load sum
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment 'A'
	add qword [rsp + 16], 1
	; Compare A to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump1148 ; If A < bound, next iter
	mov qword [rsp + 16], 0 ; A = 0
	add qword [rsp + 8], 1 ; z++
	; Compare z to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump1148 ; If z < bound, next iter
	mov qword [rsp + 8], 0 ; z = 0
	add qword [rsp + 0], 1 ; y++
	; Compare y to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump1148 ; If y < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump1149
	sub asp, 8 ; Add alignment
	call _e
	add asp, 8 ; Remove alignment
	push rax
	pop rax
	cmp rax, 0
	je .jump1151
	sub asp, 8 ; Add alignment
	call _e
	add asp, 8 ; Remove alignment
	push rax
	pop rax
	cmp rax, 0
	je .jump1153
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'A'
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1155
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1155:
	; Computing bound for 'z'
	sub rsp, 8
	; Moving 8 bytes from rbp - 200 to rsp 
		mov r10, [rbp - 200 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1156
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump1156:
	; Computing bound for 'y'
	sub rsp, 8
	; Moving 8 bytes from rbp - 176 to rsp 
		mov r10, [rbp - 176 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1157
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1157:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by t 
	jno .jump1158
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1158:
	imul rdi, [rsp + 0 + 8] ; multiply by x 
	jno .jump1159
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1159:
	imul rdi, [rsp + 0 + 16] ; multiply by n 
	jno .jump1160
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1160:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'A' to 0
	mov rax, 0
	push rax
	; Initialize 'z' to 0
	mov rax, 0
	push rax
	; Initialize 'y' to 0
	mov rax, 0
	push rax
.jump1161: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'A'
	add qword [rsp + 16], 1
	; Compare A to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump1161 ; If A < bound, next iter
	mov qword [rsp + 16], 0 ; A = 0
	add qword [rsp + 8], 1 ; z++
	; Compare z to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump1161 ; If z < bound, next iter
	mov qword [rsp + 8], 0 ; z = 0
	add qword [rsp + 0], 1 ; y++
	; Compare y to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump1161 ; If y < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump1154
.jump1153:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'A'
	sub rsp, 8
	; Moving 8 bytes from rbp - 152 to rsp 
		mov r10, [rbp - 152 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1162
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1162:
	; Computing bound for 'z'
	mov rax, [rel const224] ; 581
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1163
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump1163:
	; Computing bound for 'y'
	sub rsp, 8
	; Moving 8 bytes from rbp - 200 to rsp 
		mov r10, [rbp - 200 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1164
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1164:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by x 
	jno .jump1165
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1165:
	imul rdi, [rsp + 0 + 8] ; multiply by 581 
	jno .jump1166
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1166:
	imul rdi, [rsp + 0 + 16] ; multiply by q 
	jno .jump1167
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1167:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'A' to 0
	mov rax, 0
	push rax
	; Initialize 'z' to 0
	mov rax, 0
	push rax
	; Initialize 'y' to 0
	mov rax, 0
	push rax
.jump1168: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 208 to rsp 
		mov r10, [rbp - 208 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'A'
	add qword [rsp + 16], 1
	; Compare A to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump1168 ; If A < bound, next iter
	mov qword [rsp + 16], 0 ; A = 0
	add qword [rsp + 8], 1 ; z++
	; Compare z to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump1168 ; If z < bound, next iter
	mov qword [rsp + 8], 0 ; z = 0
	add qword [rsp + 0], 1 ; y++
	; Compare y to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump1168 ; If y < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump1154:
	jmp .jump1152
.jump1151:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'A'
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp 
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1169
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1169:
	; Computing bound for 'z'
	sub rsp, 8
	; Moving 8 bytes from rbp - 152 to rsp 
		mov r10, [rbp - 152 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1170
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump1170:
	; Computing bound for 'y'
	call _o
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1171
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1171:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by o() 
	jno .jump1172
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1172:
	imul rdi, [rsp + 0 + 8] ; multiply by q 
	jno .jump1173
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1173:
	imul rdi, [rsp + 0 + 16] ; multiply by h 
	jno .jump1174
	sub asp, 8 ; Add alignment
	lea rdi, [rel const7] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1174:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'A' to 0
	mov rax, 0
	push rax
	; Initialize 'z' to 0
	mov rax, 0
	push rax
	; Initialize 'y' to 0
	mov rax, 0
	push rax
.jump1175: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'D'
	sub rsp, 8
	; Moving 8 bytes from rbp - 200 to rsp 
		mov r10, [rbp - 200 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1176
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump1176:
	; Computing bound for 'C'
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp 
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1177
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1177:
	; Computing bound for 'B'
	sub rsp, 8
	; Moving 8 bytes from rbp - 184 to rsp 
		mov r10, [rbp - 184 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1178
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump1178:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'D' to 0
	mov rax, 0
	push rax
	; Initialize 'C' to 0
	mov rax, 0
	push rax
	; Initialize 'B' to 0
	mov rax, 0
	push rax
.jump1179: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 352 to rsp 
		mov r10, [rbp - 352 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment 'D'
	add qword [rsp + 16], 1
	; Compare D to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump1179 ; If D < bound, next iter
	mov qword [rsp + 16], 0 ; D = 0
	add qword [rsp + 8], 1 ; C++
	; Compare C to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump1179 ; If C < bound, next iter
	mov qword [rsp + 8], 0 ; C = 0
	add qword [rsp + 0], 1 ; B++
	; Compare B to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump1179 ; If B < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'A'
	add qword [rsp + 16], 1
	; Compare A to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump1175 ; If A < bound, next iter
	mov qword [rsp + 16], 0 ; A = 0
	add qword [rsp + 8], 1 ; z++
	; Compare z to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump1175 ; If z < bound, next iter
	mov qword [rsp + 8], 0 ; z = 0
	add qword [rsp + 0], 1 ; y++
	; Compare y to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump1175 ; If y < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump1152:
	sub rsp, 8
	; Moving 8 bytes from rbp - 184 to rsp 
		mov r10, [rbp - 184 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp 
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const225] ; 786
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump1180
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump1180:
	cmp rax, [rsp + 24]
	jl .jump1181
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump1181:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump1182
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump1182:
	cmp rax, [rsp + 32]
	jl .jump1183
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump1183:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump1184
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
.jump1184:
	cmp rax, [rsp + 40]
	jl .jump1185
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
.jump1185:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump1150
.jump1149:
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
.jump1150:
	mov rax, [rel const226] ; 43
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump1186
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1186:
	cmp rax, [rsp + 24]
	jl .jump1187
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1187:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump1188
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1188:
	cmp rax, [rsp + 32]
	jl .jump1189
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1189:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump1190
	sub asp, 8 ; Add alignment
	lea rdi, [rel const17] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1190:
	cmp rax, [rsp + 40]
	jl .jump1191
	sub asp, 8 ; Add alignment
	lea rdi, [rel const18] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1191:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 32
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 32
	; Moving 32 bytes from rax to rsp 
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 24
	; Moving 24 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 88 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 240 to rsp 
		mov r10, [rbp - 240 + 0]
		mov [rsp + 0], r10
	add rsp, 264 ; Local variables
	pop r12 ; begin jpl_main postlude
	pop rbp
	ret

