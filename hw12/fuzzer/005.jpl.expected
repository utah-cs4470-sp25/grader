global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 44.92
const1: dq 0
const2: dq 1
const3: dq 823
const4: db `negative array index`, 0
const5: db `index too large`, 0
const6: dq 880
const7: dq 831
const8: dq 412
const9: dq 572
const10: db `non-positive loop bound`, 0
const11: dq 801
const12: db `mod by zero`, 0
const13: dq 294
const14: dq 177
const15: dq 259
const16: dq 670
const17: dq 524
const18: dq 305
const19: db `divide by zero`, 0
const20: dq 228
const21: db `overflow computing array size`, 0
const22: dq 194
const23: dq 282
const24: dq 746
const25: dq 34.39
const26: dq 427
const27: dq 816
const28: dq 912
const29: dq 760
const30: dq 291
const31: dq 938
const32: dq 820
const33: dq 579
const34: dq 845
const35: dq 669
const36: dq 989
const37: dq 79
const38: dq 606
const39: dq 32.72
const40: dq 648
const41: dq 545
const42: dq 755
const43: dq 968
const44: dq 788
const45: dq 530
const46: dq 620
const47: dq 632
const48: dq 182
const49: dq 932
const50: dq 266
const51: dq 366
const52: dq 312
const53: dq 829
const54: dq 803
const55: dq 51
const56: dq 131
const57: dq 328
const58: dq 438
const59: dq 960
const60: dq 331
const61: dq 910
const62: dq 999
const63: dq 885
const64: dq 836
const65: dq 729
const66: dq 83
const67: dq 850
const68: dq 879
const69: dq 470
const70: dq 280
const71: dq 551
const72: dq 886
const73: dq 566
const74: dq 647
const75: dq 54
const76: dq 643
const77: dq 295
const78: dq 568
const79: dq 152
const80: dq 483
const81: dq 818
const82: dq 565
const83: dq 391
const84: dq 464
const85: dq 683
const86: dq 539
const87: dq 786
const88: dq 30
const89: dq 833
const90: dq 903
const91: dq 37.43
const92: dq 981
const93: dq 734
const94: dq 44
const95: dq 94
const96: dq 582
const97: dq 922
const98: dq 544
const99: dq 169
const100: dq 109
const101: dq 955
const102: dq 874
const103: dq 219
const104: dq 996
const105: dq 612
const106: dq 60
const107: dq 446
const108: dq 43
const109: dq 564
const110: dq 189
const111: dq 488
const112: dq 516
const113: dq 929
const114: dq 602
const115: dq 11.4
const116: dq 664
const117: dq 486
const118: dq 856
const119: dq 65.14
const120: dq 558
const121: dq 518
const122: dq 893
const123: dq 913
const124: dq 867
const125: dq 352
const126: dq 96.9
const127: dq 28.47
const128: dq 553
const129: dq 496
const130: dq 958
const131: db `(IntType)`, 0

section .text
jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp ; end of jpl_main prelude
	mov rax, [rel const0] ; 44.92
	push rax
	mov rax, [rel const1] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump1
	mov rax, [rel const1] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	jmp .jump2
.jump1:
	mov rax, [rel const1] ; False
	push rax
	mov rax, [rel const2] ; True
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
.jump2:
	mov rax, [rel const1] ; False
	push rax
	mov rdi, 8
	call _jpl_alloc
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	mov rax, [rel const3] ; 823
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump3
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
.jump3:
	cmp rax, [rsp + 8]
	jl .jump4
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
.jump4:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump5
	mov rax, [rel const1] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump7
	mov rax, [rel const6] ; 880
	push rax
	jmp .jump8
.jump7:
	mov rax, [rel const7] ; 831
	push rax
	mov rax, [rel const8] ; 412
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
.jump8:
	jmp .jump6
.jump5:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'b'
	mov rax, [rel const9] ; 572
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump9
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump9:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'b' to 0
	mov rax, 0
	push rax
.jump10: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'b'
	add qword [rsp + 0], 1
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump10 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rel const11] ; 801
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump11
	lea rdi, [rel const12] ; 'mod by zero'
	call _fail_assertion
.jump11:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'b'
	mov rax, [rel const13] ; 294
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump12
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump12:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'b' to 0
	mov rax, 0
	push rax
.jump13: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const14] ; 177
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'b'
	add qword [rsp + 0], 1
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump13 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	pop r10
	sub rax, r10
	push rax
.jump6:
	pop rax
	neg rax
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'd'
	mov rax, [rel const15] ; 259
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump14
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump14:
	; Computing bound for 'c'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'b'
	mov rax, [rel const16] ; 670
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump15
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump15:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'b' to 0
	mov rax, 0
	push rax
.jump16: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const17] ; 524
	push rax
	mov rax, [rel const18] ; 305
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump17
	lea rdi, [rel const19] ; 'divide by zero'
	call _fail_assertion
.jump17:
	cqo
	idiv r10
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'b'
	add qword [rsp + 0], 1
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump16 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump18
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump18:
	; Computing bound for 'b'
	mov rax, [rel const20] ; 228
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump19
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump19:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,] 
	imul rdi, [rsp + 0 + 0] ; multiply by (- 228) 
	jno .jump20
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump20:
imul rdi, [rsp + 0 + 8] ; multiply by (sum[b : (- 670)] (305 / 524)) 
	jno .jump21
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump21:
	imul rdi, [rsp + 0 + 16] ; multiply by (- 259) 
	jno .jump22
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump22:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'd' to 0
	mov rax, 0
	push rax
	; Initialize 'c' to 0
	mov rax, 0
	push rax
	; Initialize 'b' to 0
	mov rax, 0
	push rax
.jump23: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'f'
	mov rax, [rel const22] ; 194
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump24
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump24:
	; Computing bound for 'e'
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump25
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump25:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by c 
	jno .jump26
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump26:
	imul rdi, [rsp + 0 + 8] ; multiply by (- 194) 
	jno .jump27
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump27:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'f' to 0
	mov rax, 0
	push rax
	; Initialize 'e' to 0
	mov rax, 0
	push rax
.jump28: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'f'
	add qword [rsp + 8], 1
	; Compare f to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump28 ; If f < bound, next iter
	mov qword [rsp + 8], 0 ; f = 0
	add qword [rsp + 0], 1 ; e++
	; Compare e to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump28 ; If e < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'd'
	add qword [rsp + 16], 1
	; Compare d to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump23 ; If d < bound, next iter
	mov qword [rsp + 16], 0 ; d = 0
	add qword [rsp + 8], 1 ; c++
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump23 ; If c < bound, next iter
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump23 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'c'
	mov rax, [rel const23] ; 282
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump29
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump29:
	; Computing bound for 'b'
	mov rax, [rel const24] ; 746
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump30
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump30:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'c' to 0
	mov rax, 0
	push rax
	; Initialize 'b' to 0
	mov rax, 0
	push rax
.jump31: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp 
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'c'
	add qword [rsp + 8], 1
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump31 ; If c < bound, next iter
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump31 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const2] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump32
	mov rax, [rel const1] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	jmp .jump33
.jump32:
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const25] ; 34.39
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
.jump33:
	pop rax
	cmp rax, 0
	je .jump34
	mov rax, [rel const26] ; 427
	push rax
	jmp .jump35
.jump34:
	mov rax, [rel const27] ; 816
	push rax
	pop rax
	neg rax
	push rax
.jump35:
	mov rax, [rel const1] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump36
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'b'
	mov rax, [rel const27] ; 816
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump38
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump38:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by 816 
	jno .jump39
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump39:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'b' to 0
	mov rax, 0
	push rax
.jump40: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const28] ; 912
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'b'
	add qword [rsp + 0], 1
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump40 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	jmp .jump37
.jump36:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'b'
	mov rax, [rel const29] ; 760
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump41
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump41:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by 760 
	jno .jump42
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump42:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'b' to 0
	mov rax, 0
	push rax
.jump43: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp 
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'b'
	add qword [rsp + 0], 1
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump43 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
.jump37:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'b'
	mov rax, [rel const30] ; 291
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump44
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump44:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'b' to 0
	mov rax, 0
	push rax
.jump45: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const31] ; 938
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'b'
	add qword [rsp + 0], 1
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump45 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump46
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
.jump46:
	cmp rax, [rsp + 8]
	jl .jump47
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
.jump47:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump48
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
.jump48:
	cmp rax, [rsp + 24]
	jl .jump49
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
.jump49:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump50
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
.jump50:
	cmp rax, [rsp + 32]
	jl .jump51
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
.jump51:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump52
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
.jump52:
	cmp rax, [rsp + 40]
	jl .jump53
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
.jump53:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 24
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 24
	; Moving 24 bytes from rax to rsp 
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const32] ; 820
	push rax
	mov rax, [rel const33] ; 579
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const34] ; 845
	push rax
	mov rax, [rel const35] ; 669
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const2] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump54
	mov rax, [rel const36] ; 989
	push rax
	jmp .jump55
.jump54:
	mov rax, [rel const37] ; 79
	push rax
.jump55:
	pop rax
	pop r10
	cmp r10, 0
	jne .jump56
	lea rdi, [rel const12] ; 'mod by zero'
	call _fail_assertion
.jump56:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump57
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
.jump57:
	cmp rax, [rsp + 16]
	jl .jump58
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
.jump58:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump59
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
.jump59:
	cmp rax, [rsp + 24]
	jl .jump60
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
.jump60:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const38] ; 606
	push rax
	mov rdi, 24
	sub asp, 8 ; Add alignment
	call _jpl_alloc
	add asp, 8 ; Remove alignment
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 3
	push rax
	mov rax, [rel const39] ; 32.72
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'f'
	mov rax, [rel const40] ; 648
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump61
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump61:
	; Computing bound for 'e'
	mov rax, [rel const41] ; 545
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump62
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump62:
	; Computing bound for 'd'
	mov rax, [rel const1] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump63
	mov rax, [rel const42] ; 755
	push rax
	jmp .jump64
.jump63:
	mov rax, [rel const43] ; 968
	push rax
.jump64:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump65
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump65:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'f' to 0
	mov rax, 0
	push rax
	; Initialize 'e' to 0
	mov rax, 0
	push rax
	; Initialize 'd' to 0
	mov rax, 0
	push rax
.jump66: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment 'f'
	add qword [rsp + 16], 1
	; Compare f to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump66 ; If f < bound, next iter
	mov qword [rsp + 16], 0 ; f = 0
	add qword [rsp + 8], 1 ; e++
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump66 ; If e < bound, next iter
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump66 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rel const44] ; 788
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump67
	mov rax, [rel const45] ; 530
	push rax
	mov rax, [rel const46] ; 620
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump69
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'f'
	mov rax, [rel const47] ; 632
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump71
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump71:
	; Computing bound for 'e'
	mov rax, [rel const48] ; 182
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump72
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump72:
	; Computing bound for 'd'
	mov rax, [rel const49] ; 932
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump73
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump73:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof int[,,] 
	imul rdi, [rsp + 0 + 0] ; multiply by 932 
	jno .jump74
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump74:
	imul rdi, [rsp + 0 + 8] ; multiply by (- (- 182)) 
	jno .jump75
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump75:
	imul rdi, [rsp + 0 + 16] ; multiply by 632 
	jno .jump76
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump76:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'f' to 0
	mov rax, 0
	push rax
	; Initialize 'e' to 0
	mov rax, 0
	push rax
	; Initialize 'd' to 0
	mov rax, 0
	push rax
.jump77: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'i'
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump78
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump78:
	; Computing bound for 'h'
	mov rax, [rel const50] ; 266
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump79
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump79:
	; Computing bound for 'g'
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump80
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump80:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by (f * e) 
	jno .jump81
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump81:
	imul rdi, [rsp + 0 + 8] ; multiply by 266 
	jno .jump82
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump82:
	imul rdi, [rsp + 0 + 16] ; multiply by f 
	jno .jump83
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump83:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'i' to 0
	mov rax, 0
	push rax
	; Initialize 'h' to 0
	mov rax, 0
	push rax
	; Initialize 'g' to 0
	mov rax, 0
	push rax
.jump84: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'i'
	add qword [rsp + 16], 1
	; Compare i to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump84 ; If i < bound, next iter
	mov qword [rsp + 16], 0 ; i = 0
	add qword [rsp + 8], 1 ; h++
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump84 ; If h < bound, next iter
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump84 ; If g < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	imul rax, 32
	add rax, [rsp + 80]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax 
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment 'f'
	add qword [rsp + 16], 1
	; Compare f to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump77 ; If f < bound, next iter
	mov qword [rsp + 16], 0 ; f = 0
	add qword [rsp + 8], 1 ; e++
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump77 ; If e < bound, next iter
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump77 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump70
.jump69:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'f'
	mov rax, [rel const51] ; 366
	push rax
	mov rax, [rel const52] ; 312
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump85
	lea rdi, [rel const19] ; 'divide by zero'
	call _fail_assertion
.jump85:
	cqo
	idiv r10
	push rax
	mov rax, [rel const53] ; 829
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump86
	lea rdi, [rel const19] ; 'divide by zero'
	call _fail_assertion
.jump86:
	cqo
	idiv r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump87
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump87:
	; Computing bound for 'e'
	mov rax, [rel const54] ; 803
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump88
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump88:
	; Computing bound for 'd'
	mov rax, [rel const50] ; 266
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump89
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump89:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof int[,,] 
	imul rdi, [rsp + 0 + 0] ; multiply by 266 
	jno .jump90
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump90:
	imul rdi, [rsp + 0 + 8] ; multiply by (- 803) 
	jno .jump91
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump91:
	imul rdi, [rsp + 0 + 16] ; multiply by (829 / (312 / 366)) 
	jno .jump92
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump92:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'f' to 0
	mov rax, 0
	push rax
	; Initialize 'e' to 0
	mov rax, 0
	push rax
	; Initialize 'd' to 0
	mov rax, 0
	push rax
.jump93: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'i'
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump94
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump94:
	; Computing bound for 'h'
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump95
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump95:
	; Computing bound for 'g'
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp 
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump96
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump96:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by d 
	jno .jump97
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump97:
	imul rdi, [rsp + 0 + 8] ; multiply by e 
	jno .jump98
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump98:
	imul rdi, [rsp + 0 + 16] ; multiply by f 
	jno .jump99
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump99:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'i' to 0
	mov rax, 0
	push rax
	; Initialize 'h' to 0
	mov rax, 0
	push rax
	; Initialize 'g' to 0
	mov rax, 0
	push rax
.jump100: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 152 to rsp 
		mov r10, [rbp - 152 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'i'
	add qword [rsp + 16], 1
	; Compare i to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump100 ; If i < bound, next iter
	mov qword [rsp + 16], 0 ; i = 0
	add qword [rsp + 8], 1 ; h++
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump100 ; If h < bound, next iter
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump100 ; If g < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	imul rax, 32
	add rax, [rsp + 80]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax 
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment 'f'
	add qword [rsp + 16], 1
	; Compare f to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump93 ; If f < bound, next iter
	mov qword [rsp + 16], 0 ; f = 0
	add qword [rsp + 8], 1 ; e++
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump93 ; If e < bound, next iter
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump93 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump70:
	jmp .jump68
.jump67:
	mov rax, [rel const2] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump101
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'f'
	mov rax, [rel const55] ; 51
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump103
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump103:
	; Computing bound for 'e'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'd'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'e'
	mov rax, [rel const56] ; 131
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump104
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump104:
	; Computing bound for 'd'
	mov rax, [rel const57] ; 328
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump105
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump105:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'e' to 0
	mov rax, 0
	push rax
	; Initialize 'd' to 0
	mov rax, 0
	push rax
.jump106: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp 
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'e'
	add qword [rsp + 8], 1
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump106 ; If e < bound, next iter
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump106 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump107
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump107:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'd' to 0
	mov rax, 0
	push rax
.jump108: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'd'
	add qword [rsp + 0], 1
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump108 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump109
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump109:
	; Computing bound for 'd'
	mov rax, [rel const58] ; 438
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump110
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump110:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof int[,,] 
	imul rdi, [rsp + 0 + 0] ; multiply by (- 438) 
	jno .jump111
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump111:
imul rdi, [rsp + 0 + 8] ; multiply by (sum[d : (sum[d : 328, e : 131] e)] d) 
	jno .jump112
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump112:
	imul rdi, [rsp + 0 + 16] ; multiply by 51 
	jno .jump113
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump113:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'f' to 0
	mov rax, 0
	push rax
	; Initialize 'e' to 0
	mov rax, 0
	push rax
	; Initialize 'd' to 0
	mov rax, 0
	push rax
.jump114: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'i'
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump115
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump115:
	; Computing bound for 'h'
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump116
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump116:
	; Computing bound for 'g'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'g'
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump117
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump117:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'g' to 0
	mov rax, 0
	push rax
.jump118: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp 
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'g'
	add qword [rsp + 0], 1
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump118 ; If g < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump119
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump119:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
imul rdi, [rsp + 0 + 0] ; multiply by (sum[g : f] d) 
	jno .jump120
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump120:
	imul rdi, [rsp + 0 + 8] ; multiply by e 
	jno .jump121
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump121:
	imul rdi, [rsp + 0 + 16] ; multiply by f 
	jno .jump122
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump122:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'i' to 0
	mov rax, 0
	push rax
	; Initialize 'h' to 0
	mov rax, 0
	push rax
	; Initialize 'g' to 0
	mov rax, 0
	push rax
.jump123: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'i'
	add qword [rsp + 16], 1
	; Compare i to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump123 ; If i < bound, next iter
	mov qword [rsp + 16], 0 ; i = 0
	add qword [rsp + 8], 1 ; h++
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump123 ; If h < bound, next iter
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump123 ; If g < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	imul rax, 32
	add rax, [rsp + 80]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax 
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment 'f'
	add qword [rsp + 16], 1
	; Compare f to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump114 ; If f < bound, next iter
	mov qword [rsp + 16], 0 ; f = 0
	add qword [rsp + 8], 1 ; e++
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump114 ; If e < bound, next iter
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump114 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump102
.jump101:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'f'
	mov rax, [rel const59] ; 960
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump124
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump124:
	; Computing bound for 'e'
	mov rax, [rel const60] ; 331
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump125
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump125:
	; Computing bound for 'd'
	mov rax, [rel const61] ; 910
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump126
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump126:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof int[,,] 
	imul rdi, [rsp + 0 + 0] ; multiply by 910 
	jno .jump127
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump127:
	imul rdi, [rsp + 0 + 8] ; multiply by 331 
	jno .jump128
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump128:
	imul rdi, [rsp + 0 + 16] ; multiply by (- 960) 
	jno .jump129
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump129:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'f' to 0
	mov rax, 0
	push rax
	; Initialize 'e' to 0
	mov rax, 0
	push rax
	; Initialize 'd' to 0
	mov rax, 0
	push rax
.jump130: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'i'
	mov rax, [rel const62] ; 999
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp 
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump131
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump131:
	; Computing bound for 'h'
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp 
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump132
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump132:
	; Computing bound for 'g'
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp 
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump133
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump133:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by d 
	jno .jump134
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump134:
	imul rdi, [rsp + 0 + 8] ; multiply by (- d) 
	jno .jump135
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump135:
	imul rdi, [rsp + 0 + 16] ; multiply by (d + 999) 
	jno .jump136
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump136:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'i' to 0
	mov rax, 0
	push rax
	; Initialize 'h' to 0
	mov rax, 0
	push rax
	; Initialize 'g' to 0
	mov rax, 0
	push rax
.jump137: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'i'
	add qword [rsp + 16], 1
	; Compare i to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump137 ; If i < bound, next iter
	mov qword [rsp + 16], 0 ; i = 0
	add qword [rsp + 8], 1 ; h++
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump137 ; If h < bound, next iter
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump137 ; If g < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	imul rax, 32
	add rax, [rsp + 80]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax 
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment 'f'
	add qword [rsp + 16], 1
	; Compare f to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump130 ; If f < bound, next iter
	mov qword [rsp + 16], 0 ; f = 0
	add qword [rsp + 8], 1 ; e++
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump130 ; If e < bound, next iter
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump130 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump102:
.jump68:
	mov rax, [rel const63] ; 885
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'f'
	sub rsp, 16
	; Moving 16 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const64] ; 836
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump138
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
.jump138:
	cmp rax, [rsp + 8]
	jl .jump139
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
.jump139:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump140
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump140:
	; Computing bound for 'e'
	sub rsp, 16
	; Moving 16 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const2] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump141
	mov rax, [rel const65] ; 729
	push rax
	jmp .jump142
.jump141:
	mov rax, [rel const66] ; 83
	push rax
.jump142:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump143
	sub asp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump143:
	cmp rax, [rsp + 8]
	jl .jump144
	sub asp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump144:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump145
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump145:
	; Computing bound for 'd'
	mov rax, [rel const67] ; 850
	push rax
	mov rax, [rel const68] ; 879
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump146
	sub asp, 8 ; Add alignment
	lea rdi, [rel const12] ; 'mod by zero'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump146:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump147
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump147:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool 
	imul rdi, [rsp + 0 + 0] ; multiply by (879 % 850) 
	jno .jump148
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump148:
	imul rdi, [rsp + 0 + 8] ; multiply by b[(if true then 729 else 83)] 
	jno .jump149
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump149:
	imul rdi, [rsp + 0 + 16] ; multiply by b[836] 
	jno .jump150
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump150:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'f' to 0
	mov rax, 0
	push rax
	; Initialize 'e' to 0
	mov rax, 0
	push rax
	; Initialize 'd' to 0
	mov rax, 0
	push rax
.jump151: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const2] ; True
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'f'
	add qword [rsp + 16], 1
	; Compare f to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump151 ; If f < bound, next iter
	mov qword [rsp + 16], 0 ; f = 0
	add qword [rsp + 8], 1 ; e++
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump151 ; If e < bound, next iter
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump151 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	mov rax, [rel const69] ; 470
	push rax
	mov rdi, 8
	sub asp, 8 ; Add alignment
	call _jpl_alloc
	add asp, 8 ; Remove alignment
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	sub rsp, 16
	; Moving 16 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const35] ; 669
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump152
	sub asp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump152:
	cmp rax, [rsp + 8]
	jl .jump153
	sub asp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump153:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump154
	sub asp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump154:
	cmp rax, [rsp + 8]
	jl .jump155
	sub asp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump155:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const1] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump156
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'f'
	mov rax, [rel const70] ; 280
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump158
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump158:
	; Computing bound for 'e'
	mov rax, [rel const71] ; 551
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump159
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump159:
	; Computing bound for 'd'
	mov rax, [rel const72] ; 886
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump160
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump160:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'f' to 0
	mov rax, 0
	push rax
	; Initialize 'e' to 0
	mov rax, 0
	push rax
	; Initialize 'd' to 0
	mov rax, 0
	push rax
.jump161: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 160 to rsp 
		mov r10, [rbp - 160 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment 'f'
	add qword [rsp + 16], 1
	; Compare f to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump161 ; If f < bound, next iter
	mov qword [rsp + 16], 0 ; f = 0
	add qword [rsp + 8], 1 ; e++
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump161 ; If e < bound, next iter
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump161 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	jmp .jump157
.jump156:
	mov rax, [rel const73] ; 566
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const74] ; 647
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump162
	sub asp, 8 ; Add alignment
	lea rdi, [rel const19] ; 'divide by zero'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump162:
	cqo
	idiv r10
	push rax
.jump157:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'd'
	mov rax, [rel const1] ; False
	push rax
	mov rax, [rel const1] ; False
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump163
	mov rax, [rel const75] ; 54
	push rax
	jmp .jump164
.jump163:
	mov rax, [rel const76] ; 643
	push rax
	pop rax
	neg rax
	push rax
.jump164:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump165
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump165:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'd' to 0
	mov rax, 0
	push rax
.jump166: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const77] ; 295
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'd'
	add qword [rsp + 0], 1
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump166 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump167
	sub asp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump167:
	cmp rax, [rsp + 24]
	jl .jump168
	sub asp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump168:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump169
	sub asp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump169:
	cmp rax, [rsp + 32]
	jl .jump170
	sub asp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump170:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump171
	sub asp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump171:
	cmp rax, [rsp + 40]
	jl .jump172
	sub asp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump172:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump173
	mov rax, [rel const78] ; 568
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const79] ; 152
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump175
	lea rdi, [rel const12] ; 'mod by zero'
	call _fail_assertion
.jump175:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	pop rax
	neg rax
	push rax
	jmp .jump174
.jump173:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'e'
	mov rax, [rel const80] ; 483
	push rax
	mov rax, [rel const81] ; 818
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump176
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump176:
	; Computing bound for 'd'
	mov rax, [rel const77] ; 295
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump177
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump177:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by 295 
	jno .jump178
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump178:
	imul rdi, [rsp + 0 + 8] ; multiply by ((- 818) * 483) 
	jno .jump179
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump179:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'e' to 0
	mov rax, 0
	push rax
	; Initialize 'd' to 0
	mov rax, 0
	push rax
.jump180: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 112 to rsp 
		mov r10, [rbp - 112 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 112 to rsp 
		mov r10, [rbp - 112 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump181
	mov rax, [rel const82] ; 565
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	jmp .jump182
.jump181:
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
.jump182:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'e'
	add qword [rsp + 8], 1
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump180 ; If e < bound, next iter
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump180 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'f'
	mov rax, [rel const83] ; 391
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump183
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump183:
	; Computing bound for 'e'
	mov rax, [rel const84] ; 464
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump184
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump184:
	; Computing bound for 'd'
	mov rax, [rel const85] ; 683
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump185
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump185:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by 683 
	jno .jump186
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump186:
	imul rdi, [rsp + 0 + 8] ; multiply by 464 
	jno .jump187
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump187:
	imul rdi, [rsp + 0 + 16] ; multiply by 391 
	jno .jump188
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump188:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'f' to 0
	mov rax, 0
	push rax
	; Initialize 'e' to 0
	mov rax, 0
	push rax
	; Initialize 'd' to 0
	mov rax, 0
	push rax
.jump189: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 144 to rsp 
		mov r10, [rbp - 144 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'f'
	add qword [rsp + 16], 1
	; Compare f to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump189 ; If f < bound, next iter
	mov qword [rsp + 16], 0 ; f = 0
	add qword [rsp + 8], 1 ; e++
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump189 ; If e < bound, next iter
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump189 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'd'
	mov rax, [rel const86] ; 539
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump190
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump190:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'd' to 0
	mov rax, 0
	push rax
.jump191: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const87] ; 786
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'd'
	add qword [rsp + 0], 1
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump191 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rel const88] ; 30
	push rax
	mov rax, [rel const89] ; 833
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const90] ; 903
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump192
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
.jump192:
	cmp rax, [rsp + 24]
	jl .jump193
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
.jump193:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump194
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
.jump194:
	cmp rax, [rsp + 32]
	jl .jump195
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
.jump195:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump196
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
.jump196:
	cmp rax, [rsp + 40]
	jl .jump197
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
.jump197:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const91] ; 37.43
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump198
	mov rax, [rel const92] ; 981
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	jmp .jump199
.jump198:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'd'
	mov rax, [rel const93] ; 734
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump200
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump200:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'd' to 0
	mov rax, 0
	push rax
.jump201: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 136 to rsp 
		mov r10, [rbp - 136 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'd'
	add qword [rsp + 0], 1
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump201 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	neg rax
	push rax
.jump199:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump202
	sub asp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump202:
	cmp rax, [rsp + 16]
	jl .jump203
	sub asp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump203:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump204
	sub asp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump204:
	cmp rax, [rsp + 24]
	jl .jump205
	sub asp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump205:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump174:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'e'
	mov rax, [rel const94] ; 44
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump206
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump206:
	; Computing bound for 'd'
	mov rax, [rel const1] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump207
	mov rax, [rel const95] ; 94
	push rax
	mov rax, [rel const88] ; 30
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	jmp .jump208
.jump207:
	mov rax, [rel const1] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump209
	mov rax, [rel const2] ; True
	push rax
	jmp .jump210
.jump209:
	mov rax, [rel const1] ; False
	push rax
.jump210:
.jump208:
	mov rax, [rel const2] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump211
	mov rax, [rel const2] ; True
	push rax
	jmp .jump212
.jump211:
	mov rax, [rel const1] ; False
	push rax
.jump212:
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump213
	mov rax, [rel const96] ; 582
	push rax
	mov rax, [rel const97] ; 922
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const98] ; 544
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump215
	lea rdi, [rel const19] ; 'divide by zero'
	call _fail_assertion
.jump215:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	jmp .jump214
.jump213:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'e'
	mov rax, [rel const99] ; 169
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump216
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump216:
	; Computing bound for 'd'
	mov rax, [rel const100] ; 109
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump217
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump217:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by 109 
	jno .jump218
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump218:
	imul rdi, [rsp + 0 + 8] ; multiply by 169 
	jno .jump219
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump219:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'e' to 0
	mov rax, 0
	push rax
	; Initialize 'd' to 0
	mov rax, 0
	push rax
.jump220: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 144 to rsp 
		mov r10, [rbp - 144 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'e'
	add qword [rsp + 8], 1
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump220 ; If e < bound, next iter
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump220 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const101] ; 955
	push rax
	mov rax, [rel const102] ; 874
	push rax
	mov rax, [rel const103] ; 219
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump221
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
.jump221:
	cmp rax, [rsp + 16]
	jl .jump222
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
.jump222:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump223
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
.jump223:
	cmp rax, [rsp + 24]
	jl .jump224
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
.jump224:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump214:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump225
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump225:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'e' to 0
	mov rax, 0
	push rax
	; Initialize 'd' to 0
	mov rax, 0
	push rax
.jump226: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'g'
	mov rax, [rel const104] ; 996
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump227
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump227:
	; Computing bound for 'f'
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump228
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump228:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool 
	imul rdi, [rsp + 0 + 0] ; multiply by e 
	jno .jump229
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump229:
	imul rdi, [rsp + 0 + 8] ; multiply by 996 
	jno .jump230
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump230:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'g' to 0
	mov rax, 0
	push rax
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump231: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const2] ; True
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'g'
	add qword [rsp + 8], 1
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump231 ; If g < bound, next iter
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump231 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp 
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp 
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp 
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump232
	sub asp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump232:
	cmp rax, [rsp + 16]
	jl .jump233
	sub asp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump233:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump234
	sub asp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump234:
	cmp rax, [rsp + 24]
	jl .jump235
	sub asp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump235:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump236
	mov rax, [rel const1] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump238
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'h'
	mov rax, [rel const105] ; 612
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump240
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump240:
	; Computing bound for 'g'
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp 
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump241
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump241:
	; Computing bound for 'f'
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp 
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump242
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump242:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by d 
	jno .jump243
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump243:
	imul rdi, [rsp + 0 + 8] ; multiply by d 
	jno .jump244
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump244:
	imul rdi, [rsp + 0 + 16] ; multiply by 612 
	jno .jump245
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump245:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'h' to 0
	mov rax, 0
	push rax
	; Initialize 'g' to 0
	mov rax, 0
	push rax
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump246: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 176 to rsp 
		mov r10, [rbp - 176 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'h'
	add qword [rsp + 16], 1
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump246 ; If h < bound, next iter
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump246 ; If g < bound, next iter
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump246 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump239
.jump238:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'h'
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump247
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump247:
	; Computing bound for 'g'
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp 
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump248
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump248:
	; Computing bound for 'f'
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp 
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump249
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump249:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by d 
	jno .jump250
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump250:
	imul rdi, [rsp + 0 + 8] ; multiply by d 
	jno .jump251
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump251:
	imul rdi, [rsp + 0 + 16] ; multiply by e 
	jno .jump252
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump252:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'h' to 0
	mov rax, 0
	push rax
	; Initialize 'g' to 0
	mov rax, 0
	push rax
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump253: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const106] ; 60
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'h'
	add qword [rsp + 16], 1
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump253 ; If h < bound, next iter
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump253 ; If g < bound, next iter
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump253 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump239:
	mov rax, [rel const35] ; 669
	push rax
	mov rax, [rel const107] ; 446
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp 
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const108] ; 43
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump254
	lea rdi, [rel const19] ; 'divide by zero'
	call _fail_assertion
.jump254:
	cqo
	idiv r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump255
	sub asp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump255:
	cmp rax, [rsp + 24]
	jl .jump256
	sub asp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump256:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump257
	sub asp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump257:
	cmp rax, [rsp + 32]
	jl .jump258
	sub asp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump258:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump259
	sub asp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump259:
	cmp rax, [rsp + 40]
	jl .jump260
	sub asp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump260:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump237
.jump236:
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
.jump237:
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'e'
	add qword [rsp + 8], 1
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump226 ; If e < bound, next iter
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump226 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump261
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
.jump261:
	cmp rax, [rsp + 24]
	jl .jump262
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
.jump262:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump263
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
.jump263:
	cmp rax, [rsp + 32]
	jl .jump264
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
.jump264:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump265
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
.jump265:
	cmp rax, [rsp + 40]
	jl .jump266
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
.jump266:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 32
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 32
	; Moving 32 bytes from rax to rsp 
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'h'
	mov rax, [rel const109] ; 564
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump267
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump267:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool 
	imul rdi, [rsp + 0 + 0] ; multiply by 564 
	jno .jump268
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump268:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'h' to 0
	mov rax, 0
	push rax
.jump269: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const110] ; 189
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'h'
	add qword [rsp + 0], 1
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump269 ; If h < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump270
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
.jump270:
	cmp rax, [rsp + 8]
	jl .jump271
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
.jump271:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump272
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump274
	mov rax, [rel const1] ; False
	push rax
	jmp .jump275
.jump274:
	mov rax, [rel const1] ; False
	push rax
.jump275:
	mov rax, [rel const2] ; True
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump276
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'i'
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump278
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump278:
	; Computing bound for 'h'
	mov rax, [rel const111] ; 488
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump279
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump279:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,] 
	imul rdi, [rsp + 0 + 0] ; multiply by 488 
	jno .jump280
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump280:
	imul rdi, [rsp + 0 + 8] ; multiply by e 
	jno .jump281
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump281:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'i' to 0
	mov rax, 0
	push rax
	; Initialize 'h' to 0
	mov rax, 0
	push rax
.jump282: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'k'
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump283
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump283:
	; Computing bound for 'j'
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump284
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump284:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by e 
	jno .jump285
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump285:
	imul rdi, [rsp + 0 + 8] ; multiply by (- i) 
	jno .jump286
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump286:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'k' to 0
	mov rax, 0
	push rax
	; Initialize 'j' to 0
	mov rax, 0
	push rax
.jump287: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'k'
	add qword [rsp + 8], 1
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump287 ; If k < bound, next iter
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump287 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'i'
	add qword [rsp + 8], 1
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump282 ; If i < bound, next iter
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump282 ; If h < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump277
.jump276:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'i'
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump288
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump288:
	; Computing bound for 'h'
	mov rax, [rel const112] ; 516
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump289
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump289:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,] 
	imul rdi, [rsp + 0 + 0] ; multiply by 516 
	jno .jump290
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump290:
	imul rdi, [rsp + 0 + 8] ; multiply by e 
	jno .jump291
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump291:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'i' to 0
	mov rax, 0
	push rax
	; Initialize 'h' to 0
	mov rax, 0
	push rax
.jump292: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'k'
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump293
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump293:
	; Computing bound for 'j'
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump294
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump294:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by f 
	jno .jump295
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump295:
	imul rdi, [rsp + 0 + 8] ; multiply by i 
	jno .jump296
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump296:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'k' to 0
	mov rax, 0
	push rax
	; Initialize 'j' to 0
	mov rax, 0
	push rax
.jump297: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 144 to rsp 
		mov r10, [rbp - 144 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'k'
	add qword [rsp + 8], 1
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump297 ; If k < bound, next iter
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump297 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'i'
	add qword [rsp + 8], 1
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump292 ; If i < bound, next iter
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump292 ; If h < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump277:
	jmp .jump273
.jump272:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'i'
	mov rax, [rel const113] ; 929
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump298
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump298:
	; Computing bound for 'h'
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump299
	lea rdi, [rel const19] ; 'divide by zero'
	call _fail_assertion
.jump299:
	cqo
	idiv r10
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const114] ; 602
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump300
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump300:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,] 
	imul rdi, [rsp + 0 + 0] ; multiply by ((- 602) * ((f / g) * g)) 
	jno .jump301
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump301:
	imul rdi, [rsp + 0 + 8] ; multiply by 929 
	jno .jump302
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump302:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'i' to 0
	mov rax, 0
	push rax
	; Initialize 'h' to 0
	mov rax, 0
	push rax
.jump303: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const115] ; 11.4
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump304
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'k'
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump306
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump306:
	; Computing bound for 'j'
	mov rax, [rel const20] ; 228
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump307
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump307:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by (f + 228) 
	jno .jump308
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump308:
	imul rdi, [rsp + 0 + 8] ; multiply by e 
	jno .jump309
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump309:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'k' to 0
	mov rax, 0
	push rax
	; Initialize 'j' to 0
	mov rax, 0
	push rax
.jump310: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const1] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump311
	sub rsp, 8
	; Moving 8 bytes from rbp - 144 to rsp 
		mov r10, [rbp - 144 + 0]
		mov [rsp + 0], r10
	jmp .jump312
.jump311:
	mov rax, [rel const116] ; 664
	push rax
.jump312:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'k'
	add qword [rsp + 8], 1
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump310 ; If k < bound, next iter
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump310 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump305
.jump304:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'k'
	mov rax, [rel const117] ; 486
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump313
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump313:
	; Computing bound for 'j'
	sub rsp, 8
	; Moving 8 bytes from rbp - 112 to rsp 
		mov r10, [rbp - 112 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump314
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump314:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by h 
	jno .jump315
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump315:
	imul rdi, [rsp + 0 + 8] ; multiply by (- 486) 
	jno .jump316
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump316:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'k' to 0
	mov rax, 0
	push rax
	; Initialize 'j' to 0
	mov rax, 0
	push rax
.jump317: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const118] ; 856
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'k'
	add qword [rsp + 8], 1
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump317 ; If k < bound, next iter
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump317 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump305:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'i'
	add qword [rsp + 8], 1
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump303 ; If i < bound, next iter
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump303 ; If h < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump273:
	mov rax, [rel const1] ; False
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump318
	mov rax, [rel const2] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump320
	sub rsp, 16
	; Moving 16 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	jmp .jump321
.jump320:
	sub rsp, 16
	; Moving 16 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
.jump321:
	jmp .jump319
.jump318:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'h'
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump322
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump322:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by g 
	jno .jump323
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump323:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'h' to 0
	mov rax, 0
	push rax
.jump324: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'h'
	add qword [rsp + 0], 1
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump324 ; If h < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
.jump319:
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump325
	sub asp, 8 ; Add alignment
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump325:
	cmp rax, [rsp + 8]
	jl .jump326
	sub asp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump326:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'h'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'h'
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump327
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump327:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'h' to 0
	mov rax, 0
	push rax
.jump328: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'h'
	add qword [rsp + 0], 1
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump328 ; If h < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump329
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump329:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'h' to 0
	mov rax, 0
	push rax
.jump330: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'h'
	add qword [rsp + 0], 1
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump330 ; If h < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const119] ; 65.14
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump331
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	jmp .jump332
.jump331:
	mov rax, [rel const120] ; 558
	push rax
.jump332:
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump333
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'i'
	mov rax, [rel const121] ; 518
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump335
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump335:
	; Computing bound for 'h'
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump336
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump336:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'i' to 0
	mov rax, 0
	push rax
	; Initialize 'h' to 0
	mov rax, 0
	push rax
.jump337: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'i'
	add qword [rsp + 8], 1
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump337 ; If i < bound, next iter
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump337 ; If h < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	jmp .jump334
.jump333:
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const78] ; 568
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump338
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'i'
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump340
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump340:
	; Computing bound for 'h'
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump341
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump341:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by f 
	jno .jump342
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump342:
	imul rdi, [rsp + 0 + 8] ; multiply by g 
	jno .jump343
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump343:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'i' to 0
	mov rax, 0
	push rax
	; Initialize 'h' to 0
	mov rax, 0
	push rax
.jump344: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'i'
	add qword [rsp + 8], 1
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump344 ; If i < bound, next iter
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump344 ; If h < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump339
.jump338:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'i'
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump345
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump345:
	; Computing bound for 'h'
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump346
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
.jump346:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by g 
	jno .jump347
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump347:
	imul rdi, [rsp + 0 + 8] ; multiply by f 
	jno .jump348
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
.jump348:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'i' to 0
	mov rax, 0
	push rax
	; Initialize 'h' to 0
	mov rax, 0
	push rax
.jump349: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'i'
	add qword [rsp + 8], 1
	; Compare i to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump349 ; If i < bound, next iter
	mov qword [rsp + 8], 0 ; i = 0
	add qword [rsp + 0], 1 ; h++
	; Compare h to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump349 ; If h < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump339:
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const122] ; 893
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump350
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	jmp .jump351
.jump350:
	mov rax, [rel const123] ; 913
	push rax
.jump351:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump352
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
.jump352:
	cmp rax, [rsp + 16]
	jl .jump353
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
.jump353:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump354
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
.jump354:
	cmp rax, [rsp + 24]
	jl .jump355
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
.jump355:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump334:
	pop rax
	pop r10
	cmp r10, 0
	jne .jump356
	lea rdi, [rel const12] ; 'mod by zero'
	call _fail_assertion
.jump356:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const124] ; 867
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump357
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
.jump357:
	cmp rax, [rsp + 16]
	jl .jump358
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
.jump358:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump359
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
.jump359:
	cmp rax, [rsp + 24]
	jl .jump360
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
.jump360:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 24
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 24
	; Moving 24 bytes from rax to rsp 
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const1] ; False
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'l'
	mov rax, [rel const125] ; 352
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump361
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump361:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool 
	imul rdi, [rsp + 0 + 0] ; multiply by 352 
	jno .jump362
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump362:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'l' to 0
	mov rax, 0
	push rax
.jump363: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const126] ; 96.9
	push rax
	mov rax, [rel const127] ; 28.47
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'l'
	add qword [rsp + 0], 1
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump363 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'l'
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump364
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump364:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'l' to 0
	mov rax, 0
	push rax
.jump365: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const2] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump366
	mov rax, [rel const128] ; 553
	push rax
	jmp .jump367
.jump366:
	mov rax, [rel const129] ; 496
	push rax
.jump367:
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'l'
	add qword [rsp + 0], 1
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump365 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump368
	lea rdi, [rel const4] ; 'negative array index'
	call _fail_assertion
.jump368:
	cmp rax, [rsp + 8]
	jl .jump369
	lea rdi, [rel const5] ; 'index too large'
	call _fail_assertion
.jump369:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump370
	sub rsp, 16
	; Moving 16 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	jmp .jump371
.jump370:
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump372
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump374
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'l'
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump376
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump376:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by e 
	jno .jump377
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump377:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'l' to 0
	mov rax, 0
	push rax
.jump378: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'l'
	add qword [rsp + 0], 1
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump378 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	jmp .jump375
.jump374:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'l'
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump379
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump379:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by j 
	jno .jump380
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump380:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'l' to 0
	mov rax, 0
	push rax
.jump381: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp 
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'l'
	add qword [rsp + 0], 1
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump381 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
.jump375:
	jmp .jump373
.jump372:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'l'
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump382
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump382:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by e 
	jno .jump383
	sub asp, 8 ; Add alignment
	lea rdi, [rel const21] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump383:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'l' to 0
	mov rax, 0
	push rax
.jump384: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'l'
	add qword [rsp + 0], 1
	; Compare l to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump384 ; If l < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
.jump373:
.jump371:
	mov rax, [rel const130] ; 958
	push rax
	lea rdi, [rel const131] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	add rsp, 112 ; Local variables
	pop r12 ; begin jpl_main postlude
	pop rbp
	ret

