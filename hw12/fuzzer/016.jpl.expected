global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 1
const1: dq 0
const2: dq 673
const3: db `non-positive loop bound`, 0
const4: dq 975
const5: db `negative array index`, 0
const6: db `index too large`, 0
const7: dq 539
const8: dq 648
const9: dq 335
const10: db `overflow computing array size`, 0
const11: dq 479
const12: dq 262
const13: dq 567
const14: dq 528
const15: dq 499
const16: dq 888
const17: dq 868
const18: dq 761
const19: dq 294
const20: dq 405
const21: dq 828
const22: dq 518
const23: dq 410
const24: dq 87
const25: dq 109
const26: dq 423
const27: dq 830
const28: dq 112
const29: dq 95.06
const30: dq 53.79
const31: dq 27.63
const32: dq 12.37
const33: db `mod by zero`, 0
const34: dq 815
const35: dq 453
const36: dq 259
const37: dq 548
const38: dq 248
const39: dq 464
const40: dq 568
const41: dq 446
const42: dq 984
const43: dq 39
const44: dq 697
const45: dq 485
const46: dq 605
const47: dq 274
const48: dq 786
const49: dq 529
const50: dq 877
const51: dq 768
const52: db `divide by zero`, 0
const53: dq 249
const54: dq 358
const55: dq 909
const56: dq 138
const57: dq 961
const58: dq 925
const59: dq 35.33
const60: dq 221
const61: dq 678
const62: dq 814
const63: dq 313
const64: dq 336
const65: dq 584
const66: dq 576
const67: dq 105
const68: dq 707
const69: dq 970
const70: dq 885
const71: dq 334
const72: dq 459
const73: dq 67.11
const74: dq 24.12
const75: dq 6.54
const76: dq 96.5
const77: dq 66.49
const78: dq 86.35
const79: dq 258
const80: dq 60
const81: dq 173
const82: dq 743
const83: dq 48.44
const84: dq 13
const85: dq 238
const86: dq 535
const87: dq 480
const88: dq 561
const89: dq 132
const90: dq 616
const91: dq 321
const92: dq 536
const93: dq 276
const94: dq 85
const95: dq 816
const96: dq 906
const97: dq 644
const98: dq 750
const99: dq 420
const100: dq 86
const101: dq 979
const102: dq 135
const103: dq 656
const104: dq 310
const105: dq 759
const106: dq 613
const107: dq 319
const108: dq 637
const109: dq 152
const110: dq 16
const111: dq 653
const112: dq 589
const113: dq 622
const114: dq 180
const115: dq 818
const116: dq 641
const117: dq 847
const118: dq 682
const119: dq 284
const120: dq 516
const121: dq 383
const122: dq 512
const123: dq 513
const124: dq 157
const125: db `(IntType)`, 0
const126: dq 896
const127: dq 277
const128: dq 78.32
const129: dq 69.57
const130: dq 27.36
const131: dq 890
const132: dq 627
const133: dq 437
const134: dq 774
const135: dq 62.55
const136: dq 68.58
const137: dq 87.22
const138: dq 39.67
const139: dq 8.79
const140: dq 38.86
const141: dq 74.01
const142: dq 70.47
const143: dq 33.87
const144: dq 57.21
const145: dq 256
const146: db `(ArrayType (IntType) 1)`, 0
const147: dq 950
const148: dq 537
const149: dq 788
const150: dq 489
const151: dq 851
const152: dq 39.85
const153: dq 54.35
const154: dq 62.57
const155: dq 26.55
const156: dq 511
const157: dq 99.83
const158: dq 134
const159: db `(BoolType)`, 0
const160: dq 74.74
const161: dq 44.28
const162: dq 17
const163: dq 285
const164: dq 16.56
const165: dq 471
const166: dq 42.93
const167: dq 82.43
const168: dq 0.48
const169: dq 78.9
const170: dq 87.34
const171: dq 3.82
const172: dq 11.57
const173: dq 35.68
const174: dq 18.27

section .text
z:
_z:
	push rbp
	mov rbp, rsp
	push rdi
	push rsi
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'C'
	sub rsp, 8
	; Moving 8 bytes from r12 - 192 to rsp 
		mov r10, [r12 - 192 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump655
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump655:
	; Computing bound for 'B'
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp 
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump656
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump656:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by m 
	jno .jump657
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump657:
	imul rdi, [rsp + 0 + 8] ; multiply by u 
	jno .jump658
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump658:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'C' to 0
	mov rax, 0
	push rax
	; Initialize 'B' to 0
	mov rax, 0
	push rax
.jump659: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'C'
	add qword [rsp + 8], 1
	; Compare C to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump659 ; If C < bound, next iter
	mov qword [rsp + 8], 0 ; C = 0
	add qword [rsp + 0], 1 ; B++
	; Compare B to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump659 ; If B < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 40 ; Local variables
	pop rbp
	ret
	mov rax, [rel const1] ; False
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump660
	mov rax, [rel const0] ; True
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'D'
	sub rsp, 8
	; Moving 8 bytes from r12 - 216 to rsp 
		mov r10, [r12 - 216 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump662
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump662:
	; Computing bound for 'C'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump663
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump663:
	; Computing bound for 'B'
	sub rsp, 8
	; Moving 8 bytes from r12 - 224 to rsp 
		mov r10, [r12 - 224 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump664
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump664:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool 
	imul rdi, [rsp + 0 + 0] ; multiply by x 
	jno .jump665
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump665:
	imul rdi, [rsp + 0 + 8] ; multiply by b 
	jno .jump666
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump666:
	imul rdi, [rsp + 0 + 16] ; multiply by y 
	jno .jump667
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump667:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'D' to 0
	mov rax, 0
	push rax
	; Initialize 'C' to 0
	mov rax, 0
	push rax
	; Initialize 'B' to 0
	mov rax, 0
	push rax
.jump668: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const0] ; True
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'D'
	add qword [rsp + 16], 1
	; Compare D to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump668 ; If D < bound, next iter
	mov qword [rsp + 16], 0 ; D = 0
	add qword [rsp + 8], 1 ; C++
	; Compare C to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump668 ; If C < bound, next iter
	mov qword [rsp + 8], 0 ; C = 0
	add qword [rsp + 0], 1 ; B++
	; Compare B to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump668 ; If B < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 152 to rsp 
		mov r10, [r12 - 152 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump669
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump669:
	cmp rax, [rsp + 24]
	jl .jump670
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump670:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump671
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump671:
	cmp rax, [rsp + 32]
	jl .jump672
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump672:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump673
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump673:
	cmp rax, [rsp + 40]
	jl .jump674
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump674:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump675
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'C'
	sub rsp, 8
	; Moving 8 bytes from r12 - 216 to rsp 
		mov r10, [r12 - 216 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const150] ; 489
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump677
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump677:
	; Computing bound for 'B'
	sub rsp, 8
	; Moving 8 bytes from r12 - 224 to rsp 
		mov r10, [r12 - 224 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump678
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump678:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,] 
	imul rdi, [rsp + 0 + 0] ; multiply by x 
	jno .jump679
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump679:
	imul rdi, [rsp + 0 + 8] ; multiply by (- (489 * y)) 
	jno .jump680
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump680:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'C' to 0
	mov rax, 0
	push rax
	; Initialize 'B' to 0
	mov rax, 0
	push rax
.jump681: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'E'
	sub rsp, 8
	; Moving 8 bytes from r12 - 216 to rsp 
		mov r10, [r12 - 216 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump682
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump682:
	; Computing bound for 'D'
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump683
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump683:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by h 
	jno .jump684
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump684:
	imul rdi, [rsp + 0 + 8] ; multiply by y 
	jno .jump685
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump685:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'E' to 0
	mov rax, 0
	push rax
	; Initialize 'D' to 0
	mov rax, 0
	push rax
.jump686: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp 
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'E'
	add qword [rsp + 8], 1
	; Compare E to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump686 ; If E < bound, next iter
	mov qword [rsp + 8], 0 ; E = 0
	add qword [rsp + 0], 1 ; D++
	; Compare D to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump686 ; If D < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'C'
	add qword [rsp + 8], 1
	; Compare C to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump681 ; If C < bound, next iter
	mov qword [rsp + 8], 0 ; C = 0
	add qword [rsp + 0], 1 ; B++
	; Compare B to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump681 ; If B < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump676
.jump675:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'C'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'D'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump687
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump687:
	; Computing bound for 'C'
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp 
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump688
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump688:
	; Computing bound for 'B'
	sub rsp, 8
	; Moving 8 bytes from r12 - 224 to rsp 
		mov r10, [r12 - 224 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump689
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump689:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'D' to 0
	mov rax, 0
	push rax
	; Initialize 'C' to 0
	mov rax, 0
	push rax
	; Initialize 'B' to 0
	mov rax, 0
	push rax
.jump690: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment 'D'
	add qword [rsp + 16], 1
	; Compare D to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump690 ; If D < bound, next iter
	mov qword [rsp + 16], 0 ; D = 0
	add qword [rsp + 8], 1 ; C++
	; Compare C to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump690 ; If C < bound, next iter
	mov qword [rsp + 8], 0 ; C = 0
	add qword [rsp + 0], 1 ; B++
	; Compare B to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump690 ; If B < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump691
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump691:
	; Computing bound for 'B'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'C'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump692
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump692:
	; Computing bound for 'B'
	sub rsp, 8
	; Moving 8 bytes from r12 - 224 to rsp 
		mov r10, [r12 - 224 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump693
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump693:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'C' to 0
	mov rax, 0
	push rax
	; Initialize 'B' to 0
	mov rax, 0
	push rax
.jump694: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'C'
	add qword [rsp + 8], 1
	; Compare C to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump694 ; If C < bound, next iter
	mov qword [rsp + 8], 0 ; C = 0
	add qword [rsp + 0], 1 ; B++
	; Compare B to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump694 ; If B < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump695
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump695:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,] 
imul rdi, [rsp + 0 + 0] ; multiply by (sum[B : x, C : (- b)] C) 
	jno .jump696
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump696:
imul rdi, [rsp + 0 + 8] ; multiply by (sum[B : x, C : m, D : b] e) 
	jno .jump697
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump697:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'C' to 0
	mov rax, 0
	push rax
	; Initialize 'B' to 0
	mov rax, 0
	push rax
.jump698: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const0] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump699
	mov rax, [rel const1] ; False
	push rax
	jmp .jump700
.jump699:
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
.jump700:
	pop rax
	cmp rax, 0
	je .jump701
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'E'
	sub rsp, 8
	; Moving 8 bytes from r12 - 184 to rsp 
		mov r10, [r12 - 184 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump703
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump703:
	; Computing bound for 'D'
	sub rsp, 8
	; Moving 8 bytes from r12 - 192 to rsp 
		mov r10, [r12 - 192 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump704
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump704:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by u 
	jno .jump705
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump705:
	imul rdi, [rsp + 0 + 8] ; multiply by v 
	jno .jump706
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump706:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'E' to 0
	mov rax, 0
	push rax
	; Initialize 'D' to 0
	mov rax, 0
	push rax
.jump707: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 192 to rsp 
		mov r10, [r12 - 192 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'E'
	add qword [rsp + 8], 1
	; Compare E to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump707 ; If E < bound, next iter
	mov qword [rsp + 8], 0 ; E = 0
	add qword [rsp + 0], 1 ; D++
	; Compare D to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump707 ; If D < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump702
.jump701:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'E'
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump708
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump708:
	; Computing bound for 'D'
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp 
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump709
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump709:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by m 
	jno .jump710
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump710:
	imul rdi, [rsp + 0 + 8] ; multiply by h 
	jno .jump711
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump711:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'E' to 0
	mov rax, 0
	push rax
	; Initialize 'D' to 0
	mov rax, 0
	push rax
.jump712: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 168 to rsp 
		mov r10, [r12 - 168 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'E'
	add qword [rsp + 8], 1
	; Compare E to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump712 ; If E < bound, next iter
	mov qword [rsp + 8], 0 ; E = 0
	add qword [rsp + 0], 1 ; D++
	; Compare D to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump712 ; If D < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump702:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'C'
	add qword [rsp + 8], 1
	; Compare C to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump698 ; If C < bound, next iter
	mov qword [rsp + 8], 0 ; C = 0
	add qword [rsp + 0], 1 ; B++
	; Compare B to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump698 ; If B < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump676:
	sub rsp, 8
	; Moving 8 bytes from r12 - 200 to rsp 
		mov r10, [r12 - 200 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 160 to rsp 
		mov r10, [r12 - 160 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump713
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump713:
	cmp rax, [rsp + 16]
	jl .jump714
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump714:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump715
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump715:
	cmp rax, [rsp + 24]
	jl .jump716
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump716:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 24
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 24
	; Moving 24 bytes from rax to rsp 
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump661
.jump660:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'C'
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump717
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump717:
	; Computing bound for 'B'
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp 
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump718
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump718:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,] 
	imul rdi, [rsp + 0 + 0] ; multiply by k 
	jno .jump719
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump719:
	imul rdi, [rsp + 0 + 8] ; multiply by h 
	jno .jump720
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump720:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'C' to 0
	mov rax, 0
	push rax
	; Initialize 'B' to 0
	mov rax, 0
	push rax
.jump721: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'E'
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump722
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump722:
	; Computing bound for 'D'
	sub rsp, 8
	; Moving 8 bytes from r12 - 224 to rsp 
		mov r10, [r12 - 224 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump723
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump723:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by x 
	jno .jump724
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump724:
	imul rdi, [rsp + 0 + 8] ; multiply by B 
	jno .jump725
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump725:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'E' to 0
	mov rax, 0
	push rax
	; Initialize 'D' to 0
	mov rax, 0
	push rax
.jump726: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 216 to rsp 
		mov r10, [r12 - 216 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'E'
	add qword [rsp + 8], 1
	; Compare E to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump726 ; If E < bound, next iter
	mov qword [rsp + 8], 0 ; E = 0
	add qword [rsp + 0], 1 ; D++
	; Compare D to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump726 ; If D < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'C'
	add qword [rsp + 8], 1
	; Compare C to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump721 ; If C < bound, next iter
	mov qword [rsp + 8], 0 ; C = 0
	add qword [rsp + 0], 1 ; B++
	; Compare B to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump721 ; If B < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp 
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump727
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump727:
	cmp rax, [rsp + 16]
	jl .jump728
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump728:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump729
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump729:
	cmp rax, [rsp + 24]
	jl .jump730
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump730:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 24
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 24
	; Moving 24 bytes from rax to rsp 
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump661:
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 64 ; Local variables
	pop rbp
	ret
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'C'
	sub rsp, 8
	; Moving 8 bytes from r12 - 168 to rsp 
		mov r10, [r12 - 168 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump731
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump731:
	; Computing bound for 'B'
	sub rsp, 8
	; Moving 8 bytes from r12 - 160 to rsp 
		mov r10, [r12 - 160 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump732
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump732:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by q 
	jno .jump733
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump733:
	imul rdi, [rsp + 0 + 8] ; multiply by p 
	jno .jump734
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump734:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'C' to 0
	mov rax, 0
	push rax
	; Initialize 'B' to 0
	mov rax, 0
	push rax
.jump735: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 192 to rsp 
		mov r10, [r12 - 192 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump736
	sub rsp, 8
	; Moving 8 bytes from r12 - 192 to rsp 
		mov r10, [r12 - 192 + 0]
		mov [rsp + 0], r10
	jmp .jump737
.jump736:
	sub rsp, 8
	; Moving 8 bytes from r12 - 184 to rsp 
		mov r10, [r12 - 184 + 0]
		mov [rsp + 0], r10
.jump737:
	pop rax
	pop r10
	sub rax, r10
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'C'
	add qword [rsp + 8], 1
	; Compare C to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump735 ; If C < bound, next iter
	mov qword [rsp + 8], 0 ; C = 0
	add qword [rsp + 0], 1 ; B++
	; Compare B to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump735 ; If B < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 88 ; Local variables
	pop rbp
	ret
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'D'
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'B'
	mov rax, [rel const151] ; 851
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump738
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump738:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool 
	imul rdi, [rsp + 0 + 0] ; multiply by 851 
	jno .jump739
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump739:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'B' to 0
	mov rax, 0
	push rax
.jump740: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'B'
	add qword [rsp + 0], 1
	; Compare B to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump740 ; If B < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 216 to rsp 
		mov r10, [r12 - 216 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump741
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump741:
	cmp rax, [rsp + 8]
	jl .jump742
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump742:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump743
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'B'
	sub rsp, 8
	; Moving 8 bytes from r12 - 160 to rsp 
		mov r10, [r12 - 160 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump745
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump745:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'B' to 0
	mov rax, 0
	push rax
.jump746: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'B'
	add qword [rsp + 0], 1
	; Compare B to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump746 ; If B < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	jmp .jump744
.jump743:
	sub rsp, 8
	; Moving 8 bytes from r12 - 216 to rsp 
		mov r10, [r12 - 216 + 0]
		mov [rsp + 0], r10
.jump744:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump747
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump747:
	; Computing bound for 'C'
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp 
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump748
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump748:
	; Computing bound for 'B'
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp 
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump749
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump749:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float 
	imul rdi, [rsp + 0 + 0] ; multiply by g 
	jno .jump750
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump750:
	imul rdi, [rsp + 0 + 8] ; multiply by k 
	jno .jump751
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump751:
imul rdi, [rsp + 0 + 16] ; multiply by (if (array[B : 851] A)[y] then (sum[B : q] B) else y) 
	jno .jump752
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump752:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'D' to 0
	mov rax, 0
	push rax
	; Initialize 'C' to 0
	mov rax, 0
	push rax
	; Initialize 'B' to 0
	mov rax, 0
	push rax
.jump753: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const152] ; 39.85
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'D'
	add qword [rsp + 16], 1
	; Compare D to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump753 ; If D < bound, next iter
	mov qword [rsp + 16], 0 ; D = 0
	add qword [rsp + 8], 1 ; C++
	; Compare C to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump753 ; If C < bound, next iter
	mov qword [rsp + 8], 0 ; C = 0
	add qword [rsp + 0], 1 ; B++
	; Compare B to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump753 ; If B < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp 
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 200 to rsp 
		mov r10, [r12 - 200 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump754
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump754:
	cmp rax, [rsp + 24]
	jl .jump755
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump755:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump756
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump756:
	cmp rax, [rsp + 32]
	jl .jump757
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump757:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump758
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump758:
	cmp rax, [rsp + 40]
	jl .jump759
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump759:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'C'
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp 
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp 
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump760
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const52] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump760:
	cqo
	idiv r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump761
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump761:
	; Computing bound for 'B'
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp 
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump762
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump762:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'C' to 0
	mov rax, 0
	push rax
	; Initialize 'B' to 0
	mov rax, 0
	push rax
.jump763: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const153] ; 54.35
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 32] ; Load sum
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment 'C'
	add qword [rsp + 8], 1
	; Compare C to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump763 ; If C < bound, next iter
	mov qword [rsp + 8], 0 ; C = 0
	add qword [rsp + 0], 1 ; B++
	; Compare B to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump763 ; If B < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rel const154] ; 62.57
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump764
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'D'
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp 
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump766
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump766:
	; Computing bound for 'C'
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump767
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp 
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	jmp .jump768
.jump767:
	sub rsp, 8
	; Moving 8 bytes from r12 - 152 to rsp 
		mov r10, [r12 - 152 + 0]
		mov [rsp + 0], r10
.jump768:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump769
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump769:
	; Computing bound for 'B'
	sub rsp, 8
	; Moving 8 bytes from r12 - 216 to rsp 
		mov r10, [r12 - 216 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump770
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump770:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float 
	imul rdi, [rsp + 0 + 0] ; multiply by y 
	jno .jump771
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump771:
	imul rdi, [rsp + 0 + 8] ; multiply by (if A then m else r) 
	jno .jump772
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump772:
	imul rdi, [rsp + 0 + 16] ; multiply by m 
	jno .jump773
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump773:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'D' to 0
	mov rax, 0
	push rax
	; Initialize 'C' to 0
	mov rax, 0
	push rax
	; Initialize 'B' to 0
	mov rax, 0
	push rax
.jump774: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'G'
	sub rsp, 8
	; Moving 8 bytes from rbp - 136 to rsp 
		mov r10, [rbp - 136 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump775
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump775:
	; Computing bound for 'F'
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp 
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump776
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump776:
	; Computing bound for 'E'
	sub rsp, 8
	; Moving 8 bytes from r12 - 184 to rsp 
		mov r10, [r12 - 184 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump777
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump777:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'G' to 0
	mov rax, 0
	push rax
	; Initialize 'F' to 0
	mov rax, 0
	push rax
	; Initialize 'E' to 0
	mov rax, 0
	push rax
.jump778: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const155] ; 26.55
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 48] ; Load sum
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment 'G'
	add qword [rsp + 16], 1
	; Compare G to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump778 ; If G < bound, next iter
	mov qword [rsp + 16], 0 ; G = 0
	add qword [rsp + 8], 1 ; F++
	; Compare F to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump778 ; If F < bound, next iter
	mov qword [rsp + 8], 0 ; F = 0
	add qword [rsp + 0], 1 ; E++
	; Compare E to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump778 ; If E < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'D'
	add qword [rsp + 16], 1
	; Compare D to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump774 ; If D < bound, next iter
	mov qword [rsp + 16], 0 ; D = 0
	add qword [rsp + 8], 1 ; C++
	; Compare C to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump774 ; If C < bound, next iter
	mov qword [rsp + 8], 0 ; C = 0
	add qword [rsp + 0], 1 ; B++
	; Compare B to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump774 ; If B < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump765
.jump764:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'B'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump779
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump779:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof float[,,] 
	imul rdi, [rsp + 0 + 0] ; multiply by b 
	jno .jump780
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump780:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'B' to 0
	mov rax, 0
	push rax
.jump781: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'E'
	mov rax, [rel const156] ; 511
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump782
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump782:
	; Computing bound for 'D'
	sub rsp, 8
	; Moving 8 bytes from r12 - 152 to rsp 
		mov r10, [r12 - 152 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump783
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump783:
	; Computing bound for 'C'
	sub rsp, 8
	; Moving 8 bytes from r12 - 200 to rsp 
		mov r10, [r12 - 200 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump784
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump784:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float 
	imul rdi, [rsp + 0 + 0] ; multiply by t 
	jno .jump785
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump785:
	imul rdi, [rsp + 0 + 8] ; multiply by r 
	jno .jump786
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump786:
	imul rdi, [rsp + 0 + 16] ; multiply by 511 
	jno .jump787
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump787:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'E' to 0
	mov rax, 0
	push rax
	; Initialize 'D' to 0
	mov rax, 0
	push rax
	; Initialize 'C' to 0
	mov rax, 0
	push rax
.jump788: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const157] ; 99.83
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'E'
	add qword [rsp + 16], 1
	; Compare E to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump788 ; If E < bound, next iter
	mov qword [rsp + 16], 0 ; E = 0
	add qword [rsp + 8], 1 ; D++
	; Compare D to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump788 ; If D < bound, next iter
	mov qword [rsp + 8], 0 ; D = 0
	add qword [rsp + 0], 1 ; C++
	; Compare C to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump788 ; If C < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 32
	add rax, [rsp + 48]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax 
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment 'B'
	add qword [rsp + 0], 1
	; Compare B to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump781 ; If B < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp 
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump789
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump789:
	cmp rax, [rsp + 8]
	jl .jump790
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump790:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 32
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 32
	; Moving 32 bytes from rax to rsp 
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump765:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'B'
	sub rsp, 8
	; Moving 8 bytes from r12 - 184 to rsp 
		mov r10, [r12 - 184 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump791
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump791:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'B' to 0
	mov rax, 0
	push rax
.jump792: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp 
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'B'
	add qword [rsp + 0], 1
	; Compare B to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump792 ; If B < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp 
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump793
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump793:
	cmp rax, [rsp + 24]
	jl .jump794
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump794:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump795
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump795:
	cmp rax, [rsp + 32]
	jl .jump796
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump796:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump797
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump797:
	cmp rax, [rsp + 40]
	jl .jump798
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump798:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	mov rax, [rel const65] ; 584
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp 
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump799
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	jmp .jump800
.jump799:
	mov rax, [rel const1] ; False
	push rax
	mov rax, [rel const1] ; False
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
.jump800:
	pop rax
	cmp rax, 0
	je .jump801
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'E'
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump803
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump803:
	; Computing bound for 'D'
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump804
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump804:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by h 
	jno .jump805
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump805:
	imul rdi, [rsp + 0 + 8] ; multiply by i 
	jno .jump806
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump806:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'E' to 0
	mov rax, 0
	push rax
	; Initialize 'D' to 0
	mov rax, 0
	push rax
.jump807: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'H'
	sub rsp, 8
	; Moving 8 bytes from r12 - 192 to rsp 
		mov r10, [r12 - 192 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump808
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump808:
	; Computing bound for 'G'
	sub rsp, 8
	; Moving 8 bytes from rbp - 144 to rsp 
		mov r10, [rbp - 144 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump809
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump809:
	; Computing bound for 'F'
	sub rsp, 8
	; Moving 8 bytes from r12 - 152 to rsp 
		mov r10, [r12 - 152 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump810
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump810:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'H' to 0
	mov rax, 0
	push rax
	; Initialize 'G' to 0
	mov rax, 0
	push rax
	; Initialize 'F' to 0
	mov rax, 0
	push rax
.jump811: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp 
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment 'H'
	add qword [rsp + 16], 1
	; Compare H to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump811 ; If H < bound, next iter
	mov qword [rsp + 16], 0 ; H = 0
	add qword [rsp + 8], 1 ; G++
	; Compare G to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump811 ; If G < bound, next iter
	mov qword [rsp + 8], 0 ; G = 0
	add qword [rsp + 0], 1 ; F++
	; Compare F to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump811 ; If F < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'E'
	add qword [rsp + 8], 1
	; Compare E to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump807 ; If E < bound, next iter
	mov qword [rsp + 8], 0 ; E = 0
	add qword [rsp + 0], 1 ; D++
	; Compare D to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump807 ; If D < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump802
.jump801:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'D'
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp 
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump812
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump812:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof int[,][,,] 
	imul rdi, [rsp + 0 + 0] ; multiply by m 
	jno .jump813
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump813:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'D' to 0
	mov rax, 0
	push rax
.jump814: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'G'
	sub rsp, 8
	; Moving 8 bytes from r12 - 152 to rsp 
		mov r10, [r12 - 152 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump815
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump815:
	; Computing bound for 'F'
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump816
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump816:
	; Computing bound for 'E'
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp 
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump817
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump817:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,] 
	imul rdi, [rsp + 0 + 0] ; multiply by D 
	jno .jump818
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump818:
	imul rdi, [rsp + 0 + 8] ; multiply by i 
	jno .jump819
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump819:
	imul rdi, [rsp + 0 + 16] ; multiply by r 
	jno .jump820
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump820:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'G' to 0
	mov rax, 0
	push rax
	; Initialize 'F' to 0
	mov rax, 0
	push rax
	; Initialize 'E' to 0
	mov rax, 0
	push rax
.jump821: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'I'
	mov rax, [rel const158] ; 134
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump822
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump822:
	; Computing bound for 'H'
	sub rsp, 8
	; Moving 8 bytes from r12 - 224 to rsp 
		mov r10, [r12 - 224 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump823
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump823:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by x 
	jno .jump824
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump824:
	imul rdi, [rsp + 0 + 8] ; multiply by 134 
	jno .jump825
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump825:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'I' to 0
	mov rax, 0
	push rax
	; Initialize 'H' to 0
	mov rax, 0
	push rax
.jump826: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 160 to rsp 
		mov r10, [r12 - 160 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'I'
	add qword [rsp + 8], 1
	; Compare I to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump826 ; If I < bound, next iter
	mov qword [rsp + 8], 0 ; I = 0
	add qword [rsp + 0], 1 ; H++
	; Compare H to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump826 ; If H < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'G'
	add qword [rsp + 16], 1
	; Compare G to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump821 ; If G < bound, next iter
	mov qword [rsp + 16], 0 ; G = 0
	add qword [rsp + 8], 1 ; F++
	; Compare F to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump821 ; If F < bound, next iter
	mov qword [rsp + 8], 0 ; F = 0
	add qword [rsp + 0], 1 ; E++
	; Compare E to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump821 ; If E < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 32
	add rax, [rsp + 48]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax 
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment 'D'
	add qword [rsp + 0], 1
	; Compare D to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump814 ; If D < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump827
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump827:
	cmp rax, [rsp + 8]
	jl .jump828
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump828:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 32
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 32
	; Moving 32 bytes from rax to rsp 
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 224 to rsp 
		mov r10, [r12 - 224 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump829
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump829:
	cmp rax, [rsp + 24]
	jl .jump830
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump830:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump831
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump831:
	cmp rax, [rsp + 32]
	jl .jump832
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump832:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump833
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump833:
	cmp rax, [rsp + 40]
	jl .jump834
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump834:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 24
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 24
	; Moving 24 bytes from rax to rsp 
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump802:
	mov rax, [rbp - 8] ; Address to write return value into
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 128 ; Local variables
	pop rbp
	ret

C:
_C:
	push rbp
	mov rbp, rsp
	sub rsp, 32
	; Moving 32 bytes from r12 - 200 to rsp 
		mov r10, [r12 - 200 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 200 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 200 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 200 + 0]
		mov [rsp + 0], r10
	sub rsp, 32
	; Moving 32 bytes from r12 - 168 to rsp 
		mov r10, [r12 - 168 + 24]
		mov [rsp + 24], r10
		mov r10, [r12 - 168 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 168 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 168 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const0] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump835
	mov rax, [rel const1] ; False
	push rax
	jmp .jump836
.jump835:
	mov rax, [rel const160] ; 74.74
	push rax
	mov rax, [rel const161] ; 44.28
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpneqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	mov rax, [rel const1] ; False
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
.jump836:
	pop rax
	cmp rax, 0
	je .jump837
	sub rsp, 8
	; Moving 8 bytes from r12 - 72 to rsp 
		mov r10, [r12 - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 200 to rsp 
		mov r10, [r12 - 200 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump839
	mov rax, [rel const1] ; False
	push rax
	jmp .jump840
.jump839:
	mov rax, [rel const1] ; False
	push rax
.jump840:
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	jmp .jump838
.jump837:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'N'
	sub rsp, 8
	; Moving 8 bytes from r12 - 192 to rsp 
		mov r10, [r12 - 192 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump841
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump841:
	; Computing bound for 'M'
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump842
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump842:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool 
	imul rdi, [rsp + 0 + 0] ; multiply by i 
	jno .jump843
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump843:
	imul rdi, [rsp + 0 + 8] ; multiply by u 
	jno .jump844
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump844:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'N' to 0
	mov rax, 0
	push rax
	; Initialize 'M' to 0
	mov rax, 0
	push rax
.jump845: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 168 to rsp 
		mov r10, [r12 - 168 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'N'
	add qword [rsp + 8], 1
	; Compare N to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump845 ; If N < bound, next iter
	mov qword [rsp + 8], 0 ; N = 0
	add qword [rsp + 0], 1 ; M++
	; Compare M to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump845 ; If M < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 152 to rsp 
		mov r10, [r12 - 152 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp 
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump846
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump846:
	cmp rax, [rsp + 16]
	jl .jump847
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump847:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump848
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump848:
	cmp rax, [rsp + 24]
	jl .jump849
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump849:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump838:
	pop rax
	cmp rax, 0
	je .jump850
	mov rax, [rel const1] ; False
	push rax
	jmp .jump851
.jump850:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'N'
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump852
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump852:
	; Computing bound for 'M'
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump853
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump853:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool 
	imul rdi, [rsp + 0 + 0] ; multiply by e 
	jno .jump854
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump854:
	imul rdi, [rsp + 0 + 8] ; multiply by K 
	jno .jump855
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump855:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'N' to 0
	mov rax, 0
	push rax
	; Initialize 'M' to 0
	mov rax, 0
	push rax
.jump856: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'O'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump857
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump857:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool 
	imul rdi, [rsp + 0 + 0] ; multiply by G 
	jno .jump858
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump858:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'O' to 0
	mov rax, 0
	push rax
.jump859: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const1] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'O'
	add qword [rsp + 0], 1
	; Compare O to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump859 ; If O < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 192 to rsp 
		mov r10, [r12 - 192 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump860
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump860:
	cmp rax, [rsp + 8]
	jl .jump861
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump861:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'N'
	add qword [rsp + 8], 1
	; Compare N to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump856 ; If N < bound, next iter
	mov qword [rsp + 8], 0 ; N = 0
	add qword [rsp + 0], 1 ; M++
	; Compare M to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump856 ; If M < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 168 to rsp 
		mov r10, [r12 - 168 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump862
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump862:
	cmp rax, [rsp + 16]
	jl .jump863
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump863:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump864
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump864:
	cmp rax, [rsp + 24]
	jl .jump865
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump865:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump851:
	pop rax
	cmp rax, 0
	je .jump866
	sub rsp, 24
	; Moving 24 bytes from rbp - -16 to rsp 
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump867
.jump866:
	mov rax, [rel const0] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump868
	mov rax, [rel const1] ; False
	push rax
	jmp .jump869
.jump868:
	mov rax, [rel const1] ; False
	push rax
.jump869:
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump870
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'N'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump872
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump872:
	; Computing bound for 'M'
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump873
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump873:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float 
	imul rdi, [rsp + 0 + 0] ; multiply by L 
	jno .jump874
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump874:
	imul rdi, [rsp + 0 + 8] ; multiply by b 
	jno .jump875
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump875:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'N' to 0
	mov rax, 0
	push rax
	; Initialize 'M' to 0
	mov rax, 0
	push rax
.jump876: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp 
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump877
	sub rsp, 24
	; Moving 24 bytes from rbp - -16 to rsp 
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump878
.jump877:
	sub rsp, 24
	; Moving 24 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 16]
		mov [rsp + 16], r10
		mov r10, [r12 - 48 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
.jump878:
	mov rax, [rel const162] ; 17
	push rax
	sub rsp, 8
	; Moving 8 bytes from r12 - 224 to rsp 
		mov r10, [r12 - 224 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump879
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	jmp .jump880
.jump879:
	mov rax, [rel const0] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump881
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp 
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	jmp .jump882
.jump881:
	mov rax, [rel const163] ; 285
	push rax
.jump882:
.jump880:
	sub rsp, 8
	; Moving 8 bytes from r12 - 216 to rsp 
		mov r10, [r12 - 216 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump883
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump883:
	cmp rax, [rsp + 16]
	jl .jump884
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump884:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump885
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump885:
	cmp rax, [rsp + 24]
	jl .jump886
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump886:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'N'
	add qword [rsp + 8], 1
	; Compare N to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump876 ; If N < bound, next iter
	mov qword [rsp + 8], 0 ; N = 0
	add qword [rsp + 0], 1 ; M++
	; Compare M to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump876 ; If M < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	jmp .jump871
.jump870:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'N'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump887
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump887:
	; Computing bound for 'M'
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump888
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump888:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof float[,] 
	imul rdi, [rsp + 0 + 0] ; multiply by i 
	jno .jump889
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump889:
	imul rdi, [rsp + 0 + 8] ; multiply by G 
	jno .jump890
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump890:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'N' to 0
	mov rax, 0
	push rax
	; Initialize 'M' to 0
	mov rax, 0
	push rax
.jump891: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from r12 - 64 to rsp 
		mov r10, [r12 - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 240 to rsp 
		mov r10, [r12 - 240 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setg al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump892
	sub rsp, 24
	; Moving 24 bytes from rbp - -16 to rsp 
		mov r10, [rbp - -16 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - -16 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - -16 + 0]
		mov [rsp + 0], r10
	jmp .jump893
.jump892:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'P'
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump894
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump894:
	; Computing bound for 'O'
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp 
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump895
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump895:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float 
	imul rdi, [rsp + 0 + 0] ; multiply by k 
	jno .jump896
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump896:
	imul rdi, [rsp + 0 + 8] ; multiply by L 
	jno .jump897
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump897:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'P' to 0
	mov rax, 0
	push rax
	; Initialize 'O' to 0
	mov rax, 0
	push rax
.jump898: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const164] ; 16.56
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'P'
	add qword [rsp + 8], 1
	; Compare P to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump898 ; If P < bound, next iter
	mov qword [rsp + 8], 0 ; P = 0
	add qword [rsp + 0], 1 ; O++
	; Compare O to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump898 ; If O < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
.jump893:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'N'
	add qword [rsp + 8], 1
	; Compare N to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump891 ; If N < bound, next iter
	mov qword [rsp + 8], 0 ; N = 0
	add qword [rsp + 0], 1 ; M++
	; Compare M to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump891 ; If M < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump899
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump899:
	cmp rax, [rsp + 16]
	jl .jump900
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump900:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump901
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump901:
	cmp rax, [rsp + 24]
	jl .jump902
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump902:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 24
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 24
	; Moving 24 bytes from rax to rsp 
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump871:
.jump867:
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 168 to rsp 
		mov r10, [r12 - 168 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump903
	sub rsp, 16
	; Moving 16 bytes from r12 - 120 to rsp 
		mov r10, [r12 - 120 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	jmp .jump904
.jump903:
	sub rsp, 16
	; Moving 16 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
.jump904:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'R'
	mov rax, [rel const1] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump905
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp 
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	jmp .jump906
.jump905:
	sub rsp, 8
	; Moving 8 bytes from r12 - 184 to rsp 
		mov r10, [r12 - 184 + 0]
		mov [rsp + 0], r10
.jump906:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump907
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump907:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'R' to 0
	mov rax, 0
	push rax
.jump908: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const1] ; False
	push rax
	mov rax, [rel const0] ; True
	push rax
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'S'
	sub rsp, 8
	; Moving 8 bytes from r12 - 192 to rsp 
		mov r10, [r12 - 192 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump909
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump909:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool 
	imul rdi, [rsp + 0 + 0] ; multiply by u 
	jno .jump910
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump910:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'S' to 0
	mov rax, 0
	push rax
.jump911: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const1] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'S'
	add qword [rsp + 0], 1
	; Compare S to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump911 ; If S < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	mov rax, [rel const1] ; False
	push rax
	mov rdi, 8
	sub rsp, 8 ; Add alignment
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	mov rdi, 48
	call _jpl_alloc
	; Moving 48 bytes from rsp to rax 
		mov r10, [rsp + 40]
		mov [rax + 40], r10
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 48
	push rax
	mov rax, 3
	push rax
	mov rax, [rel const165] ; 471
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump912
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump912:
	cmp rax, [rsp + 8]
	jl .jump913
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump913:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 16
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 16
	; Moving 16 bytes from rax to rsp 
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from r12 - 200 to rsp 
		mov r10, [r12 - 200 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump914
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump914:
	cmp rax, [rsp + 8]
	jl .jump915
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump915:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump916
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'T'
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump918
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump918:
	; Computing bound for 'S'
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump919
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump919:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool 
	imul rdi, [rsp + 0 + 0] ; multiply by e 
	jno .jump920
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump920:
	imul rdi, [rsp + 0 + 8] ; multiply by d 
	jno .jump921
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump921:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'T' to 0
	mov rax, 0
	push rax
	; Initialize 'S' to 0
	mov rax, 0
	push rax
.jump922: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const0] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'T'
	add qword [rsp + 8], 1
	; Compare T to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump922 ; If T < bound, next iter
	mov qword [rsp + 8], 0 ; T = 0
	add qword [rsp + 0], 1 ; S++
	; Compare S to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump922 ; If S < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from r12 - 232 to rsp 
		mov r10, [r12 - 232 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump923
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump923:
	cmp rax, [rsp + 16]
	jl .jump924
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump924:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump925
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump925:
	cmp rax, [rsp + 24]
	jl .jump926
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump926:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump927
	mov rax, [rel const166] ; 42.93
	push rax
	jmp .jump928
.jump927:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'T'
	sub rsp, 8
	; Moving 8 bytes from r12 - 104 to rsp 
		mov r10, [r12 - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump929
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump929:
	; Computing bound for 'S'
	sub rsp, 8
	; Moving 8 bytes from r12 - 120 to rsp 
		mov r10, [r12 - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump930
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump930:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'T' to 0
	mov rax, 0
	push rax
	; Initialize 'S' to 0
	mov rax, 0
	push rax
.jump931: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'V'
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump932
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump932:
	; Computing bound for 'U'
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump933
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump933:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'V' to 0
	mov rax, 0
	push rax
	; Initialize 'U' to 0
	mov rax, 0
	push rax
.jump934: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'X'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump935
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump935:
	; Computing bound for 'W'
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump936
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump936:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'X' to 0
	mov rax, 0
	push rax
	; Initialize 'W' to 0
	mov rax, 0
	push rax
.jump937: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const167] ; 82.43
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 32] ; Load sum
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment 'X'
	add qword [rsp + 8], 1
	; Compare X to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump937 ; If X < bound, next iter
	mov qword [rsp + 8], 0 ; X = 0
	add qword [rsp + 0], 1 ; W++
	; Compare W to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump937 ; If W < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 32] ; Load sum
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment 'V'
	add qword [rsp + 8], 1
	; Compare V to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump934 ; If V < bound, next iter
	mov qword [rsp + 8], 0 ; V = 0
	add qword [rsp + 0], 1 ; U++
	; Compare U to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump934 ; If U < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 32] ; Load sum
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment 'T'
	add qword [rsp + 8], 1
	; Compare T to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump931 ; If T < bound, next iter
	mov qword [rsp + 8], 0 ; T = 0
	add qword [rsp + 0], 1 ; S++
	; Compare S to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump931 ; If S < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
.jump928:
	jmp .jump917
.jump916:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'S'
	sub rsp, 8
	; Moving 8 bytes from r12 - 160 to rsp 
		mov r10, [r12 - 160 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump938
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump938:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float 
	imul rdi, [rsp + 0 + 0] ; multiply by q 
	jno .jump939
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump939:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'S' to 0
	mov rax, 0
	push rax
.jump940: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const1] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump941
	mov rax, [rel const168] ; 0.48
	push rax
	jmp .jump942
.jump941:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'V'
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump943
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump943:
	; Computing bound for 'U'
	sub rsp, 8
	; Moving 8 bytes from r12 - 80 to rsp 
		mov r10, [r12 - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump944
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump944:
	; Computing bound for 'T'
	sub rsp, 8
	; Moving 8 bytes from r12 - 160 to rsp 
		mov r10, [r12 - 160 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump945
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump945:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'V' to 0
	mov rax, 0
	push rax
	; Initialize 'U' to 0
	mov rax, 0
	push rax
	; Initialize 'T' to 0
	mov rax, 0
	push rax
.jump946: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const169] ; 78.9
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 48] ; Load sum
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment 'V'
	add qword [rsp + 16], 1
	; Compare V to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump946 ; If V < bound, next iter
	mov qword [rsp + 16], 0 ; V = 0
	add qword [rsp + 8], 1 ; U++
	; Compare U to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump946 ; If U < bound, next iter
	mov qword [rsp + 8], 0 ; U = 0
	add qword [rsp + 0], 1 ; T++
	; Compare T to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump946 ; If T < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
.jump942:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'S'
	add qword [rsp + 0], 1
	; Compare S to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump940 ; If S < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp 
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump947
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump947:
	cmp rax, [rsp + 8]
	jl .jump948
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump948:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump917:
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 16] ; Load sum
	movsd [rsp + 16], xmm0 ; Save sum
	; Increment 'R'
	add qword [rsp + 0], 1
	; Compare R to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump908 ; If R < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 104 ; Local variables
	pop rbp
	ret
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'T'
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump949
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump949:
	; Computing bound for 'S'
	sub rsp, 8
	; Moving 8 bytes from r12 - 224 to rsp 
		mov r10, [r12 - 224 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump950
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump950:
	; Computing bound for 'R'
	sub rsp, 8
	; Moving 8 bytes from r12 - 24 to rsp 
		mov r10, [r12 - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump951
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump951:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'T' to 0
	mov rax, 0
	push rax
	; Initialize 'S' to 0
	mov rax, 0
	push rax
	; Initialize 'R' to 0
	mov rax, 0
	push rax
.jump952: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'U'
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump953
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump953:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'U' to 0
	mov rax, 0
	push rax
.jump954: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const170] ; 87.34
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const171] ; 3.82
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 16] ; Load sum
	movsd [rsp + 16], xmm0 ; Save sum
	; Increment 'U'
	add qword [rsp + 0], 1
	; Compare U to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump954 ; If U < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 48] ; Load sum
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment 'T'
	add qword [rsp + 16], 1
	; Compare T to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump952 ; If T < bound, next iter
	mov qword [rsp + 16], 0 ; T = 0
	add qword [rsp + 8], 1 ; S++
	; Compare S to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump952 ; If S < bound, next iter
	mov qword [rsp + 8], 0 ; S = 0
	add qword [rsp + 0], 1 ; R++
	; Compare R to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump952 ; If R < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'R'
	sub rsp, 8
	; Moving 8 bytes from r12 - 48 to rsp 
		mov r10, [r12 - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump955
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump955:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float 
	imul rdi, [rsp + 0 + 0] ; multiply by d 
	jno .jump956
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump956:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'R' to 0
	mov rax, 0
	push rax
.jump957: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const0] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump958
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'S'
	sub rsp, 8
	; Moving 8 bytes from r12 - 40 to rsp 
		mov r10, [r12 - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump960
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump960:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'S' to 0
	mov rax, 0
	push rax
.jump961: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const172] ; 11.57
	push rax
	mov rax, [rel const173] ; 35.68
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 16] ; Load sum
	movsd [rsp + 16], xmm0 ; Save sum
	; Increment 'S'
	add qword [rsp + 0], 1
	; Compare S to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump961 ; If S < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	jmp .jump959
.jump958:
	mov rax, [rel const174] ; 18.27
	push rax
.jump959:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'R'
	add qword [rsp + 0], 1
	; Compare R to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump957 ; If R < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump962
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump962:
	cmp rax, [rsp + 8]
	jl .jump963
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump963:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	addsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	add rsp, 104 ; Local variables
	pop rbp
	ret

jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp ; end of jpl_main prelude
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'a'
	mov rax, [rel const0] ; True
	push rax
	mov rax, [rel const1] ; False
	push rax
	mov rdi, 16
	call _jpl_alloc
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'a'
	mov rax, [rel const2] ; 673
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump1:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'a' to 0
	mov rax, 0
	push rax
.jump2: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const4] ; 975
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'a'
	add qword [rsp + 0], 1
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump2 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump3
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump3:
	cmp rax, [rsp + 8]
	jl .jump4
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump4:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump5
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'c'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'a'
	mov rax, [rel const7] ; 539
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump7
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump7:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'a' to 0
	mov rax, 0
	push rax
.jump8: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'a'
	add qword [rsp + 0], 1
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump8 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump9
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump9:
	; Computing bound for 'b'
	mov rax, [rel const8] ; 648
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump10
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump10:
	; Computing bound for 'a'
	mov rax, [rel const9] ; 335
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump11
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump11:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,] 
	imul rdi, [rsp + 0 + 0] ; multiply by 335 
	jno .jump12
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump12:
	imul rdi, [rsp + 0 + 8] ; multiply by 648 
	jno .jump13
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump13:
imul rdi, [rsp + 0 + 16] ; multiply by (sum[a : 539] a) 
	jno .jump14
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump14:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'c' to 0
	mov rax, 0
	push rax
	; Initialize 'b' to 0
	mov rax, 0
	push rax
	; Initialize 'a' to 0
	mov rax, 0
	push rax
.jump15: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'e'
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump16
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump16:
	; Computing bound for 'd'
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump17
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump17:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by b 
	jno .jump18
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump18:
	imul rdi, [rsp + 0 + 8] ; multiply by c 
	jno .jump19
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump19:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'e' to 0
	mov rax, 0
	push rax
	; Initialize 'd' to 0
	mov rax, 0
	push rax
.jump20: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 112 to rsp 
		mov r10, [rbp - 112 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'e'
	add qword [rsp + 8], 1
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump20 ; If e < bound, next iter
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump20 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'c'
	add qword [rsp + 16], 1
	; Compare c to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump15 ; If c < bound, next iter
	mov qword [rsp + 16], 0 ; c = 0
	add qword [rsp + 8], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump15 ; If b < bound, next iter
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump15 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	mov rax, [rel const11] ; 479
	push rax
	mov rax, [rel const12] ; 262
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const13] ; 567
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump21
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump21:
	cmp rax, [rsp + 24]
	jl .jump22
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump22:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump23
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump23:
	cmp rax, [rsp + 32]
	jl .jump24
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump24:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump25
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump25:
	cmp rax, [rsp + 40]
	jl .jump26
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump26:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 24
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 24
	; Moving 24 bytes from rax to rsp 
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const0] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	mov rax, [rel const0] ; True
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump27
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'b'
	mov rax, [rel const14] ; 528
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump29
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump29:
	; Computing bound for 'a'
	mov rax, [rel const15] ; 499
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump30
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump30:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by 499 
	jno .jump31
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump31:
	imul rdi, [rsp + 0 + 8] ; multiply by 528 
	jno .jump32
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump32:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'b' to 0
	mov rax, 0
	push rax
	; Initialize 'a' to 0
	mov rax, 0
	push rax
.jump33: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const16] ; 888
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'b'
	add qword [rsp + 8], 1
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump33 ; If b < bound, next iter
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump33 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const17] ; 868
	push rax
	mov rax, [rel const18] ; 761
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const19] ; 294
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump34
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump34:
	cmp rax, [rsp + 16]
	jl .jump35
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump35:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump36
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump36:
	cmp rax, [rsp + 24]
	jl .jump37
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump37:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump28
.jump27:
	mov rax, [rel const0] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump38
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'b'
	mov rax, [rel const20] ; 405
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump40
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump40:
	; Computing bound for 'a'
	mov rax, [rel const21] ; 828
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump41
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump41:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'b' to 0
	mov rax, 0
	push rax
	; Initialize 'a' to 0
	mov rax, 0
	push rax
.jump42: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const22] ; 518
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'b'
	add qword [rsp + 8], 1
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump42 ; If b < bound, next iter
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump42 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	jmp .jump39
.jump38:
	mov rax, [rel const23] ; 410
	push rax
.jump39:
.jump28:
	mov rax, [rel const24] ; 87
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump43
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump43:
	cmp rax, [rsp + 16]
	jl .jump44
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump44:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump45
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump45:
	cmp rax, [rsp + 24]
	jl .jump46
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump46:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump6
.jump5:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'b'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'a'
	mov rax, [rel const25] ; 109
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump47
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump47:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'a' to 0
	mov rax, 0
	push rax
.jump48: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const26] ; 423
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'a'
	add qword [rsp + 0], 1
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump48 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump49
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump49:
	; Computing bound for 'a'
	mov rax, [rel const27] ; 830
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump50
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump50:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'b' to 0
	mov rax, 0
	push rax
	; Initialize 'a' to 0
	mov rax, 0
	push rax
.jump51: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'c'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'e'
	mov rax, [rel const28] ; 112
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump52
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump52:
	; Computing bound for 'd'
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump53
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump53:
	; Computing bound for 'c'
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump54
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump54:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'e' to 0
	mov rax, 0
	push rax
	; Initialize 'd' to 0
	mov rax, 0
	push rax
	; Initialize 'c' to 0
	mov rax, 0
	push rax
.jump55: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment 'e'
	add qword [rsp + 16], 1
	; Compare e to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump55 ; If e < bound, next iter
	mov qword [rsp + 16], 0 ; e = 0
	add qword [rsp + 8], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump55 ; If d < bound, next iter
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump55 ; If c < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump56
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump56:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
imul rdi, [rsp + 0 + 0] ; multiply by (sum[c : a, d : a, e : 112] c) 
	jno .jump57
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump57:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'c' to 0
	mov rax, 0
	push rax
.jump58: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const1] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump59
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	jmp .jump60
.jump59:
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
.jump60:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'c'
	add qword [rsp + 0], 1
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump58 ; If c < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump61
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump61:
	cmp rax, [rsp + 8]
	jl .jump62
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump62:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'b'
	add qword [rsp + 8], 1
	; Compare b to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump51 ; If b < bound, next iter
	mov qword [rsp + 8], 0 ; b = 0
	add qword [rsp + 0], 1 ; a++
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump51 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
.jump6:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump63
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump63:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
imul rdi, [rsp + 0 + 0] ; multiply by (if [false, true][(sum[a : 673] 975)] then (array[a : 335, b : 648, c : (sum[a : 539] a)] (array[d : b, e : c] d))[567, (- 262), 479][87, (if (true == (! true)) then (array[a : 499, b : 528] 888)[294, (761 + 868)] else (if true then (sum[a : 828, b : 405] 518) else 410))] else (sum[a : 830, b : (- (sum[a : 109] 423))] (array[c : (sum[c : a, d : a, e : 112] c)] (if false then c else c))[b])) 
	jno .jump64
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump64:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'a' to 0
	mov rax, 0
	push rax
.jump65: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const29] ; 95.06
	push rax
	mov rax, [rel const30] ; 53.79
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump66
	mov rax, [rel const31] ; 27.63
	push rax
	mov rax, [rel const32] ; 12.37
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpltsd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	jmp .jump67
.jump66:
	mov rax, [rel const1] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump68
	mov rax, [rel const1] ; False
	push rax
	jmp .jump69
.jump68:
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
.jump69:
.jump67:
	pop rax
	cmp rax, 0
	je .jump70
	mov rax, [rel const1] ; False
	push rax
	jmp .jump71
.jump70:
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump72
	lea rdi, [rel const33] ; 'mod by zero'
	call _fail_assertion
.jump72:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const34] ; 815
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
.jump71:
	pop rax
	cmp rax, 0
	je .jump73
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	jmp .jump74
.jump73:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'd'
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump75
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump75:
	; Computing bound for 'c'
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump76
	mov rax, [rel const35] ; 453
	push rax
	jmp .jump77
.jump76:
	mov rax, [rel const36] ; 259
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
.jump77:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump78
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump78:
	; Computing bound for 'b'
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'd'
	mov rax, [rel const37] ; 548
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump79
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump79:
	; Computing bound for 'c'
	mov rax, [rel const38] ; 248
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump80
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump80:
	; Computing bound for 'b'
	mov rax, [rel const39] ; 464
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump81
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump81:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by 464 
	jno .jump82
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump82:
	imul rdi, [rsp + 0 + 8] ; multiply by 248 
	jno .jump83
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump83:
	imul rdi, [rsp + 0 + 16] ; multiply by 548 
	jno .jump84
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump84:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'd' to 0
	mov rax, 0
	push rax
	; Initialize 'c' to 0
	mov rax, 0
	push rax
	; Initialize 'b' to 0
	mov rax, 0
	push rax
.jump85: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp 
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'd'
	add qword [rsp + 16], 1
	; Compare d to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump85 ; If d < bound, next iter
	mov qword [rsp + 16], 0 ; d = 0
	add qword [rsp + 8], 1 ; c++
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump85 ; If c < bound, next iter
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump85 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	mov rax, [rel const40] ; 568
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'd'
	mov rax, [rel const41] ; 446
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump86
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump86:
	; Computing bound for 'c'
	mov rax, [rel const42] ; 984
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump87
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump87:
	; Computing bound for 'b'
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump88
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump88:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'd' to 0
	mov rax, 0
	push rax
	; Initialize 'c' to 0
	mov rax, 0
	push rax
	; Initialize 'b' to 0
	mov rax, 0
	push rax
.jump89: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 152 to rsp 
		mov r10, [rbp - 152 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment 'd'
	add qword [rsp + 16], 1
	; Compare d to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump89 ; If d < bound, next iter
	mov qword [rsp + 16], 0 ; d = 0
	add qword [rsp + 8], 1 ; c++
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump89 ; If c < bound, next iter
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump89 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump90
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump90:
	cmp rax, [rsp + 24]
	jl .jump91
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump91:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump92
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump92:
	cmp rax, [rsp + 32]
	jl .jump93
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump93:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump94
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump94:
	cmp rax, [rsp + 40]
	jl .jump95
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump95:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump96
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump96:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
imul rdi, [rsp + 0 + 0] ; multiply by (array[b : 464, c : 248, d : 548] d)[(sum[b : a, c : 984, d : 446] c), a, 568] 
	jno .jump97
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump97:
	imul rdi, [rsp + 0 + 8] ; multiply by (if (a <= a) then 453 else (a + 259)) 
	jno .jump98
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump98:
	imul rdi, [rsp + 0 + 16] ; multiply by a 
	jno .jump99
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump99:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'd' to 0
	mov rax, 0
	push rax
	; Initialize 'c' to 0
	mov rax, 0
	push rax
	; Initialize 'b' to 0
	mov rax, 0
	push rax
.jump100: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'g'
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump101
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump101:
	; Computing bound for 'f'
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump102
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump102:
	; Computing bound for 'e'
	mov rax, [rel const43] ; 39
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump103
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump103:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by 39 
	jno .jump104
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump104:
	imul rdi, [rsp + 0 + 8] ; multiply by b 
	jno .jump105
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump105:
	imul rdi, [rsp + 0 + 16] ; multiply by b 
	jno .jump106
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump106:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'g' to 0
	mov rax, 0
	push rax
	; Initialize 'f' to 0
	mov rax, 0
	push rax
	; Initialize 'e' to 0
	mov rax, 0
	push rax
.jump107: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'g'
	add qword [rsp + 16], 1
	; Compare g to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump107 ; If g < bound, next iter
	mov qword [rsp + 16], 0 ; g = 0
	add qword [rsp + 8], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump107 ; If f < bound, next iter
	mov qword [rsp + 8], 0 ; f = 0
	add qword [rsp + 0], 1 ; e++
	; Compare e to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump107 ; If e < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'g'
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump108
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump108:
	; Computing bound for 'f'
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump109
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump109:
	; Computing bound for 'e'
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump110
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump110:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'g' to 0
	mov rax, 0
	push rax
	; Initialize 'f' to 0
	mov rax, 0
	push rax
	; Initialize 'e' to 0
	mov rax, 0
	push rax
.jump111: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment 'g'
	add qword [rsp + 16], 1
	; Compare g to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump111 ; If g < bound, next iter
	mov qword [rsp + 16], 0 ; g = 0
	add qword [rsp + 8], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump111 ; If f < bound, next iter
	mov qword [rsp + 8], 0 ; f = 0
	add qword [rsp + 0], 1 ; e++
	; Compare e to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump111 ; If e < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump112
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump112:
	cmp rax, [rsp + 24]
	jl .jump113
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump113:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump114
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump114:
	cmp rax, [rsp + 32]
	jl .jump115
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump115:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump116
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump116:
	cmp rax, [rsp + 40]
	jl .jump117
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump117:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'd'
	add qword [rsp + 16], 1
	; Compare d to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump100 ; If d < bound, next iter
	mov qword [rsp + 16], 0 ; d = 0
	add qword [rsp + 8], 1 ; c++
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump100 ; If c < bound, next iter
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump100 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'c'
	mov rax, [rel const44] ; 697
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump118
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump118:
	; Computing bound for 'b'
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump119
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump119:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by a 
	jno .jump120
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump120:
	imul rdi, [rsp + 0 + 8] ; multiply by 697 
	jno .jump121
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump121:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'c' to 0
	mov rax, 0
	push rax
	; Initialize 'b' to 0
	mov rax, 0
	push rax
.jump122: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'c'
	add qword [rsp + 8], 1
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump122 ; If c < bound, next iter
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump122 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 32 to rsp 
		mov r10, [rbp - 32 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rel const45] ; 485
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const46] ; 605
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump123
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump123:
	cmp rax, [rsp + 16]
	jl .jump124
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump124:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump125
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump125:
	cmp rax, [rsp + 24]
	jl .jump126
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump126:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump127
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump127:
	cmp rax, [rsp + 24]
	jl .jump128
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump128:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump129
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump129:
	cmp rax, [rsp + 32]
	jl .jump130
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump130:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump131
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump131:
	cmp rax, [rsp + 40]
	jl .jump132
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump132:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump74:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'a'
	add qword [rsp + 0], 1
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump65 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'e'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'd'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump133
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump133:
	; Computing bound for 'c'
	mov rax, [rel const0] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump134
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	jmp .jump135
.jump134:
	mov rax, [rel const47] ; 274
	push rax
.jump135:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump136
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump136:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'd' to 0
	mov rax, 0
	push rax
	; Initialize 'c' to 0
	mov rax, 0
	push rax
.jump137: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'd'
	add qword [rsp + 8], 1
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump137 ; If d < bound, next iter
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump137 ; If c < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump138
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump138:
	; Computing bound for 'd'
	mov rax, [rel const34] ; 815
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump139
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump139:
	; Computing bound for 'c'
	sub rsp, 16
	; Moving 16 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump140
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump140:
	cmp rax, [rsp + 8]
	jl .jump141
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump141:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump142
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump142:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool 
	imul rdi, [rsp + 0 + 0] ; multiply by a[b] 
	jno .jump143
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump143:
	imul rdi, [rsp + 0 + 8] ; multiply by (- 815) 
	jno .jump144
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump144:
imul rdi, [rsp + 0 + 16] ; multiply by (sum[c : (if true then b else 274), d : b] d) 
	jno .jump145
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump145:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'e' to 0
	mov rax, 0
	push rax
	; Initialize 'd' to 0
	mov rax, 0
	push rax
	; Initialize 'c' to 0
	mov rax, 0
	push rax
.jump146: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const1] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'e'
	add qword [rsp + 16], 1
	; Compare e to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump146 ; If e < bound, next iter
	mov qword [rsp + 16], 0 ; e = 0
	add qword [rsp + 8], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump146 ; If d < bound, next iter
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump146 ; If c < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	mov rax, [rel const48] ; 786
	push rax
	mov rax, [rel const1] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump147
	mov rax, [rel const49] ; 529
	push rax
	jmp .jump148
.jump147:
	mov rax, [rel const50] ; 877
	push rax
.jump148:
	mov rax, [rel const51] ; 768
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump149
	lea rdi, [rel const52] ; 'divide by zero'
	call _fail_assertion
.jump149:
	cqo
	idiv r10
	push rax
	mov rax, [rel const53] ; 249
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump150
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump150:
	cmp rax, [rsp + 24]
	jl .jump151
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump151:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump152
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump152:
	cmp rax, [rsp + 32]
	jl .jump153
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump153:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump154
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump154:
	cmp rax, [rsp + 40]
	jl .jump155
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump155:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump156
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'e'
	mov rax, [rel const54] ; 358
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump158
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump158:
	; Computing bound for 'd'
	mov rax, [rel const55] ; 909
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'e'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump159
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump159:
	; Computing bound for 'd'
	mov rax, [rel const56] ; 138
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump160
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump160:
	; Computing bound for 'c'
	mov rax, [rel const57] ; 961
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump161
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump161:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'e' to 0
	mov rax, 0
	push rax
	; Initialize 'd' to 0
	mov rax, 0
	push rax
	; Initialize 'c' to 0
	mov rax, 0
	push rax
.jump162: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment 'e'
	add qword [rsp + 16], 1
	; Compare e to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump162 ; If e < bound, next iter
	mov qword [rsp + 16], 0 ; e = 0
	add qword [rsp + 8], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump162 ; If d < bound, next iter
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump162 ; If c < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	pop rax
	pop r10
	cmp r10, 0
	jne .jump163
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const33] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump163:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump164
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump164:
	; Computing bound for 'c'
	mov rax, [rel const1] ; False
	push rax
	mov rax, [rel const0] ; True
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump165
	mov rax, [rel const58] ; 925
	push rax
	jmp .jump166
.jump165:
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
.jump166:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump167
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump167:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof float[,][,,] 
	imul rdi, [rsp + 0 + 0] ; multiply by (if (true != false) then 925 else (b - b)) 
	jno .jump168
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump168:
imul rdi, [rsp + 0 + 8] ; multiply by ((sum[c : 961, d : 138, e : b] c) % 909) 
	jno .jump169
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump169:
	imul rdi, [rsp + 0 + 16] ; multiply by 358 
	jno .jump170
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump170:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'e' to 0
	mov rax, 0
	push rax
	; Initialize 'd' to 0
	mov rax, 0
	push rax
	; Initialize 'c' to 0
	mov rax, 0
	push rax
.jump171: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'h'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump172
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump172:
	; Computing bound for 'g'
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump173
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump173:
	; Computing bound for 'f'
	mov rax, [rel const0] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump174
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	jmp .jump175
.jump174:
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
.jump175:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump176
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump176:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof float[,] 
	imul rdi, [rsp + 0 + 0] ; multiply by (if true then d else e) 
	jno .jump177
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump177:
	imul rdi, [rsp + 0 + 8] ; multiply by e 
	jno .jump178
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump178:
	imul rdi, [rsp + 0 + 16] ; multiply by b 
	jno .jump179
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump179:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'h' to 0
	mov rax, 0
	push rax
	; Initialize 'g' to 0
	mov rax, 0
	push rax
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump180: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'j'
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump181
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump181:
	; Computing bound for 'i'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump182
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump182:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float 
	imul rdi, [rsp + 0 + 0] ; multiply by b 
	jno .jump183
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump183:
	imul rdi, [rsp + 0 + 8] ; multiply by e 
	jno .jump184
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump184:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'j' to 0
	mov rax, 0
	push rax
	; Initialize 'i' to 0
	mov rax, 0
	push rax
.jump185: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const59] ; 35.33
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'j'
	add qword [rsp + 8], 1
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump185 ; If j < bound, next iter
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump185 ; If i < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'h'
	add qword [rsp + 16], 1
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump180 ; If h < bound, next iter
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump180 ; If g < bound, next iter
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump180 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	imul rax, 32
	add rax, [rsp + 80]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax 
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment 'e'
	add qword [rsp + 16], 1
	; Compare e to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump171 ; If e < bound, next iter
	mov qword [rsp + 16], 0 ; e = 0
	add qword [rsp + 8], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump171 ; If d < bound, next iter
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump171 ; If c < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	mov rax, [rel const1] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump186
	mov rax, [rel const60] ; 221
	push rax
	mov rax, [rel const61] ; 678
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	jmp .jump187
.jump186:
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
.jump187:
	mov rax, [rel const0] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump188
	mov rax, [rel const62] ; 814
	push rax
	jmp .jump189
.jump188:
	mov rax, [rel const0] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump190
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	jmp .jump191
.jump190:
	mov rax, [rel const63] ; 313
	push rax
.jump191:
.jump189:
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const19] ; 294
	push rax
	pop rax
	neg rax
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'd'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump192
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump192:
	; Computing bound for 'c'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump193
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump193:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by b 
	jno .jump194
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump194:
	imul rdi, [rsp + 0 + 8] ; multiply by b 
	jno .jump195
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump195:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'd' to 0
	mov rax, 0
	push rax
	; Initialize 'c' to 0
	mov rax, 0
	push rax
.jump196: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'd'
	add qword [rsp + 8], 1
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump196 ; If d < bound, next iter
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump196 ; If c < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const64] ; 336
	push rax
	mov rax, [rel const65] ; 584
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump197
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump197:
	cmp rax, [rsp + 16]
	jl .jump198
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump198:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump199
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump199:
	cmp rax, [rsp + 24]
	jl .jump200
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump200:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rel const66] ; 576
	push rax
	mov rax, [rel const67] ; 105
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump201
	mov rax, [rel const68] ; 707
	push rax
	pop rax
	neg rax
	push rax
	jmp .jump202
.jump201:
	mov rax, [rel const69] ; 970
	push rax
	mov rax, [rel const70] ; 885
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump203
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const52] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump203:
	cqo
	idiv r10
	push rax
.jump202:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump204
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump204:
	cmp rax, [rsp + 24]
	jl .jump205
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump205:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump206
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump206:
	cmp rax, [rsp + 32]
	jl .jump207
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump207:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump208
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump208:
	cmp rax, [rsp + 40]
	jl .jump209
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump209:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 32
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 32
	; Moving 32 bytes from rax to rsp 
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump157
.jump156:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'd'
	mov rax, [rel const71] ; 334
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump210
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump210:
	; Computing bound for 'c'
	mov rax, [rel const72] ; 459
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump211
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump211:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'd' to 0
	mov rax, 0
	push rax
	; Initialize 'c' to 0
	mov rax, 0
	push rax
.jump212: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const0] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump213
	mov rax, [rel const73] ; 67.11
	push rax
	jmp .jump214
.jump213:
	mov rax, [rel const74] ; 24.12
	push rax
.jump214:
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 32] ; Load sum
	movsd [rsp + 32], xmm0 ; Save sum
	; Increment 'd'
	add qword [rsp + 8], 1
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump212 ; If d < bound, next iter
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump212 ; If c < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rel const75] ; 6.54
	push rax
	mov rax, [rel const76] ; 96.5
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const77] ; 66.49
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump215
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'e'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump217
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump217:
	; Computing bound for 'd'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump218
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump218:
	; Computing bound for 'c'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump219
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump219:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof float[,] 
	imul rdi, [rsp + 0 + 0] ; multiply by b 
	jno .jump220
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump220:
	imul rdi, [rsp + 0 + 8] ; multiply by b 
	jno .jump221
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump221:
	imul rdi, [rsp + 0 + 16] ; multiply by (- b) 
	jno .jump222
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump222:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'e' to 0
	mov rax, 0
	push rax
	; Initialize 'd' to 0
	mov rax, 0
	push rax
	; Initialize 'c' to 0
	mov rax, 0
	push rax
.jump223: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'g'
	mov rax, [rel const21] ; 828
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump224
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump224:
	; Computing bound for 'f'
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump225
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump225:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float 
	imul rdi, [rsp + 0 + 0] ; multiply by c 
	jno .jump226
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump226:
	imul rdi, [rsp + 0 + 8] ; multiply by (- 828) 
	jno .jump227
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump227:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'g' to 0
	mov rax, 0
	push rax
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump228: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const78] ; 86.35
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'g'
	add qword [rsp + 8], 1
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump228 ; If g < bound, next iter
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump228 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'e'
	add qword [rsp + 16], 1
	; Compare e to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump223 ; If e < bound, next iter
	mov qword [rsp + 16], 0 ; e = 0
	add qword [rsp + 8], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump223 ; If d < bound, next iter
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump223 ; If c < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump216
.jump215:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'e'
	mov rax, [rel const79] ; 258
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump229
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump229:
	; Computing bound for 'd'
	mov rax, [rel const0] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump230
	mov rax, [rel const80] ; 60
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump232
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const33] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump232:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	jmp .jump231
.jump230:
	mov rax, [rel const51] ; 768
	push rax
.jump231:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump233
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump233:
	; Computing bound for 'c'
	mov rax, [rel const81] ; 173
	push rax
	mov rdi, 8
	sub rsp, 8 ; Add alignment
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	mov rax, [rel const82] ; 743
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump234
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump234:
	cmp rax, [rsp + 8]
	jl .jump235
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump235:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump236
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump236:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof float[,] 
	imul rdi, [rsp + 0 + 0] ; multiply by [173][(- 743)] 
	jno .jump237
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump237:
	imul rdi, [rsp + 0 + 8] ; multiply by (if true then (b % 60) else 768) 
	jno .jump238
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump238:
	imul rdi, [rsp + 0 + 16] ; multiply by (- (- 258)) 
	jno .jump239
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump239:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'e' to 0
	mov rax, 0
	push rax
	; Initialize 'd' to 0
	mov rax, 0
	push rax
	; Initialize 'c' to 0
	mov rax, 0
	push rax
.jump240: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'g'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'f'
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump241
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump241:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump242: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'f'
	add qword [rsp + 0], 1
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump242 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump243
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump243:
	; Computing bound for 'f'
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump244
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump244:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof float 
	imul rdi, [rsp + 0 + 0] ; multiply by c 
	jno .jump245
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump245:
imul rdi, [rsp + 0 + 8] ; multiply by (sum[f : c] d) 
	jno .jump246
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump246:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'g' to 0
	mov rax, 0
	push rax
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump247: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const83] ; 48.44
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'g'
	add qword [rsp + 8], 1
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump247 ; If g < bound, next iter
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump247 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'e'
	add qword [rsp + 16], 1
	; Compare e to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump240 ; If e < bound, next iter
	mov qword [rsp + 16], 0 ; e = 0
	add qword [rsp + 8], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump240 ; If d < bound, next iter
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump240 ; If c < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump216:
.jump157:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'c'
	mov rax, [rel const84] ; 13
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump248
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump248:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'c' to 0
	mov rax, 0
	push rax
.jump249: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const85] ; 238
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'c'
	add qword [rsp + 0], 1
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump249 ; If c < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rel const86] ; 535
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump250
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const52] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump250:
	cqo
	idiv r10
	push rax
	mov rax, [rel const87] ; 480
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump251
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const52] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump251:
	cqo
	idiv r10
	push rax
	mov rax, [rel const88] ; 561
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'd'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump252
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump252:
	; Computing bound for 'c'
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'c'
	mov rax, [rel const89] ; 132
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump253
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump253:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof int[,] 
	imul rdi, [rsp + 0 + 0] ; multiply by 132 
	jno .jump254
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump254:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'c' to 0
	mov rax, 0
	push rax
.jump255: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'e'
	mov rax, [rel const90] ; 616
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump256
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump256:
	; Computing bound for 'd'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump257
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump257:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by b 
	jno .jump258
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump258:
	imul rdi, [rsp + 0 + 8] ; multiply by 616 
	jno .jump259
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump259:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'e' to 0
	mov rax, 0
	push rax
	; Initialize 'd' to 0
	mov rax, 0
	push rax
.jump260: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'e'
	add qword [rsp + 8], 1
	; Compare e to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump260 ; If e < bound, next iter
	mov qword [rsp + 8], 0 ; e = 0
	add qword [rsp + 0], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump260 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 24
	add rax, [rsp + 40]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'c'
	add qword [rsp + 0], 1
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump255 ; If c < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	mov rax, [rel const0] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump261
	mov rax, [rel const91] ; 321
	push rax
	jmp .jump262
.jump261:
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const92] ; 536
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
.jump262:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump263
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump263:
	cmp rax, [rsp + 8]
	jl .jump264
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump264:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 24
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 24
	; Moving 24 bytes from rax to rsp 
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rel const0] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump265
	sub rsp, 16
	; Moving 16 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump267
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump267:
	cmp rax, [rsp + 8]
	jl .jump268
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump268:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump266
.jump265:
	mov rax, [rel const93] ; 276
	push rax
.jump266:
	mov rax, [rel const94] ; 85
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rel const1] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump269
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	jmp .jump270
.jump269:
	mov rax, [rel const95] ; 816
	push rax
.jump270:
	mov rax, [rel const96] ; 906
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump271
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump271:
	cmp rax, [rsp + 16]
	jl .jump272
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump272:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump273
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump273:
	cmp rax, [rsp + 24]
	jl .jump274
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump274:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump275
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump275:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'd' to 0
	mov rax, 0
	push rax
	; Initialize 'c' to 0
	mov rax, 0
	push rax
.jump276: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const97] ; 644
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'd'
	add qword [rsp + 8], 1
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump276 ; If d < bound, next iter
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump276 ; If c < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'e'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump277
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump277:
	; Computing bound for 'd'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'd'
	mov rax, [rel const98] ; 750
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump278
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump278:
	; Computing bound for 'c'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump279
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump279:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'd' to 0
	mov rax, 0
	push rax
	; Initialize 'c' to 0
	mov rax, 0
	push rax
.jump280: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const99] ; 420
	push rax
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'd'
	add qword [rsp + 8], 1
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump280 ; If d < bound, next iter
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump280 ; If c < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rel const100] ; 86
	push rax
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump281
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const33] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump281:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump282
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump282:
	; Computing bound for 'c'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump283
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump283:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'e' to 0
	mov rax, 0
	push rax
	; Initialize 'd' to 0
	mov rax, 0
	push rax
	; Initialize 'c' to 0
	mov rax, 0
	push rax
.jump284: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment 'e'
	add qword [rsp + 16], 1
	; Compare e to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump284 ; If e < bound, next iter
	mov qword [rsp + 16], 0 ; e = 0
	add qword [rsp + 8], 1 ; d++
	; Compare d to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump284 ; If d < bound, next iter
	mov qword [rsp + 8], 0 ; d = 0
	add qword [rsp + 0], 1 ; c++
	; Compare c to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump284 ; If c < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump285
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump285:
	cmp rax, [rsp + 24]
	jl .jump286
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump286:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump287
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump287:
	cmp rax, [rsp + 32]
	jl .jump288
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump288:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump289
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump289:
	cmp rax, [rsp + 40]
	jl .jump290
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump290:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 24
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 24
	; Moving 24 bytes from rax to rsp 
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'f'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'f'
	mov rax, [rel const1] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump291
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	jmp .jump292
.jump291:
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
.jump292:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump293
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump293:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump294: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'f'
	add qword [rsp + 0], 1
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump294 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump295
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump295:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump296: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'h'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump297
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump297:
	; Computing bound for 'g'
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump298
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump298:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'h' to 0
	mov rax, 0
	push rax
	; Initialize 'g' to 0
	mov rax, 0
	push rax
.jump299: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'j'
	mov rax, [rel const0] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump300
	mov rax, [rel const101] ; 979
	push rax
	jmp .jump301
.jump300:
	mov rax, [rel const102] ; 135
	push rax
.jump301:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump302
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump302:
	; Computing bound for 'i'
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump303
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump303:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'j' to 0
	mov rax, 0
	push rax
	; Initialize 'i' to 0
	mov rax, 0
	push rax
.jump304: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'j'
	add qword [rsp + 8], 1
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump304 ; If j < bound, next iter
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump304 ; If i < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'h'
	add qword [rsp + 8], 1
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump299 ; If h < bound, next iter
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump299 ; If g < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'f'
	add qword [rsp + 0], 1
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump296 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump305
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump305:
	cmp rax, [rsp + 8]
	jl .jump306
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump306:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump307
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'h'
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'f'
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump309
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump309:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof int[,,] 
	imul rdi, [rsp + 0 + 0] ; multiply by d 
	jno .jump310
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump310:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump311: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'i'
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump312
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump312:
	; Computing bound for 'h'
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump313
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump313:
	; Computing bound for 'g'
	mov rax, [rel const103] ; 656
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump314
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump314:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by 656 
	jno .jump315
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump315:
	imul rdi, [rsp + 0 + 8] ; multiply by f 
	jno .jump316
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump316:
	imul rdi, [rsp + 0 + 16] ; multiply by e 
	jno .jump317
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump317:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'i' to 0
	mov rax, 0
	push rax
	; Initialize 'h' to 0
	mov rax, 0
	push rax
	; Initialize 'g' to 0
	mov rax, 0
	push rax
.jump318: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'i'
	add qword [rsp + 16], 1
	; Compare i to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump318 ; If i < bound, next iter
	mov qword [rsp + 16], 0 ; i = 0
	add qword [rsp + 8], 1 ; h++
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump318 ; If h < bound, next iter
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump318 ; If g < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 32
	add rax, [rsp + 48]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax 
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment 'f'
	add qword [rsp + 0], 1
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump311 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump319
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump319:
	cmp rax, [rsp + 8]
	jl .jump320
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump320:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 32
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 32
	; Moving 32 bytes from rax to rsp 
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	sub rax, r10
	push rax
	mov rax, [rel const104] ; 310
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump321
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const33] ; 'mod by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump321:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const1] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump322
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	jmp .jump323
.jump322:
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
.jump323:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump324
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump324:
	cmp rax, [rsp + 24]
	jl .jump325
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump325:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump326
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump326:
	cmp rax, [rsp + 32]
	jl .jump327
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump327:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump328
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump328:
	cmp rax, [rsp + 40]
	jl .jump329
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump329:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump330
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump330:
	; Computing bound for 'g'
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump331
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump331:
	; Computing bound for 'f'
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'g'
	mov rax, [rel const105] ; 759
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump332
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump332:
	; Computing bound for 'f'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'h'
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump333
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump333:
	; Computing bound for 'g'
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump334
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump334:
	; Computing bound for 'f'
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump335
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump335:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'h' to 0
	mov rax, 0
	push rax
	; Initialize 'g' to 0
	mov rax, 0
	push rax
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump336: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 128 to rsp 
		mov r10, [rbp - 128 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump337
	lea rdi, [rel const52] ; 'divide by zero'
	call _fail_assertion
.jump337:
	cqo
	idiv r10
	push rax
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment 'h'
	add qword [rsp + 16], 1
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump336 ; If h < bound, next iter
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump336 ; If g < bound, next iter
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump336 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump338
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump338:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
imul rdi, [rsp + 0 + 0] ; multiply by (sum[f : d, g : (- e), h : (- d)] (d / h)) 
	jno .jump339
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump339:
	imul rdi, [rsp + 0 + 8] ; multiply by 759 
	jno .jump340
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump340:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'g' to 0
	mov rax, 0
	push rax
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump341: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 112 to rsp 
		mov r10, [rbp - 112 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'g'
	add qword [rsp + 8], 1
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump341 ; If g < bound, next iter
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump341 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'f'
	mov rax, [rel const0] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump342
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	jmp .jump343
.jump342:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'g'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump344
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump344:
	; Computing bound for 'f'
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump345
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump345:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'g' to 0
	mov rax, 0
	push rax
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump346: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'g'
	add qword [rsp + 8], 1
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump346 ; If g < bound, next iter
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump346 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
.jump343:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump347
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump347:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump348: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'f'
	add qword [rsp + 0], 1
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump348 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rel const106] ; 613
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump349
	mov rax, [rel const1] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump351
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	jmp .jump352
.jump351:
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
.jump352:
	pop rax
	neg rax
	push rax
	jmp .jump350
.jump349:
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
.jump350:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump353
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump353:
	cmp rax, [rsp + 16]
	jl .jump354
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump354:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump355
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump355:
	cmp rax, [rsp + 24]
	jl .jump356
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump356:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump357
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump357:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
imul rdi, [rsp + 0 + 0] ; multiply by (array[f : (sum[f : d, g : (- e), h : (- d)] (d / h)), g : 759] ((e + f) + g))[(if (! (d == 613)) then (- (if false then b else b)) else d), (sum[f : (if (! true) then e else (sum[f : e, g : b] d))] b)] 
	jno .jump358
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump358:
	imul rdi, [rsp + 0 + 8] ; multiply by e 
	jno .jump359
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump359:
imul rdi, [rsp + 0 + 16] ; multiply by (array[f : d] (array[g : 656, h : f, i : e] e))[d][(if false then b else b), e, (310 % (d - d))] 
	jno .jump360
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump360:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'h' to 0
	mov rax, 0
	push rax
	; Initialize 'g' to 0
	mov rax, 0
	push rax
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump361: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const0] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump362
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	jmp .jump363
.jump362:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'j'
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump364
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump364:
	; Computing bound for 'i'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump365
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump365:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by b 
	jno .jump366
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump366:
	imul rdi, [rsp + 0 + 8] ; multiply by f 
	jno .jump367
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump367:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'j' to 0
	mov rax, 0
	push rax
	; Initialize 'i' to 0
	mov rax, 0
	push rax
.jump368: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'j'
	add qword [rsp + 8], 1
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump368 ; If j < bound, next iter
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump368 ; If i < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp 
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump369
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump369:
	cmp rax, [rsp + 16]
	jl .jump370
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump370:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump371
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump371:
	cmp rax, [rsp + 24]
	jl .jump372
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump372:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
.jump363:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'h'
	add qword [rsp + 16], 1
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump361 ; If h < bound, next iter
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump361 ; If g < bound, next iter
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump361 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump308
.jump307:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'h'
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump373
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump373:
	; Computing bound for 'g'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump374
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump374:
	; Computing bound for 'f'
	mov rax, [rel const107] ; 319
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump375
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump375:
	; Computing total size of heap memory to allocate
	mov rdi, 32 ; sizeof int[,,] 
	imul rdi, [rsp + 0 + 0] ; multiply by 319 
	jno .jump376
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump376:
	imul rdi, [rsp + 0 + 8] ; multiply by b 
	jno .jump377
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump377:
	imul rdi, [rsp + 0 + 16] ; multiply by (- d) 
	jno .jump378
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump378:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'h' to 0
	mov rax, 0
	push rax
	; Initialize 'g' to 0
	mov rax, 0
	push rax
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump379: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump380
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'k'
	sub rsp, 16
	; Moving 16 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump382
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump382:
	cmp rax, [rsp + 8]
	jl .jump383
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump383:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump384
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump384:
	; Computing bound for 'j'
	sub rsp, 8
	; Moving 8 bytes from rbp - 88 to rsp 
		mov r10, [rbp - 88 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump385
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump385:
	; Computing bound for 'i'
	mov rax, [rel const108] ; 637
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump386
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump386:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by 637 
	jno .jump387
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump387:
	imul rdi, [rsp + 0 + 8] ; multiply by h 
	jno .jump388
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump388:
	imul rdi, [rsp + 0 + 16] ; multiply by a[f] 
	jno .jump389
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump389:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'k' to 0
	mov rax, 0
	push rax
	; Initialize 'j' to 0
	mov rax, 0
	push rax
	; Initialize 'i' to 0
	mov rax, 0
	push rax
.jump390: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 160 to rsp 
		mov r10, [rbp - 160 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'k'
	add qword [rsp + 16], 1
	; Compare k to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump390 ; If k < bound, next iter
	mov qword [rsp + 16], 0 ; k = 0
	add qword [rsp + 8], 1 ; j++
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump390 ; If j < bound, next iter
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump390 ; If i < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump381
.jump380:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'k'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump391
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump391:
	; Computing bound for 'j'
	sub rsp, 8
	; Moving 8 bytes from rbp - 96 to rsp 
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump392
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump392:
	; Computing bound for 'i'
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump393
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump393:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by (- f) 
	jno .jump394
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump394:
	imul rdi, [rsp + 0 + 8] ; multiply by g 
	jno .jump395
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump395:
	imul rdi, [rsp + 0 + 16] ; multiply by b 
	jno .jump396
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump396:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'k' to 0
	mov rax, 0
	push rax
	; Initialize 'j' to 0
	mov rax, 0
	push rax
	; Initialize 'i' to 0
	mov rax, 0
	push rax
.jump397: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'k'
	add qword [rsp + 16], 1
	; Compare k to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump397 ; If k < bound, next iter
	mov qword [rsp + 16], 0 ; k = 0
	add qword [rsp + 8], 1 ; j++
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump397 ; If j < bound, next iter
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump397 ; If i < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump381:
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, [rsp + 72] ; No overflow if indices in bounds
	add rax, [rsp + 48]
	imul rax, 32
	add rax, [rsp + 80]
	; Move body (32 bytes) to index
	; Moving 32 bytes from rsp to rax 
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 32
	; Increment 'h'
	add qword [rsp + 16], 1
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump379 ; If h < bound, next iter
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump379 ; If g < bound, next iter
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump379 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'f'
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rel const109] ; 152
	push rax
	mov rdi, 8
	sub rsp, 8 ; Add alignment
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	mov rax, [rel const110] ; 16
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump398
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump398:
	cmp rax, [rsp + 8]
	jl .jump399
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump399:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump400
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const52] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump400:
	cqo
	idiv r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump401
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump401:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump402: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'i'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump403
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump403:
	; Computing bound for 'h'
	mov rax, [rel const111] ; 653
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump404
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump404:
	; Computing bound for 'g'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'h'
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const112] ; 589
	push rax
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump405
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump405:
	; Computing bound for 'g'
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump406
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump406:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'h' to 0
	mov rax, 0
	push rax
	; Initialize 'g' to 0
	mov rax, 0
	push rax
.jump407: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'h'
	add qword [rsp + 8], 1
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump407 ; If h < bound, next iter
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump407 ; If g < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump408
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump408:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'i' to 0
	mov rax, 0
	push rax
	; Initialize 'h' to 0
	mov rax, 0
	push rax
	; Initialize 'g' to 0
	mov rax, 0
	push rax
.jump409: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'l'
	sub rsp, 8
	; Moving 8 bytes from rbp - 160 to rsp 
		mov r10, [rbp - 160 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump410
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump410:
	; Computing bound for 'k'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump411
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump411:
	; Computing bound for 'j'
	sub rsp, 8
	; Moving 8 bytes from rbp - 152 to rsp 
		mov r10, [rbp - 152 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump412
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump412:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'l' to 0
	mov rax, 0
	push rax
	; Initialize 'k' to 0
	mov rax, 0
	push rax
	; Initialize 'j' to 0
	mov rax, 0
	push rax
.jump413: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const66] ; 576
	push rax
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment 'l'
	add qword [rsp + 16], 1
	; Compare l to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump413 ; If l < bound, next iter
	mov qword [rsp + 16], 0 ; l = 0
	add qword [rsp + 8], 1 ; k++
	; Compare k to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump413 ; If k < bound, next iter
	mov qword [rsp + 8], 0 ; k = 0
	add qword [rsp + 0], 1 ; j++
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump413 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment 'i'
	add qword [rsp + 16], 1
	; Compare i to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump409 ; If i < bound, next iter
	mov qword [rsp + 16], 0 ; i = 0
	add qword [rsp + 8], 1 ; h++
	; Compare h to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump409 ; If h < bound, next iter
	mov qword [rsp + 8], 0 ; h = 0
	add qword [rsp + 0], 1 ; g++
	; Compare g to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump409 ; If g < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'f'
	add qword [rsp + 0], 1
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump402 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'f'
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump414
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump414:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by e 
	jno .jump415
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump415:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump416: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'f'
	add qword [rsp + 0], 1
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump416 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump417
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump417:
	cmp rax, [rsp + 8]
	jl .jump418
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump418:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'f'
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump419
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump419:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool 
	imul rdi, [rsp + 0 + 0] ; multiply by e 
	jno .jump420
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump420:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump421: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const0] ; True
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'f'
	add qword [rsp + 0], 1
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump421 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	mov rax, [rel const113] ; 622
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump422
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump422:
	cmp rax, [rsp + 8]
	jl .jump423
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump423:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump424
	mov rax, [rel const1] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump426
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'h'
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump428
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump428:
	; Computing bound for 'g'
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump429
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump429:
	; Computing bound for 'f'
	mov rax, [rel const114] ; 180
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump430
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump430:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by 180 
	jno .jump431
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump431:
	imul rdi, [rsp + 0 + 8] ; multiply by d 
	jno .jump432
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump432:
	imul rdi, [rsp + 0 + 16] ; multiply by d 
	jno .jump433
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump433:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'h' to 0
	mov rax, 0
	push rax
	; Initialize 'g' to 0
	mov rax, 0
	push rax
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump434: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 136 to rsp 
		mov r10, [rbp - 136 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'h'
	add qword [rsp + 16], 1
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump434 ; If h < bound, next iter
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump434 ; If g < bound, next iter
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump434 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump427
.jump426:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'h'
	mov rax, [rel const115] ; 818
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump435
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump435:
	; Computing bound for 'g'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump436
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump436:
	; Computing bound for 'f'
	mov rax, [rel const116] ; 641
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump437
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump437:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by 641 
	jno .jump438
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump438:
	imul rdi, [rsp + 0 + 8] ; multiply by b 
	jno .jump439
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump439:
	imul rdi, [rsp + 0 + 16] ; multiply by 818 
	jno .jump440
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump440:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'h' to 0
	mov rax, 0
	push rax
	; Initialize 'g' to 0
	mov rax, 0
	push rax
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump441: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 144 to rsp 
		mov r10, [rbp - 144 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'h'
	add qword [rsp + 16], 1
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump441 ; If h < bound, next iter
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump441 ; If g < bound, next iter
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump441 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump427:
	jmp .jump425
.jump424:
	mov rax, [rel const0] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump442
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'h'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump444
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump444:
	; Computing bound for 'g'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump445
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump445:
	; Computing bound for 'f'
	mov rax, [rel const117] ; 847
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump446
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump446:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by 847 
	jno .jump447
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump447:
	imul rdi, [rsp + 0 + 8] ; multiply by b 
	jno .jump448
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump448:
	imul rdi, [rsp + 0 + 16] ; multiply by b 
	jno .jump449
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump449:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'h' to 0
	mov rax, 0
	push rax
	; Initialize 'g' to 0
	mov rax, 0
	push rax
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump450: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const118] ; 682
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'h'
	add qword [rsp + 16], 1
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump450 ; If h < bound, next iter
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump450 ; If g < bound, next iter
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump450 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	jmp .jump443
.jump442:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'h'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump451
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump451:
	; Computing bound for 'g'
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump452
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump452:
	; Computing bound for 'f'
	mov rax, [rel const119] ; 284
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump453
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump453:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by 284 
	jno .jump454
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump454:
	imul rdi, [rsp + 0 + 8] ; multiply by d 
	jno .jump455
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump455:
	imul rdi, [rsp + 0 + 16] ; multiply by b 
	jno .jump456
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump456:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'h' to 0
	mov rax, 0
	push rax
	; Initialize 'g' to 0
	mov rax, 0
	push rax
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump457: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'h'
	add qword [rsp + 16], 1
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump457 ; If h < bound, next iter
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump457 ; If g < bound, next iter
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump457 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump443:
.jump425:
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'f'
	mov rax, [rel const120] ; 516
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump458
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump458:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump459: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const121] ; 383
	push rax
	pop rax
	pop r10
	sub rax, r10
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'f'
	add qword [rsp + 0], 1
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump459 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	pop rax
	pop r10
	add rax, r10
	push rax
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'f'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'h'
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump460
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump460:
	; Computing bound for 'g'
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump461
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump461:
	; Computing bound for 'f'
	mov rax, [rel const122] ; 512
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump462
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump462:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'h' to 0
	mov rax, 0
	push rax
	; Initialize 'g' to 0
	mov rax, 0
	push rax
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump463: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const123] ; 513
	push rax
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment 'h'
	add qword [rsp + 16], 1
	; Compare h to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump463 ; If h < bound, next iter
	mov qword [rsp + 16], 0 ; h = 0
	add qword [rsp + 8], 1 ; g++
	; Compare g to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump463 ; If g < bound, next iter
	mov qword [rsp + 8], 0 ; g = 0
	add qword [rsp + 0], 1 ; f++
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump463 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump464
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump464:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'f' to 0
	mov rax, 0
	push rax
.jump465: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 160 to rsp 
		mov r10, [rbp - 160 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump466
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump466:
	cmp rax, [rsp + 8]
	jl .jump467
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump467:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'f'
	add qword [rsp + 0], 1
	; Compare f to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump465 ; If f < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	mov rax, [rel const124] ; 157
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump468
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump468:
	cmp rax, [rsp + 24]
	jl .jump469
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump469:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump470
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump470:
	cmp rax, [rsp + 32]
	jl .jump471
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump471:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump472
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump472:
	cmp rax, [rsp + 40]
	jl .jump473
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump473:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump474
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump474:
	cmp rax, [rsp + 24]
	jl .jump475
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump475:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump476
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump476:
	cmp rax, [rsp + 32]
	jl .jump477
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump477:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump478
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump478:
	cmp rax, [rsp + 40]
	jl .jump479
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump479:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 32
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 32
	; Moving 32 bytes from rax to rsp 
		mov r10, [rax + 24]
		mov [rsp + 24], r10
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump308:
	sub rsp, 8 ; Add alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	lea rdi, [rel const125] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	add rsp, 8 ; Remove alignment
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'j'
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump480
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump480:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by i 
	jno .jump481
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump481:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'j' to 0
	mov rax, 0
	push rax
.jump482: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'j'
	add qword [rsp + 0], 1
	; Compare j to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump482 ; If j < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const1] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump483
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	jmp .jump484
.jump483:
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
.jump484:
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	mov rdi, 24
	call _jpl_alloc
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	push rax
	mov rax, 3
	push rax
	sub rsp, 16
	; Moving 16 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	lea rdi, [rel const125] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'q'
	mov rax, [rel const126] ; 896
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump485
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump485:
	; Computing bound for 'p'
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump486
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump486:
	; Computing bound for 'o'
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump487
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump487:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool 
	imul rdi, [rsp + 0 + 0] ; multiply by h 
	jno .jump488
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump488:
	imul rdi, [rsp + 0 + 8] ; multiply by g 
	jno .jump489
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump489:
	imul rdi, [rsp + 0 + 16] ; multiply by 896 
	jno .jump490
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump490:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'q' to 0
	mov rax, 0
	push rax
	; Initialize 'p' to 0
	mov rax, 0
	push rax
	; Initialize 'o' to 0
	mov rax, 0
	push rax
.jump491: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 't'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump492
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump492:
	; Computing bound for 's'
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump493
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump493:
	; Computing bound for 'r'
	sub rsp, 8
	; Moving 8 bytes from rbp - 176 to rsp 
		mov r10, [rbp - 176 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump494
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump494:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 't' to 0
	mov rax, 0
	push rax
	; Initialize 's' to 0
	mov rax, 0
	push rax
	; Initialize 'r' to 0
	mov rax, 0
	push rax
.jump495: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 192 to rsp 
		mov r10, [rbp - 192 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment 't'
	add qword [rsp + 16], 1
	; Compare t to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump495 ; If t < bound, next iter
	mov qword [rsp + 16], 0 ; t = 0
	add qword [rsp + 8], 1 ; s++
	; Compare s to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump495 ; If s < bound, next iter
	mov qword [rsp + 8], 0 ; s = 0
	add qword [rsp + 0], 1 ; r++
	; Compare r to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump495 ; If r < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 176 to rsp 
		mov r10, [rbp - 176 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump496
	lea rdi, [rel const52] ; 'divide by zero'
	call _fail_assertion
.jump496:
	cqo
	idiv r10
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 't'
	sub rsp, 8
	; Moving 8 bytes from rbp - 192 to rsp 
		mov r10, [rbp - 192 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump497
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump497:
	; Computing bound for 's'
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump498
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump498:
	; Computing bound for 'r'
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump499
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump499:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by k 
	jno .jump500
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump500:
	imul rdi, [rsp + 0 + 8] ; multiply by k 
	jno .jump501
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump501:
	imul rdi, [rsp + 0 + 16] ; multiply by o 
	jno .jump502
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump502:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 't' to 0
	mov rax, 0
	push rax
	; Initialize 's' to 0
	mov rax, 0
	push rax
	; Initialize 'r' to 0
	mov rax, 0
	push rax
.jump503: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 't'
	add qword [rsp + 16], 1
	; Compare t to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump503 ; If t < bound, next iter
	mov qword [rsp + 16], 0 ; t = 0
	add qword [rsp + 8], 1 ; s++
	; Compare s to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump503 ; If s < bound, next iter
	mov qword [rsp + 8], 0 ; s = 0
	add qword [rsp + 0], 1 ; r++
	; Compare r to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump503 ; If r < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump504
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump504:
	cmp rax, [rsp + 24]
	jl .jump505
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump505:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump506
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump506:
	cmp rax, [rsp + 32]
	jl .jump507
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump507:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump508
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump508:
	cmp rax, [rsp + 40]
	jl .jump509
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump509:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'q'
	add qword [rsp + 16], 1
	; Compare q to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump491 ; If q < bound, next iter
	mov qword [rsp + 16], 0 ; q = 0
	add qword [rsp + 8], 1 ; p++
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump491 ; If p < bound, next iter
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump491 ; If o < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump510
	mov rax, [rel const127] ; 277
	push rax
	jmp .jump511
.jump510:
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
.jump511:
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	mov rax, [rel const128] ; 78.32
	push rax
	mov rax, [rel const129] ; 69.57
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	call _fmod
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const130] ; 27.36
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump512
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	jmp .jump513
.jump512:
	sub rsp, 16
	; Moving 16 bytes from rbp - 136 to rsp 
		mov r10, [rbp - 136 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 136 + 0]
		mov [rsp + 0], r10
	mov rdi, 16
	sub rsp, 8 ; Add alignment
	call _jpl_alloc
	add rsp, 8 ; Remove alignment
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 1
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump514
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump514:
	cmp rax, [rsp + 8]
	jl .jump515
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump515:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 16
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 16
	; Moving 16 bytes from rax to rsp 
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump516
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump516:
	cmp rax, [rsp + 8]
	jl .jump517
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump517:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump513:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump518
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump518:
	cmp rax, [rsp + 24]
	jl .jump519
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump519:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump520
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump520:
	cmp rax, [rsp + 32]
	jl .jump521
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump521:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump522
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump522:
	cmp rax, [rsp + 40]
	jl .jump523
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump523:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump524
	mov rax, [rel const1] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump526
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'p'
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump528
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump528:
	; Computing bound for 'o'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump529
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump529:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by b 
	jno .jump530
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump530:
	imul rdi, [rsp + 0 + 8] ; multiply by i 
	jno .jump531
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump531:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'p' to 0
	mov rax, 0
	push rax
	; Initialize 'o' to 0
	mov rax, 0
	push rax
.jump532: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'p'
	add qword [rsp + 8], 1
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump532 ; If p < bound, next iter
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump532 ; If o < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	sub rsp, 16
	; Moving 16 bytes from rbp - 96 to rsp 
		mov r10, [rbp - 96 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 96 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump533
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump533:
	cmp rax, [rsp + 8]
	jl .jump534
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump534:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump535
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump535:
	cmp rax, [rsp + 16]
	jl .jump536
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump536:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump537
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump537:
	cmp rax, [rsp + 24]
	jl .jump538
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump538:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setne al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump539
	sub rsp, 32
	; Moving 32 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 80 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 80 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	jmp .jump540
.jump539:
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setl al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump541
	mov rax, [rel const0] ; True
	push rax
	jmp .jump542
.jump541:
	mov rax, [rel const1] ; False
	push rax
.jump542:
	pop rax
	cmp rax, 0
	je .jump543
	sub rsp, 32
	; Moving 32 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 80 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 80 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	jmp .jump544
.jump543:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'q'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'p'
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump545
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump545:
	; Computing bound for 'o'
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump546
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump546:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'p' to 0
	mov rax, 0
	push rax
	; Initialize 'o' to 0
	mov rax, 0
	push rax
.jump547: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'p'
	add qword [rsp + 8], 1
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump547 ; If p < bound, next iter
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump547 ; If o < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump548
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump548:
	; Computing bound for 'p'
	mov rax, [rel const0] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump549
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	jmp .jump550
.jump549:
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
.jump550:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump551
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump551:
	; Computing bound for 'o'
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump552
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump552:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by h 
	jno .jump553
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump553:
	imul rdi, [rsp + 0 + 8] ; multiply by (if true then i else m) 
	jno .jump554
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump554:
imul rdi, [rsp + 0 + 16] ; multiply by (sum[o : m, p : h] k) 
	jno .jump555
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump555:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'q' to 0
	mov rax, 0
	push rax
	; Initialize 'p' to 0
	mov rax, 0
	push rax
	; Initialize 'o' to 0
	mov rax, 0
	push rax
.jump556: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'r'
	mov rax, [rel const131] ; 890
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump557
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump557:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'r' to 0
	mov rax, 0
	push rax
.jump558: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'r'
	add qword [rsp + 0], 1
	; Compare r to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump558 ; If r < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'q'
	add qword [rsp + 16], 1
	; Compare q to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump556 ; If q < bound, next iter
	mov qword [rsp + 16], 0 ; q = 0
	add qword [rsp + 8], 1 ; p++
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump556 ; If p < bound, next iter
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump556 ; If o < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump544:
.jump540:
	jmp .jump527
.jump526:
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump559
	sub rsp, 32
	; Moving 32 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 80 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 80 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	jmp .jump560
.jump559:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'q'
	sub rsp, 8
	; Moving 8 bytes from rbp - 72 to rsp 
		mov r10, [rbp - 72 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump561
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump561:
	; Computing bound for 'p'
	mov rax, [rel const0] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump562
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	jmp .jump563
.jump562:
	mov rax, [rel const1] ; 0
	push rax
.jump563:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump564
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump564:
	; Computing bound for 'o'
	mov rax, [rel const132] ; 627
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump565
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump565:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by 627 
	jno .jump566
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump566:
	imul rdi, [rsp + 0 + 8] ; multiply by (if true then b else 0) 
	jno .jump567
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump567:
	imul rdi, [rsp + 0 + 16] ; multiply by h 
	jno .jump568
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump568:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'q' to 0
	mov rax, 0
	push rax
	; Initialize 'p' to 0
	mov rax, 0
	push rax
	; Initialize 'o' to 0
	mov rax, 0
	push rax
.jump569: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 's'
	sub rsp, 8
	; Moving 8 bytes from rbp - 192 to rsp 
		mov r10, [rbp - 192 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump570
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump570:
	; Computing bound for 'r'
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 't'
	mov rax, [rel const68] ; 707
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump571
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump571:
	; Computing bound for 's'
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump572
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump572:
	; Computing bound for 'r'
	mov rax, [rel const133] ; 437
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump573
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump573:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 't' to 0
	mov rax, 0
	push rax
	; Initialize 's' to 0
	mov rax, 0
	push rax
	; Initialize 'r' to 0
	mov rax, 0
	push rax
.jump574: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 48], rax ; Add loop body to sum
	; Increment 't'
	add qword [rsp + 16], 1
	; Compare t to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump574 ; If t < bound, next iter
	mov qword [rsp + 16], 0 ; t = 0
	add qword [rsp + 8], 1 ; s++
	; Compare s to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump574 ; If s < bound, next iter
	mov qword [rsp + 8], 0 ; s = 0
	add qword [rsp + 0], 1 ; r++
	; Compare r to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump574 ; If r < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	mov rax, [rsp]
	cmp rax, 0
	jg .jump575
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump575:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 's' to 0
	mov rax, 0
	push rax
	; Initialize 'r' to 0
	mov rax, 0
	push rax
.jump576: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 176 to rsp 
		mov r10, [rbp - 176 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 's'
	add qword [rsp + 8], 1
	; Compare s to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump576 ; If s < bound, next iter
	mov qword [rsp + 8], 0 ; s = 0
	add qword [rsp + 0], 1 ; r++
	; Compare r to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump576 ; If r < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'q'
	add qword [rsp + 16], 1
	; Compare q to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump569 ; If q < bound, next iter
	mov qword [rsp + 16], 0 ; q = 0
	add qword [rsp + 8], 1 ; p++
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump569 ; If p < bound, next iter
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump569 ; If o < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump560:
.jump527:
	jmp .jump525
.jump524:
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'p'
	mov rax, [rel const21] ; 828
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump577
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump577:
	; Computing bound for 'o'
	mov rax, [rel const134] ; 774
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump578
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump578:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'p' to 0
	mov rax, 0
	push rax
	; Initialize 'o' to 0
	mov rax, 0
	push rax
.jump579: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'p'
	add qword [rsp + 8], 1
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump579 ; If p < bound, next iter
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump579 ; If o < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	pop rax
	neg rax
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump580
	mov rax, [rel const135] ; 62.55
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const136] ; 68.58
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	jmp .jump581
.jump580:
	mov rax, [rel const137] ; 87.22
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const138] ; 39.67
	push rax
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	divsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'q'
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump582
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const52] ; 'divide by zero'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump582:
	cqo
	idiv r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump583
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump583:
	; Computing bound for 'p'
	sub rsp, 8
	; Moving 8 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump584
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump584:
	; Computing bound for 'o'
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump585
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump585:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'q' to 0
	mov rax, 0
	push rax
	; Initialize 'p' to 0
	mov rax, 0
	push rax
	; Initialize 'o' to 0
	mov rax, 0
	push rax
.jump586: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const139] ; 8.79
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 48] ; Load sum
	movsd [rsp + 48], xmm0 ; Save sum
	; Increment 'q'
	add qword [rsp + 16], 1
	; Compare q to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump586 ; If q < bound, next iter
	mov qword [rsp + 16], 0 ; q = 0
	add qword [rsp + 8], 1 ; p++
	; Compare p to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump586 ; If p < bound, next iter
	mov qword [rsp + 8], 0 ; p = 0
	add qword [rsp + 0], 1 ; o++
	; Compare o to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump586 ; If o < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; Free all loop bounds
	add rsp, 24
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
.jump581:
	pop rax
	cmp rax, 0
	je .jump587
	sub rsp, 32
	; Moving 32 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 80 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 80 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	jmp .jump588
.jump587:
	sub rsp, 32
	; Moving 32 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 80 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 80 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
.jump588:
.jump525:
	mov rax, [rel const0] ; True
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump589
	mov rax, [rel const140] ; 38.86
	push rax
	jmp .jump590
.jump589:
	mov rax, [rel const141] ; 74.01
	push rax
.jump590:
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 's'
	sub rsp, 8
	; Moving 8 bytes from rbp - 168 to rsp 
		mov r10, [rbp - 168 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump591
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump591:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 's' to 0
	mov rax, 0
	push rax
.jump592: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const142] ; 70.47
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	addsd xmm0, [rsp + 16] ; Load sum
	movsd [rsp + 16], xmm0 ; Save sum
	; Increment 's'
	add qword [rsp + 0], 1
	; Compare s to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump592 ; If s < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmplesd xmm1, xmm0
	movq rax, xmm1
	and rax, 1
	push rax
	pop rax
	xor rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump593
	sub rsp, 24
	; Moving 24 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 48 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 152 to rsp 
		mov r10, [rbp - 152 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump595
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump595:
	cmp rax, [rsp + 16]
	jl .jump596
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump596:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump597
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump597:
	cmp rax, [rsp + 24]
	jl .jump598
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump598:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const1] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump599
	sub rsp, 24
	; Moving 24 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 48 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 168 to rsp 
		mov r10, [rbp - 168 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump601
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump601:
	cmp rax, [rsp + 16]
	jl .jump602
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump602:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump603
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump603:
	cmp rax, [rsp + 24]
	jl .jump604
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump604:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	jmp .jump600
.jump599:
	mov rax, [rel const143] ; 33.87
	push rax
.jump600:
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	mulsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	mov rax, [rel const144] ; 57.21
	push rax
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm1, [rsp]
	add rsp, 8
	pxor xmm0, xmm0
	subsd xmm0, xmm1
	sub rsp, 8
	movsd [rsp], xmm0
	movsd xmm0, [rsp]
	add rsp, 8
	movsd xmm1, [rsp]
	add rsp, 8
	cmpeqsd xmm0, xmm1
	movq rax, xmm0
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump605
	sub rsp, 32
	; Moving 32 bytes from rbp - 168 to rsp 
		mov r10, [rbp - 168 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 168 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 168 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 168 + 0]
		mov [rsp + 0], r10
	jmp .jump606
.jump605:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'u'
	sub rsp, 8
	; Moving 8 bytes from rbp - 152 to rsp 
		mov r10, [rbp - 152 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump607
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump607:
	; Computing bound for 't'
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump608
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump608:
	; Computing bound for 's'
	mov rax, [rel const145] ; 256
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump609
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump609:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by 256 
	jno .jump610
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump610:
	imul rdi, [rsp + 0 + 8] ; multiply by d 
	jno .jump611
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump611:
	imul rdi, [rsp + 0 + 16] ; multiply by r 
	jno .jump612
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump612:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'u' to 0
	mov rax, 0
	push rax
	; Initialize 't' to 0
	mov rax, 0
	push rax
	; Initialize 's' to 0
	mov rax, 0
	push rax
.jump613: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 168 to rsp 
		mov r10, [rbp - 168 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'u'
	add qword [rsp + 16], 1
	; Compare u to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump613 ; If u < bound, next iter
	mov qword [rsp + 16], 0 ; u = 0
	add qword [rsp + 8], 1 ; t++
	; Compare t to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump613 ; If t < bound, next iter
	mov qword [rsp + 8], 0 ; t = 0
	add qword [rsp + 0], 1 ; s++
	; Compare s to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump613 ; If s < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
.jump606:
	jmp .jump594
.jump593:
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setle al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump614
	sub rsp, 32
	; Moving 32 bytes from rbp - 168 to rsp 
		mov r10, [rbp - 168 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 168 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 168 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 168 + 0]
		mov [rsp + 0], r10
	jmp .jump615
.jump614:
	sub rsp, 32
	; Moving 32 bytes from rbp - 168 to rsp 
		mov r10, [rbp - 168 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 168 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 168 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 168 + 0]
		mov [rsp + 0], r10
.jump615:
.jump594:
	sub rsp, 8 ; Add alignment
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'w'
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump616
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump616:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by k 
	jno .jump617
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump617:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'w' to 0
	mov rax, 0
	push rax
.jump618: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'w'
	add qword [rsp + 0], 1
	; Compare w to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump618 ; If w < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	lea rdi, [rel const146] ; '(ArrayType (IntType) 1)'
	lea rsi, [rsp]
	call _show
	add rsp, 16
	add rsp, 8 ; Remove alignment
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'x'
	sub rsp, 16
	; Moving 16 bytes from rbp - 24 to rsp 
		mov r10, [rbp - 24 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 24 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump619
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump619:
	cmp rax, [rsp + 8]
	jl .jump620
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump620:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump621
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump621:
	; Computing bound for 'w'
	sub rsp, 8
	; Moving 8 bytes from rbp - 168 to rsp 
		mov r10, [rbp - 168 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump622
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump622:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof float[,] 
	imul rdi, [rsp + 0 + 0] ; multiply by p 
	jno .jump623
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump623:
	imul rdi, [rsp + 0 + 8] ; multiply by a[e] 
	jno .jump624
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump624:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'x' to 0
	mov rax, 0
	push rax
	; Initialize 'w' to 0
	mov rax, 0
	push rax
.jump625: ; Begin body of loop
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 48 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'x'
	add qword [rsp + 8], 1
	; Compare x to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump625 ; If x < bound, next iter
	mov qword [rsp + 8], 0 ; x = 0
	add qword [rsp + 0], 1 ; w++
	; Compare w to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump625 ; If w < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'x'
	mov rax, [rel const147] ; 950
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump626
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump626:
	; Computing bound for 'w'
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump627
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump627:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof float[,] 
	imul rdi, [rsp + 0 + 0] ; multiply by g 
	jno .jump628
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump628:
	imul rdi, [rsp + 0 + 8] ; multiply by 950 
	jno .jump629
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump629:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'x' to 0
	mov rax, 0
	push rax
	; Initialize 'w' to 0
	mov rax, 0
	push rax
.jump630: ; Begin body of loop
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 48 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'x'
	add qword [rsp + 8], 1
	; Compare x to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump630 ; If x < bound, next iter
	mov qword [rsp + 8], 0 ; x = 0
	add qword [rsp + 0], 1 ; w++
	; Compare w to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump630 ; If w < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'y'
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump631
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump631:
	; Computing bound for 'x'
	sub rsp, 8
	; Moving 8 bytes from rbp - 200 to rsp 
		mov r10, [rbp - 200 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump632
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump632:
	; Computing bound for 'w'
	sub rsp, 8
	; Moving 8 bytes from rbp - 120 to rsp 
		mov r10, [rbp - 120 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump633
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump633:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof float[,][,] 
	imul rdi, [rsp + 0 + 0] ; multiply by m 
	jno .jump634
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump634:
	imul rdi, [rsp + 0 + 8] ; multiply by t 
	jno .jump635
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump635:
	imul rdi, [rsp + 0 + 16] ; multiply by m 
	jno .jump636
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump636:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'y' to 0
	mov rax, 0
	push rax
	; Initialize 'x' to 0
	mov rax, 0
	push rax
	; Initialize 'w' to 0
	mov rax, 0
	push rax
.jump637: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'A'
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump638
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
.jump638:
	; Computing bound for 'z'
	mov rax, [rel const148] ; 537
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump639
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const3] ; 'non-positive loop bound'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump639:
	; Computing total size of heap memory to allocate
	mov rdi, 24 ; sizeof float[,] 
	imul rdi, [rsp + 0 + 0] ; multiply by 537 
	jno .jump640
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump640:
	imul rdi, [rsp + 0 + 8] ; multiply by k 
	jno .jump641
	sub rsp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add rsp, 8 ; Remove alignment
.jump641:
	sub rsp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add rsp, 8 ; Remove alignment
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'A' to 0
	mov rax, 0
	push rax
	; Initialize 'z' to 0
	mov rax, 0
	push rax
.jump642: ; Begin body of loop
	; Compute loop body
	sub rsp, 24
	; Moving 24 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 48 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, 24
	add rax, [rsp + 56]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'A'
	add qword [rsp + 8], 1
	; Compare A to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump642 ; If A < bound, next iter
	mov qword [rsp + 8], 0 ; A = 0
	add qword [rsp + 0], 1 ; z++
	; Compare z to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump642 ; If z < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, [rsp + 56] ; No overflow if indices in bounds
	add rax, [rsp + 32]
	imul rax, [rsp + 64] ; No overflow if indices in bounds
	add rax, [rsp + 40]
	imul rax, 24
	add rax, [rsp + 72]
	; Move body (24 bytes) to index
	; Moving 24 bytes from rsp to rax 
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 24
	; Increment 'y'
	add qword [rsp + 16], 1
	; Compare y to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump637 ; If y < bound, next iter
	mov qword [rsp + 16], 0 ; y = 0
	add qword [rsp + 8], 1 ; x++
	; Compare x to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump637 ; If x < bound, next iter
	mov qword [rsp + 8], 0 ; x = 0
	add qword [rsp + 0], 1 ; w++
	; Compare w to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump637 ; If w < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 152 to rsp 
		mov r10, [rbp - 152 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const149] ; 788
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump643
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump643:
	cmp rax, [rsp + 24]
	jl .jump644
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump644:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump645
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump645:
	cmp rax, [rsp + 32]
	jl .jump646
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump646:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump647
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump647:
	cmp rax, [rsp + 40]
	jl .jump648
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump648:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 24
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 24
	; Moving 24 bytes from rax to rsp 
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	mov rdi, 72
	call _jpl_alloc
	; Moving 72 bytes from rsp to rax 
		mov r10, [rsp + 64]
		mov [rax + 64], r10
		mov r10, [rsp + 56]
		mov [rax + 56], r10
		mov r10, [rsp + 48]
		mov [rax + 48], r10
		mov r10, [rsp + 40]
		mov [rax + 40], r10
		mov r10, [rsp + 32]
		mov [rax + 32], r10
		mov r10, [rsp + 24]
		mov [rax + 24], r10
		mov r10, [rsp + 16]
		mov [rax + 16], r10
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 72
	push rax
	mov rax, 3
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump649
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump649:
	cmp rax, [rsp + 8]
	jl .jump650
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump650:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 24
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 24
	; Moving 24 bytes from rax to rsp 
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 104 to rsp 
		mov r10, [rbp - 104 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump651
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump651:
	cmp rax, [rsp + 16]
	jl .jump652
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump652:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump653
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump653:
	cmp rax, [rsp + 24]
	jl .jump654
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump654:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 24
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 24
	; Moving 24 bytes from rax to rsp 
		mov r10, [rax + 16]
		mov [rsp + 16], r10
		mov r10, [rax + 8]
		mov [rsp + 8], r10
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	sub rsp, 8 ; Add alignment
	mov rax, [rel const1] ; False
	push rax
	mov rax, [rel const0] ; True
	push rax
	pop rax
	pop r10
	cmp rax, r10
	sete al
	and rax, 1
	push rax
	lea rdi, [rel const159] ; '(BoolType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	add rsp, 8 ; Remove alignment
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 80 to rsp 
		mov r10, [rbp - 80 + 0]
		mov [rsp + 0], r10
	add rsp, 232 ; Local variables
	pop r12 ; begin jpl_main postlude
	pop rbp
	ret

