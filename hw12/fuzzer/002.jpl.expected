global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 0
const1: dq 163
const2: db `negative array index`, 0
const3: db `index too large`, 0
const4: dq 616
const5: db `non-positive loop bound`, 0
const6: dq 812
const7: dq 531
const8: dq 173
const9: db `divide by zero`, 0
const10: db `overflow computing array size`, 0
const11: dq 1
const12: dq 216
const13: dq 927
const14: dq 813
const15: dq 220
const16: db `mod by zero`, 0
const17: dq 465
const18: dq 378
const19: dq 883
const20: dq 86
const21: dq 453
const22: db `(ArrayType (BoolType) 1)`, 0

section .text
jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp ; end of jpl_main prelude
	mov rax, [rel const0] ; False
	push rax
	pop rax
	xor rax, 1
	push rax
	mov rax, [rel const0] ; False
	push rax
	mov rdi, 16
	sub asp, 8 ; Add alignment
	call _jpl_alloc
	add asp, 8 ; Remove alignment
	; Moving 16 bytes from rsp to rax 
		mov r10, [rsp + 8]
		mov [rax + 8], r10
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 16
	push rax
	mov rax, 2
	push rax
	mov rax, [rel const1] ; 163
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump1
	lea rdi, [rel const2] ; 'negative array index'
	call _fail_assertion
.jump1:
	cmp rax, [rsp + 8]
	jl .jump2
	lea rdi, [rel const3] ; 'index too large'
	call _fail_assertion
.jump2:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump3
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'a'
	mov rax, [rel const4] ; 616
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump5
	sub asp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump5:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'a' to 0
	mov rax, 0
	push rax
.jump6: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const6] ; 812
	push rax
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'a'
	add qword [rsp + 0], 1
	; Compare a to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump6 ; If a < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	jmp .jump4
.jump3:
	mov rax, [rel const7] ; 531
	push rax
	pop rax
	neg rax
	push rax
.jump4:
	pop rax
	neg rax
	push rax
	mov rax, [rel const8] ; 173
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'b'
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'c'
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump7
	lea rdi, [rel const9] ; 'divide by zero'
	call _fail_assertion
.jump7:
	cqo
	idiv r10
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump8
	sub asp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump8:
	; Computing bound for 'b'
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump9
	lea rdi, [rel const5] ; 'non-positive loop bound'
	call _fail_assertion
.jump9:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool 
	imul rdi, [rsp + 0 + 0] ; multiply by a 
	jno .jump10
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump10:
	imul rdi, [rsp + 0 + 8] ; multiply by (- (a / a)) 
	jno .jump11
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump11:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'c' to 0
	mov rax, 0
	push rax
	; Initialize 'b' to 0
	mov rax, 0
	push rax
.jump12: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const11] ; True
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'c'
	add qword [rsp + 8], 1
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump12 ; If c < bound, next iter
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump12 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const11] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump13
	mov rax, [rel const12] ; 216
	push rax
	pop rax
	neg rax
	push rax
	jmp .jump14
.jump13:
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
.jump14:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump15
	lea rdi, [rel const2] ; 'negative array index'
	call _fail_assertion
.jump15:
	cmp rax, [rsp + 16]
	jl .jump16
	lea rdi, [rel const3] ; 'index too large'
	call _fail_assertion
.jump16:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump17
	lea rdi, [rel const2] ; 'negative array index'
	call _fail_assertion
.jump17:
	cmp rax, [rsp + 24]
	jl .jump18
	lea rdi, [rel const3] ; 'index too large'
	call _fail_assertion
.jump18:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	pop rax
	cmp rax, 0
	je .jump19
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'c'
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump21
	sub asp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump21:
	; Computing bound for 'b'
	mov rax, [rel const13] ; 927
	push rax
	mov rax, [rel const14] ; 813
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump22
	lea rdi, [rel const5] ; 'non-positive loop bound'
	call _fail_assertion
.jump22:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by (813 + 927) 
	jno .jump23
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump23:
	imul rdi, [rsp + 0 + 8] ; multiply by a 
	jno .jump24
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump24:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'c' to 0
	mov rax, 0
	push rax
	; Initialize 'b' to 0
	mov rax, 0
	push rax
.jump25: ; Begin body of loop
	; Compute loop body
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'd'
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump26
	lea rdi, [rel const5] ; 'non-positive loop bound'
	call _fail_assertion
.jump26:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'd' to 0
	mov rax, 0
	push rax
.jump27: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 16], rax ; Add loop body to sum
	; Increment 'd'
	add qword [rsp + 0], 1
	; Compare d to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump27 ; If d < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; Free all loop bounds
	add rsp, 8
	; sum left on stack
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 40]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'c'
	add qword [rsp + 8], 1
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump25 ; If c < bound, next iter
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump25 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; array left on stack
	mov rax, [rel const15] ; 220
	push rax
	pop rax
	neg rax
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump28
	lea rdi, [rel const16] ; 'mod by zero'
	call _fail_assertion
.jump28:
	cqo
	idiv r10
	mov rax, rdx
	push rax
	mov rax, [rel const0] ; False
	push rax
	pop rax
	cmp rax, 0
	je .jump29
	mov rax, [rel const17] ; 465
	push rax
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp r10, 0
	jne .jump31
	sub asp, 8 ; Add alignment
	lea rdi, [rel const9] ; 'divide by zero'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump31:
	cqo
	idiv r10
	push rax
	jmp .jump30
.jump29:
	mov rax, [rel const18] ; 378
	push rax
	pop rax
	neg rax
	push rax
.jump30:
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump32
	lea rdi, [rel const2] ; 'negative array index'
	call _fail_assertion
.jump32:
	cmp rax, [rsp + 16]
	jl .jump33
	lea rdi, [rel const3] ; 'index too large'
	call _fail_assertion
.jump33:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump34
	lea rdi, [rel const2] ; 'negative array index'
	call _fail_assertion
.jump34:
	cmp rax, [rsp + 24]
	jl .jump35
	lea rdi, [rel const3] ; 'index too large'
	call _fail_assertion
.jump35:
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 32]
	add rsp, 8
	add rsp, 8
	add rsp, 24
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	; Allocating 8 bytes for the sum
	sub rsp, 8
	; Computing bound for 'c'
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump36
	lea rdi, [rel const5] ; 'non-positive loop bound'
	call _fail_assertion
.jump36:
	; Computing bound for 'b'
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rax, [rsp]
	cmp rax, 0
	jg .jump37
	sub asp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump37:
	; Initialize sum to 0
	mov rax, 0
	mov [rsp + 16], rax ; Move to pre-allocated space
	; Initialize 'c' to 0
	mov rax, 0
	push rax
	; Initialize 'b' to 0
	mov rax, 0
	push rax
.jump38: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	add [rsp + 32], rax ; Add loop body to sum
	; Increment 'c'
	add qword [rsp + 8], 1
	; Compare c to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 24]
	jl .jump38 ; If c < bound, next iter
	mov qword [rsp + 8], 0 ; c = 0
	add qword [rsp + 0], 1 ; b++
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 16]
	jl .jump38 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 16
	; Free all loop bounds
	add rsp, 16
	; sum left on stack
	pop rax
	pop r10
	cmp r10, 0
	jne .jump39
	sub asp, 8 ; Add alignment
	lea rdi, [rel const9] ; 'divide by zero'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump39:
	cqo
	idiv r10
	push rax
	jmp .jump20
.jump19:
	mov rax, [rel const11] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump40
	mov rax, [rel const11] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump42
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	imul rax, r10
	push rax
	mov rax, [rel const11] ; True
	push rax
	pop rax
	cmp rax, 0
	je .jump44
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	jmp .jump45
.jump44:
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
.jump45:
	pop rax
	pop r10
	sub rax, r10
	push rax
	jmp .jump43
.jump42:
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	neg rax
	push rax
	mov rax, [rel const19] ; 883
	push rax
	pop rax
	pop r10
	cmp r10, 0
	jne .jump46
	sub asp, 8 ; Add alignment
	lea rdi, [rel const16] ; 'mod by zero'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump46:
	cqo
	idiv r10
	mov rax, rdx
	push rax
.jump43:
	jmp .jump41
.jump40:
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	cmp rax, r10
	setge al
	and rax, 1
	push rax
	pop rax
	cmp rax, 0
	je .jump47
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	mov rdi, 8
	call _jpl_alloc
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	push rax
	mov rax, 1
	push rax
	jmp .jump48
.jump47:
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'b'
	mov rax, [rel const20] ; 86
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump49
	sub asp, 8 ; Add alignment
	lea rdi, [rel const5] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump49:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by 86 
	jno .jump50
	sub asp, 8 ; Add alignment
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump50:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'b' to 0
	mov rax, 0
	push rax
.jump51: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 16 to rsp 
		mov r10, [rbp - 16 + 0]
		mov [rsp + 0], r10
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'b'
	add qword [rsp + 0], 1
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump51 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
.jump48:
	mov rax, [rel const21] ; 453
	push rax
	pop rax
	neg rax
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump52
	lea rdi, [rel const2] ; 'negative array index'
	call _fail_assertion
.jump52:
	cmp rax, [rsp + 8]
	jl .jump53
	lea rdi, [rel const3] ; 'index too large'
	call _fail_assertion
.jump53:
	mov rax, 0
	imul rax, [rsp + 8] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, 8
	add rax, [rsp + 16]
	add rsp, 8
	add rsp, 16
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
.jump41:
.jump20:
	mov rax, [rsp]
	cmp rax, 0
	jg .jump54
	lea rdi, [rel const5] ; 'non-positive loop bound'
	call _fail_assertion
.jump54:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof bool 
imul rdi, [rsp + 0 + 0] ; multiply by (if (array[b : a, c : (- (a / a))] true)[(if true then (- 216) else a), a] then ((sum[b : a, c : a] a) / (array[b : (813 + 927), c : a] (sum[d : a] b))[(if false then (a / 465) else (- 378)), (a % (- 220))]) else (if true then (if true then ((if true then a else a) - (a * a)) else (883 % (- a))) else (if (a >= a) then [a] else (array[b : 86] a))[(- 453)])) 
	jno .jump55
	lea rdi, [rel const10] ; 'overflow computing array size'
	call _fail_assertion
.jump55:
	call _jpl_alloc ; Put pointer to heap space in RAX
	mov [rsp + 8], rax ; Move to pre-allocated space
	; Initialize 'b' to 0
	mov rax, 0
	push rax
.jump56: ; Begin body of loop
	; Compute loop body
	mov rax, [rel const0] ; False
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 16] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, 8
	add rax, [rsp + 24]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'b'
	add qword [rsp + 0], 1
	; Compare b to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 8]
	jl .jump56 ; If b < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 8
	; array left on stack
	lea rdi, [rel const22] ; '(ArrayType (BoolType) 1)'
	lea rsi, [rsp]
	call _show
	add rsp, 16
	add rsp, 8 ; Local variables
	pop r12 ; begin jpl_main postlude
	pop rbp
	ret

