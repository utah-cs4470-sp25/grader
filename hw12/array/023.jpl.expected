global jpl_main
global _jpl_main
extern _fail_assertion
extern _jpl_alloc
extern _get_time
extern _show
extern _print
extern _print_time
extern _read_image
extern _write_image
extern _fmod
extern _sqrt
extern _exp
extern _sin
extern _cos
extern _tan
extern _asin
extern _acos
extern _atan
extern _log
extern _pow
extern _atan2
extern _to_int
extern _to_float

section .data
const0: dq 100
const1: db `non-positive loop bound`, 0
const2: db `overflow computing array size`, 0
const3: dq 1
const4: dq 0
const5: db `negative array index`, 0
const6: db `index too large`, 0
const7: db `(IntType)`, 0

section .text
jpl_main:
_jpl_main:
	push rbp
	mov rbp, rsp
	push r12
	mov r12, rbp ; end of jpl_main prelude
	; Allocating 8 bytes for the pointer
	sub rsp, 8
	; Computing bound for 'k'
	mov rax, [rel const0] ; 100
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump1
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump1:
	; Computing bound for 'j'
	mov rax, [rel const0] ; 100
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump2
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
.jump2:
	; Computing bound for 'i'
	mov rax, [rel const0] ; 100
	push rax
	mov rax, [rsp]
	cmp rax, 0
	jg .jump3
	sub asp, 8 ; Add alignment
	lea rdi, [rel const1] ; 'non-positive loop bound'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump3:
	; Computing total size of heap memory to allocate
	mov rdi, 8 ; sizeof int 
	imul rdi, [rsp + 0 + 0] ; multiply by 100 
	jno .jump4
	sub asp, 8 ; Add alignment
	lea rdi, [rel const2] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump4:
	imul rdi, [rsp + 0 + 8] ; multiply by 100 
	jno .jump5
	sub asp, 8 ; Add alignment
	lea rdi, [rel const2] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump5:
	imul rdi, [rsp + 0 + 16] ; multiply by 100 
	jno .jump6
	sub asp, 8 ; Add alignment
	lea rdi, [rel const2] ; 'overflow computing array size'
	call _fail_assertion
	add asp, 8 ; Remove alignment
.jump6:
	sub asp, 8 ; Add alignment
	call _jpl_alloc ; Put pointer to heap space in RAX
	add asp, 8 ; Remove alignment
	mov [rsp + 24], rax ; Move to pre-allocated space
	; Initialize 'k' to 0
	mov rax, 0
	push rax
	; Initialize 'j' to 0
	mov rax, 0
	push rax
	; Initialize 'i' to 0
	mov rax, 0
	push rax
.jump7: ; Begin body of loop
	; Compute loop body
	sub rsp, 8
	; Moving 8 bytes from rbp - 48 to rsp 
		mov r10, [rbp - 48 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 56 to rsp 
		mov r10, [rbp - 56 + 0]
		mov [rsp + 0], r10
	sub rsp, 8
	; Moving 8 bytes from rbp - 64 to rsp 
		mov r10, [rbp - 64 + 0]
		mov [rsp + 0], r10
	pop rax
	pop r10
	add rax, r10
	push rax
	pop rax
	pop r10
	add rax, r10
	push rax
	; Index to store in
	mov rax, 0
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, [rsp + 48] ; No overflow if indices in bounds
	add rax, [rsp + 24]
	imul rax, 8
	add rax, [rsp + 56]
	; Move body (8 bytes) to index
	; Moving 8 bytes from rsp to rax 
		mov r10, [rsp + 0]
		mov [rax + 0], r10
	add rsp, 8
	; Increment 'k'
	add qword [rsp + 16], 1
	; Compare k to its bound
	mov rax, [rsp + 16]
	cmp rax, [rsp + 40]
	jl .jump7 ; If k < bound, next iter
	mov qword [rsp + 16], 0 ; k = 0
	add qword [rsp + 8], 1 ; j++
	; Compare j to its bound
	mov rax, [rsp + 8]
	cmp rax, [rsp + 32]
	jl .jump7 ; If j < bound, next iter
	mov qword [rsp + 8], 0 ; j = 0
	add qword [rsp + 0], 1 ; i++
	; Compare i to its bound
	mov rax, [rsp + 0]
	cmp rax, [rsp + 24]
	jl .jump7 ; If i < bound, next iter
	; End body of loop
	; Free all loop variables
	add rsp, 24
	; array left on stack
	sub rsp, 32
	; Moving 32 bytes from rbp - 40 to rsp 
		mov r10, [rbp - 40 + 24]
		mov [rsp + 24], r10
		mov r10, [rbp - 40 + 16]
		mov [rsp + 16], r10
		mov r10, [rbp - 40 + 8]
		mov [rsp + 8], r10
		mov r10, [rbp - 40 + 0]
		mov [rsp + 0], r10
	mov rax, [rel const3] ; 1
	push rax
	mov rax, [rel const4] ; 0
	push rax
	mov rax, [rel const4] ; 0
	push rax
	mov rax, [rsp + 0]
	cmp rax, 0
	jge .jump8
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump8:
	cmp rax, [rsp + 24]
	jl .jump9
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump9:
	mov rax, [rsp + 8]
	cmp rax, 0
	jge .jump10
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump10:
	cmp rax, [rsp + 32]
	jl .jump11
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump11:
	mov rax, [rsp + 16]
	cmp rax, 0
	jge .jump12
	lea rdi, [rel const5] ; 'negative array index'
	call _fail_assertion
.jump12:
	cmp rax, [rsp + 40]
	jl .jump13
	lea rdi, [rel const6] ; 'index too large'
	call _fail_assertion
.jump13:
	mov rax, 0
	imul rax, [rsp + 24] ; No overflow if indices in bounds
	add rax, [rsp + 0]
	imul rax, [rsp + 32] ; No overflow if indices in bounds
	add rax, [rsp + 8]
	imul rax, [rsp + 40] ; No overflow if indices in bounds
	add rax, [rsp + 16]
	imul rax, 8
	add rax, [rsp + 48]
	add rsp, 8
	add rsp, 8
	add rsp, 8
	add rsp, 32
	sub rsp, 8
	; Moving 8 bytes from rax to rsp 
		mov r10, [rax + 0]
		mov [rsp + 0], r10
	lea rdi, [rel const7] ; '(IntType)'
	lea rsi, [rsp]
	call _show
	add rsp, 8
	add rsp, 32 ; Local variables
	pop r12 ; begin jpl_main postlude
	pop rbp
	ret

